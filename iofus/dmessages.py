from iofus.binaryio import BooleanByteWrapper, ByteArray, FuncTree
from iofus.denums import *
from iofus.dtypes import *
from iofus.network import NetworkMessage, ProtocolTypeManager


class AdminCommandMessage(NetworkMessage):
    protocolId = 76

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.content = ""

    def getMessageId(self):
        return 76

    def initAdminCommandMessage(self, param1=""):
        self.content = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.content = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AdminCommandMessage(param1)

    def serializeAs_AdminCommandMessage(self, param1):
        param1.write_utf(self.content)

    def deserialize(self, param1):
        self.deserializeAs_AdminCommandMessage(param1)

    def deserializeAs_AdminCommandMessage(self, param1):
        self._contentFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AdminCommandMessage(param1)

    def deserializeAsyncAs_AdminCommandMessage(self, param1):
        param1.add_child(self._contentFunc)

    def _contentFunc(self, param1):
        self.content = param1.read_utf()


class ConsoleCommandsListMessage(NetworkMessage):
    protocolId = 6127

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.aliases = []
        self.args = []
        self.descriptions = []
        self._aliasestree = FuncTree()
        self._argstree = FuncTree()
        self._descriptionstree = FuncTree()

    def getMessageId(self):
        return 6127

    def initConsoleCommandsListMessage(self, param1=[], param2=[], param3=[]):
        self.aliases = param1
        self.args = param2
        self.descriptions = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.aliases = []
        self.args = []
        self.descriptions = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ConsoleCommandsListMessage(param1)

    def serializeAs_ConsoleCommandsListMessage(self, param1):
        param1.write_short(len(self.aliases))
        _loc2_ = 0
        while _loc2_ < len(self.aliases):
            param1.write_utf(self.aliases[_loc2_])
            _loc2_ += 1
        param1.write_short(len(self.args))
        _loc3_ = 0
        while _loc3_ < len(self.args):
            param1.write_utf(self.args[_loc3_])
            _loc3_ += 1
        param1.write_short(len(self.descriptions))
        _loc4_ = 0
        while _loc4_ < len(self.descriptions):
            param1.write_utf(self.descriptions[_loc4_])
            _loc4_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ConsoleCommandsListMessage(param1)

    def deserializeAs_ConsoleCommandsListMessage(self, param1):
        _loc8_ = None
        _loc9_ = None
        _loc10_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc8_ = param1.read_utf()
            self.aliases.append(_loc8_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc9_ = param1.read_utf()
            self.args.append(_loc9_)
            _loc5_ += 1
        _loc6_ = param1.read_unsigned_short()
        _loc7_ = 0
        while _loc7_ < _loc6_:
            _loc10_ = param1.read_utf()
            self.descriptions.append(_loc10_)
            _loc7_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ConsoleCommandsListMessage(param1)

    def deserializeAsyncAs_ConsoleCommandsListMessage(self, param1):
        self._aliasestree = param1.add_child(self._aliasestreeFunc)
        self._argstree = param1.add_child(self._argstreeFunc)
        self._descriptionstree = param1.add_child(self._descriptionstreeFunc)

    def _aliasestreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._aliasestree.add_child(self._aliasesFunc)
            _loc3_ += 1

    def _aliasesFunc(self, param1):
        _loc2_ = param1.read_utf()
        self.aliases.append(_loc2_)

    def _argstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._argstree.add_child(self._argsFunc)
            _loc3_ += 1

    def _argsFunc(self, param1):
        _loc2_ = param1.read_utf()
        self.args.append(_loc2_)

    def _descriptionstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._descriptionstree.add_child(self._descriptionsFunc)
            _loc3_ += 1

    def _descriptionsFunc(self, param1):
        _loc2_ = param1.read_utf()
        self.descriptions.append(_loc2_)


class ConsoleMessage(NetworkMessage):
    protocolId = 75

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.type = 0
        self.content = ""

    def getMessageId(self):
        return 75

    def initConsoleMessage(self, param1=0, param2=""):
        self.type = param1
        self.content = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.type = 0
        self.content = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ConsoleMessage(param1)

    def serializeAs_ConsoleMessage(self, param1):
        param1.write_byte(self.type)
        param1.write_utf(self.content)

    def deserialize(self, param1):
        self.deserializeAs_ConsoleMessage(param1)

    def deserializeAs_ConsoleMessage(self, param1):
        self._typeFunc(param1)
        self._contentFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ConsoleMessage(param1)

    def deserializeAsyncAs_ConsoleMessage(self, param1):
        param1.add_child(self._typeFunc)
        param1.add_child(self._contentFunc)

    def _typeFunc(self, param1):
        self.type = param1.read_byte()
        if self.type < 0:
            raise RuntimeError("Forbidden value (" + str(self.type) + ") on element of ConsoleMessage.type.")

    def _contentFunc(self, param1):
        self.content = param1.read_utf()


class NetworkDataContainerMessage(NetworkMessage):
    protocolId = 2

    def __init__(self):
        super().__init__()
        self._content = ByteArray()
        self._isInitialized = False

    def getMessageId(self):
        return 2

    def initNetworkDataContainerMessage(self, param1=None):
        self.content = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.content = ByteArray()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_NetworkDataContainerMessage(param1)

    def serializeAs_NetworkDataContainerMessage(self, param1):
        param1.write_bytes(self.content)
        raise RuntimeError("Not implemented")

    def deserialize(self, param1):
        self.deserializeAs_NetworkDataContainerMessage(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_RawDataMessage(param1)

    def deserializeAs_NetworkDataContainerMessage(self, param1):
        _loc2_ = param1.read_var_int()
        _loc3_ = ByteArray()
        param1.read_bytes(_loc3_,0,_loc2_)
        _loc3_.uncompress()
        self.content = _loc3_

    def deserializeAsyncAs_RawDataMessage(self, param1):
        param1.add_child(self.deserializeAs_NetworkDataContainerMessage)


class AggregateStatMessage(NetworkMessage):
    protocolId = 6669

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.statId = 0

    def getMessageId(self):
        return 6669

    def initAggregateStatMessage(self, param1=0):
        self.statId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.statId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AggregateStatMessage(param1)

    def serializeAs_AggregateStatMessage(self, param1):
        param1.write_var_short(self.statId)

    def deserialize(self, param1):
        self.deserializeAs_AggregateStatMessage(param1)

    def deserializeAs_AggregateStatMessage(self, param1):
        self._statIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AggregateStatMessage(param1)

    def deserializeAsyncAs_AggregateStatMessage(self, param1):
        param1.add_child(self._statIdFunc)

    def _statIdFunc(self, param1):
        self.statId = param1.read_var_uh_short()
        if self.statId < 0:
            raise RuntimeError("Forbidden value (" + str(self.statId) + ") on element of AggregateStatMessage.statId.")


class BasicPingMessage(NetworkMessage):
    protocolId = 182

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.quiet = False

    def getMessageId(self):
        return 182

    def initBasicPingMessage(self, param1=False):
        self.quiet = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.quiet = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_BasicPingMessage(param1)

    def serializeAs_BasicPingMessage(self, param1):
        param1.write_boolean(self.quiet)

    def deserialize(self, param1):
        self.deserializeAs_BasicPingMessage(param1)

    def deserializeAs_BasicPingMessage(self, param1):
        self._quietFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_BasicPingMessage(param1)

    def deserializeAsyncAs_BasicPingMessage(self, param1):
        param1.add_child(self._quietFunc)

    def _quietFunc(self, param1):
        self.quiet = param1.read_boolean()


class BasicPongMessage(NetworkMessage):
    protocolId = 183

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.quiet = False

    def getMessageId(self):
        return 183

    def initBasicPongMessage(self, param1=False):
        self.quiet = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.quiet = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_BasicPongMessage(param1)

    def serializeAs_BasicPongMessage(self, param1):
        param1.write_boolean(self.quiet)

    def deserialize(self, param1):
        self.deserializeAs_BasicPongMessage(param1)

    def deserializeAs_BasicPongMessage(self, param1):
        self._quietFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_BasicPongMessage(param1)

    def deserializeAsyncAs_BasicPongMessage(self, param1):
        param1.add_child(self._quietFunc)

    def _quietFunc(self, param1):
        self.quiet = param1.read_boolean()


class BasicStatMessage(NetworkMessage):
    protocolId = 6530

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.timeSpent = 0
        self.statId = 0

    def getMessageId(self):
        return 6530

    def initBasicStatMessage(self, param1=0, param2=0):
        self.timeSpent = param1
        self.statId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.timeSpent = 0
        self.statId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_BasicStatMessage(param1)

    def serializeAs_BasicStatMessage(self, param1):
        if self.timeSpent < 0 or self.timeSpent > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.timeSpent) + ") on element timeSpent.")
        param1.write_double(self.timeSpent)
        param1.write_var_short(self.statId)

    def deserialize(self, param1):
        self.deserializeAs_BasicStatMessage(param1)

    def deserializeAs_BasicStatMessage(self, param1):
        self._timeSpentFunc(param1)
        self._statIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_BasicStatMessage(param1)

    def deserializeAsyncAs_BasicStatMessage(self, param1):
        param1.add_child(self._timeSpentFunc)
        param1.add_child(self._statIdFunc)

    def _timeSpentFunc(self, param1):
        self.timeSpent = param1.read_double()
        if self.timeSpent < 0 or self.timeSpent > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.timeSpent) + ") on element of BasicStatMessage.timeSpent.")

    def _statIdFunc(self, param1):
        self.statId = param1.read_var_uh_short()
        if self.statId < 0:
            raise RuntimeError("Forbidden value (" + str(self.statId) + ") on element of BasicStatMessage.statId.")


class CredentialsAcknowledgementMessage(NetworkMessage):
    protocolId = 6314

    def getMessageId(self):
        return 6314

    def initCredentialsAcknowledgementMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_CredentialsAcknowledgementMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_CredentialsAcknowledgementMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_CredentialsAcknowledgementMessage(self, param1):
        pass


class HelloConnectMessage(NetworkMessage):
    protocolId = 3

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.salt = ""
        self.key = []
        self._keytree = FuncTree()

    def getMessageId(self):
        return 3

    def initHelloConnectMessage(self, param1="", param2=[]):
        self.salt = param1
        self.key = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.salt = ""
        self.key = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HelloConnectMessage(param1)

    def serializeAs_HelloConnectMessage(self, param1):
        param1.write_utf(self.salt)
        param1.write_var_int(len(self.key))
        _loc2_ = 0
        while _loc2_ < len(self.key):
            param1.write_byte(self.key[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_HelloConnectMessage(param1)

    def deserializeAs_HelloConnectMessage(self, param1):
        _loc4_ = 0
        self._saltFunc(param1)
        _loc2_ = param1.read_var_int()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_byte()
            self.key.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HelloConnectMessage(param1)

    def deserializeAsyncAs_HelloConnectMessage(self, param1):
        param1.add_child(self._saltFunc)
        self._keytree = param1.add_child(self._keytreeFunc)

    def _saltFunc(self, param1):
        self.salt = param1.read_utf()

    def _keytreeFunc(self, param1):
        _loc2_ = param1.read_var_int()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._keytree.add_child(self._keyFunc)
            _loc3_ += 1

    def _keyFunc(self, param1):
        _loc2_ = param1.read_byte()
        self.key.append(_loc2_)


class IdentificationFailedMessage(NetworkMessage):
    protocolId = 20

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reason = 99

    def getMessageId(self):
        return 20

    def initIdentificationFailedMessage(self, param1=99):
        self.reason = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.reason = 99
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IdentificationFailedMessage(param1)

    def serializeAs_IdentificationFailedMessage(self, param1):
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_IdentificationFailedMessage(param1)

    def deserializeAs_IdentificationFailedMessage(self, param1):
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IdentificationFailedMessage(param1)

    def deserializeAsyncAs_IdentificationFailedMessage(self, param1):
        param1.add_child(self._reasonFunc)

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()
        if self.reason < 0:
            raise RuntimeError("Forbidden value (" + str(self.reason) + ") on element of IdentificationFailedMessage.reason.")


class IdentificationMessage(NetworkMessage):
    protocolId = 4

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.version = VersionExtended()
        self.lang = ""
        self.credentials = []
        self.serverId = 0
        self.autoconnect = False
        self.useCertificate = False
        self.useLoginToken = False
        self.sessionOptionalSalt = 0
        self.failedAttempts = []
        self._versiontree = FuncTree()
        self._credentialstree = FuncTree()
        self._failedAttemptstree = FuncTree()

    def getMessageId(self):
        return 4

    def initIdentificationMessage(self, param1=None, param2="", param3=[], param4=0, param5=False, param6=False, param7=False, param8=0, param9=[]):
        self.version = param1
        self.lang = param2
        self.credentials = param3
        self.serverId = param4
        self.autoconnect = param5
        self.useCertificate = param6
        self.useLoginToken = param7
        self.sessionOptionalSalt = param8
        self.failedAttempts = param9
        self._isInitialized = True
        return self

    def reset(self):
        self.version = VersionExtended()
        self.credentials = []
        self.serverId = 0
        self.autoconnect = False
        self.useCertificate = False
        self.useLoginToken = False
        self.sessionOptionalSalt = 0
        self.failedAttempts = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IdentificationMessage(param1)

    def serializeAs_IdentificationMessage(self, param1):
        _loc2_ = 0
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,0,self.autoconnect)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,1,self.useCertificate)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,2,self.useLoginToken)
        param1.write_byte(_loc2_)
        self.version.serializeAs_VersionExtended(param1)
        param1.write_utf(self.lang)
        param1.write_var_int(len(self.credentials))
        _loc3_ = 0
        while _loc3_ < len(self.credentials):
            param1.write_byte(self.credentials[_loc3_])
            _loc3_ += 1
        param1.write_short(self.serverId)
        if self.sessionOptionalSalt < -9007199254740990 or self.sessionOptionalSalt > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.sessionOptionalSalt) + ") on element sessionOptionalSalt.")
        param1.write_var_long(self.sessionOptionalSalt)
        param1.write_short(len(self.failedAttempts))
        _loc4_ = 0
        while _loc4_ < len(self.failedAttempts):
            if self.failedAttempts[_loc4_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.failedAttempts[_loc4_]) + ") on element 9 (starting at 1) of failedAttempts.")
            param1.write_var_short(self.failedAttempts[_loc4_])
            _loc4_ += 1

    def deserialize(self, param1):
        self.deserializeAs_IdentificationMessage(param1)

    def deserializeAs_IdentificationMessage(self, param1):
        _loc6_ = 0
        _loc7_ = 0
        self.deserializeByteBoxes(param1)
        self.version = VersionExtended()
        self.version.deserialize(param1)
        self._langFunc(param1)
        _loc2_ = param1.read_var_int()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = param1.read_byte()
            self.credentials.append(_loc6_)
            _loc3_ += 1
        self._serverIdFunc(param1)
        self._sessionOptionalSaltFunc(param1)
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = param1.read_var_uh_short()
            if _loc7_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc7_) + ") on elements of failedAttempts.")
            self.failedAttempts.append(_loc7_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IdentificationMessage(param1)

    def deserializeAsyncAs_IdentificationMessage(self, param1):
        param1.add_child(self.deserializeByteBoxes)
        self._versiontree = param1.add_child(self._versiontreeFunc)
        param1.add_child(self._langFunc)
        self._credentialstree = param1.add_child(self._credentialstreeFunc)
        param1.add_child(self._serverIdFunc)
        param1.add_child(self._sessionOptionalSaltFunc)
        self._failedAttemptstree = param1.add_child(self._failedAttemptstreeFunc)

    def deserializeByteBoxes(self, param1):
        _loc2_ = param1.read_byte()
        self.autoconnect = BooleanByteWrapper.get_flag(_loc2_,0)
        self.useCertificate = BooleanByteWrapper.get_flag(_loc2_,1)
        self.useLoginToken = BooleanByteWrapper.get_flag(_loc2_,2)

    def _versiontreeFunc(self, param1):
        self.version = VersionExtended()
        self.version.deserializeAsync(self._versiontree)

    def _langFunc(self, param1):
        self.lang = param1.read_utf()

    def _credentialstreeFunc(self, param1):
        _loc2_ = param1.read_var_int()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._credentialstree.add_child(self._credentialsFunc)
            _loc3_ += 1

    def _credentialsFunc(self, param1):
        _loc2_ = param1.read_byte()
        self.credentials.append(_loc2_)

    def _serverIdFunc(self, param1):
        self.serverId = param1.read_short()

    def _sessionOptionalSaltFunc(self, param1):
        self.sessionOptionalSalt = param1.read_var_long()
        if self.sessionOptionalSalt < -9007199254740990 or self.sessionOptionalSalt > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.sessionOptionalSalt) + ") on element of IdentificationMessage.sessionOptionalSalt.")

    def _failedAttemptstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._failedAttemptstree.add_child(self._failedAttemptsFunc)
            _loc3_ += 1

    def _failedAttemptsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of failedAttempts.")
        self.failedAttempts.append(_loc2_)


class IdentificationSuccessMessage(NetworkMessage):
    protocolId = 22

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.login = ""
        self.nickname = ""
        self.accountId = 0
        self.communityId = 0
        self.hasRights = False
        self.secretQuestion = ""
        self.accountCreation = 0
        self.subscriptionElapsedDuration = 0
        self.subscriptionEndDate = 0
        self.wasAlreadyConnected = False
        self.havenbagAvailableRoom = 0

    def getMessageId(self):
        return 22

    def initIdentificationSuccessMessage(self, param1="", param2="", param3=0, param4=0, param5=False, param6="", param7=0, param8=0, param9=0, param10=False, param11=0):
        self.login = param1
        self.nickname = param2
        self.accountId = param3
        self.communityId = param4
        self.hasRights = param5
        self.secretQuestion = param6
        self.accountCreation = param7
        self.subscriptionElapsedDuration = param8
        self.subscriptionEndDate = param9
        self.wasAlreadyConnected = param10
        self.havenbagAvailableRoom = param11
        self._isInitialized = True
        return self

    def reset(self):
        self.login = ""
        self.nickname = ""
        self.accountId = 0
        self.communityId = 0
        self.hasRights = False
        self.secretQuestion = ""
        self.accountCreation = 0
        self.subscriptionElapsedDuration = 0
        self.subscriptionEndDate = 0
        self.wasAlreadyConnected = False
        self.havenbagAvailableRoom = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IdentificationSuccessMessage(param1)

    def serializeAs_IdentificationSuccessMessage(self, param1):
        _loc2_ = 0
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,0,self.hasRights)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,1,self.wasAlreadyConnected)
        param1.write_byte(_loc2_)
        param1.write_utf(self.login)
        param1.write_utf(self.nickname)
        if self.accountId < 0:
            raise RuntimeError("Forbidden value (" + str(self.accountId) + ") on element accountId.")
        param1.write_int(self.accountId)
        if self.communityId < 0:
            raise RuntimeError("Forbidden value (" + str(self.communityId) + ") on element communityId.")
        param1.write_byte(self.communityId)
        param1.write_utf(self.secretQuestion)
        if self.accountCreation < 0 or self.accountCreation > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.accountCreation) + ") on element accountCreation.")
        param1.write_double(self.accountCreation)
        if self.subscriptionElapsedDuration < 0 or self.subscriptionElapsedDuration > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.subscriptionElapsedDuration) + ") on element subscriptionElapsedDuration.")
        param1.write_double(self.subscriptionElapsedDuration)
        if self.subscriptionEndDate < 0 or self.subscriptionEndDate > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.subscriptionEndDate) + ") on element subscriptionEndDate.")
        param1.write_double(self.subscriptionEndDate)
        if self.havenbagAvailableRoom < 0 or self.havenbagAvailableRoom > 255:
            raise RuntimeError("Forbidden value (" + str(self.havenbagAvailableRoom) + ") on element havenbagAvailableRoom.")
        param1.write_byte(self.havenbagAvailableRoom)

    def deserialize(self, param1):
        self.deserializeAs_IdentificationSuccessMessage(param1)

    def deserializeAs_IdentificationSuccessMessage(self, param1):
        self.deserializeByteBoxes(param1)
        self._loginFunc(param1)
        self._nicknameFunc(param1)
        self._accountIdFunc(param1)
        self._communityIdFunc(param1)
        self._secretQuestionFunc(param1)
        self._accountCreationFunc(param1)
        self._subscriptionElapsedDurationFunc(param1)
        self._subscriptionEndDateFunc(param1)
        self._havenbagAvailableRoomFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IdentificationSuccessMessage(param1)

    def deserializeAsyncAs_IdentificationSuccessMessage(self, param1):
        param1.add_child(self.deserializeByteBoxes)
        param1.add_child(self._loginFunc)
        param1.add_child(self._nicknameFunc)
        param1.add_child(self._accountIdFunc)
        param1.add_child(self._communityIdFunc)
        param1.add_child(self._secretQuestionFunc)
        param1.add_child(self._accountCreationFunc)
        param1.add_child(self._subscriptionElapsedDurationFunc)
        param1.add_child(self._subscriptionEndDateFunc)
        param1.add_child(self._havenbagAvailableRoomFunc)

    def deserializeByteBoxes(self, param1):
        _loc2_ = param1.read_byte()
        self.hasRights = BooleanByteWrapper.get_flag(_loc2_,0)
        self.wasAlreadyConnected = BooleanByteWrapper.get_flag(_loc2_,1)

    def _loginFunc(self, param1):
        self.login = param1.read_utf()

    def _nicknameFunc(self, param1):
        self.nickname = param1.read_utf()

    def _accountIdFunc(self, param1):
        self.accountId = param1.read_int()
        if self.accountId < 0:
            raise RuntimeError("Forbidden value (" + str(self.accountId) + ") on element of IdentificationSuccessMessage.accountId.")

    def _communityIdFunc(self, param1):
        self.communityId = param1.read_byte()
        if self.communityId < 0:
            raise RuntimeError("Forbidden value (" + str(self.communityId) + ") on element of IdentificationSuccessMessage.communityId.")

    def _secretQuestionFunc(self, param1):
        self.secretQuestion = param1.read_utf()

    def _accountCreationFunc(self, param1):
        self.accountCreation = param1.read_double()
        if self.accountCreation < 0 or self.accountCreation > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.accountCreation) + ") on element of IdentificationSuccessMessage.accountCreation.")

    def _subscriptionElapsedDurationFunc(self, param1):
        self.subscriptionElapsedDuration = param1.read_double()
        if self.subscriptionElapsedDuration < 0 or self.subscriptionElapsedDuration > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.subscriptionElapsedDuration) + ") on element of IdentificationSuccessMessage.subscriptionElapsedDuration.")

    def _subscriptionEndDateFunc(self, param1):
        self.subscriptionEndDate = param1.read_double()
        if self.subscriptionEndDate < 0 or self.subscriptionEndDate > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.subscriptionEndDate) + ") on element of IdentificationSuccessMessage.subscriptionEndDate.")

    def _havenbagAvailableRoomFunc(self, param1):
        self.havenbagAvailableRoom = param1.read_unsigned_byte()
        if self.havenbagAvailableRoom < 0 or self.havenbagAvailableRoom > 255:
            raise RuntimeError("Forbidden value (" + str(self.havenbagAvailableRoom) + ") on element of IdentificationSuccessMessage.havenbagAvailableRoom.")


class MigratedServerListMessage(NetworkMessage):
    protocolId = 6731

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.migratedServerIds = []
        self._migratedServerIdstree = FuncTree()

    def getMessageId(self):
        return 6731

    def initMigratedServerListMessage(self, param1=[]):
        self.migratedServerIds = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.migratedServerIds = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MigratedServerListMessage(param1)

    def serializeAs_MigratedServerListMessage(self, param1):
        param1.write_short(len(self.migratedServerIds))
        _loc2_ = 0
        while _loc2_ < len(self.migratedServerIds):
            if self.migratedServerIds[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.migratedServerIds[_loc2_]) + ") on element 1 (starting at 1) of migratedServerIds.")
            param1.write_var_short(self.migratedServerIds[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_MigratedServerListMessage(param1)

    def deserializeAs_MigratedServerListMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_uh_short()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of migratedServerIds.")
            self.migratedServerIds.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MigratedServerListMessage(param1)

    def deserializeAsyncAs_MigratedServerListMessage(self, param1):
        self._migratedServerIdstree = param1.add_child(self._migratedServerIdstreeFunc)

    def _migratedServerIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._migratedServerIdstree.add_child(self._migratedServerIdsFunc)
            _loc3_ += 1

    def _migratedServerIdsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of migratedServerIds.")
        self.migratedServerIds.append(_loc2_)


class SelectedServerDataMessage(NetworkMessage):
    protocolId = 42

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.serverId = 0
        self.address = ""
        self.port = 0
        self.canCreateNewCharacter = False
        self.ticket = []
        self._tickettree = FuncTree()

    def getMessageId(self):
        return 42

    def initSelectedServerDataMessage(self, param1=0, param2="", param3=0, param4=False, param5=[]):
        self.serverId = param1
        self.address = param2
        self.port = param3
        self.canCreateNewCharacter = param4
        self.ticket = param5
        self._isInitialized = True
        return self

    def reset(self):
        self.serverId = 0
        self.address = ""
        self.port = 0
        self.canCreateNewCharacter = False
        self.ticket = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SelectedServerDataMessage(param1)

    def serializeAs_SelectedServerDataMessage(self, param1):
        if self.serverId < 0:
            raise RuntimeError("Forbidden value (" + str(self.serverId) + ") on element serverId.")
        param1.write_var_short(self.serverId)
        param1.write_utf(self.address)
        if self.port < 0 or self.port > 65535:
            raise RuntimeError("Forbidden value (" + str(self.port) + ") on element port.")
        param1.write_short(self.port)
        param1.write_boolean(self.canCreateNewCharacter)
        param1.write_var_int(len(self.ticket))
        _loc2_ = 0
        while _loc2_ < len(self.ticket):
            param1.write_byte(self.ticket[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_SelectedServerDataMessage(param1)

    def deserializeAs_SelectedServerDataMessage(self, param1):
        _loc4_ = 0
        self._serverIdFunc(param1)
        self._addressFunc(param1)
        self._portFunc(param1)
        self._canCreateNewCharacterFunc(param1)
        _loc2_ = param1.read_var_int()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_byte()
            self.ticket.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SelectedServerDataMessage(param1)

    def deserializeAsyncAs_SelectedServerDataMessage(self, param1):
        param1.add_child(self._serverIdFunc)
        param1.add_child(self._addressFunc)
        param1.add_child(self._portFunc)
        param1.add_child(self._canCreateNewCharacterFunc)
        self._tickettree = param1.add_child(self._tickettreeFunc)

    def _serverIdFunc(self, param1):
        self.serverId = param1.read_var_uh_short()
        if self.serverId < 0:
            raise RuntimeError("Forbidden value (" + str(self.serverId) + ") on element of SelectedServerDataMessage.serverId.")

    def _addressFunc(self, param1):
        self.address = param1.read_utf()

    def _portFunc(self, param1):
        self.port = param1.read_unsigned_short()
        if self.port < 0 or self.port > 65535:
            raise RuntimeError("Forbidden value (" + str(self.port) + ") on element of SelectedServerDataMessage.port.")

    def _canCreateNewCharacterFunc(self, param1):
        self.canCreateNewCharacter = param1.read_boolean()

    def _tickettreeFunc(self, param1):
        _loc2_ = param1.read_var_int()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._tickettree.add_child(self._ticketFunc)
            _loc3_ += 1

    def _ticketFunc(self, param1):
        _loc2_ = param1.read_byte()
        self.ticket.append(_loc2_)


class SelectedServerRefusedMessage(NetworkMessage):
    protocolId = 41

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.serverId = 0
        self.error = 1
        self.serverStatus = 1

    def getMessageId(self):
        return 41

    def initSelectedServerRefusedMessage(self, param1=0, param2=1, param3=1):
        self.serverId = param1
        self.error = param2
        self.serverStatus = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.serverId = 0
        self.error = 1
        self.serverStatus = 1
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SelectedServerRefusedMessage(param1)

    def serializeAs_SelectedServerRefusedMessage(self, param1):
        if self.serverId < 0:
            raise RuntimeError("Forbidden value (" + str(self.serverId) + ") on element serverId.")
        param1.write_var_short(self.serverId)
        param1.write_byte(self.error)
        param1.write_byte(self.serverStatus)

    def deserialize(self, param1):
        self.deserializeAs_SelectedServerRefusedMessage(param1)

    def deserializeAs_SelectedServerRefusedMessage(self, param1):
        self._serverIdFunc(param1)
        self._errorFunc(param1)
        self._serverStatusFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SelectedServerRefusedMessage(param1)

    def deserializeAsyncAs_SelectedServerRefusedMessage(self, param1):
        param1.add_child(self._serverIdFunc)
        param1.add_child(self._errorFunc)
        param1.add_child(self._serverStatusFunc)

    def _serverIdFunc(self, param1):
        self.serverId = param1.read_var_uh_short()
        if self.serverId < 0:
            raise RuntimeError("Forbidden value (" + str(self.serverId) + ") on element of SelectedServerRefusedMessage.serverId.")

    def _errorFunc(self, param1):
        self.error = param1.read_byte()
        if self.error < 0:
            raise RuntimeError("Forbidden value (" + str(self.error) + ") on element of SelectedServerRefusedMessage.error.")

    def _serverStatusFunc(self, param1):
        self.serverStatus = param1.read_byte()
        if self.serverStatus < 0:
            raise RuntimeError("Forbidden value (" + str(self.serverStatus) + ") on element of SelectedServerRefusedMessage.serverStatus.")


class ServerSelectionMessage(NetworkMessage):
    protocolId = 40

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.serverId = 0

    def getMessageId(self):
        return 40

    def initServerSelectionMessage(self, param1=0):
        self.serverId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.serverId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ServerSelectionMessage(param1)

    def serializeAs_ServerSelectionMessage(self, param1):
        if self.serverId < 0:
            raise RuntimeError("Forbidden value (" + str(self.serverId) + ") on element serverId.")
        param1.write_var_short(self.serverId)

    def deserialize(self, param1):
        self.deserializeAs_ServerSelectionMessage(param1)

    def deserializeAs_ServerSelectionMessage(self, param1):
        self._serverIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ServerSelectionMessage(param1)

    def deserializeAsyncAs_ServerSelectionMessage(self, param1):
        param1.add_child(self._serverIdFunc)

    def _serverIdFunc(self, param1):
        self.serverId = param1.read_var_uh_short()
        if self.serverId < 0:
            raise RuntimeError("Forbidden value (" + str(self.serverId) + ") on element of ServerSelectionMessage.serverId.")


class ServersListMessage(NetworkMessage):
    protocolId = 30

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.servers = []
        self.alreadyConnectedToServerId = 0
        self.canCreateNewCharacter = False
        self._serverstree = FuncTree()

    def getMessageId(self):
        return 30

    def initServersListMessage(self, param1=[], param2=0, param3=False):
        self.servers = param1
        self.alreadyConnectedToServerId = param2
        self.canCreateNewCharacter = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.servers = []
        self.alreadyConnectedToServerId = 0
        self.canCreateNewCharacter = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ServersListMessage(param1)

    def serializeAs_ServersListMessage(self, param1):
        param1.write_short(len(self.servers))
        _loc2_ = 0
        while _loc2_ < len(self.servers):
            as_parent(self.servers[_loc2_], GameServerInformations).serializeAs_GameServerInformations(param1)
            _loc2_ += 1
        if self.alreadyConnectedToServerId < 0:
            raise RuntimeError("Forbidden value (" + str(self.alreadyConnectedToServerId) + ") on element alreadyConnectedToServerId.")
        param1.write_var_short(self.alreadyConnectedToServerId)
        param1.write_boolean(self.canCreateNewCharacter)

    def deserialize(self, param1):
        self.deserializeAs_ServersListMessage(param1)

    def deserializeAs_ServersListMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = GameServerInformations()
            _loc4_.deserialize(param1)
            self.servers.append(_loc4_)
            _loc3_ += 1
        self._alreadyConnectedToServerIdFunc(param1)
        self._canCreateNewCharacterFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ServersListMessage(param1)

    def deserializeAsyncAs_ServersListMessage(self, param1):
        self._serverstree = param1.add_child(self._serverstreeFunc)
        param1.add_child(self._alreadyConnectedToServerIdFunc)
        param1.add_child(self._canCreateNewCharacterFunc)

    def _serverstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._serverstree.add_child(self._serversFunc)
            _loc3_ += 1

    def _serversFunc(self, param1):
        _loc2_ = GameServerInformations()
        _loc2_.deserialize(param1)
        self.servers.append(_loc2_)

    def _alreadyConnectedToServerIdFunc(self, param1):
        self.alreadyConnectedToServerId = param1.read_var_uh_short()
        if self.alreadyConnectedToServerId < 0:
            raise RuntimeError("Forbidden value (" + str(self.alreadyConnectedToServerId) + ") on element of ServersListMessage.alreadyConnectedToServerId.")

    def _canCreateNewCharacterFunc(self, param1):
        self.canCreateNewCharacter = param1.read_boolean()


class ServerStatusUpdateMessage(NetworkMessage):
    protocolId = 50

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.server = GameServerInformations()
        self._servertree = FuncTree()

    def getMessageId(self):
        return 50

    def initServerStatusUpdateMessage(self, param1=None):
        self.server = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.server = GameServerInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ServerStatusUpdateMessage(param1)

    def serializeAs_ServerStatusUpdateMessage(self, param1):
        self.server.serializeAs_GameServerInformations(param1)

    def deserialize(self, param1):
        self.deserializeAs_ServerStatusUpdateMessage(param1)

    def deserializeAs_ServerStatusUpdateMessage(self, param1):
        self.server = GameServerInformations()
        self.server.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ServerStatusUpdateMessage(param1)

    def deserializeAsyncAs_ServerStatusUpdateMessage(self, param1):
        self._servertree = param1.add_child(self._servertreeFunc)

    def _servertreeFunc(self, param1):
        self.server = GameServerInformations()
        self.server.deserializeAsync(self._servertree)


class AccountLinkRequiredMessage(NetworkMessage):
    protocolId = 6607

    def getMessageId(self):
        return 6607

    def initAccountLinkRequiredMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_AccountLinkRequiredMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_AccountLinkRequiredMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_AccountLinkRequiredMessage(self, param1):
        pass


class NicknameAcceptedMessage(NetworkMessage):
    protocolId = 5641

    def getMessageId(self):
        return 5641

    def initNicknameAcceptedMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_NicknameAcceptedMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_NicknameAcceptedMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_NicknameAcceptedMessage(self, param1):
        pass


class NicknameChoiceRequestMessage(NetworkMessage):
    protocolId = 5639

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.nickname = ""

    def getMessageId(self):
        return 5639

    def initNicknameChoiceRequestMessage(self, param1=""):
        self.nickname = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.nickname = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_NicknameChoiceRequestMessage(param1)

    def serializeAs_NicknameChoiceRequestMessage(self, param1):
        param1.write_utf(self.nickname)

    def deserialize(self, param1):
        self.deserializeAs_NicknameChoiceRequestMessage(param1)

    def deserializeAs_NicknameChoiceRequestMessage(self, param1):
        self._nicknameFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_NicknameChoiceRequestMessage(param1)

    def deserializeAsyncAs_NicknameChoiceRequestMessage(self, param1):
        param1.add_child(self._nicknameFunc)

    def _nicknameFunc(self, param1):
        self.nickname = param1.read_utf()


class NicknameRefusedMessage(NetworkMessage):
    protocolId = 5638

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reason = 99

    def getMessageId(self):
        return 5638

    def initNicknameRefusedMessage(self, param1=99):
        self.reason = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.reason = 99
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_NicknameRefusedMessage(param1)

    def serializeAs_NicknameRefusedMessage(self, param1):
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_NicknameRefusedMessage(param1)

    def deserializeAs_NicknameRefusedMessage(self, param1):
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_NicknameRefusedMessage(param1)

    def deserializeAsyncAs_NicknameRefusedMessage(self, param1):
        param1.add_child(self._reasonFunc)

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()
        if self.reason < 0:
            raise RuntimeError("Forbidden value (" + str(self.reason) + ") on element of NicknameRefusedMessage.reason.")


class NicknameRegistrationMessage(NetworkMessage):
    protocolId = 5640

    def getMessageId(self):
        return 5640

    def initNicknameRegistrationMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_NicknameRegistrationMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_NicknameRegistrationMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_NicknameRegistrationMessage(self, param1):
        pass


class AcquaintanceSearchErrorMessage(NetworkMessage):
    protocolId = 6143

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reason = 0

    def getMessageId(self):
        return 6143

    def initAcquaintanceSearchErrorMessage(self, param1=0):
        self.reason = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.reason = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AcquaintanceSearchErrorMessage(param1)

    def serializeAs_AcquaintanceSearchErrorMessage(self, param1):
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_AcquaintanceSearchErrorMessage(param1)

    def deserializeAs_AcquaintanceSearchErrorMessage(self, param1):
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AcquaintanceSearchErrorMessage(param1)

    def deserializeAsyncAs_AcquaintanceSearchErrorMessage(self, param1):
        param1.add_child(self._reasonFunc)

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()
        if self.reason < 0:
            raise RuntimeError("Forbidden value (" + str(self.reason) + ") on element of AcquaintanceSearchErrorMessage.reason.")


class AcquaintanceSearchMessage(NetworkMessage):
    protocolId = 6144

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.nickname = ""

    def getMessageId(self):
        return 6144

    def initAcquaintanceSearchMessage(self, param1=""):
        self.nickname = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.nickname = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AcquaintanceSearchMessage(param1)

    def serializeAs_AcquaintanceSearchMessage(self, param1):
        param1.write_utf(self.nickname)

    def deserialize(self, param1):
        self.deserializeAs_AcquaintanceSearchMessage(param1)

    def deserializeAs_AcquaintanceSearchMessage(self, param1):
        self._nicknameFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AcquaintanceSearchMessage(param1)

    def deserializeAsyncAs_AcquaintanceSearchMessage(self, param1):
        param1.add_child(self._nicknameFunc)

    def _nicknameFunc(self, param1):
        self.nickname = param1.read_utf()


class AcquaintanceServerListMessage(NetworkMessage):
    protocolId = 6142

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.servers = []
        self._serverstree = FuncTree()

    def getMessageId(self):
        return 6142

    def initAcquaintanceServerListMessage(self, param1=[]):
        self.servers = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.servers = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AcquaintanceServerListMessage(param1)

    def serializeAs_AcquaintanceServerListMessage(self, param1):
        param1.write_short(len(self.servers))
        _loc2_ = 0
        while _loc2_ < len(self.servers):
            if self.servers[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.servers[_loc2_]) + ") on element 1 (starting at 1) of servers.")
            param1.write_var_short(self.servers[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_AcquaintanceServerListMessage(param1)

    def deserializeAs_AcquaintanceServerListMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_uh_short()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of servers.")
            self.servers.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AcquaintanceServerListMessage(param1)

    def deserializeAsyncAs_AcquaintanceServerListMessage(self, param1):
        self._serverstree = param1.add_child(self._serverstreeFunc)

    def _serverstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._serverstree.add_child(self._serversFunc)
            _loc3_ += 1

    def _serversFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of servers.")
        self.servers.append(_loc2_)


class DebugClearHighlightCellsMessage(NetworkMessage):
    protocolId = 2002

    def getMessageId(self):
        return 2002

    def initDebugClearHighlightCellsMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_DebugClearHighlightCellsMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_DebugClearHighlightCellsMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_DebugClearHighlightCellsMessage(self, param1):
        pass


class DebugHighlightCellsMessage(NetworkMessage):
    protocolId = 2001

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.color = 0
        self.cells = []
        self._cellstree = FuncTree()

    def getMessageId(self):
        return 2001

    def initDebugHighlightCellsMessage(self, param1=0, param2=[]):
        self.color = param1
        self.cells = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.color = 0
        self.cells = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DebugHighlightCellsMessage(param1)

    def serializeAs_DebugHighlightCellsMessage(self, param1):
        param1.write_int(self.color)
        param1.write_short(len(self.cells))
        _loc2_ = 0
        while _loc2_ < len(self.cells):
            if self.cells[_loc2_] < 0 or self.cells[_loc2_] > 559:
                raise RuntimeError("Forbidden value (" + str(self.cells[_loc2_]) + ") on element 2 (starting at 1) of cells.")
            param1.write_var_short(self.cells[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_DebugHighlightCellsMessage(param1)

    def deserializeAs_DebugHighlightCellsMessage(self, param1):
        _loc4_ = 0
        self._colorFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_uh_short()
            if _loc4_ < 0 or _loc4_ > 559:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of cells.")
            self.cells.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DebugHighlightCellsMessage(param1)

    def deserializeAsyncAs_DebugHighlightCellsMessage(self, param1):
        param1.add_child(self._colorFunc)
        self._cellstree = param1.add_child(self._cellstreeFunc)

    def _colorFunc(self, param1):
        self.color = param1.read_int()

    def _cellstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._cellstree.add_child(self._cellsFunc)
            _loc3_ += 1

    def _cellsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0 or _loc2_ > 559:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of cells.")
        self.cells.append(_loc2_)


class DebugInClientMessage(NetworkMessage):
    protocolId = 6028

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.level = 0
        self.message = ""

    def getMessageId(self):
        return 6028

    def initDebugInClientMessage(self, param1=0, param2=""):
        self.level = param1
        self.message = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.level = 0
        self.message = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DebugInClientMessage(param1)

    def serializeAs_DebugInClientMessage(self, param1):
        param1.write_byte(self.level)
        param1.write_utf(self.message)

    def deserialize(self, param1):
        self.deserializeAs_DebugInClientMessage(param1)

    def deserializeAs_DebugInClientMessage(self, param1):
        self._levelFunc(param1)
        self._messageFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DebugInClientMessage(param1)

    def deserializeAsyncAs_DebugInClientMessage(self, param1):
        param1.add_child(self._levelFunc)
        param1.add_child(self._messageFunc)

    def _levelFunc(self, param1):
        self.level = param1.read_byte()
        if self.level < 0:
            raise RuntimeError("Forbidden value (" + str(self.level) + ") on element of DebugInClientMessage.level.")

    def _messageFunc(self, param1):
        self.message = param1.read_utf()


class AchievementDetailedListMessage(NetworkMessage):
    protocolId = 6358

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.startedAchievements = []
        self.finishedAchievements = []
        self._startedAchievementstree = FuncTree()
        self._finishedAchievementstree = FuncTree()

    def getMessageId(self):
        return 6358

    def initAchievementDetailedListMessage(self, param1=[], param2=[]):
        self.startedAchievements = param1
        self.finishedAchievements = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.startedAchievements = []
        self.finishedAchievements = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AchievementDetailedListMessage(param1)

    def serializeAs_AchievementDetailedListMessage(self, param1):
        param1.write_short(len(self.startedAchievements))
        _loc2_ = 0
        while _loc2_ < len(self.startedAchievements):
            as_parent(self.startedAchievements[_loc2_], Achievement).serializeAs_Achievement(param1)
            _loc2_ += 1
        param1.write_short(len(self.finishedAchievements))
        _loc3_ = 0
        while _loc3_ < len(self.finishedAchievements):
            as_parent(self.finishedAchievements[_loc3_], Achievement).serializeAs_Achievement(param1)
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_AchievementDetailedListMessage(param1)

    def deserializeAs_AchievementDetailedListMessage(self, param1):
        _loc6_ = None
        _loc7_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = Achievement()
            _loc6_.deserialize(param1)
            self.startedAchievements.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = Achievement()
            _loc7_.deserialize(param1)
            self.finishedAchievements.append(_loc7_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AchievementDetailedListMessage(param1)

    def deserializeAsyncAs_AchievementDetailedListMessage(self, param1):
        self._startedAchievementstree = param1.add_child(self._startedAchievementstreeFunc)
        self._finishedAchievementstree = param1.add_child(self._finishedAchievementstreeFunc)

    def _startedAchievementstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._startedAchievementstree.add_child(self._startedAchievementsFunc)
            _loc3_ += 1

    def _startedAchievementsFunc(self, param1):
        _loc2_ = Achievement()
        _loc2_.deserialize(param1)
        self.startedAchievements.append(_loc2_)

    def _finishedAchievementstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._finishedAchievementstree.add_child(self._finishedAchievementsFunc)
            _loc3_ += 1

    def _finishedAchievementsFunc(self, param1):
        _loc2_ = Achievement()
        _loc2_.deserialize(param1)
        self.finishedAchievements.append(_loc2_)


class AchievementDetailedListRequestMessage(NetworkMessage):
    protocolId = 6357

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.categoryId = 0

    def getMessageId(self):
        return 6357

    def initAchievementDetailedListRequestMessage(self, param1=0):
        self.categoryId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.categoryId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AchievementDetailedListRequestMessage(param1)

    def serializeAs_AchievementDetailedListRequestMessage(self, param1):
        if self.categoryId < 0:
            raise RuntimeError("Forbidden value (" + str(self.categoryId) + ") on element categoryId.")
        param1.write_var_short(self.categoryId)

    def deserialize(self, param1):
        self.deserializeAs_AchievementDetailedListRequestMessage(param1)

    def deserializeAs_AchievementDetailedListRequestMessage(self, param1):
        self._categoryIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AchievementDetailedListRequestMessage(param1)

    def deserializeAsyncAs_AchievementDetailedListRequestMessage(self, param1):
        param1.add_child(self._categoryIdFunc)

    def _categoryIdFunc(self, param1):
        self.categoryId = param1.read_var_uh_short()
        if self.categoryId < 0:
            raise RuntimeError("Forbidden value (" + str(self.categoryId) + ") on element of AchievementDetailedListRequestMessage.categoryId.")


class AchievementDetailsMessage(NetworkMessage):
    protocolId = 6378

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.achievement = Achievement()
        self._achievementtree = FuncTree()

    def getMessageId(self):
        return 6378

    def initAchievementDetailsMessage(self, param1=None):
        self.achievement = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.achievement = Achievement()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AchievementDetailsMessage(param1)

    def serializeAs_AchievementDetailsMessage(self, param1):
        self.achievement.serializeAs_Achievement(param1)

    def deserialize(self, param1):
        self.deserializeAs_AchievementDetailsMessage(param1)

    def deserializeAs_AchievementDetailsMessage(self, param1):
        self.achievement = Achievement()
        self.achievement.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AchievementDetailsMessage(param1)

    def deserializeAsyncAs_AchievementDetailsMessage(self, param1):
        self._achievementtree = param1.add_child(self._achievementtreeFunc)

    def _achievementtreeFunc(self, param1):
        self.achievement = Achievement()
        self.achievement.deserializeAsync(self._achievementtree)


class AchievementDetailsRequestMessage(NetworkMessage):
    protocolId = 6380

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.achievementId = 0

    def getMessageId(self):
        return 6380

    def initAchievementDetailsRequestMessage(self, param1=0):
        self.achievementId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.achievementId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AchievementDetailsRequestMessage(param1)

    def serializeAs_AchievementDetailsRequestMessage(self, param1):
        if self.achievementId < 0:
            raise RuntimeError("Forbidden value (" + str(self.achievementId) + ") on element achievementId.")
        param1.write_var_short(self.achievementId)

    def deserialize(self, param1):
        self.deserializeAs_AchievementDetailsRequestMessage(param1)

    def deserializeAs_AchievementDetailsRequestMessage(self, param1):
        self._achievementIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AchievementDetailsRequestMessage(param1)

    def deserializeAsyncAs_AchievementDetailsRequestMessage(self, param1):
        param1.add_child(self._achievementIdFunc)

    def _achievementIdFunc(self, param1):
        self.achievementId = param1.read_var_uh_short()
        if self.achievementId < 0:
            raise RuntimeError("Forbidden value (" + str(self.achievementId) + ") on element of AchievementDetailsRequestMessage.achievementId.")


class AchievementFinishedMessage(NetworkMessage):
    protocolId = 6208

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.id = 0
        self.finishedlevel = 0

    def getMessageId(self):
        return 6208

    def initAchievementFinishedMessage(self, param1=0, param2=0):
        self.id = param1
        self.finishedlevel = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.id = 0
        self.finishedlevel = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AchievementFinishedMessage(param1)

    def serializeAs_AchievementFinishedMessage(self, param1):
        if self.id < 0:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element id.")
        param1.write_var_short(self.id)
        if self.finishedlevel < 0 or self.finishedlevel > 206:
            raise RuntimeError("Forbidden value (" + str(self.finishedlevel) + ") on element finishedlevel.")
        param1.write_byte(self.finishedlevel)

    def deserialize(self, param1):
        self.deserializeAs_AchievementFinishedMessage(param1)

    def deserializeAs_AchievementFinishedMessage(self, param1):
        self._idFunc(param1)
        self._finishedlevelFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AchievementFinishedMessage(param1)

    def deserializeAsyncAs_AchievementFinishedMessage(self, param1):
        param1.add_child(self._idFunc)
        param1.add_child(self._finishedlevelFunc)

    def _idFunc(self, param1):
        self.id = param1.read_var_uh_short()
        if self.id < 0:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element of AchievementFinishedMessage.id.")

    def _finishedlevelFunc(self, param1):
        self.finishedlevel = param1.read_unsigned_byte()
        if self.finishedlevel < 0 or self.finishedlevel > 206:
            raise RuntimeError("Forbidden value (" + str(self.finishedlevel) + ") on element of AchievementFinishedMessage.finishedlevel.")


class AchievementListMessage(NetworkMessage):
    protocolId = 6205

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.finishedAchievementsIds = []
        self.rewardableAchievements = []
        self._finishedAchievementsIdstree = FuncTree()
        self._rewardableAchievementstree = FuncTree()

    def getMessageId(self):
        return 6205

    def initAchievementListMessage(self, param1=[], param2=[]):
        self.finishedAchievementsIds = param1
        self.rewardableAchievements = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.finishedAchievementsIds = []
        self.rewardableAchievements = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AchievementListMessage(param1)

    def serializeAs_AchievementListMessage(self, param1):
        param1.write_short(len(self.finishedAchievementsIds))
        _loc2_ = 0
        while _loc2_ < len(self.finishedAchievementsIds):
            if self.finishedAchievementsIds[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.finishedAchievementsIds[_loc2_]) + ") on element 1 (starting at 1) of finishedAchievementsIds.")
            param1.write_var_short(self.finishedAchievementsIds[_loc2_])
            _loc2_ += 1
        param1.write_short(len(self.rewardableAchievements))
        _loc3_ = 0
        while _loc3_ < len(self.rewardableAchievements):
            as_parent(self.rewardableAchievements[_loc3_], AchievementRewardable).serializeAs_AchievementRewardable(param1)
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_AchievementListMessage(param1)

    def deserializeAs_AchievementListMessage(self, param1):
        _loc6_ = 0
        _loc7_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = param1.read_var_uh_short()
            if _loc6_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc6_) + ") on elements of finishedAchievementsIds.")
            self.finishedAchievementsIds.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = AchievementRewardable()
            _loc7_.deserialize(param1)
            self.rewardableAchievements.append(_loc7_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AchievementListMessage(param1)

    def deserializeAsyncAs_AchievementListMessage(self, param1):
        self._finishedAchievementsIdstree = param1.add_child(self._finishedAchievementsIdstreeFunc)
        self._rewardableAchievementstree = param1.add_child(self._rewardableAchievementstreeFunc)

    def _finishedAchievementsIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._finishedAchievementsIdstree.add_child(self._finishedAchievementsIdsFunc)
            _loc3_ += 1

    def _finishedAchievementsIdsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of finishedAchievementsIds.")
        self.finishedAchievementsIds.append(_loc2_)

    def _rewardableAchievementstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._rewardableAchievementstree.add_child(self._rewardableAchievementsFunc)
            _loc3_ += 1

    def _rewardableAchievementsFunc(self, param1):
        _loc2_ = AchievementRewardable()
        _loc2_.deserialize(param1)
        self.rewardableAchievements.append(_loc2_)


class AchievementRewardErrorMessage(NetworkMessage):
    protocolId = 6375

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.achievementId = 0

    def getMessageId(self):
        return 6375

    def initAchievementRewardErrorMessage(self, param1=0):
        self.achievementId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.achievementId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AchievementRewardErrorMessage(param1)

    def serializeAs_AchievementRewardErrorMessage(self, param1):
        param1.write_short(self.achievementId)

    def deserialize(self, param1):
        self.deserializeAs_AchievementRewardErrorMessage(param1)

    def deserializeAs_AchievementRewardErrorMessage(self, param1):
        self._achievementIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AchievementRewardErrorMessage(param1)

    def deserializeAsyncAs_AchievementRewardErrorMessage(self, param1):
        param1.add_child(self._achievementIdFunc)

    def _achievementIdFunc(self, param1):
        self.achievementId = param1.read_short()


class AchievementRewardRequestMessage(NetworkMessage):
    protocolId = 6377

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.achievementId = 0

    def getMessageId(self):
        return 6377

    def initAchievementRewardRequestMessage(self, param1=0):
        self.achievementId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.achievementId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AchievementRewardRequestMessage(param1)

    def serializeAs_AchievementRewardRequestMessage(self, param1):
        param1.write_short(self.achievementId)

    def deserialize(self, param1):
        self.deserializeAs_AchievementRewardRequestMessage(param1)

    def deserializeAs_AchievementRewardRequestMessage(self, param1):
        self._achievementIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AchievementRewardRequestMessage(param1)

    def deserializeAsyncAs_AchievementRewardRequestMessage(self, param1):
        param1.add_child(self._achievementIdFunc)

    def _achievementIdFunc(self, param1):
        self.achievementId = param1.read_short()


class AchievementRewardSuccessMessage(NetworkMessage):
    protocolId = 6376

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.achievementId = 0

    def getMessageId(self):
        return 6376

    def initAchievementRewardSuccessMessage(self, param1=0):
        self.achievementId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.achievementId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AchievementRewardSuccessMessage(param1)

    def serializeAs_AchievementRewardSuccessMessage(self, param1):
        param1.write_short(self.achievementId)

    def deserialize(self, param1):
        self.deserializeAs_AchievementRewardSuccessMessage(param1)

    def deserializeAs_AchievementRewardSuccessMessage(self, param1):
        self._achievementIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AchievementRewardSuccessMessage(param1)

    def deserializeAsyncAs_AchievementRewardSuccessMessage(self, param1):
        param1.add_child(self._achievementIdFunc)

    def _achievementIdFunc(self, param1):
        self.achievementId = param1.read_short()


class FriendGuildSetWarnOnAchievementCompleteMessage(NetworkMessage):
    protocolId = 6382

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.enable = False

    def getMessageId(self):
        return 6382

    def initFriendGuildSetWarnOnAchievementCompleteMessage(self, param1=False):
        self.enable = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.enable = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_FriendGuildSetWarnOnAchievementCompleteMessage(param1)

    def serializeAs_FriendGuildSetWarnOnAchievementCompleteMessage(self, param1):
        param1.write_boolean(self.enable)

    def deserialize(self, param1):
        self.deserializeAs_FriendGuildSetWarnOnAchievementCompleteMessage(param1)

    def deserializeAs_FriendGuildSetWarnOnAchievementCompleteMessage(self, param1):
        self._enableFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_FriendGuildSetWarnOnAchievementCompleteMessage(param1)

    def deserializeAsyncAs_FriendGuildSetWarnOnAchievementCompleteMessage(self, param1):
        param1.add_child(self._enableFunc)

    def _enableFunc(self, param1):
        self.enable = param1.read_boolean()


class FriendGuildWarnOnAchievementCompleteStateMessage(NetworkMessage):
    protocolId = 6383

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.enable = False

    def getMessageId(self):
        return 6383

    def initFriendGuildWarnOnAchievementCompleteStateMessage(self, param1=False):
        self.enable = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.enable = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_FriendGuildWarnOnAchievementCompleteStateMessage(param1)

    def serializeAs_FriendGuildWarnOnAchievementCompleteStateMessage(self, param1):
        param1.write_boolean(self.enable)

    def deserialize(self, param1):
        self.deserializeAs_FriendGuildWarnOnAchievementCompleteStateMessage(param1)

    def deserializeAs_FriendGuildWarnOnAchievementCompleteStateMessage(self, param1):
        self._enableFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_FriendGuildWarnOnAchievementCompleteStateMessage(param1)

    def deserializeAsyncAs_FriendGuildWarnOnAchievementCompleteStateMessage(self, param1):
        param1.add_child(self._enableFunc)

    def _enableFunc(self, param1):
        self.enable = param1.read_boolean()


class AbstractGameActionMessage(NetworkMessage):
    protocolId = 1000

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.actionId = 0
        self.sourceId = 0

    def getMessageId(self):
        return 1000

    def initAbstractGameActionMessage(self, param1=0, param2=0):
        self.actionId = param1
        self.sourceId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.actionId = 0
        self.sourceId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AbstractGameActionMessage(param1)

    def serializeAs_AbstractGameActionMessage(self, param1):
        if self.actionId < 0:
            raise RuntimeError("Forbidden value (" + str(self.actionId) + ") on element actionId.")
        param1.write_var_short(self.actionId)
        if self.sourceId < -9007199254740990 or self.sourceId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.sourceId) + ") on element sourceId.")
        param1.write_double(self.sourceId)

    def deserialize(self, param1):
        self.deserializeAs_AbstractGameActionMessage(param1)

    def deserializeAs_AbstractGameActionMessage(self, param1):
        self._actionIdFunc(param1)
        self._sourceIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AbstractGameActionMessage(param1)

    def deserializeAsyncAs_AbstractGameActionMessage(self, param1):
        param1.add_child(self._actionIdFunc)
        param1.add_child(self._sourceIdFunc)

    def _actionIdFunc(self, param1):
        self.actionId = param1.read_var_uh_short()
        if self.actionId < 0:
            raise RuntimeError("Forbidden value (" + str(self.actionId) + ") on element of AbstractGameActionMessage.actionId.")

    def _sourceIdFunc(self, param1):
        self.sourceId = param1.read_double()
        if self.sourceId < -9007199254740990 or self.sourceId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.sourceId) + ") on element of AbstractGameActionMessage.sourceId.")


class GameActionAcknowledgementMessage(NetworkMessage):
    protocolId = 957

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.valid = False
        self.actionId = 0

    def getMessageId(self):
        return 957

    def initGameActionAcknowledgementMessage(self, param1=False, param2=0):
        self.valid = param1
        self.actionId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.valid = False
        self.actionId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionAcknowledgementMessage(param1)

    def serializeAs_GameActionAcknowledgementMessage(self, param1):
        param1.write_boolean(self.valid)
        param1.write_byte(self.actionId)

    def deserialize(self, param1):
        self.deserializeAs_GameActionAcknowledgementMessage(param1)

    def deserializeAs_GameActionAcknowledgementMessage(self, param1):
        self._validFunc(param1)
        self._actionIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionAcknowledgementMessage(param1)

    def deserializeAsyncAs_GameActionAcknowledgementMessage(self, param1):
        param1.add_child(self._validFunc)
        param1.add_child(self._actionIdFunc)

    def _validFunc(self, param1):
        self.valid = param1.read_boolean()

    def _actionIdFunc(self, param1):
        self.actionId = param1.read_byte()


class GameActionNoopMessage(NetworkMessage):
    protocolId = 1002

    def getMessageId(self):
        return 1002

    def initGameActionNoopMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_GameActionNoopMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_GameActionNoopMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_GameActionNoopMessage(self, param1):
        pass


class GameActionFightCastOnTargetRequestMessage(NetworkMessage):
    protocolId = 6330

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.spellId = 0
        self.targetId = 0

    def getMessageId(self):
        return 6330

    def initGameActionFightCastOnTargetRequestMessage(self, param1=0, param2=0):
        self.spellId = param1
        self.targetId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.spellId = 0
        self.targetId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightCastOnTargetRequestMessage(param1)

    def serializeAs_GameActionFightCastOnTargetRequestMessage(self, param1):
        if self.spellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spellId) + ") on element spellId.")
        param1.write_var_short(self.spellId)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightCastOnTargetRequestMessage(param1)

    def deserializeAs_GameActionFightCastOnTargetRequestMessage(self, param1):
        self._spellIdFunc(param1)
        self._targetIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightCastOnTargetRequestMessage(param1)

    def deserializeAsyncAs_GameActionFightCastOnTargetRequestMessage(self, param1):
        param1.add_child(self._spellIdFunc)
        param1.add_child(self._targetIdFunc)

    def _spellIdFunc(self, param1):
        self.spellId = param1.read_var_uh_short()
        if self.spellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spellId) + ") on element of GameActionFightCastOnTargetRequestMessage.spellId.")

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightCastOnTargetRequestMessage.targetId.")


class GameActionFightCastRequestMessage(NetworkMessage):
    protocolId = 1005

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.spellId = 0
        self.cellId = 0

    def getMessageId(self):
        return 1005

    def initGameActionFightCastRequestMessage(self, param1=0, param2=0):
        self.spellId = param1
        self.cellId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.spellId = 0
        self.cellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        if HASH_FUNCTION != None:
            HASH_FUNCTION(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightCastRequestMessage(param1)

    def serializeAs_GameActionFightCastRequestMessage(self, param1):
        if self.spellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spellId) + ") on element spellId.")
        param1.write_var_short(self.spellId)
        if self.cellId < -1 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element cellId.")
        param1.write_short(self.cellId)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightCastRequestMessage(param1)

    def deserializeAs_GameActionFightCastRequestMessage(self, param1):
        self._spellIdFunc(param1)
        self._cellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightCastRequestMessage(param1)

    def deserializeAsyncAs_GameActionFightCastRequestMessage(self, param1):
        param1.add_child(self._spellIdFunc)
        param1.add_child(self._cellIdFunc)

    def _spellIdFunc(self, param1):
        self.spellId = param1.read_var_uh_short()
        if self.spellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spellId) + ") on element of GameActionFightCastRequestMessage.spellId.")

    def _cellIdFunc(self, param1):
        self.cellId = param1.read_short()
        if self.cellId < -1 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element of GameActionFightCastRequestMessage.cellId.")


class GameActionFightNoSpellCastMessage(NetworkMessage):
    protocolId = 6132

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.spellLevelId = 0

    def getMessageId(self):
        return 6132

    def initGameActionFightNoSpellCastMessage(self, param1=0):
        self.spellLevelId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.spellLevelId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightNoSpellCastMessage(param1)

    def serializeAs_GameActionFightNoSpellCastMessage(self, param1):
        if self.spellLevelId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spellLevelId) + ") on element spellLevelId.")
        param1.write_var_int(self.spellLevelId)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightNoSpellCastMessage(param1)

    def deserializeAs_GameActionFightNoSpellCastMessage(self, param1):
        self._spellLevelIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightNoSpellCastMessage(param1)

    def deserializeAsyncAs_GameActionFightNoSpellCastMessage(self, param1):
        param1.add_child(self._spellLevelIdFunc)

    def _spellLevelIdFunc(self, param1):
        self.spellLevelId = param1.read_var_uh_int()
        if self.spellLevelId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spellLevelId) + ") on element of GameActionFightNoSpellCastMessage.spellLevelId.")


class SequenceEndMessage(NetworkMessage):
    protocolId = 956

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.actionId = 0
        self.authorId = 0
        self.sequenceType = 0

    def getMessageId(self):
        return 956

    def initSequenceEndMessage(self, param1=0, param2=0, param3=0):
        self.actionId = param1
        self.authorId = param2
        self.sequenceType = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.actionId = 0
        self.authorId = 0
        self.sequenceType = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SequenceEndMessage(param1)

    def serializeAs_SequenceEndMessage(self, param1):
        if self.actionId < 0:
            raise RuntimeError("Forbidden value (" + str(self.actionId) + ") on element actionId.")
        param1.write_var_short(self.actionId)
        if self.authorId < -9007199254740990 or self.authorId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.authorId) + ") on element authorId.")
        param1.write_double(self.authorId)
        param1.write_byte(self.sequenceType)

    def deserialize(self, param1):
        self.deserializeAs_SequenceEndMessage(param1)

    def deserializeAs_SequenceEndMessage(self, param1):
        self._actionIdFunc(param1)
        self._authorIdFunc(param1)
        self._sequenceTypeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SequenceEndMessage(param1)

    def deserializeAsyncAs_SequenceEndMessage(self, param1):
        param1.add_child(self._actionIdFunc)
        param1.add_child(self._authorIdFunc)
        param1.add_child(self._sequenceTypeFunc)

    def _actionIdFunc(self, param1):
        self.actionId = param1.read_var_uh_short()
        if self.actionId < 0:
            raise RuntimeError("Forbidden value (" + str(self.actionId) + ") on element of SequenceEndMessage.actionId.")

    def _authorIdFunc(self, param1):
        self.authorId = param1.read_double()
        if self.authorId < -9007199254740990 or self.authorId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.authorId) + ") on element of SequenceEndMessage.authorId.")

    def _sequenceTypeFunc(self, param1):
        self.sequenceType = param1.read_byte()


class SequenceStartMessage(NetworkMessage):
    protocolId = 955

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.sequenceType = 0
        self.authorId = 0

    def getMessageId(self):
        return 955

    def initSequenceStartMessage(self, param1=0, param2=0):
        self.sequenceType = param1
        self.authorId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.sequenceType = 0
        self.authorId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SequenceStartMessage(param1)

    def serializeAs_SequenceStartMessage(self, param1):
        param1.write_byte(self.sequenceType)
        if self.authorId < -9007199254740990 or self.authorId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.authorId) + ") on element authorId.")
        param1.write_double(self.authorId)

    def deserialize(self, param1):
        self.deserializeAs_SequenceStartMessage(param1)

    def deserializeAs_SequenceStartMessage(self, param1):
        self._sequenceTypeFunc(param1)
        self._authorIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SequenceStartMessage(param1)

    def deserializeAsyncAs_SequenceStartMessage(self, param1):
        param1.add_child(self._sequenceTypeFunc)
        param1.add_child(self._authorIdFunc)

    def _sequenceTypeFunc(self, param1):
        self.sequenceType = param1.read_byte()

    def _authorIdFunc(self, param1):
        self.authorId = param1.read_double()
        if self.authorId < -9007199254740990 or self.authorId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.authorId) + ") on element of SequenceStartMessage.authorId.")


class AllianceChangeGuildRightsMessage(NetworkMessage):
    protocolId = 6426

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.guildId = 0
        self.rights = 0

    def getMessageId(self):
        return 6426

    def initAllianceChangeGuildRightsMessage(self, param1=0, param2=0):
        self.guildId = param1
        self.rights = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.guildId = 0
        self.rights = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceChangeGuildRightsMessage(param1)

    def serializeAs_AllianceChangeGuildRightsMessage(self, param1):
        if self.guildId < 0:
            raise RuntimeError("Forbidden value (" + str(self.guildId) + ") on element guildId.")
        param1.write_var_int(self.guildId)
        if self.rights < 0:
            raise RuntimeError("Forbidden value (" + str(self.rights) + ") on element rights.")
        param1.write_byte(self.rights)

    def deserialize(self, param1):
        self.deserializeAs_AllianceChangeGuildRightsMessage(param1)

    def deserializeAs_AllianceChangeGuildRightsMessage(self, param1):
        self._guildIdFunc(param1)
        self._rightsFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceChangeGuildRightsMessage(param1)

    def deserializeAsyncAs_AllianceChangeGuildRightsMessage(self, param1):
        param1.add_child(self._guildIdFunc)
        param1.add_child(self._rightsFunc)

    def _guildIdFunc(self, param1):
        self.guildId = param1.read_var_uh_int()
        if self.guildId < 0:
            raise RuntimeError("Forbidden value (" + str(self.guildId) + ") on element of AllianceChangeGuildRightsMessage.guildId.")

    def _rightsFunc(self, param1):
        self.rights = param1.read_byte()
        if self.rights < 0:
            raise RuntimeError("Forbidden value (" + str(self.rights) + ") on element of AllianceChangeGuildRightsMessage.rights.")


class AllianceCreationResultMessage(NetworkMessage):
    protocolId = 6391

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.result = 0

    def getMessageId(self):
        return 6391

    def initAllianceCreationResultMessage(self, param1=0):
        self.result = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.result = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceCreationResultMessage(param1)

    def serializeAs_AllianceCreationResultMessage(self, param1):
        param1.write_byte(self.result)

    def deserialize(self, param1):
        self.deserializeAs_AllianceCreationResultMessage(param1)

    def deserializeAs_AllianceCreationResultMessage(self, param1):
        self._resultFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceCreationResultMessage(param1)

    def deserializeAsyncAs_AllianceCreationResultMessage(self, param1):
        param1.add_child(self._resultFunc)

    def _resultFunc(self, param1):
        self.result = param1.read_byte()
        if self.result < 0:
            raise RuntimeError("Forbidden value (" + str(self.result) + ") on element of AllianceCreationResultMessage.result.")


class AllianceCreationStartedMessage(NetworkMessage):
    protocolId = 6394

    def getMessageId(self):
        return 6394

    def initAllianceCreationStartedMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_AllianceCreationStartedMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_AllianceCreationStartedMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_AllianceCreationStartedMessage(self, param1):
        pass


class AllianceCreationValidMessage(NetworkMessage):
    protocolId = 6393

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.allianceName = ""
        self.allianceTag = ""
        self.allianceEmblem = GuildEmblem()
        self._allianceEmblemtree = FuncTree()

    def getMessageId(self):
        return 6393

    def initAllianceCreationValidMessage(self, param1="", param2="", param3=None):
        self.allianceName = param1
        self.allianceTag = param2
        self.allianceEmblem = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.allianceName = ""
        self.allianceTag = ""
        self.allianceEmblem = GuildEmblem()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceCreationValidMessage(param1)

    def serializeAs_AllianceCreationValidMessage(self, param1):
        param1.write_utf(self.allianceName)
        param1.write_utf(self.allianceTag)
        self.allianceEmblem.serializeAs_GuildEmblem(param1)

    def deserialize(self, param1):
        self.deserializeAs_AllianceCreationValidMessage(param1)

    def deserializeAs_AllianceCreationValidMessage(self, param1):
        self._allianceNameFunc(param1)
        self._allianceTagFunc(param1)
        self.allianceEmblem = GuildEmblem()
        self.allianceEmblem.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceCreationValidMessage(param1)

    def deserializeAsyncAs_AllianceCreationValidMessage(self, param1):
        param1.add_child(self._allianceNameFunc)
        param1.add_child(self._allianceTagFunc)
        self._allianceEmblemtree = param1.add_child(self._allianceEmblemtreeFunc)

    def _allianceNameFunc(self, param1):
        self.allianceName = param1.read_utf()

    def _allianceTagFunc(self, param1):
        self.allianceTag = param1.read_utf()

    def _allianceEmblemtreeFunc(self, param1):
        self.allianceEmblem = GuildEmblem()
        self.allianceEmblem.deserializeAsync(self._allianceEmblemtree)


class AllianceFactsErrorMessage(NetworkMessage):
    protocolId = 6423

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.allianceId = 0

    def getMessageId(self):
        return 6423

    def initAllianceFactsErrorMessage(self, param1=0):
        self.allianceId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.allianceId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceFactsErrorMessage(param1)

    def serializeAs_AllianceFactsErrorMessage(self, param1):
        if self.allianceId < 0:
            raise RuntimeError("Forbidden value (" + str(self.allianceId) + ") on element allianceId.")
        param1.write_var_int(self.allianceId)

    def deserialize(self, param1):
        self.deserializeAs_AllianceFactsErrorMessage(param1)

    def deserializeAs_AllianceFactsErrorMessage(self, param1):
        self._allianceIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceFactsErrorMessage(param1)

    def deserializeAsyncAs_AllianceFactsErrorMessage(self, param1):
        param1.add_child(self._allianceIdFunc)

    def _allianceIdFunc(self, param1):
        self.allianceId = param1.read_var_uh_int()
        if self.allianceId < 0:
            raise RuntimeError("Forbidden value (" + str(self.allianceId) + ") on element of AllianceFactsErrorMessage.allianceId.")


class AllianceFactsMessage(NetworkMessage):
    protocolId = 6414

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.infos = AllianceFactSheetInformations()
        self.guilds = []
        self.controlledSubareaIds = []
        self.leaderCharacterId = 0
        self.leaderCharacterName = ""
        self._infostree = FuncTree()
        self._guildstree = FuncTree()
        self._controlledSubareaIdstree = FuncTree()

    def getMessageId(self):
        return 6414

    def initAllianceFactsMessage(self, param1=None, param2=[], param3=[], param4=0, param5=""):
        self.infos = param1
        self.guilds = param2
        self.controlledSubareaIds = param3
        self.leaderCharacterId = param4
        self.leaderCharacterName = param5
        self._isInitialized = True
        return self

    def reset(self):
        self.infos = AllianceFactSheetInformations()
        self.controlledSubareaIds = []
        self.leaderCharacterId = 0
        self.leaderCharacterName = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceFactsMessage(param1)

    def serializeAs_AllianceFactsMessage(self, param1):
        param1.write_short(self.infos.getTypeId())
        self.infos.serialize(param1)
        param1.write_short(len(self.guilds))
        _loc2_ = 0
        while _loc2_ < len(self.guilds):
            as_parent(self.guilds[_loc2_], GuildInAllianceInformations).serializeAs_GuildInAllianceInformations(param1)
            _loc2_ += 1
        param1.write_short(len(self.controlledSubareaIds))
        _loc3_ = 0
        while _loc3_ < len(self.controlledSubareaIds):
            if self.controlledSubareaIds[_loc3_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.controlledSubareaIds[_loc3_]) + ") on element 3 (starting at 1) of controlledSubareaIds.")
            param1.write_var_short(self.controlledSubareaIds[_loc3_])
            _loc3_ += 1
        if self.leaderCharacterId < 0 or self.leaderCharacterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.leaderCharacterId) + ") on element leaderCharacterId.")
        param1.write_var_long(self.leaderCharacterId)
        param1.write_utf(self.leaderCharacterName)

    def deserialize(self, param1):
        self.deserializeAs_AllianceFactsMessage(param1)

    def deserializeAs_AllianceFactsMessage(self, param1):
        _loc7_ = None
        _loc8_ = 0
        _loc2_ = param1.read_unsigned_short()
        self.infos = ProtocolTypeManager.get_instance(AllianceFactSheetInformations,_loc2_)
        self.infos.deserialize(param1)
        _loc3_ = param1.read_unsigned_short()
        _loc4_ = 0
        while _loc4_ < _loc3_:
            _loc7_ = GuildInAllianceInformations()
            _loc7_.deserialize(param1)
            self.guilds.append(_loc7_)
            _loc4_ += 1
        _loc5_ = param1.read_unsigned_short()
        _loc6_ = 0
        while _loc6_ < _loc5_:
            _loc8_ = param1.read_var_uh_short()
            if _loc8_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc8_) + ") on elements of controlledSubareaIds.")
            self.controlledSubareaIds.append(_loc8_)
            _loc6_ += 1
        self._leaderCharacterIdFunc(param1)
        self._leaderCharacterNameFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceFactsMessage(param1)

    def deserializeAsyncAs_AllianceFactsMessage(self, param1):
        self._infostree = param1.add_child(self._infostreeFunc)
        self._guildstree = param1.add_child(self._guildstreeFunc)
        self._controlledSubareaIdstree = param1.add_child(self._controlledSubareaIdstreeFunc)
        param1.add_child(self._leaderCharacterIdFunc)
        param1.add_child(self._leaderCharacterNameFunc)

    def _infostreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.infos = ProtocolTypeManager.get_instance(AllianceFactSheetInformations,_loc2_)
        self.infos.deserializeAsync(self._infostree)

    def _guildstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._guildstree.add_child(self._guildsFunc)
            _loc3_ += 1

    def _guildsFunc(self, param1):
        _loc2_ = GuildInAllianceInformations()
        _loc2_.deserialize(param1)
        self.guilds.append(_loc2_)

    def _controlledSubareaIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._controlledSubareaIdstree.add_child(self._controlledSubareaIdsFunc)
            _loc3_ += 1

    def _controlledSubareaIdsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of controlledSubareaIds.")
        self.controlledSubareaIds.append(_loc2_)

    def _leaderCharacterIdFunc(self, param1):
        self.leaderCharacterId = param1.read_var_uh_long()
        if self.leaderCharacterId < 0 or self.leaderCharacterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.leaderCharacterId) + ") on element of AllianceFactsMessage.leaderCharacterId.")

    def _leaderCharacterNameFunc(self, param1):
        self.leaderCharacterName = param1.read_utf()


class AllianceFactsRequestMessage(NetworkMessage):
    protocolId = 6409

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.allianceId = 0

    def getMessageId(self):
        return 6409

    def initAllianceFactsRequestMessage(self, param1=0):
        self.allianceId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.allianceId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceFactsRequestMessage(param1)

    def serializeAs_AllianceFactsRequestMessage(self, param1):
        if self.allianceId < 0:
            raise RuntimeError("Forbidden value (" + str(self.allianceId) + ") on element allianceId.")
        param1.write_var_int(self.allianceId)

    def deserialize(self, param1):
        self.deserializeAs_AllianceFactsRequestMessage(param1)

    def deserializeAs_AllianceFactsRequestMessage(self, param1):
        self._allianceIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceFactsRequestMessage(param1)

    def deserializeAsyncAs_AllianceFactsRequestMessage(self, param1):
        param1.add_child(self._allianceIdFunc)

    def _allianceIdFunc(self, param1):
        self.allianceId = param1.read_var_uh_int()
        if self.allianceId < 0:
            raise RuntimeError("Forbidden value (" + str(self.allianceId) + ") on element of AllianceFactsRequestMessage.allianceId.")


class AllianceGuildLeavingMessage(NetworkMessage):
    protocolId = 6399

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.kicked = False
        self.guildId = 0

    def getMessageId(self):
        return 6399

    def initAllianceGuildLeavingMessage(self, param1=False, param2=0):
        self.kicked = param1
        self.guildId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.kicked = False
        self.guildId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceGuildLeavingMessage(param1)

    def serializeAs_AllianceGuildLeavingMessage(self, param1):
        param1.write_boolean(self.kicked)
        if self.guildId < 0:
            raise RuntimeError("Forbidden value (" + str(self.guildId) + ") on element guildId.")
        param1.write_var_int(self.guildId)

    def deserialize(self, param1):
        self.deserializeAs_AllianceGuildLeavingMessage(param1)

    def deserializeAs_AllianceGuildLeavingMessage(self, param1):
        self._kickedFunc(param1)
        self._guildIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceGuildLeavingMessage(param1)

    def deserializeAsyncAs_AllianceGuildLeavingMessage(self, param1):
        param1.add_child(self._kickedFunc)
        param1.add_child(self._guildIdFunc)

    def _kickedFunc(self, param1):
        self.kicked = param1.read_boolean()

    def _guildIdFunc(self, param1):
        self.guildId = param1.read_var_uh_int()
        if self.guildId < 0:
            raise RuntimeError("Forbidden value (" + str(self.guildId) + ") on element of AllianceGuildLeavingMessage.guildId.")


class AllianceInsiderInfoMessage(NetworkMessage):
    protocolId = 6403

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.allianceInfos = AllianceFactSheetInformations()
        self.guilds = []
        self.prisms = []
        self._allianceInfostree = FuncTree()
        self._guildstree = FuncTree()
        self._prismstree = FuncTree()

    def getMessageId(self):
        return 6403

    def initAllianceInsiderInfoMessage(self, param1=None, param2=[], param3=[]):
        self.allianceInfos = param1
        self.guilds = param2
        self.prisms = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.allianceInfos = AllianceFactSheetInformations()
        self.prisms = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceInsiderInfoMessage(param1)

    def serializeAs_AllianceInsiderInfoMessage(self, param1):
        self.allianceInfos.serializeAs_AllianceFactSheetInformations(param1)
        param1.write_short(len(self.guilds))
        _loc2_ = 0
        while _loc2_ < len(self.guilds):
            as_parent(self.guilds[_loc2_], GuildInsiderFactSheetInformations).serializeAs_GuildInsiderFactSheetInformations(param1)
            _loc2_ += 1
        param1.write_short(len(self.prisms))
        _loc3_ = 0
        while _loc3_ < len(self.prisms):
            param1.write_short(as_parent(self.prisms[_loc3_], PrismSubareaEmptyInfo).getTypeId())
            as_parent(self.prisms[_loc3_], PrismSubareaEmptyInfo).serialize(param1)
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_AllianceInsiderInfoMessage(param1)

    def deserializeAs_AllianceInsiderInfoMessage(self, param1):
        _loc6_ = None
        _loc7_ = 0
        _loc8_ = None
        self.allianceInfos = AllianceFactSheetInformations()
        self.allianceInfos.deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = GuildInsiderFactSheetInformations()
            _loc6_.deserialize(param1)
            self.guilds.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = param1.read_unsigned_short()
            _loc8_ = ProtocolTypeManager.get_instance(PrismSubareaEmptyInfo,_loc7_)
            _loc8_.deserialize(param1)
            self.prisms.append(_loc8_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceInsiderInfoMessage(param1)

    def deserializeAsyncAs_AllianceInsiderInfoMessage(self, param1):
        self._allianceInfostree = param1.add_child(self._allianceInfostreeFunc)
        self._guildstree = param1.add_child(self._guildstreeFunc)
        self._prismstree = param1.add_child(self._prismstreeFunc)

    def _allianceInfostreeFunc(self, param1):
        self.allianceInfos = AllianceFactSheetInformations()
        self.allianceInfos.deserializeAsync(self._allianceInfostree)

    def _guildstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._guildstree.add_child(self._guildsFunc)
            _loc3_ += 1

    def _guildsFunc(self, param1):
        _loc2_ = GuildInsiderFactSheetInformations()
        _loc2_.deserialize(param1)
        self.guilds.append(_loc2_)

    def _prismstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._prismstree.add_child(self._prismsFunc)
            _loc3_ += 1

    def _prismsFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(PrismSubareaEmptyInfo,_loc2_)
        _loc3_.deserialize(param1)
        self.prisms.append(_loc3_)


class AllianceInsiderInfoRequestMessage(NetworkMessage):
    protocolId = 6417

    def getMessageId(self):
        return 6417

    def initAllianceInsiderInfoRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_AllianceInsiderInfoRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_AllianceInsiderInfoRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_AllianceInsiderInfoRequestMessage(self, param1):
        pass


class AllianceInvitationAnswerMessage(NetworkMessage):
    protocolId = 6401

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.accept = False

    def getMessageId(self):
        return 6401

    def initAllianceInvitationAnswerMessage(self, param1=False):
        self.accept = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.accept = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceInvitationAnswerMessage(param1)

    def serializeAs_AllianceInvitationAnswerMessage(self, param1):
        param1.write_boolean(self.accept)

    def deserialize(self, param1):
        self.deserializeAs_AllianceInvitationAnswerMessage(param1)

    def deserializeAs_AllianceInvitationAnswerMessage(self, param1):
        self._acceptFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceInvitationAnswerMessage(param1)

    def deserializeAsyncAs_AllianceInvitationAnswerMessage(self, param1):
        param1.add_child(self._acceptFunc)

    def _acceptFunc(self, param1):
        self.accept = param1.read_boolean()


class AllianceInvitationMessage(NetworkMessage):
    protocolId = 6395

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0

    def getMessageId(self):
        return 6395

    def initAllianceInvitationMessage(self, param1=0):
        self.targetId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.targetId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceInvitationMessage(param1)

    def serializeAs_AllianceInvitationMessage(self, param1):
        if self.targetId < 0 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_var_long(self.targetId)

    def deserialize(self, param1):
        self.deserializeAs_AllianceInvitationMessage(param1)

    def deserializeAs_AllianceInvitationMessage(self, param1):
        self._targetIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceInvitationMessage(param1)

    def deserializeAsyncAs_AllianceInvitationMessage(self, param1):
        param1.add_child(self._targetIdFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_var_uh_long()
        if self.targetId < 0 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of AllianceInvitationMessage.targetId.")


class AllianceInvitationStateRecrutedMessage(NetworkMessage):
    protocolId = 6392

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.invitationState = 0

    def getMessageId(self):
        return 6392

    def initAllianceInvitationStateRecrutedMessage(self, param1=0):
        self.invitationState = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.invitationState = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceInvitationStateRecrutedMessage(param1)

    def serializeAs_AllianceInvitationStateRecrutedMessage(self, param1):
        param1.write_byte(self.invitationState)

    def deserialize(self, param1):
        self.deserializeAs_AllianceInvitationStateRecrutedMessage(param1)

    def deserializeAs_AllianceInvitationStateRecrutedMessage(self, param1):
        self._invitationStateFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceInvitationStateRecrutedMessage(param1)

    def deserializeAsyncAs_AllianceInvitationStateRecrutedMessage(self, param1):
        param1.add_child(self._invitationStateFunc)

    def _invitationStateFunc(self, param1):
        self.invitationState = param1.read_byte()
        if self.invitationState < 0:
            raise RuntimeError("Forbidden value (" + str(self.invitationState) + ") on element of AllianceInvitationStateRecrutedMessage.invitationState.")


class AllianceInvitationStateRecruterMessage(NetworkMessage):
    protocolId = 6396

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.recrutedName = ""
        self.invitationState = 0

    def getMessageId(self):
        return 6396

    def initAllianceInvitationStateRecruterMessage(self, param1="", param2=0):
        self.recrutedName = param1
        self.invitationState = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.recrutedName = ""
        self.invitationState = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceInvitationStateRecruterMessage(param1)

    def serializeAs_AllianceInvitationStateRecruterMessage(self, param1):
        param1.write_utf(self.recrutedName)
        param1.write_byte(self.invitationState)

    def deserialize(self, param1):
        self.deserializeAs_AllianceInvitationStateRecruterMessage(param1)

    def deserializeAs_AllianceInvitationStateRecruterMessage(self, param1):
        self._recrutedNameFunc(param1)
        self._invitationStateFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceInvitationStateRecruterMessage(param1)

    def deserializeAsyncAs_AllianceInvitationStateRecruterMessage(self, param1):
        param1.add_child(self._recrutedNameFunc)
        param1.add_child(self._invitationStateFunc)

    def _recrutedNameFunc(self, param1):
        self.recrutedName = param1.read_utf()

    def _invitationStateFunc(self, param1):
        self.invitationState = param1.read_byte()
        if self.invitationState < 0:
            raise RuntimeError("Forbidden value (" + str(self.invitationState) + ") on element of AllianceInvitationStateRecruterMessage.invitationState.")


class AllianceInvitedMessage(NetworkMessage):
    protocolId = 6397

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.recruterId = 0
        self.recruterName = ""
        self.allianceInfo = BasicNamedAllianceInformations()
        self._allianceInfotree = FuncTree()

    def getMessageId(self):
        return 6397

    def initAllianceInvitedMessage(self, param1=0, param2="", param3=None):
        self.recruterId = param1
        self.recruterName = param2
        self.allianceInfo = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.recruterId = 0
        self.recruterName = ""
        self.allianceInfo = BasicNamedAllianceInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceInvitedMessage(param1)

    def serializeAs_AllianceInvitedMessage(self, param1):
        if self.recruterId < 0 or self.recruterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.recruterId) + ") on element recruterId.")
        param1.write_var_long(self.recruterId)
        param1.write_utf(self.recruterName)
        self.allianceInfo.serializeAs_BasicNamedAllianceInformations(param1)

    def deserialize(self, param1):
        self.deserializeAs_AllianceInvitedMessage(param1)

    def deserializeAs_AllianceInvitedMessage(self, param1):
        self._recruterIdFunc(param1)
        self._recruterNameFunc(param1)
        self.allianceInfo = BasicNamedAllianceInformations()
        self.allianceInfo.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceInvitedMessage(param1)

    def deserializeAsyncAs_AllianceInvitedMessage(self, param1):
        param1.add_child(self._recruterIdFunc)
        param1.add_child(self._recruterNameFunc)
        self._allianceInfotree = param1.add_child(self._allianceInfotreeFunc)

    def _recruterIdFunc(self, param1):
        self.recruterId = param1.read_var_uh_long()
        if self.recruterId < 0 or self.recruterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.recruterId) + ") on element of AllianceInvitedMessage.recruterId.")

    def _recruterNameFunc(self, param1):
        self.recruterName = param1.read_utf()

    def _allianceInfotreeFunc(self, param1):
        self.allianceInfo = BasicNamedAllianceInformations()
        self.allianceInfo.deserializeAsync(self._allianceInfotree)


class AllianceJoinedMessage(NetworkMessage):
    protocolId = 6402

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.allianceInfo = AllianceInformations()
        self.enabled = False
        self.leadingGuildId = 0
        self._allianceInfotree = FuncTree()

    def getMessageId(self):
        return 6402

    def initAllianceJoinedMessage(self, param1=None, param2=False, param3=0):
        self.allianceInfo = param1
        self.enabled = param2
        self.leadingGuildId = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.allianceInfo = AllianceInformations()
        self.leadingGuildId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceJoinedMessage(param1)

    def serializeAs_AllianceJoinedMessage(self, param1):
        self.allianceInfo.serializeAs_AllianceInformations(param1)
        param1.write_boolean(self.enabled)
        if self.leadingGuildId < 0:
            raise RuntimeError("Forbidden value (" + str(self.leadingGuildId) + ") on element leadingGuildId.")
        param1.write_var_int(self.leadingGuildId)

    def deserialize(self, param1):
        self.deserializeAs_AllianceJoinedMessage(param1)

    def deserializeAs_AllianceJoinedMessage(self, param1):
        self.allianceInfo = AllianceInformations()
        self.allianceInfo.deserialize(param1)
        self._enabledFunc(param1)
        self._leadingGuildIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceJoinedMessage(param1)

    def deserializeAsyncAs_AllianceJoinedMessage(self, param1):
        self._allianceInfotree = param1.add_child(self._allianceInfotreeFunc)
        param1.add_child(self._enabledFunc)
        param1.add_child(self._leadingGuildIdFunc)

    def _allianceInfotreeFunc(self, param1):
        self.allianceInfo = AllianceInformations()
        self.allianceInfo.deserializeAsync(self._allianceInfotree)

    def _enabledFunc(self, param1):
        self.enabled = param1.read_boolean()

    def _leadingGuildIdFunc(self, param1):
        self.leadingGuildId = param1.read_var_uh_int()
        if self.leadingGuildId < 0:
            raise RuntimeError("Forbidden value (" + str(self.leadingGuildId) + ") on element of AllianceJoinedMessage.leadingGuildId.")


class AllianceKickRequestMessage(NetworkMessage):
    protocolId = 6400

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.kickedId = 0

    def getMessageId(self):
        return 6400

    def initAllianceKickRequestMessage(self, param1=0):
        self.kickedId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.kickedId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceKickRequestMessage(param1)

    def serializeAs_AllianceKickRequestMessage(self, param1):
        if self.kickedId < 0:
            raise RuntimeError("Forbidden value (" + str(self.kickedId) + ") on element kickedId.")
        param1.write_var_int(self.kickedId)

    def deserialize(self, param1):
        self.deserializeAs_AllianceKickRequestMessage(param1)

    def deserializeAs_AllianceKickRequestMessage(self, param1):
        self._kickedIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceKickRequestMessage(param1)

    def deserializeAsyncAs_AllianceKickRequestMessage(self, param1):
        param1.add_child(self._kickedIdFunc)

    def _kickedIdFunc(self, param1):
        self.kickedId = param1.read_var_uh_int()
        if self.kickedId < 0:
            raise RuntimeError("Forbidden value (" + str(self.kickedId) + ") on element of AllianceKickRequestMessage.kickedId.")


class AllianceLeftMessage(NetworkMessage):
    protocolId = 6398

    def getMessageId(self):
        return 6398

    def initAllianceLeftMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_AllianceLeftMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_AllianceLeftMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_AllianceLeftMessage(self, param1):
        pass


class AllianceListMessage(NetworkMessage):
    protocolId = 6408

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.alliances = []
        self._alliancestree = FuncTree()

    def getMessageId(self):
        return 6408

    def initAllianceListMessage(self, param1=[]):
        self.alliances = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.alliances = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceListMessage(param1)

    def serializeAs_AllianceListMessage(self, param1):
        param1.write_short(len(self.alliances))
        _loc2_ = 0
        while _loc2_ < len(self.alliances):
            as_parent(self.alliances[_loc2_], AllianceFactSheetInformations).serializeAs_AllianceFactSheetInformations(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_AllianceListMessage(param1)

    def deserializeAs_AllianceListMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = AllianceFactSheetInformations()
            _loc4_.deserialize(param1)
            self.alliances.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceListMessage(param1)

    def deserializeAsyncAs_AllianceListMessage(self, param1):
        self._alliancestree = param1.add_child(self._alliancestreeFunc)

    def _alliancestreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._alliancestree.add_child(self._alliancesFunc)
            _loc3_ += 1

    def _alliancesFunc(self, param1):
        _loc2_ = AllianceFactSheetInformations()
        _loc2_.deserialize(param1)
        self.alliances.append(_loc2_)


class AllianceModificationEmblemValidMessage(NetworkMessage):
    protocolId = 6447

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.Alliancemblem = GuildEmblem()
        self._Alliancemblemtree = FuncTree()

    def getMessageId(self):
        return 6447

    def initAllianceModificationEmblemValidMessage(self, param1=None):
        self.Alliancemblem = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.Alliancemblem = GuildEmblem()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceModificationEmblemValidMessage(param1)

    def serializeAs_AllianceModificationEmblemValidMessage(self, param1):
        self.Alliancemblem.serializeAs_GuildEmblem(param1)

    def deserialize(self, param1):
        self.deserializeAs_AllianceModificationEmblemValidMessage(param1)

    def deserializeAs_AllianceModificationEmblemValidMessage(self, param1):
        self.Alliancemblem = GuildEmblem()
        self.Alliancemblem.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceModificationEmblemValidMessage(param1)

    def deserializeAsyncAs_AllianceModificationEmblemValidMessage(self, param1):
        self._Alliancemblemtree = param1.add_child(self._AlliancemblemtreeFunc)

    def _AlliancemblemtreeFunc(self, param1):
        self.Alliancemblem = GuildEmblem()
        self.Alliancemblem.deserializeAsync(self._Alliancemblemtree)


class AllianceModificationNameAndTagValidMessage(NetworkMessage):
    protocolId = 6449

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.allianceName = ""
        self.allianceTag = ""

    def getMessageId(self):
        return 6449

    def initAllianceModificationNameAndTagValidMessage(self, param1="", param2=""):
        self.allianceName = param1
        self.allianceTag = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.allianceName = ""
        self.allianceTag = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceModificationNameAndTagValidMessage(param1)

    def serializeAs_AllianceModificationNameAndTagValidMessage(self, param1):
        param1.write_utf(self.allianceName)
        param1.write_utf(self.allianceTag)

    def deserialize(self, param1):
        self.deserializeAs_AllianceModificationNameAndTagValidMessage(param1)

    def deserializeAs_AllianceModificationNameAndTagValidMessage(self, param1):
        self._allianceNameFunc(param1)
        self._allianceTagFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceModificationNameAndTagValidMessage(param1)

    def deserializeAsyncAs_AllianceModificationNameAndTagValidMessage(self, param1):
        param1.add_child(self._allianceNameFunc)
        param1.add_child(self._allianceTagFunc)

    def _allianceNameFunc(self, param1):
        self.allianceName = param1.read_utf()

    def _allianceTagFunc(self, param1):
        self.allianceTag = param1.read_utf()


class AllianceModificationStartedMessage(NetworkMessage):
    protocolId = 6444

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.canChangeName = False
        self.canChangeTag = False
        self.canChangeEmblem = False

    def getMessageId(self):
        return 6444

    def initAllianceModificationStartedMessage(self, param1=False, param2=False, param3=False):
        self.canChangeName = param1
        self.canChangeTag = param2
        self.canChangeEmblem = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.canChangeName = False
        self.canChangeTag = False
        self.canChangeEmblem = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceModificationStartedMessage(param1)

    def serializeAs_AllianceModificationStartedMessage(self, param1):
        _loc2_ = 0
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,0,self.canChangeName)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,1,self.canChangeTag)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,2,self.canChangeEmblem)
        param1.write_byte(_loc2_)

    def deserialize(self, param1):
        self.deserializeAs_AllianceModificationStartedMessage(param1)

    def deserializeAs_AllianceModificationStartedMessage(self, param1):
        self.deserializeByteBoxes(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceModificationStartedMessage(param1)

    def deserializeAsyncAs_AllianceModificationStartedMessage(self, param1):
        param1.add_child(self.deserializeByteBoxes)

    def deserializeByteBoxes(self, param1):
        _loc2_ = param1.read_byte()
        self.canChangeName = BooleanByteWrapper.get_flag(_loc2_,0)
        self.canChangeTag = BooleanByteWrapper.get_flag(_loc2_,1)
        self.canChangeEmblem = BooleanByteWrapper.get_flag(_loc2_,2)


class AllianceModificationValidMessage(NetworkMessage):
    protocolId = 6450

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.allianceName = ""
        self.allianceTag = ""
        self.Alliancemblem = GuildEmblem()
        self._Alliancemblemtree = FuncTree()

    def getMessageId(self):
        return 6450

    def initAllianceModificationValidMessage(self, param1="", param2="", param3=None):
        self.allianceName = param1
        self.allianceTag = param2
        self.Alliancemblem = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.allianceName = ""
        self.allianceTag = ""
        self.Alliancemblem = GuildEmblem()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceModificationValidMessage(param1)

    def serializeAs_AllianceModificationValidMessage(self, param1):
        param1.write_utf(self.allianceName)
        param1.write_utf(self.allianceTag)
        self.Alliancemblem.serializeAs_GuildEmblem(param1)

    def deserialize(self, param1):
        self.deserializeAs_AllianceModificationValidMessage(param1)

    def deserializeAs_AllianceModificationValidMessage(self, param1):
        self._allianceNameFunc(param1)
        self._allianceTagFunc(param1)
        self.Alliancemblem = GuildEmblem()
        self.Alliancemblem.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceModificationValidMessage(param1)

    def deserializeAsyncAs_AllianceModificationValidMessage(self, param1):
        param1.add_child(self._allianceNameFunc)
        param1.add_child(self._allianceTagFunc)
        self._Alliancemblemtree = param1.add_child(self._AlliancemblemtreeFunc)

    def _allianceNameFunc(self, param1):
        self.allianceName = param1.read_utf()

    def _allianceTagFunc(self, param1):
        self.allianceTag = param1.read_utf()

    def _AlliancemblemtreeFunc(self, param1):
        self.Alliancemblem = GuildEmblem()
        self.Alliancemblem.deserializeAsync(self._Alliancemblemtree)


class AllianceVersatileInfoListMessage(NetworkMessage):
    protocolId = 6436

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.alliances = []
        self._alliancestree = FuncTree()

    def getMessageId(self):
        return 6436

    def initAllianceVersatileInfoListMessage(self, param1=[]):
        self.alliances = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.alliances = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceVersatileInfoListMessage(param1)

    def serializeAs_AllianceVersatileInfoListMessage(self, param1):
        param1.write_short(len(self.alliances))
        _loc2_ = 0
        while _loc2_ < len(self.alliances):
            as_parent(self.alliances[_loc2_], AllianceVersatileInformations).serializeAs_AllianceVersatileInformations(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_AllianceVersatileInfoListMessage(param1)

    def deserializeAs_AllianceVersatileInfoListMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = AllianceVersatileInformations()
            _loc4_.deserialize(param1)
            self.alliances.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceVersatileInfoListMessage(param1)

    def deserializeAsyncAs_AllianceVersatileInfoListMessage(self, param1):
        self._alliancestree = param1.add_child(self._alliancestreeFunc)

    def _alliancestreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._alliancestree.add_child(self._alliancesFunc)
            _loc3_ += 1

    def _alliancesFunc(self, param1):
        _loc2_ = AllianceVersatileInformations()
        _loc2_.deserialize(param1)
        self.alliances.append(_loc2_)


class KohUpdateMessage(NetworkMessage):
    protocolId = 6439

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.alliances = []
        self.allianceNbMembers = []
        self.allianceRoundWeigth = []
        self.allianceMatchScore = []
        self.allianceMapWinner = BasicAllianceInformations()
        self.allianceMapWinnerScore = 0
        self.allianceMapMyAllianceScore = 0
        self.nextTickTime = 0
        self._alliancestree = FuncTree()
        self._allianceNbMemberstree = FuncTree()
        self._allianceRoundWeigthtree = FuncTree()
        self._allianceMatchScoretree = FuncTree()
        self._allianceMapWinnertree = FuncTree()

    def getMessageId(self):
        return 6439

    def initKohUpdateMessage(self, param1=[], param2=[], param3=[], param4=[], param5=None, param6=0, param7=0, param8=0):
        self.alliances = param1
        self.allianceNbMembers = param2
        self.allianceRoundWeigth = param3
        self.allianceMatchScore = param4
        self.allianceMapWinner = param5
        self.allianceMapWinnerScore = param6
        self.allianceMapMyAllianceScore = param7
        self.nextTickTime = param8
        self._isInitialized = True
        return self

    def reset(self):
        self.alliances = []
        self.allianceNbMembers = []
        self.allianceRoundWeigth = []
        self.allianceMatchScore = []
        self.allianceMapWinner = BasicAllianceInformations()
        self.allianceMapMyAllianceScore = 0
        self.nextTickTime = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_KohUpdateMessage(param1)

    def serializeAs_KohUpdateMessage(self, param1):
        param1.write_short(len(self.alliances))
        _loc2_ = 0
        while _loc2_ < len(self.alliances):
            as_parent(self.alliances[_loc2_], AllianceInformations).serializeAs_AllianceInformations(param1)
            _loc2_ += 1
        param1.write_short(len(self.allianceNbMembers))
        _loc3_ = 0
        while _loc3_ < len(self.allianceNbMembers):
            if self.allianceNbMembers[_loc3_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.allianceNbMembers[_loc3_]) + ") on element 2 (starting at 1) of allianceNbMembers.")
            param1.write_var_short(self.allianceNbMembers[_loc3_])
            _loc3_ += 1
        param1.write_short(len(self.allianceRoundWeigth))
        _loc4_ = 0
        while _loc4_ < len(self.allianceRoundWeigth):
            if self.allianceRoundWeigth[_loc4_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.allianceRoundWeigth[_loc4_]) + ") on element 3 (starting at 1) of allianceRoundWeigth.")
            param1.write_var_int(self.allianceRoundWeigth[_loc4_])
            _loc4_ += 1
        param1.write_short(len(self.allianceMatchScore))
        _loc5_ = 0
        while _loc5_ < len(self.allianceMatchScore):
            if self.allianceMatchScore[_loc5_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.allianceMatchScore[_loc5_]) + ") on element 4 (starting at 1) of allianceMatchScore.")
            param1.write_byte(self.allianceMatchScore[_loc5_])
            _loc5_ += 1
        self.allianceMapWinner.serializeAs_BasicAllianceInformations(param1)
        if self.allianceMapWinnerScore < 0:
            raise RuntimeError("Forbidden value (" + str(self.allianceMapWinnerScore) + ") on element allianceMapWinnerScore.")
        param1.write_var_int(self.allianceMapWinnerScore)
        if self.allianceMapMyAllianceScore < 0:
            raise RuntimeError("Forbidden value (" + str(self.allianceMapMyAllianceScore) + ") on element allianceMapMyAllianceScore.")
        param1.write_var_int(self.allianceMapMyAllianceScore)
        if self.nextTickTime < 0 or self.nextTickTime > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.nextTickTime) + ") on element nextTickTime.")
        param1.write_double(self.nextTickTime)

    def deserialize(self, param1):
        self.deserializeAs_KohUpdateMessage(param1)

    def deserializeAs_KohUpdateMessage(self, param1):
        _loc10_ = None
        _loc11_ = 0
        _loc12_ = 0
        _loc13_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc10_ = AllianceInformations()
            _loc10_.deserialize(param1)
            self.alliances.append(_loc10_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc11_ = param1.read_var_uh_short()
            if _loc11_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc11_) + ") on elements of allianceNbMembers.")
            self.allianceNbMembers.append(_loc11_)
            _loc5_ += 1
        _loc6_ = param1.read_unsigned_short()
        _loc7_ = 0
        while _loc7_ < _loc6_:
            _loc12_ = param1.read_var_uh_int()
            if _loc12_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc12_) + ") on elements of allianceRoundWeigth.")
            self.allianceRoundWeigth.append(_loc12_)
            _loc7_ += 1
        _loc8_ = param1.read_unsigned_short()
        _loc9_ = 0
        while _loc9_ < _loc8_:
            _loc13_ = param1.read_byte()
            if _loc13_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc13_) + ") on elements of allianceMatchScore.")
            self.allianceMatchScore.append(_loc13_)
            _loc9_ += 1
        self.allianceMapWinner = BasicAllianceInformations()
        self.allianceMapWinner.deserialize(param1)
        self._allianceMapWinnerScoreFunc(param1)
        self._allianceMapMyAllianceScoreFunc(param1)
        self._nextTickTimeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_KohUpdateMessage(param1)

    def deserializeAsyncAs_KohUpdateMessage(self, param1):
        self._alliancestree = param1.add_child(self._alliancestreeFunc)
        self._allianceNbMemberstree = param1.add_child(self._allianceNbMemberstreeFunc)
        self._allianceRoundWeigthtree = param1.add_child(self._allianceRoundWeigthtreeFunc)
        self._allianceMatchScoretree = param1.add_child(self._allianceMatchScoretreeFunc)
        self._allianceMapWinnertree = param1.add_child(self._allianceMapWinnertreeFunc)
        param1.add_child(self._allianceMapWinnerScoreFunc)
        param1.add_child(self._allianceMapMyAllianceScoreFunc)
        param1.add_child(self._nextTickTimeFunc)

    def _alliancestreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._alliancestree.add_child(self._alliancesFunc)
            _loc3_ += 1

    def _alliancesFunc(self, param1):
        _loc2_ = AllianceInformations()
        _loc2_.deserialize(param1)
        self.alliances.append(_loc2_)

    def _allianceNbMemberstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._allianceNbMemberstree.add_child(self._allianceNbMembersFunc)
            _loc3_ += 1

    def _allianceNbMembersFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of allianceNbMembers.")
        self.allianceNbMembers.append(_loc2_)

    def _allianceRoundWeigthtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._allianceRoundWeigthtree.add_child(self._allianceRoundWeigthFunc)
            _loc3_ += 1

    def _allianceRoundWeigthFunc(self, param1):
        _loc2_ = param1.read_var_uh_int()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of allianceRoundWeigth.")
        self.allianceRoundWeigth.append(_loc2_)

    def _allianceMatchScoretreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._allianceMatchScoretree.add_child(self._allianceMatchScoreFunc)
            _loc3_ += 1

    def _allianceMatchScoreFunc(self, param1):
        _loc2_ = param1.read_byte()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of allianceMatchScore.")
        self.allianceMatchScore.append(_loc2_)

    def _allianceMapWinnertreeFunc(self, param1):
        self.allianceMapWinner = BasicAllianceInformations()
        self.allianceMapWinner.deserializeAsync(self._allianceMapWinnertree)

    def _allianceMapWinnerScoreFunc(self, param1):
        self.allianceMapWinnerScore = param1.read_var_uh_int()
        if self.allianceMapWinnerScore < 0:
            raise RuntimeError("Forbidden value (" + str(self.allianceMapWinnerScore) + ") on element of KohUpdateMessage.allianceMapWinnerScore.")

    def _allianceMapMyAllianceScoreFunc(self, param1):
        self.allianceMapMyAllianceScore = param1.read_var_uh_int()
        if self.allianceMapMyAllianceScore < 0:
            raise RuntimeError("Forbidden value (" + str(self.allianceMapMyAllianceScore) + ") on element of KohUpdateMessage.allianceMapMyAllianceScore.")

    def _nextTickTimeFunc(self, param1):
        self.nextTickTime = param1.read_double()
        if self.nextTickTime < 0 or self.nextTickTime > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.nextTickTime) + ") on element of KohUpdateMessage.nextTickTime.")


class AlmanachCalendarDateMessage(NetworkMessage):
    protocolId = 6341

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.date = 0

    def getMessageId(self):
        return 6341

    def initAlmanachCalendarDateMessage(self, param1=0):
        self.date = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.date = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AlmanachCalendarDateMessage(param1)

    def serializeAs_AlmanachCalendarDateMessage(self, param1):
        param1.write_int(self.date)

    def deserialize(self, param1):
        self.deserializeAs_AlmanachCalendarDateMessage(param1)

    def deserializeAs_AlmanachCalendarDateMessage(self, param1):
        self._dateFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AlmanachCalendarDateMessage(param1)

    def deserializeAsyncAs_AlmanachCalendarDateMessage(self, param1):
        param1.add_child(self._dateFunc)

    def _dateFunc(self, param1):
        self.date = param1.read_int()


class AccountCapabilitiesMessage(NetworkMessage):
    protocolId = 6216

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.accountId = 0
        self.tutorialAvailable = False
        self.breedsVisible = 0
        self.breedsAvailable = 0
        self.status = -1
        self.canCreateNewCharacter = False

    def getMessageId(self):
        return 6216

    def initAccountCapabilitiesMessage(self, param1=0, param2=False, param3=0, param4=0, param5=-1, param6=False):
        self.accountId = param1
        self.tutorialAvailable = param2
        self.breedsVisible = param3
        self.breedsAvailable = param4
        self.status = param5
        self.canCreateNewCharacter = param6
        self._isInitialized = True
        return self

    def reset(self):
        self.accountId = 0
        self.tutorialAvailable = False
        self.breedsVisible = 0
        self.breedsAvailable = 0
        self.status = -1
        self.canCreateNewCharacter = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AccountCapabilitiesMessage(param1)

    def serializeAs_AccountCapabilitiesMessage(self, param1):
        _loc2_ = 0
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,0,self.tutorialAvailable)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,1,self.canCreateNewCharacter)
        param1.write_byte(_loc2_)
        if self.accountId < 0:
            raise RuntimeError("Forbidden value (" + str(self.accountId) + ") on element accountId.")
        param1.write_int(self.accountId)
        if self.breedsVisible < 0:
            raise RuntimeError("Forbidden value (" + str(self.breedsVisible) + ") on element breedsVisible.")
        param1.write_var_int(self.breedsVisible)
        if self.breedsAvailable < 0:
            raise RuntimeError("Forbidden value (" + str(self.breedsAvailable) + ") on element breedsAvailable.")
        param1.write_var_int(self.breedsAvailable)
        param1.write_byte(self.status)

    def deserialize(self, param1):
        self.deserializeAs_AccountCapabilitiesMessage(param1)

    def deserializeAs_AccountCapabilitiesMessage(self, param1):
        self.deserializeByteBoxes(param1)
        self._accountIdFunc(param1)
        self._breedsVisibleFunc(param1)
        self._breedsAvailableFunc(param1)
        self._statusFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AccountCapabilitiesMessage(param1)

    def deserializeAsyncAs_AccountCapabilitiesMessage(self, param1):
        param1.add_child(self.deserializeByteBoxes)
        param1.add_child(self._accountIdFunc)
        param1.add_child(self._breedsVisibleFunc)
        param1.add_child(self._breedsAvailableFunc)
        param1.add_child(self._statusFunc)

    def deserializeByteBoxes(self, param1):
        _loc2_ = param1.read_byte()
        self.tutorialAvailable = BooleanByteWrapper.get_flag(_loc2_,0)
        self.canCreateNewCharacter = BooleanByteWrapper.get_flag(_loc2_,1)

    def _accountIdFunc(self, param1):
        self.accountId = param1.read_int()
        if self.accountId < 0:
            raise RuntimeError("Forbidden value (" + str(self.accountId) + ") on element of AccountCapabilitiesMessage.accountId.")

    def _breedsVisibleFunc(self, param1):
        self.breedsVisible = param1.read_var_uh_int()
        if self.breedsVisible < 0:
            raise RuntimeError("Forbidden value (" + str(self.breedsVisible) + ") on element of AccountCapabilitiesMessage.breedsVisible.")

    def _breedsAvailableFunc(self, param1):
        self.breedsAvailable = param1.read_var_uh_int()
        if self.breedsAvailable < 0:
            raise RuntimeError("Forbidden value (" + str(self.breedsAvailable) + ") on element of AccountCapabilitiesMessage.breedsAvailable.")

    def _statusFunc(self, param1):
        self.status = param1.read_byte()


class AccountLoggingKickedMessage(NetworkMessage):
    protocolId = 6029

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.days = 0
        self.hours = 0
        self.minutes = 0

    def getMessageId(self):
        return 6029

    def initAccountLoggingKickedMessage(self, param1=0, param2=0, param3=0):
        self.days = param1
        self.hours = param2
        self.minutes = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.days = 0
        self.hours = 0
        self.minutes = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AccountLoggingKickedMessage(param1)

    def serializeAs_AccountLoggingKickedMessage(self, param1):
        if self.days < 0:
            raise RuntimeError("Forbidden value (" + str(self.days) + ") on element days.")
        param1.write_var_short(self.days)
        if self.hours < 0:
            raise RuntimeError("Forbidden value (" + str(self.hours) + ") on element hours.")
        param1.write_byte(self.hours)
        if self.minutes < 0:
            raise RuntimeError("Forbidden value (" + str(self.minutes) + ") on element minutes.")
        param1.write_byte(self.minutes)

    def deserialize(self, param1):
        self.deserializeAs_AccountLoggingKickedMessage(param1)

    def deserializeAs_AccountLoggingKickedMessage(self, param1):
        self._daysFunc(param1)
        self._hoursFunc(param1)
        self._minutesFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AccountLoggingKickedMessage(param1)

    def deserializeAsyncAs_AccountLoggingKickedMessage(self, param1):
        param1.add_child(self._daysFunc)
        param1.add_child(self._hoursFunc)
        param1.add_child(self._minutesFunc)

    def _daysFunc(self, param1):
        self.days = param1.read_var_uh_short()
        if self.days < 0:
            raise RuntimeError("Forbidden value (" + str(self.days) + ") on element of AccountLoggingKickedMessage.days.")

    def _hoursFunc(self, param1):
        self.hours = param1.read_byte()
        if self.hours < 0:
            raise RuntimeError("Forbidden value (" + str(self.hours) + ") on element of AccountLoggingKickedMessage.hours.")

    def _minutesFunc(self, param1):
        self.minutes = param1.read_byte()
        if self.minutes < 0:
            raise RuntimeError("Forbidden value (" + str(self.minutes) + ") on element of AccountLoggingKickedMessage.minutes.")


class AlreadyConnectedMessage(NetworkMessage):
    protocolId = 109

    def getMessageId(self):
        return 109

    def initAlreadyConnectedMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_AlreadyConnectedMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_AlreadyConnectedMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_AlreadyConnectedMessage(self, param1):
        pass


class AuthenticationTicketAcceptedMessage(NetworkMessage):
    protocolId = 111

    def getMessageId(self):
        return 111

    def initAuthenticationTicketAcceptedMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_AuthenticationTicketAcceptedMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_AuthenticationTicketAcceptedMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_AuthenticationTicketAcceptedMessage(self, param1):
        pass


class AuthenticationTicketMessage(NetworkMessage):
    protocolId = 110

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.lang = ""
        self.ticket = ""

    def getMessageId(self):
        return 110

    def initAuthenticationTicketMessage(self, param1="", param2=""):
        self.lang = param1
        self.ticket = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.lang = ""
        self.ticket = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AuthenticationTicketMessage(param1)

    def serializeAs_AuthenticationTicketMessage(self, param1):
        param1.write_utf(self.lang)
        param1.write_utf(self.ticket)

    def deserialize(self, param1):
        self.deserializeAs_AuthenticationTicketMessage(param1)

    def deserializeAs_AuthenticationTicketMessage(self, param1):
        self._langFunc(param1)
        self._ticketFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AuthenticationTicketMessage(param1)

    def deserializeAsyncAs_AuthenticationTicketMessage(self, param1):
        param1.add_child(self._langFunc)
        param1.add_child(self._ticketFunc)

    def _langFunc(self, param1):
        self.lang = param1.read_utf()

    def _ticketFunc(self, param1):
        self.ticket = param1.read_utf()


class AuthenticationTicketRefusedMessage(NetworkMessage):
    protocolId = 112

    def getMessageId(self):
        return 112

    def initAuthenticationTicketRefusedMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_AuthenticationTicketRefusedMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_AuthenticationTicketRefusedMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_AuthenticationTicketRefusedMessage(self, param1):
        pass


class HelloGameMessage(NetworkMessage):
    protocolId = 101

    def getMessageId(self):
        return 101

    def initHelloGameMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_HelloGameMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_HelloGameMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_HelloGameMessage(self, param1):
        pass


class ReloginTokenRequestMessage(NetworkMessage):
    protocolId = 6540

    def getMessageId(self):
        return 6540

    def initReloginTokenRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_ReloginTokenRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_ReloginTokenRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_ReloginTokenRequestMessage(self, param1):
        pass


class ReloginTokenStatusMessage(NetworkMessage):
    protocolId = 6539

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.validToken = False
        self.ticket = []
        self._tickettree = FuncTree()

    def getMessageId(self):
        return 6539

    def initReloginTokenStatusMessage(self, param1=False, param2=[]):
        self.validToken = param1
        self.ticket = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.validToken = False
        self.ticket = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ReloginTokenStatusMessage(param1)

    def serializeAs_ReloginTokenStatusMessage(self, param1):
        param1.write_boolean(self.validToken)
        param1.write_var_int(len(self.ticket))
        _loc2_ = 0
        while _loc2_ < len(self.ticket):
            param1.write_byte(self.ticket[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ReloginTokenStatusMessage(param1)

    def deserializeAs_ReloginTokenStatusMessage(self, param1):
        _loc4_ = 0
        self._validTokenFunc(param1)
        _loc2_ = param1.read_var_int()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_byte()
            self.ticket.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ReloginTokenStatusMessage(param1)

    def deserializeAsyncAs_ReloginTokenStatusMessage(self, param1):
        param1.add_child(self._validTokenFunc)
        self._tickettree = param1.add_child(self._tickettreeFunc)

    def _validTokenFunc(self, param1):
        self.validToken = param1.read_boolean()

    def _tickettreeFunc(self, param1):
        _loc2_ = param1.read_var_int()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._tickettree.add_child(self._ticketFunc)
            _loc3_ += 1

    def _ticketFunc(self, param1):
        _loc2_ = param1.read_byte()
        self.ticket.append(_loc2_)


class ServerOptionalFeaturesMessage(NetworkMessage):
    protocolId = 6305

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.features = []
        self._featurestree = FuncTree()

    def getMessageId(self):
        return 6305

    def initServerOptionalFeaturesMessage(self, param1=[]):
        self.features = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.features = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ServerOptionalFeaturesMessage(param1)

    def serializeAs_ServerOptionalFeaturesMessage(self, param1):
        param1.write_short(len(self.features))
        _loc2_ = 0
        while _loc2_ < len(self.features):
            if self.features[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.features[_loc2_]) + ") on element 1 (starting at 1) of features.")
            param1.write_byte(self.features[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ServerOptionalFeaturesMessage(param1)

    def deserializeAs_ServerOptionalFeaturesMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_byte()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of features.")
            self.features.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ServerOptionalFeaturesMessage(param1)

    def deserializeAsyncAs_ServerOptionalFeaturesMessage(self, param1):
        self._featurestree = param1.add_child(self._featurestreeFunc)

    def _featurestreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._featurestree.add_child(self._featuresFunc)
            _loc3_ += 1

    def _featuresFunc(self, param1):
        _loc2_ = param1.read_byte()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of features.")
        self.features.append(_loc2_)


class ServerSessionConstantsMessage(NetworkMessage):
    protocolId = 6434

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.variables = []
        self._variablestree = FuncTree()

    def getMessageId(self):
        return 6434

    def initServerSessionConstantsMessage(self, param1=[]):
        self.variables = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.variables = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ServerSessionConstantsMessage(param1)

    def serializeAs_ServerSessionConstantsMessage(self, param1):
        param1.write_short(len(self.variables))
        _loc2_ = 0
        while _loc2_ < len(self.variables):
            param1.write_short(as_parent(self.variables[_loc2_], ServerSessionConstant).getTypeId())
            as_parent(self.variables[_loc2_], ServerSessionConstant).serialize(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ServerSessionConstantsMessage(param1)

    def deserializeAs_ServerSessionConstantsMessage(self, param1):
        _loc4_ = 0
        _loc5_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_unsigned_short()
            _loc5_ = ProtocolTypeManager.get_instance(ServerSessionConstant,_loc4_)
            _loc5_.deserialize(param1)
            self.variables.append(_loc5_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ServerSessionConstantsMessage(param1)

    def deserializeAsyncAs_ServerSessionConstantsMessage(self, param1):
        self._variablestree = param1.add_child(self._variablestreeFunc)

    def _variablestreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._variablestree.add_child(self._variablesFunc)
            _loc3_ += 1

    def _variablesFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(ServerSessionConstant,_loc2_)
        _loc3_.deserialize(param1)
        self.variables.append(_loc3_)


class ServerSettingsMessage(NetworkMessage):
    protocolId = 6340

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.lang = ""
        self.community = 0
        self.gameType = -1
        self.arenaLeaveBanTime = 0

    def getMessageId(self):
        return 6340

    def initServerSettingsMessage(self, param1="", param2=0, param3=-1, param4=0):
        self.lang = param1
        self.community = param2
        self.gameType = param3
        self.arenaLeaveBanTime = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.lang = ""
        self.community = 0
        self.gameType = -1
        self.arenaLeaveBanTime = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ServerSettingsMessage(param1)

    def serializeAs_ServerSettingsMessage(self, param1):
        param1.write_utf(self.lang)
        if self.community < 0:
            raise RuntimeError("Forbidden value (" + str(self.community) + ") on element community.")
        param1.write_byte(self.community)
        param1.write_byte(self.gameType)
        if self.arenaLeaveBanTime < 0:
            raise RuntimeError("Forbidden value (" + str(self.arenaLeaveBanTime) + ") on element arenaLeaveBanTime.")
        param1.write_var_short(self.arenaLeaveBanTime)

    def deserialize(self, param1):
        self.deserializeAs_ServerSettingsMessage(param1)

    def deserializeAs_ServerSettingsMessage(self, param1):
        self._langFunc(param1)
        self._communityFunc(param1)
        self._gameTypeFunc(param1)
        self._arenaLeaveBanTimeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ServerSettingsMessage(param1)

    def deserializeAsyncAs_ServerSettingsMessage(self, param1):
        param1.add_child(self._langFunc)
        param1.add_child(self._communityFunc)
        param1.add_child(self._gameTypeFunc)
        param1.add_child(self._arenaLeaveBanTimeFunc)

    def _langFunc(self, param1):
        self.lang = param1.read_utf()

    def _communityFunc(self, param1):
        self.community = param1.read_byte()
        if self.community < 0:
            raise RuntimeError("Forbidden value (" + str(self.community) + ") on element of ServerSettingsMessage.community.")

    def _gameTypeFunc(self, param1):
        self.gameType = param1.read_byte()

    def _arenaLeaveBanTimeFunc(self, param1):
        self.arenaLeaveBanTime = param1.read_var_uh_short()
        if self.arenaLeaveBanTime < 0:
            raise RuntimeError("Forbidden value (" + str(self.arenaLeaveBanTime) + ") on element of ServerSettingsMessage.arenaLeaveBanTime.")


class AtlasPointInformationsMessage(NetworkMessage):
    protocolId = 5956

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.type = AtlasPointsInformations()
        self._typetree = FuncTree()

    def getMessageId(self):
        return 5956

    def initAtlasPointInformationsMessage(self, param1=None):
        self.type = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.type = AtlasPointsInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AtlasPointInformationsMessage(param1)

    def serializeAs_AtlasPointInformationsMessage(self, param1):
        self.type.serializeAs_AtlasPointsInformations(param1)

    def deserialize(self, param1):
        self.deserializeAs_AtlasPointInformationsMessage(param1)

    def deserializeAs_AtlasPointInformationsMessage(self, param1):
        self.type = AtlasPointsInformations()
        self.type.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AtlasPointInformationsMessage(param1)

    def deserializeAsyncAs_AtlasPointInformationsMessage(self, param1):
        self._typetree = param1.add_child(self._typetreeFunc)

    def _typetreeFunc(self, param1):
        self.type = AtlasPointsInformations()
        self.type.deserializeAsync(self._typetree)


class CompassResetMessage(NetworkMessage):
    protocolId = 5584

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.type = 0

    def getMessageId(self):
        return 5584

    def initCompassResetMessage(self, param1=0):
        self.type = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.type = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CompassResetMessage(param1)

    def serializeAs_CompassResetMessage(self, param1):
        param1.write_byte(self.type)

    def deserialize(self, param1):
        self.deserializeAs_CompassResetMessage(param1)

    def deserializeAs_CompassResetMessage(self, param1):
        self._typeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CompassResetMessage(param1)

    def deserializeAsyncAs_CompassResetMessage(self, param1):
        param1.add_child(self._typeFunc)

    def _typeFunc(self, param1):
        self.type = param1.read_byte()
        if self.type < 0:
            raise RuntimeError("Forbidden value (" + str(self.type) + ") on element of CompassResetMessage.type.")


class CompassUpdateMessage(NetworkMessage):
    protocolId = 5591

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.type = 0
        self.coords = MapCoordinates()
        self._coordstree = FuncTree()

    def getMessageId(self):
        return 5591

    def initCompassUpdateMessage(self, param1=0, param2=None):
        self.type = param1
        self.coords = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.type = 0
        self.coords = MapCoordinates()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CompassUpdateMessage(param1)

    def serializeAs_CompassUpdateMessage(self, param1):
        param1.write_byte(self.type)
        param1.write_short(self.coords.getTypeId())
        self.coords.serialize(param1)

    def deserialize(self, param1):
        self.deserializeAs_CompassUpdateMessage(param1)

    def deserializeAs_CompassUpdateMessage(self, param1):
        self._typeFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        self.coords = ProtocolTypeManager.get_instance(MapCoordinates,_loc2_)
        self.coords.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CompassUpdateMessage(param1)

    def deserializeAsyncAs_CompassUpdateMessage(self, param1):
        param1.add_child(self._typeFunc)
        self._coordstree = param1.add_child(self._coordstreeFunc)

    def _typeFunc(self, param1):
        self.type = param1.read_byte()
        if self.type < 0:
            raise RuntimeError("Forbidden value (" + str(self.type) + ") on element of CompassUpdateMessage.type.")

    def _coordstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.coords = ProtocolTypeManager.get_instance(MapCoordinates,_loc2_)
        self.coords.deserializeAsync(self._coordstree)


class BasicAckMessage(NetworkMessage):
    protocolId = 6362

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.seq = 0
        self.lastPacketId = 0

    def getMessageId(self):
        return 6362

    def initBasicAckMessage(self, param1=0, param2=0):
        self.seq = param1
        self.lastPacketId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.seq = 0
        self.lastPacketId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_BasicAckMessage(param1)

    def serializeAs_BasicAckMessage(self, param1):
        if self.seq < 0:
            raise RuntimeError("Forbidden value (" + str(self.seq) + ") on element seq.")
        param1.write_var_int(self.seq)
        if self.lastPacketId < 0:
            raise RuntimeError("Forbidden value (" + str(self.lastPacketId) + ") on element lastPacketId.")
        param1.write_var_short(self.lastPacketId)

    def deserialize(self, param1):
        self.deserializeAs_BasicAckMessage(param1)

    def deserializeAs_BasicAckMessage(self, param1):
        self._seqFunc(param1)
        self._lastPacketIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_BasicAckMessage(param1)

    def deserializeAsyncAs_BasicAckMessage(self, param1):
        param1.add_child(self._seqFunc)
        param1.add_child(self._lastPacketIdFunc)

    def _seqFunc(self, param1):
        self.seq = param1.read_var_uh_int()
        if self.seq < 0:
            raise RuntimeError("Forbidden value (" + str(self.seq) + ") on element of BasicAckMessage.seq.")

    def _lastPacketIdFunc(self, param1):
        self.lastPacketId = param1.read_var_uh_short()
        if self.lastPacketId < 0:
            raise RuntimeError("Forbidden value (" + str(self.lastPacketId) + ") on element of BasicAckMessage.lastPacketId.")


class BasicDateMessage(NetworkMessage):
    protocolId = 177

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.day = 0
        self.month = 0
        self.year = 0

    def getMessageId(self):
        return 177

    def initBasicDateMessage(self, param1=0, param2=0, param3=0):
        self.day = param1
        self.month = param2
        self.year = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.day = 0
        self.month = 0
        self.year = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_BasicDateMessage(param1)

    def serializeAs_BasicDateMessage(self, param1):
        if self.day < 0:
            raise RuntimeError("Forbidden value (" + str(self.day) + ") on element day.")
        param1.write_byte(self.day)
        if self.month < 0:
            raise RuntimeError("Forbidden value (" + str(self.month) + ") on element month.")
        param1.write_byte(self.month)
        if self.year < 0:
            raise RuntimeError("Forbidden value (" + str(self.year) + ") on element year.")
        param1.write_short(self.year)

    def deserialize(self, param1):
        self.deserializeAs_BasicDateMessage(param1)

    def deserializeAs_BasicDateMessage(self, param1):
        self._dayFunc(param1)
        self._monthFunc(param1)
        self._yearFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_BasicDateMessage(param1)

    def deserializeAsyncAs_BasicDateMessage(self, param1):
        param1.add_child(self._dayFunc)
        param1.add_child(self._monthFunc)
        param1.add_child(self._yearFunc)

    def _dayFunc(self, param1):
        self.day = param1.read_byte()
        if self.day < 0:
            raise RuntimeError("Forbidden value (" + str(self.day) + ") on element of BasicDateMessage.day.")

    def _monthFunc(self, param1):
        self.month = param1.read_byte()
        if self.month < 0:
            raise RuntimeError("Forbidden value (" + str(self.month) + ") on element of BasicDateMessage.month.")

    def _yearFunc(self, param1):
        self.year = param1.read_short()
        if self.year < 0:
            raise RuntimeError("Forbidden value (" + str(self.year) + ") on element of BasicDateMessage.year.")


class BasicLatencyStatsMessage(NetworkMessage):
    protocolId = 5663

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.latency = 0
        self.sampleCount = 0
        self.max = 0

    def getMessageId(self):
        return 5663

    def initBasicLatencyStatsMessage(self, param1=0, param2=0, param3=0):
        self.latency = param1
        self.sampleCount = param2
        self.max = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.latency = 0
        self.sampleCount = 0
        self.max = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        if HASH_FUNCTION != None:
            HASH_FUNCTION(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_BasicLatencyStatsMessage(param1)

    def serializeAs_BasicLatencyStatsMessage(self, param1):
        if self.latency < 0 or self.latency > 65535:
            raise RuntimeError("Forbidden value (" + str(self.latency) + ") on element latency.")
        param1.write_short(self.latency)
        if self.sampleCount < 0:
            raise RuntimeError("Forbidden value (" + str(self.sampleCount) + ") on element sampleCount.")
        param1.write_var_short(self.sampleCount)
        if self.max < 0:
            raise RuntimeError("Forbidden value (" + str(self.max) + ") on element max.")
        param1.write_var_short(self.max)

    def deserialize(self, param1):
        self.deserializeAs_BasicLatencyStatsMessage(param1)

    def deserializeAs_BasicLatencyStatsMessage(self, param1):
        self._latencyFunc(param1)
        self._sampleCountFunc(param1)
        self._maxFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_BasicLatencyStatsMessage(param1)

    def deserializeAsyncAs_BasicLatencyStatsMessage(self, param1):
        param1.add_child(self._latencyFunc)
        param1.add_child(self._sampleCountFunc)
        param1.add_child(self._maxFunc)

    def _latencyFunc(self, param1):
        self.latency = param1.read_unsigned_short()
        if self.latency < 0 or self.latency > 65535:
            raise RuntimeError("Forbidden value (" + str(self.latency) + ") on element of BasicLatencyStatsMessage.latency.")

    def _sampleCountFunc(self, param1):
        self.sampleCount = param1.read_var_uh_short()
        if self.sampleCount < 0:
            raise RuntimeError("Forbidden value (" + str(self.sampleCount) + ") on element of BasicLatencyStatsMessage.sampleCount.")

    def _maxFunc(self, param1):
        self.max = param1.read_var_uh_short()
        if self.max < 0:
            raise RuntimeError("Forbidden value (" + str(self.max) + ") on element of BasicLatencyStatsMessage.max.")


class BasicLatencyStatsRequestMessage(NetworkMessage):
    protocolId = 5816

    def getMessageId(self):
        return 5816

    def initBasicLatencyStatsRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_BasicLatencyStatsRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_BasicLatencyStatsRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_BasicLatencyStatsRequestMessage(self, param1):
        pass


class BasicNoOperationMessage(NetworkMessage):
    protocolId = 176

    def getMessageId(self):
        return 176

    def initBasicNoOperationMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_BasicNoOperationMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_BasicNoOperationMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_BasicNoOperationMessage(self, param1):
        pass


class BasicTimeMessage(NetworkMessage):
    protocolId = 175

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.timestamp = 0
        self.timezoneOffset = 0

    def getMessageId(self):
        return 175

    def initBasicTimeMessage(self, param1=0, param2=0):
        self.timestamp = param1
        self.timezoneOffset = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.timestamp = 0
        self.timezoneOffset = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_BasicTimeMessage(param1)

    def serializeAs_BasicTimeMessage(self, param1):
        if self.timestamp < 0 or self.timestamp > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.timestamp) + ") on element timestamp.")
        param1.write_double(self.timestamp)
        param1.write_short(self.timezoneOffset)

    def deserialize(self, param1):
        self.deserializeAs_BasicTimeMessage(param1)

    def deserializeAs_BasicTimeMessage(self, param1):
        self._timestampFunc(param1)
        self._timezoneOffsetFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_BasicTimeMessage(param1)

    def deserializeAsyncAs_BasicTimeMessage(self, param1):
        param1.add_child(self._timestampFunc)
        param1.add_child(self._timezoneOffsetFunc)

    def _timestampFunc(self, param1):
        self.timestamp = param1.read_double()
        if self.timestamp < 0 or self.timestamp > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.timestamp) + ") on element of BasicTimeMessage.timestamp.")

    def _timezoneOffsetFunc(self, param1):
        self.timezoneOffset = param1.read_short()


class BasicWhoAmIRequestMessage(NetworkMessage):
    protocolId = 5664

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.verbose = False

    def getMessageId(self):
        return 5664

    def initBasicWhoAmIRequestMessage(self, param1=False):
        self.verbose = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.verbose = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_BasicWhoAmIRequestMessage(param1)

    def serializeAs_BasicWhoAmIRequestMessage(self, param1):
        param1.write_boolean(self.verbose)

    def deserialize(self, param1):
        self.deserializeAs_BasicWhoAmIRequestMessage(param1)

    def deserializeAs_BasicWhoAmIRequestMessage(self, param1):
        self._verboseFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_BasicWhoAmIRequestMessage(param1)

    def deserializeAsyncAs_BasicWhoAmIRequestMessage(self, param1):
        param1.add_child(self._verboseFunc)

    def _verboseFunc(self, param1):
        self.verbose = param1.read_boolean()


class BasicWhoIsMessage(NetworkMessage):
    protocolId = 180

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.self = False
        self.position = -1
        self.accountNickname = ""
        self.accountId = 0
        self.playerName = ""
        self.playerId = 0
        self.areaId = 0
        self.serverId = 0
        self.originServerId = 0
        self.socialGroups = []
        self.verbose = False
        self.playerState = 99
        self._socialGroupstree = FuncTree()

    def getMessageId(self):
        return 180

    def initBasicWhoIsMessage(self, param1=False, param2=-1, param3="", param4=0, param5="", param6=0, param7=0, param8=0, param9=0, param10=[], param11=False, param12=99):
        self.self = param1
        self.position = param2
        self.accountNickname = param3
        self.accountId = param4
        self.playerName = param5
        self.playerId = param6
        self.areaId = param7
        self.serverId = param8
        self.originServerId = param9
        self.socialGroups = param10
        self.verbose = param11
        self.playerState = param12
        self._isInitialized = True
        return self

    def reset(self):
        self.self = False
        self.position = -1
        self.accountNickname = ""
        self.accountId = 0
        self.playerName = ""
        self.playerId = 0
        self.areaId = 0
        self.serverId = 0
        self.originServerId = 0
        self.socialGroups = []
        self.verbose = False
        self.playerState = 99
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_BasicWhoIsMessage(param1)

    def serializeAs_BasicWhoIsMessage(self, param1):
        _loc2_ = 0
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,0,self.self)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,1,self.verbose)
        param1.write_byte(_loc2_)
        param1.write_byte(self.position)
        param1.write_utf(self.accountNickname)
        if self.accountId < 0:
            raise RuntimeError("Forbidden value (" + str(self.accountId) + ") on element accountId.")
        param1.write_int(self.accountId)
        param1.write_utf(self.playerName)
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element playerId.")
        param1.write_var_long(self.playerId)
        param1.write_short(self.areaId)
        param1.write_short(self.serverId)
        param1.write_short(self.originServerId)
        param1.write_short(len(self.socialGroups))
        _loc3_ = 0
        while _loc3_ < len(self.socialGroups):
            param1.write_short(as_parent(self.socialGroups[_loc3_], AbstractSocialGroupInfos).getTypeId())
            as_parent(self.socialGroups[_loc3_], AbstractSocialGroupInfos).serialize(param1)
            _loc3_ += 1
        param1.write_byte(self.playerState)

    def deserialize(self, param1):
        self.deserializeAs_BasicWhoIsMessage(param1)

    def deserializeAs_BasicWhoIsMessage(self, param1):
        _loc4_ = 0
        _loc5_ = None
        self.deserializeByteBoxes(param1)
        self._positionFunc(param1)
        self._accountNicknameFunc(param1)
        self._accountIdFunc(param1)
        self._playerNameFunc(param1)
        self._playerIdFunc(param1)
        self._areaIdFunc(param1)
        self._serverIdFunc(param1)
        self._originServerIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_unsigned_short()
            _loc5_ = ProtocolTypeManager.get_instance(AbstractSocialGroupInfos,_loc4_)
            _loc5_.deserialize(param1)
            self.socialGroups.append(_loc5_)
            _loc3_ += 1
        self._playerStateFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_BasicWhoIsMessage(param1)

    def deserializeAsyncAs_BasicWhoIsMessage(self, param1):
        param1.add_child(self.deserializeByteBoxes)
        param1.add_child(self._positionFunc)
        param1.add_child(self._accountNicknameFunc)
        param1.add_child(self._accountIdFunc)
        param1.add_child(self._playerNameFunc)
        param1.add_child(self._playerIdFunc)
        param1.add_child(self._areaIdFunc)
        param1.add_child(self._serverIdFunc)
        param1.add_child(self._originServerIdFunc)
        self._socialGroupstree = param1.add_child(self._socialGroupstreeFunc)
        param1.add_child(self._playerStateFunc)

    def deserializeByteBoxes(self, param1):
        _loc2_ = param1.read_byte()
        self.self = BooleanByteWrapper.get_flag(_loc2_,0)
        self.verbose = BooleanByteWrapper.get_flag(_loc2_,1)

    def _positionFunc(self, param1):
        self.position = param1.read_byte()

    def _accountNicknameFunc(self, param1):
        self.accountNickname = param1.read_utf()

    def _accountIdFunc(self, param1):
        self.accountId = param1.read_int()
        if self.accountId < 0:
            raise RuntimeError("Forbidden value (" + str(self.accountId) + ") on element of BasicWhoIsMessage.accountId.")

    def _playerNameFunc(self, param1):
        self.playerName = param1.read_utf()

    def _playerIdFunc(self, param1):
        self.playerId = param1.read_var_uh_long()
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element of BasicWhoIsMessage.playerId.")

    def _areaIdFunc(self, param1):
        self.areaId = param1.read_short()

    def _serverIdFunc(self, param1):
        self.serverId = param1.read_short()

    def _originServerIdFunc(self, param1):
        self.originServerId = param1.read_short()

    def _socialGroupstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._socialGroupstree.add_child(self._socialGroupsFunc)
            _loc3_ += 1

    def _socialGroupsFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(AbstractSocialGroupInfos,_loc2_)
        _loc3_.deserialize(param1)
        self.socialGroups.append(_loc3_)

    def _playerStateFunc(self, param1):
        self.playerState = param1.read_byte()
        if self.playerState < 0:
            raise RuntimeError("Forbidden value (" + str(self.playerState) + ") on element of BasicWhoIsMessage.playerState.")


class BasicWhoIsNoMatchMessage(NetworkMessage):
    protocolId = 179

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.search = ""

    def getMessageId(self):
        return 179

    def initBasicWhoIsNoMatchMessage(self, param1=""):
        self.search = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.search = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_BasicWhoIsNoMatchMessage(param1)

    def serializeAs_BasicWhoIsNoMatchMessage(self, param1):
        param1.write_utf(self.search)

    def deserialize(self, param1):
        self.deserializeAs_BasicWhoIsNoMatchMessage(param1)

    def deserializeAs_BasicWhoIsNoMatchMessage(self, param1):
        self._searchFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_BasicWhoIsNoMatchMessage(param1)

    def deserializeAsyncAs_BasicWhoIsNoMatchMessage(self, param1):
        param1.add_child(self._searchFunc)

    def _searchFunc(self, param1):
        self.search = param1.read_utf()


class BasicWhoIsRequestMessage(NetworkMessage):
    protocolId = 181

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.verbose = False
        self.search = ""

    def getMessageId(self):
        return 181

    def initBasicWhoIsRequestMessage(self, param1=False, param2=""):
        self.verbose = param1
        self.search = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.verbose = False
        self.search = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_BasicWhoIsRequestMessage(param1)

    def serializeAs_BasicWhoIsRequestMessage(self, param1):
        param1.write_boolean(self.verbose)
        param1.write_utf(self.search)

    def deserialize(self, param1):
        self.deserializeAs_BasicWhoIsRequestMessage(param1)

    def deserializeAs_BasicWhoIsRequestMessage(self, param1):
        self._verboseFunc(param1)
        self._searchFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_BasicWhoIsRequestMessage(param1)

    def deserializeAsyncAs_BasicWhoIsRequestMessage(self, param1):
        param1.add_child(self._verboseFunc)
        param1.add_child(self._searchFunc)

    def _verboseFunc(self, param1):
        self.verbose = param1.read_boolean()

    def _searchFunc(self, param1):
        self.search = param1.read_utf()


class CurrentServerStatusUpdateMessage(NetworkMessage):
    protocolId = 6525

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.status = 1

    def getMessageId(self):
        return 6525

    def initCurrentServerStatusUpdateMessage(self, param1=1):
        self.status = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.status = 1
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CurrentServerStatusUpdateMessage(param1)

    def serializeAs_CurrentServerStatusUpdateMessage(self, param1):
        param1.write_byte(self.status)

    def deserialize(self, param1):
        self.deserializeAs_CurrentServerStatusUpdateMessage(param1)

    def deserializeAs_CurrentServerStatusUpdateMessage(self, param1):
        self._statusFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CurrentServerStatusUpdateMessage(param1)

    def deserializeAsyncAs_CurrentServerStatusUpdateMessage(self, param1):
        param1.add_child(self._statusFunc)

    def _statusFunc(self, param1):
        self.status = param1.read_byte()
        if self.status < 0:
            raise RuntimeError("Forbidden value (" + str(self.status) + ") on element of CurrentServerStatusUpdateMessage.status.")


class NumericWhoIsMessage(NetworkMessage):
    protocolId = 6297

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.playerId = 0
        self.accountId = 0

    def getMessageId(self):
        return 6297

    def initNumericWhoIsMessage(self, param1=0, param2=0):
        self.playerId = param1
        self.accountId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.playerId = 0
        self.accountId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_NumericWhoIsMessage(param1)

    def serializeAs_NumericWhoIsMessage(self, param1):
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element playerId.")
        param1.write_var_long(self.playerId)
        if self.accountId < 0:
            raise RuntimeError("Forbidden value (" + str(self.accountId) + ") on element accountId.")
        param1.write_int(self.accountId)

    def deserialize(self, param1):
        self.deserializeAs_NumericWhoIsMessage(param1)

    def deserializeAs_NumericWhoIsMessage(self, param1):
        self._playerIdFunc(param1)
        self._accountIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_NumericWhoIsMessage(param1)

    def deserializeAsyncAs_NumericWhoIsMessage(self, param1):
        param1.add_child(self._playerIdFunc)
        param1.add_child(self._accountIdFunc)

    def _playerIdFunc(self, param1):
        self.playerId = param1.read_var_uh_long()
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element of NumericWhoIsMessage.playerId.")

    def _accountIdFunc(self, param1):
        self.accountId = param1.read_int()
        if self.accountId < 0:
            raise RuntimeError("Forbidden value (" + str(self.accountId) + ") on element of NumericWhoIsMessage.accountId.")


class NumericWhoIsRequestMessage(NetworkMessage):
    protocolId = 6298

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.playerId = 0

    def getMessageId(self):
        return 6298

    def initNumericWhoIsRequestMessage(self, param1=0):
        self.playerId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.playerId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_NumericWhoIsRequestMessage(param1)

    def serializeAs_NumericWhoIsRequestMessage(self, param1):
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element playerId.")
        param1.write_var_long(self.playerId)

    def deserialize(self, param1):
        self.deserializeAs_NumericWhoIsRequestMessage(param1)

    def deserializeAs_NumericWhoIsRequestMessage(self, param1):
        self._playerIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_NumericWhoIsRequestMessage(param1)

    def deserializeAsyncAs_NumericWhoIsRequestMessage(self, param1):
        param1.add_child(self._playerIdFunc)

    def _playerIdFunc(self, param1):
        self.playerId = param1.read_var_uh_long()
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element of NumericWhoIsRequestMessage.playerId.")


class SequenceNumberMessage(NetworkMessage):
    protocolId = 6317

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.number = 0

    def getMessageId(self):
        return 6317

    def initSequenceNumberMessage(self, param1=0):
        self.number = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.number = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SequenceNumberMessage(param1)

    def serializeAs_SequenceNumberMessage(self, param1):
        if self.number < 0 or self.number > 65535:
            raise RuntimeError("Forbidden value (" + str(self.number) + ") on element number.")
        param1.write_short(self.number)

    def deserialize(self, param1):
        self.deserializeAs_SequenceNumberMessage(param1)

    def deserializeAs_SequenceNumberMessage(self, param1):
        self._numberFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SequenceNumberMessage(param1)

    def deserializeAsyncAs_SequenceNumberMessage(self, param1):
        param1.add_child(self._numberFunc)

    def _numberFunc(self, param1):
        self.number = param1.read_unsigned_short()
        if self.number < 0 or self.number > 65535:
            raise RuntimeError("Forbidden value (" + str(self.number) + ") on element of SequenceNumberMessage.number.")


class SequenceNumberRequestMessage(NetworkMessage):
    protocolId = 6316

    def getMessageId(self):
        return 6316

    def initSequenceNumberRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_SequenceNumberRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_SequenceNumberRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_SequenceNumberRequestMessage(self, param1):
        pass


class TextInformationMessage(NetworkMessage):
    protocolId = 780

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.msgType = 0
        self.msgId = 0
        self.parameters = []
        self._parameterstree = FuncTree()

    def getMessageId(self):
        return 780

    def initTextInformationMessage(self, param1=0, param2=0, param3=[]):
        self.msgType = param1
        self.msgId = param2
        self.parameters = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.msgType = 0
        self.msgId = 0
        self.parameters = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TextInformationMessage(param1)

    def serializeAs_TextInformationMessage(self, param1):
        param1.write_byte(self.msgType)
        if self.msgId < 0:
            raise RuntimeError("Forbidden value (" + str(self.msgId) + ") on element msgId.")
        param1.write_var_short(self.msgId)
        param1.write_short(len(self.parameters))
        _loc2_ = 0
        while _loc2_ < len(self.parameters):
            param1.write_utf(self.parameters[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_TextInformationMessage(param1)

    def deserializeAs_TextInformationMessage(self, param1):
        _loc4_ = None
        self._msgTypeFunc(param1)
        self._msgIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_utf()
            self.parameters.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TextInformationMessage(param1)

    def deserializeAsyncAs_TextInformationMessage(self, param1):
        param1.add_child(self._msgTypeFunc)
        param1.add_child(self._msgIdFunc)
        self._parameterstree = param1.add_child(self._parameterstreeFunc)

    def _msgTypeFunc(self, param1):
        self.msgType = param1.read_byte()
        if self.msgType < 0:
            raise RuntimeError("Forbidden value (" + str(self.msgType) + ") on element of TextInformationMessage.msgType.")

    def _msgIdFunc(self, param1):
        self.msgId = param1.read_var_uh_short()
        if self.msgId < 0:
            raise RuntimeError("Forbidden value (" + str(self.msgId) + ") on element of TextInformationMessage.msgId.")

    def _parameterstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._parameterstree.add_child(self._parametersFunc)
            _loc3_ += 1

    def _parametersFunc(self, param1):
        _loc2_ = param1.read_utf()
        self.parameters.append(_loc2_)


class BasicCharactersListMessage(NetworkMessage):
    protocolId = 6475

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.characters = []
        self._characterstree = FuncTree()

    def getMessageId(self):
        return 6475

    def initBasicCharactersListMessage(self, param1=[]):
        self.characters = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.characters = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_BasicCharactersListMessage(param1)

    def serializeAs_BasicCharactersListMessage(self, param1):
        param1.write_short(len(self.characters))
        _loc2_ = 0
        while _loc2_ < len(self.characters):
            param1.write_short(as_parent(self.characters[_loc2_], CharacterBaseInformations).getTypeId())
            as_parent(self.characters[_loc2_], CharacterBaseInformations).serialize(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_BasicCharactersListMessage(param1)

    def deserializeAs_BasicCharactersListMessage(self, param1):
        _loc4_ = 0
        _loc5_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_unsigned_short()
            _loc5_ = ProtocolTypeManager.get_instance(CharacterBaseInformations,_loc4_)
            _loc5_.deserialize(param1)
            self.characters.append(_loc5_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_BasicCharactersListMessage(param1)

    def deserializeAsyncAs_BasicCharactersListMessage(self, param1):
        self._characterstree = param1.add_child(self._characterstreeFunc)

    def _characterstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._characterstree.add_child(self._charactersFunc)
            _loc3_ += 1

    def _charactersFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(CharacterBaseInformations,_loc2_)
        _loc3_.deserialize(param1)
        self.characters.append(_loc3_)


class CharacterSelectedErrorMessage(NetworkMessage):
    protocolId = 5836

    def getMessageId(self):
        return 5836

    def initCharacterSelectedErrorMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_CharacterSelectedErrorMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_CharacterSelectedErrorMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_CharacterSelectedErrorMessage(self, param1):
        pass


class CharacterSelectedForceMessage(NetworkMessage):
    protocolId = 6068

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.id = 0

    def getMessageId(self):
        return 6068

    def initCharacterSelectedForceMessage(self, param1=0):
        self.id = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.id = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CharacterSelectedForceMessage(param1)

    def serializeAs_CharacterSelectedForceMessage(self, param1):
        if self.id < 1 or self.id > 2147483647:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element id.")
        param1.write_int(self.id)

    def deserialize(self, param1):
        self.deserializeAs_CharacterSelectedForceMessage(param1)

    def deserializeAs_CharacterSelectedForceMessage(self, param1):
        self._idFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CharacterSelectedForceMessage(param1)

    def deserializeAsyncAs_CharacterSelectedForceMessage(self, param1):
        param1.add_child(self._idFunc)

    def _idFunc(self, param1):
        self.id = param1.read_int()
        if self.id < 1 or self.id > 2147483647:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element of CharacterSelectedForceMessage.id.")


class CharacterSelectedForceReadyMessage(NetworkMessage):
    protocolId = 6072

    def getMessageId(self):
        return 6072

    def initCharacterSelectedForceReadyMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_CharacterSelectedForceReadyMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_CharacterSelectedForceReadyMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_CharacterSelectedForceReadyMessage(self, param1):
        pass


class CharacterSelectedSuccessMessage(NetworkMessage):
    protocolId = 153

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.infos = CharacterBaseInformations()
        self.isCollectingStats = False
        self._infostree = FuncTree()

    def getMessageId(self):
        return 153

    def initCharacterSelectedSuccessMessage(self, param1=None, param2=False):
        self.infos = param1
        self.isCollectingStats = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.infos = CharacterBaseInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CharacterSelectedSuccessMessage(param1)

    def serializeAs_CharacterSelectedSuccessMessage(self, param1):
        self.infos.serializeAs_CharacterBaseInformations(param1)
        param1.write_boolean(self.isCollectingStats)

    def deserialize(self, param1):
        self.deserializeAs_CharacterSelectedSuccessMessage(param1)

    def deserializeAs_CharacterSelectedSuccessMessage(self, param1):
        self.infos = CharacterBaseInformations()
        self.infos.deserialize(param1)
        self._isCollectingStatsFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CharacterSelectedSuccessMessage(param1)

    def deserializeAsyncAs_CharacterSelectedSuccessMessage(self, param1):
        self._infostree = param1.add_child(self._infostreeFunc)
        param1.add_child(self._isCollectingStatsFunc)

    def _infostreeFunc(self, param1):
        self.infos = CharacterBaseInformations()
        self.infos.deserializeAsync(self._infostree)

    def _isCollectingStatsFunc(self, param1):
        self.isCollectingStats = param1.read_boolean()


class CharacterSelectionMessage(NetworkMessage):
    protocolId = 152

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.id = 0

    def getMessageId(self):
        return 152

    def initCharacterSelectionMessage(self, param1=0):
        self.id = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.id = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CharacterSelectionMessage(param1)

    def serializeAs_CharacterSelectionMessage(self, param1):
        if self.id < 0 or self.id > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element id.")
        param1.write_var_long(self.id)

    def deserialize(self, param1):
        self.deserializeAs_CharacterSelectionMessage(param1)

    def deserializeAs_CharacterSelectionMessage(self, param1):
        self._idFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CharacterSelectionMessage(param1)

    def deserializeAsyncAs_CharacterSelectionMessage(self, param1):
        param1.add_child(self._idFunc)

    def _idFunc(self, param1):
        self.id = param1.read_var_uh_long()
        if self.id < 0 or self.id > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element of CharacterSelectionMessage.id.")


class CharactersListErrorMessage(NetworkMessage):
    protocolId = 5545

    def getMessageId(self):
        return 5545

    def initCharactersListErrorMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_CharactersListErrorMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_CharactersListErrorMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_CharactersListErrorMessage(self, param1):
        pass


class CharactersListRequestMessage(NetworkMessage):
    protocolId = 150

    def getMessageId(self):
        return 150

    def initCharactersListRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_CharactersListRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_CharactersListRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_CharactersListRequestMessage(self, param1):
        pass


class CharacterCanBeCreatedRequestMessage(NetworkMessage):
    protocolId = 6732

    def getMessageId(self):
        return 6732

    def initCharacterCanBeCreatedRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_CharacterCanBeCreatedRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_CharacterCanBeCreatedRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_CharacterCanBeCreatedRequestMessage(self, param1):
        pass


class CharacterCanBeCreatedResultMessage(NetworkMessage):
    protocolId = 6733

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.yesYouCan = False

    def getMessageId(self):
        return 6733

    def initCharacterCanBeCreatedResultMessage(self, param1=False):
        self.yesYouCan = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.yesYouCan = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CharacterCanBeCreatedResultMessage(param1)

    def serializeAs_CharacterCanBeCreatedResultMessage(self, param1):
        param1.write_boolean(self.yesYouCan)

    def deserialize(self, param1):
        self.deserializeAs_CharacterCanBeCreatedResultMessage(param1)

    def deserializeAs_CharacterCanBeCreatedResultMessage(self, param1):
        self._yesYouCanFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CharacterCanBeCreatedResultMessage(param1)

    def deserializeAsyncAs_CharacterCanBeCreatedResultMessage(self, param1):
        param1.add_child(self._yesYouCanFunc)

    def _yesYouCanFunc(self, param1):
        self.yesYouCan = param1.read_boolean()


class CharacterCreationRequestMessage(NetworkMessage):
    protocolId = 160

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.name = ""
        self.breed = 0
        self.sex = False
        self.colors = []
        self.cosmeticId = 0
        self._colorstree = FuncTree()
        self._colorsindex = 0

    def getMessageId(self):
        return 160

    def initCharacterCreationRequestMessage(self, param1="", param2=0, param3=False, param4=[], param5=0):
        self.name = param1
        self.breed = param2
        self.sex = param3
        self.colors = param4
        self.cosmeticId = param5
        self._isInitialized = True
        return self

    def reset(self):
        self.name = ""
        self.breed = 0
        self.sex = False
        self.colors = []
        self.cosmeticId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CharacterCreationRequestMessage(param1)

    def serializeAs_CharacterCreationRequestMessage(self, param1):
        param1.write_utf(self.name)
        param1.write_byte(self.breed)
        param1.write_boolean(self.sex)
        _loc2_ = 0
        while _loc2_ < 5:
            param1.write_int(self.colors[_loc2_])
            _loc2_ += 1
        if self.cosmeticId < 0:
            raise RuntimeError("Forbidden value (" + str(self.cosmeticId) + ") on element cosmeticId.")
        param1.write_var_short(self.cosmeticId)

    def deserialize(self, param1):
        self.deserializeAs_CharacterCreationRequestMessage(param1)

    def deserializeAs_CharacterCreationRequestMessage(self, param1):
        self._nameFunc(param1)
        self._breedFunc(param1)
        self._sexFunc(param1)
        _loc2_ = 0
        while _loc2_ < 5:
            self.colors.append(param1.read_int())
            _loc2_ += 1
        self._cosmeticIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CharacterCreationRequestMessage(param1)

    def deserializeAsyncAs_CharacterCreationRequestMessage(self, param1):
        param1.add_child(self._nameFunc)
        param1.add_child(self._breedFunc)
        param1.add_child(self._sexFunc)
        self._colorstree = param1.add_child(self._colorstreeFunc)
        param1.add_child(self._cosmeticIdFunc)

    def _nameFunc(self, param1):
        self.name = param1.read_utf()

    def _breedFunc(self, param1):
        self.breed = param1.read_byte()
        if self.breed < PlayableBreedEnum.Feca or self.breed > PlayableBreedEnum.Ouginak:
            raise RuntimeError("Forbidden value (" + str(self.breed) + ") on element of CharacterCreationRequestMessage.breed.")

    def _sexFunc(self, param1):
        self.sex = param1.read_boolean()

    def _colorstreeFunc(self, param1):
        _loc2_ = 0
        while _loc2_ < 5:
            self._colorstree.add_child(self._colorsFunc)
            _loc2_ += 1

    def _colorsFunc(self, param1):
        self.colors[self._colorsindex] = param1.read_int()
        self._colorsindex += 1

    def _cosmeticIdFunc(self, param1):
        self.cosmeticId = param1.read_var_uh_short()
        if self.cosmeticId < 0:
            raise RuntimeError("Forbidden value (" + str(self.cosmeticId) + ") on element of CharacterCreationRequestMessage.cosmeticId.")


class CharacterCreationResultMessage(NetworkMessage):
    protocolId = 161

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.result = 1

    def getMessageId(self):
        return 161

    def initCharacterCreationResultMessage(self, param1=1):
        self.result = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.result = 1
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CharacterCreationResultMessage(param1)

    def serializeAs_CharacterCreationResultMessage(self, param1):
        param1.write_byte(self.result)

    def deserialize(self, param1):
        self.deserializeAs_CharacterCreationResultMessage(param1)

    def deserializeAs_CharacterCreationResultMessage(self, param1):
        self._resultFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CharacterCreationResultMessage(param1)

    def deserializeAsyncAs_CharacterCreationResultMessage(self, param1):
        param1.add_child(self._resultFunc)

    def _resultFunc(self, param1):
        self.result = param1.read_byte()
        if self.result < 0:
            raise RuntimeError("Forbidden value (" + str(self.result) + ") on element of CharacterCreationResultMessage.result.")


class CharacterNameSuggestionFailureMessage(NetworkMessage):
    protocolId = 164

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reason = 1

    def getMessageId(self):
        return 164

    def initCharacterNameSuggestionFailureMessage(self, param1=1):
        self.reason = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.reason = 1
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CharacterNameSuggestionFailureMessage(param1)

    def serializeAs_CharacterNameSuggestionFailureMessage(self, param1):
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_CharacterNameSuggestionFailureMessage(param1)

    def deserializeAs_CharacterNameSuggestionFailureMessage(self, param1):
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CharacterNameSuggestionFailureMessage(param1)

    def deserializeAsyncAs_CharacterNameSuggestionFailureMessage(self, param1):
        param1.add_child(self._reasonFunc)

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()
        if self.reason < 0:
            raise RuntimeError("Forbidden value (" + str(self.reason) + ") on element of CharacterNameSuggestionFailureMessage.reason.")


class CharacterNameSuggestionRequestMessage(NetworkMessage):
    protocolId = 162

    def getMessageId(self):
        return 162

    def initCharacterNameSuggestionRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_CharacterNameSuggestionRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_CharacterNameSuggestionRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_CharacterNameSuggestionRequestMessage(self, param1):
        pass


class CharacterNameSuggestionSuccessMessage(NetworkMessage):
    protocolId = 5544

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.suggestion = ""

    def getMessageId(self):
        return 5544

    def initCharacterNameSuggestionSuccessMessage(self, param1=""):
        self.suggestion = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.suggestion = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CharacterNameSuggestionSuccessMessage(param1)

    def serializeAs_CharacterNameSuggestionSuccessMessage(self, param1):
        param1.write_utf(self.suggestion)

    def deserialize(self, param1):
        self.deserializeAs_CharacterNameSuggestionSuccessMessage(param1)

    def deserializeAs_CharacterNameSuggestionSuccessMessage(self, param1):
        self._suggestionFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CharacterNameSuggestionSuccessMessage(param1)

    def deserializeAsyncAs_CharacterNameSuggestionSuccessMessage(self, param1):
        param1.add_child(self._suggestionFunc)

    def _suggestionFunc(self, param1):
        self.suggestion = param1.read_utf()


class CharacterDeletionErrorMessage(NetworkMessage):
    protocolId = 166

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reason = 1

    def getMessageId(self):
        return 166

    def initCharacterDeletionErrorMessage(self, param1=1):
        self.reason = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.reason = 1
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CharacterDeletionErrorMessage(param1)

    def serializeAs_CharacterDeletionErrorMessage(self, param1):
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_CharacterDeletionErrorMessage(param1)

    def deserializeAs_CharacterDeletionErrorMessage(self, param1):
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CharacterDeletionErrorMessage(param1)

    def deserializeAsyncAs_CharacterDeletionErrorMessage(self, param1):
        param1.add_child(self._reasonFunc)

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()
        if self.reason < 0:
            raise RuntimeError("Forbidden value (" + str(self.reason) + ") on element of CharacterDeletionErrorMessage.reason.")


class CharacterDeletionRequestMessage(NetworkMessage):
    protocolId = 165

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.characterId = 0
        self.secretAnswerHash = ""

    def getMessageId(self):
        return 165

    def initCharacterDeletionRequestMessage(self, param1=0, param2=""):
        self.characterId = param1
        self.secretAnswerHash = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.characterId = 0
        self.secretAnswerHash = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CharacterDeletionRequestMessage(param1)

    def serializeAs_CharacterDeletionRequestMessage(self, param1):
        if self.characterId < 0 or self.characterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.characterId) + ") on element characterId.")
        param1.write_var_long(self.characterId)
        param1.write_utf(self.secretAnswerHash)

    def deserialize(self, param1):
        self.deserializeAs_CharacterDeletionRequestMessage(param1)

    def deserializeAs_CharacterDeletionRequestMessage(self, param1):
        self._characterIdFunc(param1)
        self._secretAnswerHashFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CharacterDeletionRequestMessage(param1)

    def deserializeAsyncAs_CharacterDeletionRequestMessage(self, param1):
        param1.add_child(self._characterIdFunc)
        param1.add_child(self._secretAnswerHashFunc)

    def _characterIdFunc(self, param1):
        self.characterId = param1.read_var_uh_long()
        if self.characterId < 0 or self.characterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.characterId) + ") on element of CharacterDeletionRequestMessage.characterId.")

    def _secretAnswerHashFunc(self, param1):
        self.secretAnswerHash = param1.read_utf()


class CharacterReplayRequestMessage(NetworkMessage):
    protocolId = 167

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.characterId = 0

    def getMessageId(self):
        return 167

    def initCharacterReplayRequestMessage(self, param1=0):
        self.characterId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.characterId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CharacterReplayRequestMessage(param1)

    def serializeAs_CharacterReplayRequestMessage(self, param1):
        if self.characterId < 0 or self.characterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.characterId) + ") on element characterId.")
        param1.write_var_long(self.characterId)

    def deserialize(self, param1):
        self.deserializeAs_CharacterReplayRequestMessage(param1)

    def deserializeAs_CharacterReplayRequestMessage(self, param1):
        self._characterIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CharacterReplayRequestMessage(param1)

    def deserializeAsyncAs_CharacterReplayRequestMessage(self, param1):
        param1.add_child(self._characterIdFunc)

    def _characterIdFunc(self, param1):
        self.characterId = param1.read_var_uh_long()
        if self.characterId < 0 or self.characterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.characterId) + ") on element of CharacterReplayRequestMessage.characterId.")


class CharacterExperienceGainMessage(NetworkMessage):
    protocolId = 6321

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.experienceCharacter = 0
        self.experienceMount = 0
        self.experienceGuild = 0
        self.experienceIncarnation = 0

    def getMessageId(self):
        return 6321

    def initCharacterExperienceGainMessage(self, param1=0, param2=0, param3=0, param4=0):
        self.experienceCharacter = param1
        self.experienceMount = param2
        self.experienceGuild = param3
        self.experienceIncarnation = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.experienceCharacter = 0
        self.experienceMount = 0
        self.experienceGuild = 0
        self.experienceIncarnation = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CharacterExperienceGainMessage(param1)

    def serializeAs_CharacterExperienceGainMessage(self, param1):
        if self.experienceCharacter < 0 or self.experienceCharacter > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.experienceCharacter) + ") on element experienceCharacter.")
        param1.write_var_long(self.experienceCharacter)
        if self.experienceMount < 0 or self.experienceMount > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.experienceMount) + ") on element experienceMount.")
        param1.write_var_long(self.experienceMount)
        if self.experienceGuild < 0 or self.experienceGuild > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.experienceGuild) + ") on element experienceGuild.")
        param1.write_var_long(self.experienceGuild)
        if self.experienceIncarnation < 0 or self.experienceIncarnation > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.experienceIncarnation) + ") on element experienceIncarnation.")
        param1.write_var_long(self.experienceIncarnation)

    def deserialize(self, param1):
        self.deserializeAs_CharacterExperienceGainMessage(param1)

    def deserializeAs_CharacterExperienceGainMessage(self, param1):
        self._experienceCharacterFunc(param1)
        self._experienceMountFunc(param1)
        self._experienceGuildFunc(param1)
        self._experienceIncarnationFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CharacterExperienceGainMessage(param1)

    def deserializeAsyncAs_CharacterExperienceGainMessage(self, param1):
        param1.add_child(self._experienceCharacterFunc)
        param1.add_child(self._experienceMountFunc)
        param1.add_child(self._experienceGuildFunc)
        param1.add_child(self._experienceIncarnationFunc)

    def _experienceCharacterFunc(self, param1):
        self.experienceCharacter = param1.read_var_uh_long()
        if self.experienceCharacter < 0 or self.experienceCharacter > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.experienceCharacter) + ") on element of CharacterExperienceGainMessage.experienceCharacter.")

    def _experienceMountFunc(self, param1):
        self.experienceMount = param1.read_var_uh_long()
        if self.experienceMount < 0 or self.experienceMount > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.experienceMount) + ") on element of CharacterExperienceGainMessage.experienceMount.")

    def _experienceGuildFunc(self, param1):
        self.experienceGuild = param1.read_var_uh_long()
        if self.experienceGuild < 0 or self.experienceGuild > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.experienceGuild) + ") on element of CharacterExperienceGainMessage.experienceGuild.")

    def _experienceIncarnationFunc(self, param1):
        self.experienceIncarnation = param1.read_var_uh_long()
        if self.experienceIncarnation < 0 or self.experienceIncarnation > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.experienceIncarnation) + ") on element of CharacterExperienceGainMessage.experienceIncarnation.")


class CharacterLevelUpMessage(NetworkMessage):
    protocolId = 5670

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.newLevel = 0

    def getMessageId(self):
        return 5670

    def initCharacterLevelUpMessage(self, param1=0):
        self.newLevel = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.newLevel = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CharacterLevelUpMessage(param1)

    def serializeAs_CharacterLevelUpMessage(self, param1):
        if self.newLevel < 2 or self.newLevel > 206:
            raise RuntimeError("Forbidden value (" + str(self.newLevel) + ") on element newLevel.")
        param1.write_byte(self.newLevel)

    def deserialize(self, param1):
        self.deserializeAs_CharacterLevelUpMessage(param1)

    def deserializeAs_CharacterLevelUpMessage(self, param1):
        self._newLevelFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CharacterLevelUpMessage(param1)

    def deserializeAsyncAs_CharacterLevelUpMessage(self, param1):
        param1.add_child(self._newLevelFunc)

    def _newLevelFunc(self, param1):
        self.newLevel = param1.read_unsigned_byte()
        if self.newLevel < 2 or self.newLevel > 206:
            raise RuntimeError("Forbidden value (" + str(self.newLevel) + ") on element of CharacterLevelUpMessage.newLevel.")


class CharacterStatsListMessage(NetworkMessage):
    protocolId = 500

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.stats = CharacterCharacteristicsInformations()
        self._statstree = FuncTree()

    def getMessageId(self):
        return 500

    def initCharacterStatsListMessage(self, param1=None):
        self.stats = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.stats = CharacterCharacteristicsInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CharacterStatsListMessage(param1)

    def serializeAs_CharacterStatsListMessage(self, param1):
        self.stats.serializeAs_CharacterCharacteristicsInformations(param1)

    def deserialize(self, param1):
        self.deserializeAs_CharacterStatsListMessage(param1)

    def deserializeAs_CharacterStatsListMessage(self, param1):
        self.stats = CharacterCharacteristicsInformations()
        self.stats.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CharacterStatsListMessage(param1)

    def deserializeAsyncAs_CharacterStatsListMessage(self, param1):
        self._statstree = param1.add_child(self._statstreeFunc)

    def _statstreeFunc(self, param1):
        self.stats = CharacterCharacteristicsInformations()
        self.stats.deserializeAsync(self._statstree)


class FighterStatsListMessage(NetworkMessage):
    protocolId = 6322

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.stats = CharacterCharacteristicsInformations()
        self._statstree = FuncTree()

    def getMessageId(self):
        return 6322

    def initFighterStatsListMessage(self, param1=None):
        self.stats = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.stats = CharacterCharacteristicsInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_FighterStatsListMessage(param1)

    def serializeAs_FighterStatsListMessage(self, param1):
        self.stats.serializeAs_CharacterCharacteristicsInformations(param1)

    def deserialize(self, param1):
        self.deserializeAs_FighterStatsListMessage(param1)

    def deserializeAs_FighterStatsListMessage(self, param1):
        self.stats = CharacterCharacteristicsInformations()
        self.stats.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_FighterStatsListMessage(param1)

    def deserializeAsyncAs_FighterStatsListMessage(self, param1):
        self._statstree = param1.add_child(self._statstreeFunc)

    def _statstreeFunc(self, param1):
        self.stats = CharacterCharacteristicsInformations()
        self.stats.deserializeAsync(self._statstree)


class LifePointsRegenBeginMessage(NetworkMessage):
    protocolId = 5684

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.regenRate = 0

    def getMessageId(self):
        return 5684

    def initLifePointsRegenBeginMessage(self, param1=0):
        self.regenRate = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.regenRate = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_LifePointsRegenBeginMessage(param1)

    def serializeAs_LifePointsRegenBeginMessage(self, param1):
        if self.regenRate < 0 or self.regenRate > 255:
            raise RuntimeError("Forbidden value (" + str(self.regenRate) + ") on element regenRate.")
        param1.write_byte(self.regenRate)

    def deserialize(self, param1):
        self.deserializeAs_LifePointsRegenBeginMessage(param1)

    def deserializeAs_LifePointsRegenBeginMessage(self, param1):
        self._regenRateFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_LifePointsRegenBeginMessage(param1)

    def deserializeAsyncAs_LifePointsRegenBeginMessage(self, param1):
        param1.add_child(self._regenRateFunc)

    def _regenRateFunc(self, param1):
        self.regenRate = param1.read_unsigned_byte()
        if self.regenRate < 0 or self.regenRate > 255:
            raise RuntimeError("Forbidden value (" + str(self.regenRate) + ") on element of LifePointsRegenBeginMessage.regenRate.")


class UpdateLifePointsMessage(NetworkMessage):
    protocolId = 5658

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.lifePoints = 0
        self.maxLifePoints = 0

    def getMessageId(self):
        return 5658

    def initUpdateLifePointsMessage(self, param1=0, param2=0):
        self.lifePoints = param1
        self.maxLifePoints = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.lifePoints = 0
        self.maxLifePoints = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_UpdateLifePointsMessage(param1)

    def serializeAs_UpdateLifePointsMessage(self, param1):
        if self.lifePoints < 0:
            raise RuntimeError("Forbidden value (" + str(self.lifePoints) + ") on element lifePoints.")
        param1.write_var_int(self.lifePoints)
        if self.maxLifePoints < 0:
            raise RuntimeError("Forbidden value (" + str(self.maxLifePoints) + ") on element maxLifePoints.")
        param1.write_var_int(self.maxLifePoints)

    def deserialize(self, param1):
        self.deserializeAs_UpdateLifePointsMessage(param1)

    def deserializeAs_UpdateLifePointsMessage(self, param1):
        self._lifePointsFunc(param1)
        self._maxLifePointsFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_UpdateLifePointsMessage(param1)

    def deserializeAsyncAs_UpdateLifePointsMessage(self, param1):
        param1.add_child(self._lifePointsFunc)
        param1.add_child(self._maxLifePointsFunc)

    def _lifePointsFunc(self, param1):
        self.lifePoints = param1.read_var_uh_int()
        if self.lifePoints < 0:
            raise RuntimeError("Forbidden value (" + str(self.lifePoints) + ") on element of UpdateLifePointsMessage.lifePoints.")

    def _maxLifePointsFunc(self, param1):
        self.maxLifePoints = param1.read_var_uh_int()
        if self.maxLifePoints < 0:
            raise RuntimeError("Forbidden value (" + str(self.maxLifePoints) + ") on element of UpdateLifePointsMessage.maxLifePoints.")


class PlayerStatusUpdateErrorMessage(NetworkMessage):
    protocolId = 6385

    def getMessageId(self):
        return 6385

    def initPlayerStatusUpdateErrorMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_PlayerStatusUpdateErrorMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_PlayerStatusUpdateErrorMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_PlayerStatusUpdateErrorMessage(self, param1):
        pass


class PlayerStatusUpdateMessage(NetworkMessage):
    protocolId = 6386

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.accountId = 0
        self.playerId = 0
        self.status = PlayerStatus()
        self._statustree = FuncTree()

    def getMessageId(self):
        return 6386

    def initPlayerStatusUpdateMessage(self, param1=0, param2=0, param3=None):
        self.accountId = param1
        self.playerId = param2
        self.status = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.accountId = 0
        self.playerId = 0
        self.status = PlayerStatus()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PlayerStatusUpdateMessage(param1)

    def serializeAs_PlayerStatusUpdateMessage(self, param1):
        if self.accountId < 0:
            raise RuntimeError("Forbidden value (" + str(self.accountId) + ") on element accountId.")
        param1.write_int(self.accountId)
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element playerId.")
        param1.write_var_long(self.playerId)
        param1.write_short(self.status.getTypeId())
        self.status.serialize(param1)

    def deserialize(self, param1):
        self.deserializeAs_PlayerStatusUpdateMessage(param1)

    def deserializeAs_PlayerStatusUpdateMessage(self, param1):
        self._accountIdFunc(param1)
        self._playerIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        self.status = ProtocolTypeManager.get_instance(PlayerStatus,_loc2_)
        self.status.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PlayerStatusUpdateMessage(param1)

    def deserializeAsyncAs_PlayerStatusUpdateMessage(self, param1):
        param1.add_child(self._accountIdFunc)
        param1.add_child(self._playerIdFunc)
        self._statustree = param1.add_child(self._statustreeFunc)

    def _accountIdFunc(self, param1):
        self.accountId = param1.read_int()
        if self.accountId < 0:
            raise RuntimeError("Forbidden value (" + str(self.accountId) + ") on element of PlayerStatusUpdateMessage.accountId.")

    def _playerIdFunc(self, param1):
        self.playerId = param1.read_var_uh_long()
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element of PlayerStatusUpdateMessage.playerId.")

    def _statustreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.status = ProtocolTypeManager.get_instance(PlayerStatus,_loc2_)
        self.status.deserializeAsync(self._statustree)


class PlayerStatusUpdateRequestMessage(NetworkMessage):
    protocolId = 6387

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.status = PlayerStatus()
        self._statustree = FuncTree()

    def getMessageId(self):
        return 6387

    def initPlayerStatusUpdateRequestMessage(self, param1=None):
        self.status = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.status = PlayerStatus()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PlayerStatusUpdateRequestMessage(param1)

    def serializeAs_PlayerStatusUpdateRequestMessage(self, param1):
        param1.write_short(self.status.getTypeId())
        self.status.serialize(param1)

    def deserialize(self, param1):
        self.deserializeAs_PlayerStatusUpdateRequestMessage(param1)

    def deserializeAs_PlayerStatusUpdateRequestMessage(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.status = ProtocolTypeManager.get_instance(PlayerStatus,_loc2_)
        self.status.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PlayerStatusUpdateRequestMessage(param1)

    def deserializeAsyncAs_PlayerStatusUpdateRequestMessage(self, param1):
        self._statustree = param1.add_child(self._statustreeFunc)

    def _statustreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.status = ProtocolTypeManager.get_instance(PlayerStatus,_loc2_)
        self.status.deserializeAsync(self._statustree)


class ChatAbstractClientMessage(NetworkMessage):
    protocolId = 850

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.content = ""

    def getMessageId(self):
        return 850

    def initChatAbstractClientMessage(self, param1=""):
        self.content = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.content = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChatAbstractClientMessage(param1)

    def serializeAs_ChatAbstractClientMessage(self, param1):
        param1.write_utf(self.content)

    def deserialize(self, param1):
        self.deserializeAs_ChatAbstractClientMessage(param1)

    def deserializeAs_ChatAbstractClientMessage(self, param1):
        self._contentFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChatAbstractClientMessage(param1)

    def deserializeAsyncAs_ChatAbstractClientMessage(self, param1):
        param1.add_child(self._contentFunc)

    def _contentFunc(self, param1):
        self.content = param1.read_utf()


class ChatAbstractServerMessage(NetworkMessage):
    protocolId = 880

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.channel = 0
        self.content = ""
        self.timestamp = 0
        self.fingerprint = ""

    def getMessageId(self):
        return 880

    def initChatAbstractServerMessage(self, param1=0, param2="", param3=0, param4=""):
        self.channel = param1
        self.content = param2
        self.timestamp = param3
        self.fingerprint = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.channel = 0
        self.content = ""
        self.timestamp = 0
        self.fingerprint = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChatAbstractServerMessage(param1)

    def serializeAs_ChatAbstractServerMessage(self, param1):
        param1.write_byte(self.channel)
        param1.write_utf(self.content)
        if self.timestamp < 0:
            raise RuntimeError("Forbidden value (" + str(self.timestamp) + ") on element timestamp.")
        param1.write_int(self.timestamp)
        param1.write_utf(self.fingerprint)

    def deserialize(self, param1):
        self.deserializeAs_ChatAbstractServerMessage(param1)

    def deserializeAs_ChatAbstractServerMessage(self, param1):
        self._channelFunc(param1)
        self._contentFunc(param1)
        self._timestampFunc(param1)
        self._fingerprintFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChatAbstractServerMessage(param1)

    def deserializeAsyncAs_ChatAbstractServerMessage(self, param1):
        param1.add_child(self._channelFunc)
        param1.add_child(self._contentFunc)
        param1.add_child(self._timestampFunc)
        param1.add_child(self._fingerprintFunc)

    def _channelFunc(self, param1):
        self.channel = param1.read_byte()
        if self.channel < 0:
            raise RuntimeError("Forbidden value (" + str(self.channel) + ") on element of ChatAbstractServerMessage.channel.")

    def _contentFunc(self, param1):
        self.content = param1.read_utf()

    def _timestampFunc(self, param1):
        self.timestamp = param1.read_int()
        if self.timestamp < 0:
            raise RuntimeError("Forbidden value (" + str(self.timestamp) + ") on element of ChatAbstractServerMessage.timestamp.")

    def _fingerprintFunc(self, param1):
        self.fingerprint = param1.read_utf()


class ChatErrorMessage(NetworkMessage):
    protocolId = 870

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reason = 0

    def getMessageId(self):
        return 870

    def initChatErrorMessage(self, param1=0):
        self.reason = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.reason = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChatErrorMessage(param1)

    def serializeAs_ChatErrorMessage(self, param1):
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_ChatErrorMessage(param1)

    def deserializeAs_ChatErrorMessage(self, param1):
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChatErrorMessage(param1)

    def deserializeAsyncAs_ChatErrorMessage(self, param1):
        param1.add_child(self._reasonFunc)

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()
        if self.reason < 0:
            raise RuntimeError("Forbidden value (" + str(self.reason) + ") on element of ChatErrorMessage.reason.")


class ChannelEnablingChangeMessage(NetworkMessage):
    protocolId = 891

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.channel = 0
        self.enable = False

    def getMessageId(self):
        return 891

    def initChannelEnablingChangeMessage(self, param1=0, param2=False):
        self.channel = param1
        self.enable = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.channel = 0
        self.enable = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChannelEnablingChangeMessage(param1)

    def serializeAs_ChannelEnablingChangeMessage(self, param1):
        param1.write_byte(self.channel)
        param1.write_boolean(self.enable)

    def deserialize(self, param1):
        self.deserializeAs_ChannelEnablingChangeMessage(param1)

    def deserializeAs_ChannelEnablingChangeMessage(self, param1):
        self._channelFunc(param1)
        self._enableFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChannelEnablingChangeMessage(param1)

    def deserializeAsyncAs_ChannelEnablingChangeMessage(self, param1):
        param1.add_child(self._channelFunc)
        param1.add_child(self._enableFunc)

    def _channelFunc(self, param1):
        self.channel = param1.read_byte()
        if self.channel < 0:
            raise RuntimeError("Forbidden value (" + str(self.channel) + ") on element of ChannelEnablingChangeMessage.channel.")

    def _enableFunc(self, param1):
        self.enable = param1.read_boolean()


class ChannelEnablingMessage(NetworkMessage):
    protocolId = 890

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.channel = 0
        self.enable = False

    def getMessageId(self):
        return 890

    def initChannelEnablingMessage(self, param1=0, param2=False):
        self.channel = param1
        self.enable = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.channel = 0
        self.enable = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChannelEnablingMessage(param1)

    def serializeAs_ChannelEnablingMessage(self, param1):
        param1.write_byte(self.channel)
        param1.write_boolean(self.enable)

    def deserialize(self, param1):
        self.deserializeAs_ChannelEnablingMessage(param1)

    def deserializeAs_ChannelEnablingMessage(self, param1):
        self._channelFunc(param1)
        self._enableFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChannelEnablingMessage(param1)

    def deserializeAsyncAs_ChannelEnablingMessage(self, param1):
        param1.add_child(self._channelFunc)
        param1.add_child(self._enableFunc)

    def _channelFunc(self, param1):
        self.channel = param1.read_byte()
        if self.channel < 0:
            raise RuntimeError("Forbidden value (" + str(self.channel) + ") on element of ChannelEnablingMessage.channel.")

    def _enableFunc(self, param1):
        self.enable = param1.read_boolean()


class EnabledChannelsMessage(NetworkMessage):
    protocolId = 892

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.channels = []
        self.disallowed = []
        self._channelstree = FuncTree()
        self._disallowedtree = FuncTree()

    def getMessageId(self):
        return 892

    def initEnabledChannelsMessage(self, param1=[], param2=[]):
        self.channels = param1
        self.disallowed = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.channels = []
        self.disallowed = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_EnabledChannelsMessage(param1)

    def serializeAs_EnabledChannelsMessage(self, param1):
        param1.write_short(len(self.channels))
        _loc2_ = 0
        while _loc2_ < len(self.channels):
            param1.write_byte(self.channels[_loc2_])
            _loc2_ += 1
        param1.write_short(len(self.disallowed))
        _loc3_ = 0
        while _loc3_ < len(self.disallowed):
            param1.write_byte(self.disallowed[_loc3_])
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_EnabledChannelsMessage(param1)

    def deserializeAs_EnabledChannelsMessage(self, param1):
        _loc6_ = 0
        _loc7_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = param1.read_byte()
            if _loc6_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc6_) + ") on elements of channels.")
            self.channels.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = param1.read_byte()
            if _loc7_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc7_) + ") on elements of disallowed.")
            self.disallowed.append(_loc7_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_EnabledChannelsMessage(param1)

    def deserializeAsyncAs_EnabledChannelsMessage(self, param1):
        self._channelstree = param1.add_child(self._channelstreeFunc)
        self._disallowedtree = param1.add_child(self._disallowedtreeFunc)

    def _channelstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._channelstree.add_child(self._channelsFunc)
            _loc3_ += 1

    def _channelsFunc(self, param1):
        _loc2_ = param1.read_byte()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of channels.")
        self.channels.append(_loc2_)

    def _disallowedtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._disallowedtree.add_child(self._disallowedFunc)
            _loc3_ += 1

    def _disallowedFunc(self, param1):
        _loc2_ = param1.read_byte()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of disallowed.")
        self.disallowed.append(_loc2_)


class ChatCommunityChannelCommunityMessage(NetworkMessage):
    protocolId = 6730

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.communityId = 0

    def getMessageId(self):
        return 6730

    def initChatCommunityChannelCommunityMessage(self, param1=0):
        self.communityId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.communityId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChatCommunityChannelCommunityMessage(param1)

    def serializeAs_ChatCommunityChannelCommunityMessage(self, param1):
        param1.write_short(self.communityId)

    def deserialize(self, param1):
        self.deserializeAs_ChatCommunityChannelCommunityMessage(param1)

    def deserializeAs_ChatCommunityChannelCommunityMessage(self, param1):
        self._communityIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChatCommunityChannelCommunityMessage(param1)

    def deserializeAsyncAs_ChatCommunityChannelCommunityMessage(self, param1):
        param1.add_child(self._communityIdFunc)

    def _communityIdFunc(self, param1):
        self.communityId = param1.read_short()


class ChatCommunityChannelSetCommunityRequestMessage(NetworkMessage):
    protocolId = 6729

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.communityId = 0

    def getMessageId(self):
        return 6729

    def initChatCommunityChannelSetCommunityRequestMessage(self, param1=0):
        self.communityId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.communityId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChatCommunityChannelSetCommunityRequestMessage(param1)

    def serializeAs_ChatCommunityChannelSetCommunityRequestMessage(self, param1):
        param1.write_short(self.communityId)

    def deserialize(self, param1):
        self.deserializeAs_ChatCommunityChannelSetCommunityRequestMessage(param1)

    def deserializeAs_ChatCommunityChannelSetCommunityRequestMessage(self, param1):
        self._communityIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChatCommunityChannelSetCommunityRequestMessage(param1)

    def deserializeAsyncAs_ChatCommunityChannelSetCommunityRequestMessage(self, param1):
        param1.add_child(self._communityIdFunc)

    def _communityIdFunc(self, param1):
        self.communityId = param1.read_short()


class ChatMessageReportMessage(NetworkMessage):
    protocolId = 821

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.senderName = ""
        self.content = ""
        self.timestamp = 0
        self.channel = 0
        self.fingerprint = ""
        self.reason = 0

    def getMessageId(self):
        return 821

    def initChatMessageReportMessage(self, param1="", param2="", param3=0, param4=0, param5="", param6=0):
        self.senderName = param1
        self.content = param2
        self.timestamp = param3
        self.channel = param4
        self.fingerprint = param5
        self.reason = param6
        self._isInitialized = True
        return self

    def reset(self):
        self.senderName = ""
        self.content = ""
        self.timestamp = 0
        self.channel = 0
        self.fingerprint = ""
        self.reason = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChatMessageReportMessage(param1)

    def serializeAs_ChatMessageReportMessage(self, param1):
        param1.write_utf(self.senderName)
        param1.write_utf(self.content)
        if self.timestamp < 0:
            raise RuntimeError("Forbidden value (" + str(self.timestamp) + ") on element timestamp.")
        param1.write_int(self.timestamp)
        param1.write_byte(self.channel)
        param1.write_utf(self.fingerprint)
        if self.reason < 0:
            raise RuntimeError("Forbidden value (" + str(self.reason) + ") on element reason.")
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_ChatMessageReportMessage(param1)

    def deserializeAs_ChatMessageReportMessage(self, param1):
        self._senderNameFunc(param1)
        self._contentFunc(param1)
        self._timestampFunc(param1)
        self._channelFunc(param1)
        self._fingerprintFunc(param1)
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChatMessageReportMessage(param1)

    def deserializeAsyncAs_ChatMessageReportMessage(self, param1):
        param1.add_child(self._senderNameFunc)
        param1.add_child(self._contentFunc)
        param1.add_child(self._timestampFunc)
        param1.add_child(self._channelFunc)
        param1.add_child(self._fingerprintFunc)
        param1.add_child(self._reasonFunc)

    def _senderNameFunc(self, param1):
        self.senderName = param1.read_utf()

    def _contentFunc(self, param1):
        self.content = param1.read_utf()

    def _timestampFunc(self, param1):
        self.timestamp = param1.read_int()
        if self.timestamp < 0:
            raise RuntimeError("Forbidden value (" + str(self.timestamp) + ") on element of ChatMessageReportMessage.timestamp.")

    def _channelFunc(self, param1):
        self.channel = param1.read_byte()
        if self.channel < 0:
            raise RuntimeError("Forbidden value (" + str(self.channel) + ") on element of ChatMessageReportMessage.channel.")

    def _fingerprintFunc(self, param1):
        self.fingerprint = param1.read_utf()

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()
        if self.reason < 0:
            raise RuntimeError("Forbidden value (" + str(self.reason) + ") on element of ChatMessageReportMessage.reason.")


class ChatSmileyExtraPackListMessage(NetworkMessage):
    protocolId = 6596

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.packIds = []
        self._packIdstree = FuncTree()

    def getMessageId(self):
        return 6596

    def initChatSmileyExtraPackListMessage(self, param1=[]):
        self.packIds = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.packIds = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChatSmileyExtraPackListMessage(param1)

    def serializeAs_ChatSmileyExtraPackListMessage(self, param1):
        param1.write_short(len(self.packIds))
        _loc2_ = 0
        while _loc2_ < len(self.packIds):
            if self.packIds[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.packIds[_loc2_]) + ") on element 1 (starting at 1) of packIds.")
            param1.write_byte(self.packIds[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ChatSmileyExtraPackListMessage(param1)

    def deserializeAs_ChatSmileyExtraPackListMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_byte()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of packIds.")
            self.packIds.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChatSmileyExtraPackListMessage(param1)

    def deserializeAsyncAs_ChatSmileyExtraPackListMessage(self, param1):
        self._packIdstree = param1.add_child(self._packIdstreeFunc)

    def _packIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._packIdstree.add_child(self._packIdsFunc)
            _loc3_ += 1

    def _packIdsFunc(self, param1):
        _loc2_ = param1.read_byte()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of packIds.")
        self.packIds.append(_loc2_)


class ChatSmileyMessage(NetworkMessage):
    protocolId = 801

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.entityId = 0
        self.smileyId = 0
        self.accountId = 0

    def getMessageId(self):
        return 801

    def initChatSmileyMessage(self, param1=0, param2=0, param3=0):
        self.entityId = param1
        self.smileyId = param2
        self.accountId = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.entityId = 0
        self.smileyId = 0
        self.accountId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChatSmileyMessage(param1)

    def serializeAs_ChatSmileyMessage(self, param1):
        if self.entityId < -9007199254740990 or self.entityId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.entityId) + ") on element entityId.")
        param1.write_double(self.entityId)
        if self.smileyId < 0:
            raise RuntimeError("Forbidden value (" + str(self.smileyId) + ") on element smileyId.")
        param1.write_var_short(self.smileyId)
        if self.accountId < 0:
            raise RuntimeError("Forbidden value (" + str(self.accountId) + ") on element accountId.")
        param1.write_int(self.accountId)

    def deserialize(self, param1):
        self.deserializeAs_ChatSmileyMessage(param1)

    def deserializeAs_ChatSmileyMessage(self, param1):
        self._entityIdFunc(param1)
        self._smileyIdFunc(param1)
        self._accountIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChatSmileyMessage(param1)

    def deserializeAsyncAs_ChatSmileyMessage(self, param1):
        param1.add_child(self._entityIdFunc)
        param1.add_child(self._smileyIdFunc)
        param1.add_child(self._accountIdFunc)

    def _entityIdFunc(self, param1):
        self.entityId = param1.read_double()
        if self.entityId < -9007199254740990 or self.entityId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.entityId) + ") on element of ChatSmileyMessage.entityId.")

    def _smileyIdFunc(self, param1):
        self.smileyId = param1.read_var_uh_short()
        if self.smileyId < 0:
            raise RuntimeError("Forbidden value (" + str(self.smileyId) + ") on element of ChatSmileyMessage.smileyId.")

    def _accountIdFunc(self, param1):
        self.accountId = param1.read_int()
        if self.accountId < 0:
            raise RuntimeError("Forbidden value (" + str(self.accountId) + ") on element of ChatSmileyMessage.accountId.")


class ChatSmileyRequestMessage(NetworkMessage):
    protocolId = 800

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.smileyId = 0

    def getMessageId(self):
        return 800

    def initChatSmileyRequestMessage(self, param1=0):
        self.smileyId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.smileyId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChatSmileyRequestMessage(param1)

    def serializeAs_ChatSmileyRequestMessage(self, param1):
        if self.smileyId < 0:
            raise RuntimeError("Forbidden value (" + str(self.smileyId) + ") on element smileyId.")
        param1.write_var_short(self.smileyId)

    def deserialize(self, param1):
        self.deserializeAs_ChatSmileyRequestMessage(param1)

    def deserializeAs_ChatSmileyRequestMessage(self, param1):
        self._smileyIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChatSmileyRequestMessage(param1)

    def deserializeAsyncAs_ChatSmileyRequestMessage(self, param1):
        param1.add_child(self._smileyIdFunc)

    def _smileyIdFunc(self, param1):
        self.smileyId = param1.read_var_uh_short()
        if self.smileyId < 0:
            raise RuntimeError("Forbidden value (" + str(self.smileyId) + ") on element of ChatSmileyRequestMessage.smileyId.")


class MoodSmileyRequestMessage(NetworkMessage):
    protocolId = 6192

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.smileyId = 0

    def getMessageId(self):
        return 6192

    def initMoodSmileyRequestMessage(self, param1=0):
        self.smileyId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.smileyId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MoodSmileyRequestMessage(param1)

    def serializeAs_MoodSmileyRequestMessage(self, param1):
        if self.smileyId < 0:
            raise RuntimeError("Forbidden value (" + str(self.smileyId) + ") on element smileyId.")
        param1.write_var_short(self.smileyId)

    def deserialize(self, param1):
        self.deserializeAs_MoodSmileyRequestMessage(param1)

    def deserializeAs_MoodSmileyRequestMessage(self, param1):
        self._smileyIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MoodSmileyRequestMessage(param1)

    def deserializeAsyncAs_MoodSmileyRequestMessage(self, param1):
        param1.add_child(self._smileyIdFunc)

    def _smileyIdFunc(self, param1):
        self.smileyId = param1.read_var_uh_short()
        if self.smileyId < 0:
            raise RuntimeError("Forbidden value (" + str(self.smileyId) + ") on element of MoodSmileyRequestMessage.smileyId.")


class MoodSmileyResultMessage(NetworkMessage):
    protocolId = 6196

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.resultCode = 1
        self.smileyId = 0

    def getMessageId(self):
        return 6196

    def initMoodSmileyResultMessage(self, param1=1, param2=0):
        self.resultCode = param1
        self.smileyId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.resultCode = 1
        self.smileyId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MoodSmileyResultMessage(param1)

    def serializeAs_MoodSmileyResultMessage(self, param1):
        param1.write_byte(self.resultCode)
        if self.smileyId < 0:
            raise RuntimeError("Forbidden value (" + str(self.smileyId) + ") on element smileyId.")
        param1.write_var_short(self.smileyId)

    def deserialize(self, param1):
        self.deserializeAs_MoodSmileyResultMessage(param1)

    def deserializeAs_MoodSmileyResultMessage(self, param1):
        self._resultCodeFunc(param1)
        self._smileyIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MoodSmileyResultMessage(param1)

    def deserializeAsyncAs_MoodSmileyResultMessage(self, param1):
        param1.add_child(self._resultCodeFunc)
        param1.add_child(self._smileyIdFunc)

    def _resultCodeFunc(self, param1):
        self.resultCode = param1.read_byte()
        if self.resultCode < 0:
            raise RuntimeError("Forbidden value (" + str(self.resultCode) + ") on element of MoodSmileyResultMessage.resultCode.")

    def _smileyIdFunc(self, param1):
        self.smileyId = param1.read_var_uh_short()
        if self.smileyId < 0:
            raise RuntimeError("Forbidden value (" + str(self.smileyId) + ") on element of MoodSmileyResultMessage.smileyId.")


class MoodSmileyUpdateMessage(NetworkMessage):
    protocolId = 6388

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.accountId = 0
        self.playerId = 0
        self.smileyId = 0

    def getMessageId(self):
        return 6388

    def initMoodSmileyUpdateMessage(self, param1=0, param2=0, param3=0):
        self.accountId = param1
        self.playerId = param2
        self.smileyId = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.accountId = 0
        self.playerId = 0
        self.smileyId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MoodSmileyUpdateMessage(param1)

    def serializeAs_MoodSmileyUpdateMessage(self, param1):
        if self.accountId < 0:
            raise RuntimeError("Forbidden value (" + str(self.accountId) + ") on element accountId.")
        param1.write_int(self.accountId)
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element playerId.")
        param1.write_var_long(self.playerId)
        if self.smileyId < 0:
            raise RuntimeError("Forbidden value (" + str(self.smileyId) + ") on element smileyId.")
        param1.write_var_short(self.smileyId)

    def deserialize(self, param1):
        self.deserializeAs_MoodSmileyUpdateMessage(param1)

    def deserializeAs_MoodSmileyUpdateMessage(self, param1):
        self._accountIdFunc(param1)
        self._playerIdFunc(param1)
        self._smileyIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MoodSmileyUpdateMessage(param1)

    def deserializeAsyncAs_MoodSmileyUpdateMessage(self, param1):
        param1.add_child(self._accountIdFunc)
        param1.add_child(self._playerIdFunc)
        param1.add_child(self._smileyIdFunc)

    def _accountIdFunc(self, param1):
        self.accountId = param1.read_int()
        if self.accountId < 0:
            raise RuntimeError("Forbidden value (" + str(self.accountId) + ") on element of MoodSmileyUpdateMessage.accountId.")

    def _playerIdFunc(self, param1):
        self.playerId = param1.read_var_uh_long()
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element of MoodSmileyUpdateMessage.playerId.")

    def _smileyIdFunc(self, param1):
        self.smileyId = param1.read_var_uh_short()
        if self.smileyId < 0:
            raise RuntimeError("Forbidden value (" + str(self.smileyId) + ") on element of MoodSmileyUpdateMessage.smileyId.")


class GameContextCreateErrorMessage(NetworkMessage):
    protocolId = 6024

    def getMessageId(self):
        return 6024

    def initGameContextCreateErrorMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_GameContextCreateErrorMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_GameContextCreateErrorMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_GameContextCreateErrorMessage(self, param1):
        pass


class GameContextCreateMessage(NetworkMessage):
    protocolId = 200

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.context = 1

    def getMessageId(self):
        return 200

    def initGameContextCreateMessage(self, param1=1):
        self.context = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.context = 1
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameContextCreateMessage(param1)

    def serializeAs_GameContextCreateMessage(self, param1):
        param1.write_byte(self.context)

    def deserialize(self, param1):
        self.deserializeAs_GameContextCreateMessage(param1)

    def deserializeAs_GameContextCreateMessage(self, param1):
        self._contextFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameContextCreateMessage(param1)

    def deserializeAsyncAs_GameContextCreateMessage(self, param1):
        param1.add_child(self._contextFunc)

    def _contextFunc(self, param1):
        self.context = param1.read_byte()
        if self.context < 0:
            raise RuntimeError("Forbidden value (" + str(self.context) + ") on element of GameContextCreateMessage.context.")


class GameContextCreateRequestMessage(NetworkMessage):
    protocolId = 250

    def getMessageId(self):
        return 250

    def initGameContextCreateRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_GameContextCreateRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_GameContextCreateRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_GameContextCreateRequestMessage(self, param1):
        pass


class GameContextDestroyMessage(NetworkMessage):
    protocolId = 201

    def getMessageId(self):
        return 201

    def initGameContextDestroyMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_GameContextDestroyMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_GameContextDestroyMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_GameContextDestroyMessage(self, param1):
        pass


class GameContextKickMessage(NetworkMessage):
    protocolId = 6081

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0

    def getMessageId(self):
        return 6081

    def initGameContextKickMessage(self, param1=0):
        self.targetId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.targetId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameContextKickMessage(param1)

    def serializeAs_GameContextKickMessage(self, param1):
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)

    def deserialize(self, param1):
        self.deserializeAs_GameContextKickMessage(param1)

    def deserializeAs_GameContextKickMessage(self, param1):
        self._targetIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameContextKickMessage(param1)

    def deserializeAsyncAs_GameContextKickMessage(self, param1):
        param1.add_child(self._targetIdFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameContextKickMessage.targetId.")


class GameContextMoveElementMessage(NetworkMessage):
    protocolId = 253

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.movement = EntityMovementInformations()
        self._movementtree = FuncTree()

    def getMessageId(self):
        return 253

    def initGameContextMoveElementMessage(self, param1=None):
        self.movement = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.movement = EntityMovementInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameContextMoveElementMessage(param1)

    def serializeAs_GameContextMoveElementMessage(self, param1):
        self.movement.serializeAs_EntityMovementInformations(param1)

    def deserialize(self, param1):
        self.deserializeAs_GameContextMoveElementMessage(param1)

    def deserializeAs_GameContextMoveElementMessage(self, param1):
        self.movement = EntityMovementInformations()
        self.movement.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameContextMoveElementMessage(param1)

    def deserializeAsyncAs_GameContextMoveElementMessage(self, param1):
        self._movementtree = param1.add_child(self._movementtreeFunc)

    def _movementtreeFunc(self, param1):
        self.movement = EntityMovementInformations()
        self.movement.deserializeAsync(self._movementtree)


class GameContextMoveMultipleElementsMessage(NetworkMessage):
    protocolId = 254

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.movements = []
        self._movementstree = FuncTree()

    def getMessageId(self):
        return 254

    def initGameContextMoveMultipleElementsMessage(self, param1=[]):
        self.movements = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.movements = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameContextMoveMultipleElementsMessage(param1)

    def serializeAs_GameContextMoveMultipleElementsMessage(self, param1):
        param1.write_short(len(self.movements))
        _loc2_ = 0
        while _loc2_ < len(self.movements):
            as_parent(self.movements[_loc2_], EntityMovementInformations).serializeAs_EntityMovementInformations(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GameContextMoveMultipleElementsMessage(param1)

    def deserializeAs_GameContextMoveMultipleElementsMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = EntityMovementInformations()
            _loc4_.deserialize(param1)
            self.movements.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameContextMoveMultipleElementsMessage(param1)

    def deserializeAsyncAs_GameContextMoveMultipleElementsMessage(self, param1):
        self._movementstree = param1.add_child(self._movementstreeFunc)

    def _movementstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._movementstree.add_child(self._movementsFunc)
            _loc3_ += 1

    def _movementsFunc(self, param1):
        _loc2_ = EntityMovementInformations()
        _loc2_.deserialize(param1)
        self.movements.append(_loc2_)


class GameContextQuitMessage(NetworkMessage):
    protocolId = 255

    def getMessageId(self):
        return 255

    def initGameContextQuitMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_GameContextQuitMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_GameContextQuitMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_GameContextQuitMessage(self, param1):
        pass


class GameContextReadyMessage(NetworkMessage):
    protocolId = 6071

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.mapId = 0

    def getMessageId(self):
        return 6071

    def initGameContextReadyMessage(self, param1=0):
        self.mapId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.mapId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameContextReadyMessage(param1)

    def serializeAs_GameContextReadyMessage(self, param1):
        if self.mapId < 0:
            raise RuntimeError("Forbidden value (" + str(self.mapId) + ") on element mapId.")
        param1.write_int(self.mapId)

    def deserialize(self, param1):
        self.deserializeAs_GameContextReadyMessage(param1)

    def deserializeAs_GameContextReadyMessage(self, param1):
        self._mapIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameContextReadyMessage(param1)

    def deserializeAsyncAs_GameContextReadyMessage(self, param1):
        param1.add_child(self._mapIdFunc)

    def _mapIdFunc(self, param1):
        self.mapId = param1.read_int()
        if self.mapId < 0:
            raise RuntimeError("Forbidden value (" + str(self.mapId) + ") on element of GameContextReadyMessage.mapId.")


class GameContextRefreshEntityLookMessage(NetworkMessage):
    protocolId = 5637

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.id = 0
        self.look = EntityLook()
        self._looktree = FuncTree()

    def getMessageId(self):
        return 5637

    def initGameContextRefreshEntityLookMessage(self, param1=0, param2=None):
        self.id = param1
        self.look = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.id = 0
        self.look = EntityLook()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameContextRefreshEntityLookMessage(param1)

    def serializeAs_GameContextRefreshEntityLookMessage(self, param1):
        if self.id < -9007199254740990 or self.id > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element id.")
        param1.write_double(self.id)
        self.look.serializeAs_EntityLook(param1)

    def deserialize(self, param1):
        self.deserializeAs_GameContextRefreshEntityLookMessage(param1)

    def deserializeAs_GameContextRefreshEntityLookMessage(self, param1):
        self._idFunc(param1)
        self.look = EntityLook()
        self.look.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameContextRefreshEntityLookMessage(param1)

    def deserializeAsyncAs_GameContextRefreshEntityLookMessage(self, param1):
        param1.add_child(self._idFunc)
        self._looktree = param1.add_child(self._looktreeFunc)

    def _idFunc(self, param1):
        self.id = param1.read_double()
        if self.id < -9007199254740990 or self.id > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element of GameContextRefreshEntityLookMessage.id.")

    def _looktreeFunc(self, param1):
        self.look = EntityLook()
        self.look.deserializeAsync(self._looktree)


class GameContextRemoveElementMessage(NetworkMessage):
    protocolId = 251

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.id = 0

    def getMessageId(self):
        return 251

    def initGameContextRemoveElementMessage(self, param1=0):
        self.id = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.id = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameContextRemoveElementMessage(param1)

    def serializeAs_GameContextRemoveElementMessage(self, param1):
        if self.id < -9007199254740990 or self.id > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element id.")
        param1.write_double(self.id)

    def deserialize(self, param1):
        self.deserializeAs_GameContextRemoveElementMessage(param1)

    def deserializeAs_GameContextRemoveElementMessage(self, param1):
        self._idFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameContextRemoveElementMessage(param1)

    def deserializeAsyncAs_GameContextRemoveElementMessage(self, param1):
        param1.add_child(self._idFunc)

    def _idFunc(self, param1):
        self.id = param1.read_double()
        if self.id < -9007199254740990 or self.id > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element of GameContextRemoveElementMessage.id.")


class GameContextRemoveMultipleElementsMessage(NetworkMessage):
    protocolId = 252

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.elementsIds = []
        self._elementsIdstree = FuncTree()

    def getMessageId(self):
        return 252

    def initGameContextRemoveMultipleElementsMessage(self, param1=[]):
        self.elementsIds = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.elementsIds = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameContextRemoveMultipleElementsMessage(param1)

    def serializeAs_GameContextRemoveMultipleElementsMessage(self, param1):
        param1.write_short(len(self.elementsIds))
        _loc2_ = 0
        while _loc2_ < len(self.elementsIds):
            if self.elementsIds[_loc2_] < -9007199254740990 or self.elementsIds[_loc2_] > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(self.elementsIds[_loc2_]) + ") on element 1 (starting at 1) of elementsIds.")
            param1.write_double(self.elementsIds[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GameContextRemoveMultipleElementsMessage(param1)

    def deserializeAs_GameContextRemoveMultipleElementsMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_double()
            if _loc4_ < -9007199254740990 or _loc4_ > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of elementsIds.")
            self.elementsIds.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameContextRemoveMultipleElementsMessage(param1)

    def deserializeAsyncAs_GameContextRemoveMultipleElementsMessage(self, param1):
        self._elementsIdstree = param1.add_child(self._elementsIdstreeFunc)

    def _elementsIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._elementsIdstree.add_child(self._elementsIdsFunc)
            _loc3_ += 1

    def _elementsIdsFunc(self, param1):
        _loc2_ = param1.read_double()
        if _loc2_ < -9007199254740990 or _loc2_ > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of elementsIds.")
        self.elementsIds.append(_loc2_)


class GameEntitiesDispositionMessage(NetworkMessage):
    protocolId = 5696

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dispositions = []
        self._dispositionstree = FuncTree()

    def getMessageId(self):
        return 5696

    def initGameEntitiesDispositionMessage(self, param1=[]):
        self.dispositions = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.dispositions = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameEntitiesDispositionMessage(param1)

    def serializeAs_GameEntitiesDispositionMessage(self, param1):
        param1.write_short(len(self.dispositions))
        _loc2_ = 0
        while _loc2_ < len(self.dispositions):
            as_parent(self.dispositions[_loc2_], IdentifiedEntityDispositionInformations).serializeAs_IdentifiedEntityDispositionInformations(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GameEntitiesDispositionMessage(param1)

    def deserializeAs_GameEntitiesDispositionMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = IdentifiedEntityDispositionInformations()
            _loc4_.deserialize(param1)
            self.dispositions.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameEntitiesDispositionMessage(param1)

    def deserializeAsyncAs_GameEntitiesDispositionMessage(self, param1):
        self._dispositionstree = param1.add_child(self._dispositionstreeFunc)

    def _dispositionstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._dispositionstree.add_child(self._dispositionsFunc)
            _loc3_ += 1

    def _dispositionsFunc(self, param1):
        _loc2_ = IdentifiedEntityDispositionInformations()
        _loc2_.deserialize(param1)
        self.dispositions.append(_loc2_)


class GameEntityDispositionErrorMessage(NetworkMessage):
    protocolId = 5695

    def getMessageId(self):
        return 5695

    def initGameEntityDispositionErrorMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_GameEntityDispositionErrorMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_GameEntityDispositionErrorMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_GameEntityDispositionErrorMessage(self, param1):
        pass


class GameEntityDispositionMessage(NetworkMessage):
    protocolId = 5693

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.disposition = IdentifiedEntityDispositionInformations()
        self._dispositiontree = FuncTree()

    def getMessageId(self):
        return 5693

    def initGameEntityDispositionMessage(self, param1=None):
        self.disposition = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.disposition = IdentifiedEntityDispositionInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameEntityDispositionMessage(param1)

    def serializeAs_GameEntityDispositionMessage(self, param1):
        self.disposition.serializeAs_IdentifiedEntityDispositionInformations(param1)

    def deserialize(self, param1):
        self.deserializeAs_GameEntityDispositionMessage(param1)

    def deserializeAs_GameEntityDispositionMessage(self, param1):
        self.disposition = IdentifiedEntityDispositionInformations()
        self.disposition.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameEntityDispositionMessage(param1)

    def deserializeAsyncAs_GameEntityDispositionMessage(self, param1):
        self._dispositiontree = param1.add_child(self._dispositiontreeFunc)

    def _dispositiontreeFunc(self, param1):
        self.disposition = IdentifiedEntityDispositionInformations()
        self.disposition.deserializeAsync(self._dispositiontree)


class GameMapChangeOrientationMessage(NetworkMessage):
    protocolId = 946

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.orientation = ActorOrientation()
        self._orientationtree = FuncTree()

    def getMessageId(self):
        return 946

    def initGameMapChangeOrientationMessage(self, param1=None):
        self.orientation = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.orientation = ActorOrientation()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameMapChangeOrientationMessage(param1)

    def serializeAs_GameMapChangeOrientationMessage(self, param1):
        self.orientation.serializeAs_ActorOrientation(param1)

    def deserialize(self, param1):
        self.deserializeAs_GameMapChangeOrientationMessage(param1)

    def deserializeAs_GameMapChangeOrientationMessage(self, param1):
        self.orientation = ActorOrientation()
        self.orientation.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameMapChangeOrientationMessage(param1)

    def deserializeAsyncAs_GameMapChangeOrientationMessage(self, param1):
        self._orientationtree = param1.add_child(self._orientationtreeFunc)

    def _orientationtreeFunc(self, param1):
        self.orientation = ActorOrientation()
        self.orientation.deserializeAsync(self._orientationtree)


class GameMapChangeOrientationRequestMessage(NetworkMessage):
    protocolId = 945

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.direction = 1

    def getMessageId(self):
        return 945

    def initGameMapChangeOrientationRequestMessage(self, param1=1):
        self.direction = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.direction = 1
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameMapChangeOrientationRequestMessage(param1)

    def serializeAs_GameMapChangeOrientationRequestMessage(self, param1):
        param1.write_byte(self.direction)

    def deserialize(self, param1):
        self.deserializeAs_GameMapChangeOrientationRequestMessage(param1)

    def deserializeAs_GameMapChangeOrientationRequestMessage(self, param1):
        self._directionFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameMapChangeOrientationRequestMessage(param1)

    def deserializeAsyncAs_GameMapChangeOrientationRequestMessage(self, param1):
        param1.add_child(self._directionFunc)

    def _directionFunc(self, param1):
        self.direction = param1.read_byte()
        if self.direction < 0:
            raise RuntimeError("Forbidden value (" + str(self.direction) + ") on element of GameMapChangeOrientationRequestMessage.direction.")


class GameMapChangeOrientationsMessage(NetworkMessage):
    protocolId = 6155

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.orientations = []
        self._orientationstree = FuncTree()

    def getMessageId(self):
        return 6155

    def initGameMapChangeOrientationsMessage(self, param1=[]):
        self.orientations = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.orientations = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameMapChangeOrientationsMessage(param1)

    def serializeAs_GameMapChangeOrientationsMessage(self, param1):
        param1.write_short(len(self.orientations))
        _loc2_ = 0
        while _loc2_ < len(self.orientations):
            as_parent(self.orientations[_loc2_], ActorOrientation).serializeAs_ActorOrientation(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GameMapChangeOrientationsMessage(param1)

    def deserializeAs_GameMapChangeOrientationsMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = ActorOrientation()
            _loc4_.deserialize(param1)
            self.orientations.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameMapChangeOrientationsMessage(param1)

    def deserializeAsyncAs_GameMapChangeOrientationsMessage(self, param1):
        self._orientationstree = param1.add_child(self._orientationstreeFunc)

    def _orientationstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._orientationstree.add_child(self._orientationsFunc)
            _loc3_ += 1

    def _orientationsFunc(self, param1):
        _loc2_ = ActorOrientation()
        _loc2_.deserialize(param1)
        self.orientations.append(_loc2_)


class GameMapMovementCancelMessage(NetworkMessage):
    protocolId = 953

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.cellId = 0

    def getMessageId(self):
        return 953

    def initGameMapMovementCancelMessage(self, param1=0):
        self.cellId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.cellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameMapMovementCancelMessage(param1)

    def serializeAs_GameMapMovementCancelMessage(self, param1):
        if self.cellId < 0 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element cellId.")
        param1.write_var_short(self.cellId)

    def deserialize(self, param1):
        self.deserializeAs_GameMapMovementCancelMessage(param1)

    def deserializeAs_GameMapMovementCancelMessage(self, param1):
        self._cellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameMapMovementCancelMessage(param1)

    def deserializeAsyncAs_GameMapMovementCancelMessage(self, param1):
        param1.add_child(self._cellIdFunc)

    def _cellIdFunc(self, param1):
        self.cellId = param1.read_var_uh_short()
        if self.cellId < 0 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element of GameMapMovementCancelMessage.cellId.")


class GameMapMovementConfirmMessage(NetworkMessage):
    protocolId = 952

    def getMessageId(self):
        return 952

    def initGameMapMovementConfirmMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_GameMapMovementConfirmMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_GameMapMovementConfirmMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_GameMapMovementConfirmMessage(self, param1):
        pass


class GameMapMovementMessage(NetworkMessage):
    protocolId = 951

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.keyMovements = []
        self.forcedDirection = 0
        self.actorId = 0
        self._keyMovementstree = FuncTree()

    def getMessageId(self):
        return 951

    def initGameMapMovementMessage(self, param1=[], param2=0, param3=0):
        self.keyMovements = param1
        self.forcedDirection = param2
        self.actorId = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.keyMovements = []
        self.forcedDirection = 0
        self.actorId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameMapMovementMessage(param1)

    def serializeAs_GameMapMovementMessage(self, param1):
        param1.write_short(len(self.keyMovements))
        _loc2_ = 0
        while _loc2_ < len(self.keyMovements):
            if self.keyMovements[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.keyMovements[_loc2_]) + ") on element 1 (starting at 1) of keyMovements.")
            param1.write_short(self.keyMovements[_loc2_])
            _loc2_ += 1
        param1.write_short(self.forcedDirection)
        if self.actorId < -9007199254740990 or self.actorId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.actorId) + ") on element actorId.")
        param1.write_double(self.actorId)

    def deserialize(self, param1):
        self.deserializeAs_GameMapMovementMessage(param1)

    def deserializeAs_GameMapMovementMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_short()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of keyMovements.")
            self.keyMovements.append(_loc4_)
            _loc3_ += 1
        self._forcedDirectionFunc(param1)
        self._actorIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameMapMovementMessage(param1)

    def deserializeAsyncAs_GameMapMovementMessage(self, param1):
        self._keyMovementstree = param1.add_child(self._keyMovementstreeFunc)
        param1.add_child(self._forcedDirectionFunc)
        param1.add_child(self._actorIdFunc)

    def _keyMovementstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._keyMovementstree.add_child(self._keyMovementsFunc)
            _loc3_ += 1

    def _keyMovementsFunc(self, param1):
        _loc2_ = param1.read_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of keyMovements.")
        self.keyMovements.append(_loc2_)

    def _forcedDirectionFunc(self, param1):
        self.forcedDirection = param1.read_short()

    def _actorIdFunc(self, param1):
        self.actorId = param1.read_double()
        if self.actorId < -9007199254740990 or self.actorId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.actorId) + ") on element of GameMapMovementMessage.actorId.")


class GameMapMovementRequestMessage(NetworkMessage):
    protocolId = 950

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.keyMovements = []
        self.mapId = 0
        self._keyMovementstree = FuncTree()

    def getMessageId(self):
        return 950

    def initGameMapMovementRequestMessage(self, param1=[], param2=0):
        self.keyMovements = param1
        self.mapId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.keyMovements = []
        self.mapId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        if HASH_FUNCTION != None:
            HASH_FUNCTION(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameMapMovementRequestMessage(param1)

    def serializeAs_GameMapMovementRequestMessage(self, param1):
        param1.write_short(len(self.keyMovements))
        _loc2_ = 0
        while _loc2_ < len(self.keyMovements):
            if self.keyMovements[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.keyMovements[_loc2_]) + ") on element 1 (starting at 1) of keyMovements.")
            param1.write_short(self.keyMovements[_loc2_])
            _loc2_ += 1
        if self.mapId < 0:
            raise RuntimeError("Forbidden value (" + str(self.mapId) + ") on element mapId.")
        param1.write_int(self.mapId)

    def deserialize(self, param1):
        self.deserializeAs_GameMapMovementRequestMessage(param1)

    def deserializeAs_GameMapMovementRequestMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_short()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of keyMovements.")
            self.keyMovements.append(_loc4_)
            _loc3_ += 1
        self._mapIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameMapMovementRequestMessage(param1)

    def deserializeAsyncAs_GameMapMovementRequestMessage(self, param1):
        self._keyMovementstree = param1.add_child(self._keyMovementstreeFunc)
        param1.add_child(self._mapIdFunc)

    def _keyMovementstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._keyMovementstree.add_child(self._keyMovementsFunc)
            _loc3_ += 1

    def _keyMovementsFunc(self, param1):
        _loc2_ = param1.read_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of keyMovements.")
        self.keyMovements.append(_loc2_)

    def _mapIdFunc(self, param1):
        self.mapId = param1.read_int()
        if self.mapId < 0:
            raise RuntimeError("Forbidden value (" + str(self.mapId) + ") on element of GameMapMovementRequestMessage.mapId.")


class GameMapNoMovementMessage(NetworkMessage):
    protocolId = 954

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.cellX = 0
        self.cellY = 0

    def getMessageId(self):
        return 954

    def initGameMapNoMovementMessage(self, param1=0, param2=0):
        self.cellX = param1
        self.cellY = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.cellX = 0
        self.cellY = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameMapNoMovementMessage(param1)

    def serializeAs_GameMapNoMovementMessage(self, param1):
        param1.write_short(self.cellX)
        param1.write_short(self.cellY)

    def deserialize(self, param1):
        self.deserializeAs_GameMapNoMovementMessage(param1)

    def deserializeAs_GameMapNoMovementMessage(self, param1):
        self._cellXFunc(param1)
        self._cellYFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameMapNoMovementMessage(param1)

    def deserializeAsyncAs_GameMapNoMovementMessage(self, param1):
        param1.add_child(self._cellXFunc)
        param1.add_child(self._cellYFunc)

    def _cellXFunc(self, param1):
        self.cellX = param1.read_short()

    def _cellYFunc(self, param1):
        self.cellY = param1.read_short()


class GameRefreshMonsterBoostsMessage(NetworkMessage):
    protocolId = 6618

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.monsterBoosts = []
        self.familyBoosts = []
        self._monsterBooststree = FuncTree()
        self._familyBooststree = FuncTree()

    def getMessageId(self):
        return 6618

    def initGameRefreshMonsterBoostsMessage(self, param1=[], param2=[]):
        self.monsterBoosts = param1
        self.familyBoosts = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.monsterBoosts = []
        self.familyBoosts = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRefreshMonsterBoostsMessage(param1)

    def serializeAs_GameRefreshMonsterBoostsMessage(self, param1):
        param1.write_short(len(self.monsterBoosts))
        _loc2_ = 0
        while _loc2_ < len(self.monsterBoosts):
            as_parent(self.monsterBoosts[_loc2_], MonsterBoosts).serializeAs_MonsterBoosts(param1)
            _loc2_ += 1
        param1.write_short(len(self.familyBoosts))
        _loc3_ = 0
        while _loc3_ < len(self.familyBoosts):
            as_parent(self.familyBoosts[_loc3_], MonsterBoosts).serializeAs_MonsterBoosts(param1)
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GameRefreshMonsterBoostsMessage(param1)

    def deserializeAs_GameRefreshMonsterBoostsMessage(self, param1):
        _loc6_ = None
        _loc7_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = MonsterBoosts()
            _loc6_.deserialize(param1)
            self.monsterBoosts.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = MonsterBoosts()
            _loc7_.deserialize(param1)
            self.familyBoosts.append(_loc7_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRefreshMonsterBoostsMessage(param1)

    def deserializeAsyncAs_GameRefreshMonsterBoostsMessage(self, param1):
        self._monsterBooststree = param1.add_child(self._monsterBooststreeFunc)
        self._familyBooststree = param1.add_child(self._familyBooststreeFunc)

    def _monsterBooststreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._monsterBooststree.add_child(self._monsterBoostsFunc)
            _loc3_ += 1

    def _monsterBoostsFunc(self, param1):
        _loc2_ = MonsterBoosts()
        _loc2_.deserialize(param1)
        self.monsterBoosts.append(_loc2_)

    def _familyBooststreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._familyBooststree.add_child(self._familyBoostsFunc)
            _loc3_ += 1

    def _familyBoostsFunc(self, param1):
        _loc2_ = MonsterBoosts()
        _loc2_.deserialize(param1)
        self.familyBoosts.append(_loc2_)


class ShowCellMessage(NetworkMessage):
    protocolId = 5612

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.sourceId = 0
        self.cellId = 0

    def getMessageId(self):
        return 5612

    def initShowCellMessage(self, param1=0, param2=0):
        self.sourceId = param1
        self.cellId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.sourceId = 0
        self.cellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ShowCellMessage(param1)

    def serializeAs_ShowCellMessage(self, param1):
        if self.sourceId < -9007199254740990 or self.sourceId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.sourceId) + ") on element sourceId.")
        param1.write_double(self.sourceId)
        if self.cellId < 0 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element cellId.")
        param1.write_var_short(self.cellId)

    def deserialize(self, param1):
        self.deserializeAs_ShowCellMessage(param1)

    def deserializeAs_ShowCellMessage(self, param1):
        self._sourceIdFunc(param1)
        self._cellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ShowCellMessage(param1)

    def deserializeAsyncAs_ShowCellMessage(self, param1):
        param1.add_child(self._sourceIdFunc)
        param1.add_child(self._cellIdFunc)

    def _sourceIdFunc(self, param1):
        self.sourceId = param1.read_double()
        if self.sourceId < -9007199254740990 or self.sourceId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.sourceId) + ") on element of ShowCellMessage.sourceId.")

    def _cellIdFunc(self, param1):
        self.cellId = param1.read_var_uh_short()
        if self.cellId < 0 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element of ShowCellMessage.cellId.")


class ShowCellRequestMessage(NetworkMessage):
    protocolId = 5611

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.cellId = 0

    def getMessageId(self):
        return 5611

    def initShowCellRequestMessage(self, param1=0):
        self.cellId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.cellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ShowCellRequestMessage(param1)

    def serializeAs_ShowCellRequestMessage(self, param1):
        if self.cellId < 0 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element cellId.")
        param1.write_var_short(self.cellId)

    def deserialize(self, param1):
        self.deserializeAs_ShowCellRequestMessage(param1)

    def deserializeAs_ShowCellRequestMessage(self, param1):
        self._cellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ShowCellRequestMessage(param1)

    def deserializeAsyncAs_ShowCellRequestMessage(self, param1):
        param1.add_child(self._cellIdFunc)

    def _cellIdFunc(self, param1):
        self.cellId = param1.read_var_uh_short()
        if self.cellId < 0 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element of ShowCellRequestMessage.cellId.")


class DisplayNumericalValuePaddockMessage(NetworkMessage):
    protocolId = 6563

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.rideId = 0
        self.value = 0
        self.type = 0

    def getMessageId(self):
        return 6563

    def initDisplayNumericalValuePaddockMessage(self, param1=0, param2=0, param3=0):
        self.rideId = param1
        self.value = param2
        self.type = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.rideId = 0
        self.value = 0
        self.type = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DisplayNumericalValuePaddockMessage(param1)

    def serializeAs_DisplayNumericalValuePaddockMessage(self, param1):
        param1.write_int(self.rideId)
        param1.write_int(self.value)
        param1.write_byte(self.type)

    def deserialize(self, param1):
        self.deserializeAs_DisplayNumericalValuePaddockMessage(param1)

    def deserializeAs_DisplayNumericalValuePaddockMessage(self, param1):
        self._rideIdFunc(param1)
        self._valueFunc(param1)
        self._typeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DisplayNumericalValuePaddockMessage(param1)

    def deserializeAsyncAs_DisplayNumericalValuePaddockMessage(self, param1):
        param1.add_child(self._rideIdFunc)
        param1.add_child(self._valueFunc)
        param1.add_child(self._typeFunc)

    def _rideIdFunc(self, param1):
        self.rideId = param1.read_int()

    def _valueFunc(self, param1):
        self.value = param1.read_int()

    def _typeFunc(self, param1):
        self.type = param1.read_byte()
        if self.type < 0:
            raise RuntimeError("Forbidden value (" + str(self.type) + ") on element of DisplayNumericalValuePaddockMessage.type.")


class DungeonKeyRingMessage(NetworkMessage):
    protocolId = 6299

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.availables = []
        self.unavailables = []
        self._availablestree = FuncTree()
        self._unavailablestree = FuncTree()

    def getMessageId(self):
        return 6299

    def initDungeonKeyRingMessage(self, param1=[], param2=[]):
        self.availables = param1
        self.unavailables = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.availables = []
        self.unavailables = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DungeonKeyRingMessage(param1)

    def serializeAs_DungeonKeyRingMessage(self, param1):
        param1.write_short(len(self.availables))
        _loc2_ = 0
        while _loc2_ < len(self.availables):
            if self.availables[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.availables[_loc2_]) + ") on element 1 (starting at 1) of availables.")
            param1.write_var_short(self.availables[_loc2_])
            _loc2_ += 1
        param1.write_short(len(self.unavailables))
        _loc3_ = 0
        while _loc3_ < len(self.unavailables):
            if self.unavailables[_loc3_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.unavailables[_loc3_]) + ") on element 2 (starting at 1) of unavailables.")
            param1.write_var_short(self.unavailables[_loc3_])
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_DungeonKeyRingMessage(param1)

    def deserializeAs_DungeonKeyRingMessage(self, param1):
        _loc6_ = 0
        _loc7_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = param1.read_var_uh_short()
            if _loc6_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc6_) + ") on elements of availables.")
            self.availables.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = param1.read_var_uh_short()
            if _loc7_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc7_) + ") on elements of unavailables.")
            self.unavailables.append(_loc7_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DungeonKeyRingMessage(param1)

    def deserializeAsyncAs_DungeonKeyRingMessage(self, param1):
        self._availablestree = param1.add_child(self._availablestreeFunc)
        self._unavailablestree = param1.add_child(self._unavailablestreeFunc)

    def _availablestreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._availablestree.add_child(self._availablesFunc)
            _loc3_ += 1

    def _availablesFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of availables.")
        self.availables.append(_loc2_)

    def _unavailablestreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._unavailablestree.add_child(self._unavailablesFunc)
            _loc3_ += 1

    def _unavailablesFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of unavailables.")
        self.unavailables.append(_loc2_)


class DungeonKeyRingUpdateMessage(NetworkMessage):
    protocolId = 6296

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dungeonId = 0
        self.available = False

    def getMessageId(self):
        return 6296

    def initDungeonKeyRingUpdateMessage(self, param1=0, param2=False):
        self.dungeonId = param1
        self.available = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.dungeonId = 0
        self.available = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DungeonKeyRingUpdateMessage(param1)

    def serializeAs_DungeonKeyRingUpdateMessage(self, param1):
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element dungeonId.")
        param1.write_var_short(self.dungeonId)
        param1.write_boolean(self.available)

    def deserialize(self, param1):
        self.deserializeAs_DungeonKeyRingUpdateMessage(param1)

    def deserializeAs_DungeonKeyRingUpdateMessage(self, param1):
        self._dungeonIdFunc(param1)
        self._availableFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DungeonKeyRingUpdateMessage(param1)

    def deserializeAsyncAs_DungeonKeyRingUpdateMessage(self, param1):
        param1.add_child(self._dungeonIdFunc)
        param1.add_child(self._availableFunc)

    def _dungeonIdFunc(self, param1):
        self.dungeonId = param1.read_var_uh_short()
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element of DungeonKeyRingUpdateMessage.dungeonId.")

    def _availableFunc(self, param1):
        self.available = param1.read_boolean()


class GameFightEndMessage(NetworkMessage):
    protocolId = 720

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.duration = 0
        self.ageBonus = 0
        self.lootShareLimitMalus = 0
        self.results = []
        self.namedPartyTeamsOutcomes = []
        self._resultstree = FuncTree()
        self._namedPartyTeamsOutcomestree = FuncTree()

    def getMessageId(self):
        return 720

    def initGameFightEndMessage(self, param1=0, param2=0, param3=0, param4=[], param5=[]):
        self.duration = param1
        self.ageBonus = param2
        self.lootShareLimitMalus = param3
        self.results = param4
        self.namedPartyTeamsOutcomes = param5
        self._isInitialized = True
        return self

    def reset(self):
        self.duration = 0
        self.ageBonus = 0
        self.lootShareLimitMalus = 0
        self.results = []
        self.namedPartyTeamsOutcomes = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightEndMessage(param1)

    def serializeAs_GameFightEndMessage(self, param1):
        if self.duration < 0:
            raise RuntimeError("Forbidden value (" + str(self.duration) + ") on element duration.")
        param1.write_int(self.duration)
        param1.write_short(self.ageBonus)
        param1.write_short(self.lootShareLimitMalus)
        param1.write_short(len(self.results))
        _loc2_ = 0
        while _loc2_ < len(self.results):
            param1.write_short(as_parent(self.results[_loc2_], FightResultListEntry).getTypeId())
            as_parent(self.results[_loc2_], FightResultListEntry).serialize(param1)
            _loc2_ += 1
        param1.write_short(len(self.namedPartyTeamsOutcomes))
        _loc3_ = 0
        while _loc3_ < len(self.namedPartyTeamsOutcomes):
            as_parent(self.namedPartyTeamsOutcomes[_loc3_], NamedPartyTeamWithOutcome).serializeAs_NamedPartyTeamWithOutcome(param1)
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GameFightEndMessage(param1)

    def deserializeAs_GameFightEndMessage(self, param1):
        _loc6_ = 0
        _loc7_ = None
        _loc8_ = None
        self._durationFunc(param1)
        self._ageBonusFunc(param1)
        self._lootShareLimitMalusFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = param1.read_unsigned_short()
            _loc7_ = ProtocolTypeManager.get_instance(FightResultListEntry,_loc6_)
            _loc7_.deserialize(param1)
            self.results.append(_loc7_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc8_ = NamedPartyTeamWithOutcome()
            _loc8_.deserialize(param1)
            self.namedPartyTeamsOutcomes.append(_loc8_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightEndMessage(param1)

    def deserializeAsyncAs_GameFightEndMessage(self, param1):
        param1.add_child(self._durationFunc)
        param1.add_child(self._ageBonusFunc)
        param1.add_child(self._lootShareLimitMalusFunc)
        self._resultstree = param1.add_child(self._resultstreeFunc)
        self._namedPartyTeamsOutcomestree = param1.add_child(self._namedPartyTeamsOutcomestreeFunc)

    def _durationFunc(self, param1):
        self.duration = param1.read_int()
        if self.duration < 0:
            raise RuntimeError("Forbidden value (" + str(self.duration) + ") on element of GameFightEndMessage.duration.")

    def _ageBonusFunc(self, param1):
        self.ageBonus = param1.read_short()

    def _lootShareLimitMalusFunc(self, param1):
        self.lootShareLimitMalus = param1.read_short()

    def _resultstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._resultstree.add_child(self._resultsFunc)
            _loc3_ += 1

    def _resultsFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(FightResultListEntry,_loc2_)
        _loc3_.deserialize(param1)
        self.results.append(_loc3_)

    def _namedPartyTeamsOutcomestreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._namedPartyTeamsOutcomestree.add_child(self._namedPartyTeamsOutcomesFunc)
            _loc3_ += 1

    def _namedPartyTeamsOutcomesFunc(self, param1):
        _loc2_ = NamedPartyTeamWithOutcome()
        _loc2_.deserialize(param1)
        self.namedPartyTeamsOutcomes.append(_loc2_)


class GameFightHumanReadyStateMessage(NetworkMessage):
    protocolId = 740

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.characterId = 0
        self.isReady = False

    def getMessageId(self):
        return 740

    def initGameFightHumanReadyStateMessage(self, param1=0, param2=False):
        self.characterId = param1
        self.isReady = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.characterId = 0
        self.isReady = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightHumanReadyStateMessage(param1)

    def serializeAs_GameFightHumanReadyStateMessage(self, param1):
        if self.characterId < 0 or self.characterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.characterId) + ") on element characterId.")
        param1.write_var_long(self.characterId)
        param1.write_boolean(self.isReady)

    def deserialize(self, param1):
        self.deserializeAs_GameFightHumanReadyStateMessage(param1)

    def deserializeAs_GameFightHumanReadyStateMessage(self, param1):
        self._characterIdFunc(param1)
        self._isReadyFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightHumanReadyStateMessage(param1)

    def deserializeAsyncAs_GameFightHumanReadyStateMessage(self, param1):
        param1.add_child(self._characterIdFunc)
        param1.add_child(self._isReadyFunc)

    def _characterIdFunc(self, param1):
        self.characterId = param1.read_var_uh_long()
        if self.characterId < 0 or self.characterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.characterId) + ") on element of GameFightHumanReadyStateMessage.characterId.")

    def _isReadyFunc(self, param1):
        self.isReady = param1.read_boolean()


class GameFightJoinMessage(NetworkMessage):
    protocolId = 702

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.isTeamPhase = False
        self.canBeCancelled = False
        self.canSayReady = False
        self.isFightStarted = False
        self.timeMaxBeforeFightStart = 0
        self.fightType = 0

    def getMessageId(self):
        return 702

    def initGameFightJoinMessage(self, param1=False, param2=False, param3=False, param4=False, param5=0, param6=0):
        self.isTeamPhase = param1
        self.canBeCancelled = param2
        self.canSayReady = param3
        self.isFightStarted = param4
        self.timeMaxBeforeFightStart = param5
        self.fightType = param6
        self._isInitialized = True
        return self

    def reset(self):
        self.isTeamPhase = False
        self.canBeCancelled = False
        self.canSayReady = False
        self.isFightStarted = False
        self.timeMaxBeforeFightStart = 0
        self.fightType = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightJoinMessage(param1)

    def serializeAs_GameFightJoinMessage(self, param1):
        _loc2_ = 0
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,0,self.isTeamPhase)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,1,self.canBeCancelled)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,2,self.canSayReady)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,3,self.isFightStarted)
        param1.write_byte(_loc2_)
        if self.timeMaxBeforeFightStart < 0:
            raise RuntimeError("Forbidden value (" + str(self.timeMaxBeforeFightStart) + ") on element timeMaxBeforeFightStart.")
        param1.write_short(self.timeMaxBeforeFightStart)
        param1.write_byte(self.fightType)

    def deserialize(self, param1):
        self.deserializeAs_GameFightJoinMessage(param1)

    def deserializeAs_GameFightJoinMessage(self, param1):
        self.deserializeByteBoxes(param1)
        self._timeMaxBeforeFightStartFunc(param1)
        self._fightTypeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightJoinMessage(param1)

    def deserializeAsyncAs_GameFightJoinMessage(self, param1):
        param1.add_child(self.deserializeByteBoxes)
        param1.add_child(self._timeMaxBeforeFightStartFunc)
        param1.add_child(self._fightTypeFunc)

    def deserializeByteBoxes(self, param1):
        _loc2_ = param1.read_byte()
        self.isTeamPhase = BooleanByteWrapper.get_flag(_loc2_,0)
        self.canBeCancelled = BooleanByteWrapper.get_flag(_loc2_,1)
        self.canSayReady = BooleanByteWrapper.get_flag(_loc2_,2)
        self.isFightStarted = BooleanByteWrapper.get_flag(_loc2_,3)

    def _timeMaxBeforeFightStartFunc(self, param1):
        self.timeMaxBeforeFightStart = param1.read_short()
        if self.timeMaxBeforeFightStart < 0:
            raise RuntimeError("Forbidden value (" + str(self.timeMaxBeforeFightStart) + ") on element of GameFightJoinMessage.timeMaxBeforeFightStart.")

    def _fightTypeFunc(self, param1):
        self.fightType = param1.read_byte()
        if self.fightType < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightType) + ") on element of GameFightJoinMessage.fightType.")


class GameFightJoinRequestMessage(NetworkMessage):
    protocolId = 701

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fighterId = 0
        self.fightId = 0

    def getMessageId(self):
        return 701

    def initGameFightJoinRequestMessage(self, param1=0, param2=0):
        self.fighterId = param1
        self.fightId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.fighterId = 0
        self.fightId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightJoinRequestMessage(param1)

    def serializeAs_GameFightJoinRequestMessage(self, param1):
        if self.fighterId < -9007199254740990 or self.fighterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.fighterId) + ") on element fighterId.")
        param1.write_double(self.fighterId)
        param1.write_int(self.fightId)

    def deserialize(self, param1):
        self.deserializeAs_GameFightJoinRequestMessage(param1)

    def deserializeAs_GameFightJoinRequestMessage(self, param1):
        self._fighterIdFunc(param1)
        self._fightIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightJoinRequestMessage(param1)

    def deserializeAsyncAs_GameFightJoinRequestMessage(self, param1):
        param1.add_child(self._fighterIdFunc)
        param1.add_child(self._fightIdFunc)

    def _fighterIdFunc(self, param1):
        self.fighterId = param1.read_double()
        if self.fighterId < -9007199254740990 or self.fighterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.fighterId) + ") on element of GameFightJoinRequestMessage.fighterId.")

    def _fightIdFunc(self, param1):
        self.fightId = param1.read_int()


class GameFightLeaveMessage(NetworkMessage):
    protocolId = 721

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.charId = 0

    def getMessageId(self):
        return 721

    def initGameFightLeaveMessage(self, param1=0):
        self.charId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.charId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightLeaveMessage(param1)

    def serializeAs_GameFightLeaveMessage(self, param1):
        if self.charId < -9007199254740990 or self.charId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.charId) + ") on element charId.")
        param1.write_double(self.charId)

    def deserialize(self, param1):
        self.deserializeAs_GameFightLeaveMessage(param1)

    def deserializeAs_GameFightLeaveMessage(self, param1):
        self._charIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightLeaveMessage(param1)

    def deserializeAsyncAs_GameFightLeaveMessage(self, param1):
        param1.add_child(self._charIdFunc)

    def _charIdFunc(self, param1):
        self.charId = param1.read_double()
        if self.charId < -9007199254740990 or self.charId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.charId) + ") on element of GameFightLeaveMessage.charId.")


class GameFightNewRoundMessage(NetworkMessage):
    protocolId = 6239

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.roundNumber = 0

    def getMessageId(self):
        return 6239

    def initGameFightNewRoundMessage(self, param1=0):
        self.roundNumber = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.roundNumber = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightNewRoundMessage(param1)

    def serializeAs_GameFightNewRoundMessage(self, param1):
        if self.roundNumber < 0:
            raise RuntimeError("Forbidden value (" + str(self.roundNumber) + ") on element roundNumber.")
        param1.write_var_int(self.roundNumber)

    def deserialize(self, param1):
        self.deserializeAs_GameFightNewRoundMessage(param1)

    def deserializeAs_GameFightNewRoundMessage(self, param1):
        self._roundNumberFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightNewRoundMessage(param1)

    def deserializeAsyncAs_GameFightNewRoundMessage(self, param1):
        param1.add_child(self._roundNumberFunc)

    def _roundNumberFunc(self, param1):
        self.roundNumber = param1.read_var_uh_int()
        if self.roundNumber < 0:
            raise RuntimeError("Forbidden value (" + str(self.roundNumber) + ") on element of GameFightNewRoundMessage.roundNumber.")


class GameFightNewWaveMessage(NetworkMessage):
    protocolId = 6490

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.id = 0
        self.teamId = 2
        self.nbTurnBeforeNextWave = 0

    def getMessageId(self):
        return 6490

    def initGameFightNewWaveMessage(self, param1=0, param2=2, param3=0):
        self.id = param1
        self.teamId = param2
        self.nbTurnBeforeNextWave = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.id = 0
        self.teamId = 2
        self.nbTurnBeforeNextWave = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightNewWaveMessage(param1)

    def serializeAs_GameFightNewWaveMessage(self, param1):
        if self.id < 0:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element id.")
        param1.write_byte(self.id)
        param1.write_byte(self.teamId)
        param1.write_short(self.nbTurnBeforeNextWave)

    def deserialize(self, param1):
        self.deserializeAs_GameFightNewWaveMessage(param1)

    def deserializeAs_GameFightNewWaveMessage(self, param1):
        self._idFunc(param1)
        self._teamIdFunc(param1)
        self._nbTurnBeforeNextWaveFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightNewWaveMessage(param1)

    def deserializeAsyncAs_GameFightNewWaveMessage(self, param1):
        param1.add_child(self._idFunc)
        param1.add_child(self._teamIdFunc)
        param1.add_child(self._nbTurnBeforeNextWaveFunc)

    def _idFunc(self, param1):
        self.id = param1.read_byte()
        if self.id < 0:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element of GameFightNewWaveMessage.id.")

    def _teamIdFunc(self, param1):
        self.teamId = param1.read_byte()
        if self.teamId < 0:
            raise RuntimeError("Forbidden value (" + str(self.teamId) + ") on element of GameFightNewWaveMessage.teamId.")

    def _nbTurnBeforeNextWaveFunc(self, param1):
        self.nbTurnBeforeNextWave = param1.read_short()


class GameFightOptionStateUpdateMessage(NetworkMessage):
    protocolId = 5927

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fightId = 0
        self.teamId = 2
        self.option = 3
        self.state = False

    def getMessageId(self):
        return 5927

    def initGameFightOptionStateUpdateMessage(self, param1=0, param2=2, param3=3, param4=False):
        self.fightId = param1
        self.teamId = param2
        self.option = param3
        self.state = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.fightId = 0
        self.teamId = 2
        self.option = 3
        self.state = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightOptionStateUpdateMessage(param1)

    def serializeAs_GameFightOptionStateUpdateMessage(self, param1):
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element fightId.")
        param1.write_short(self.fightId)
        param1.write_byte(self.teamId)
        param1.write_byte(self.option)
        param1.write_boolean(self.state)

    def deserialize(self, param1):
        self.deserializeAs_GameFightOptionStateUpdateMessage(param1)

    def deserializeAs_GameFightOptionStateUpdateMessage(self, param1):
        self._fightIdFunc(param1)
        self._teamIdFunc(param1)
        self._optionFunc(param1)
        self._stateFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightOptionStateUpdateMessage(param1)

    def deserializeAsyncAs_GameFightOptionStateUpdateMessage(self, param1):
        param1.add_child(self._fightIdFunc)
        param1.add_child(self._teamIdFunc)
        param1.add_child(self._optionFunc)
        param1.add_child(self._stateFunc)

    def _fightIdFunc(self, param1):
        self.fightId = param1.read_short()
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element of GameFightOptionStateUpdateMessage.fightId.")

    def _teamIdFunc(self, param1):
        self.teamId = param1.read_byte()
        if self.teamId < 0:
            raise RuntimeError("Forbidden value (" + str(self.teamId) + ") on element of GameFightOptionStateUpdateMessage.teamId.")

    def _optionFunc(self, param1):
        self.option = param1.read_byte()
        if self.option < 0:
            raise RuntimeError("Forbidden value (" + str(self.option) + ") on element of GameFightOptionStateUpdateMessage.option.")

    def _stateFunc(self, param1):
        self.state = param1.read_boolean()


class GameFightOptionToggleMessage(NetworkMessage):
    protocolId = 707

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.option = 3

    def getMessageId(self):
        return 707

    def initGameFightOptionToggleMessage(self, param1=3):
        self.option = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.option = 3
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightOptionToggleMessage(param1)

    def serializeAs_GameFightOptionToggleMessage(self, param1):
        param1.write_byte(self.option)

    def deserialize(self, param1):
        self.deserializeAs_GameFightOptionToggleMessage(param1)

    def deserializeAs_GameFightOptionToggleMessage(self, param1):
        self._optionFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightOptionToggleMessage(param1)

    def deserializeAsyncAs_GameFightOptionToggleMessage(self, param1):
        param1.add_child(self._optionFunc)

    def _optionFunc(self, param1):
        self.option = param1.read_byte()
        if self.option < 0:
            raise RuntimeError("Forbidden value (" + str(self.option) + ") on element of GameFightOptionToggleMessage.option.")


class GameFightPlacementPositionRequestMessage(NetworkMessage):
    protocolId = 704

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.cellId = 0

    def getMessageId(self):
        return 704

    def initGameFightPlacementPositionRequestMessage(self, param1=0):
        self.cellId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.cellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightPlacementPositionRequestMessage(param1)

    def serializeAs_GameFightPlacementPositionRequestMessage(self, param1):
        if self.cellId < 0 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element cellId.")
        param1.write_var_short(self.cellId)

    def deserialize(self, param1):
        self.deserializeAs_GameFightPlacementPositionRequestMessage(param1)

    def deserializeAs_GameFightPlacementPositionRequestMessage(self, param1):
        self._cellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightPlacementPositionRequestMessage(param1)

    def deserializeAsyncAs_GameFightPlacementPositionRequestMessage(self, param1):
        param1.add_child(self._cellIdFunc)

    def _cellIdFunc(self, param1):
        self.cellId = param1.read_var_uh_short()
        if self.cellId < 0 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element of GameFightPlacementPositionRequestMessage.cellId.")


class GameFightPlacementPossiblePositionsMessage(NetworkMessage):
    protocolId = 703

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.positionsForChallengers = []
        self.positionsForDefenders = []
        self.teamNumber = 2
        self._positionsForChallengerstree = FuncTree()
        self._positionsForDefenderstree = FuncTree()

    def getMessageId(self):
        return 703

    def initGameFightPlacementPossiblePositionsMessage(self, param1=[], param2=[], param3=2):
        self.positionsForChallengers = param1
        self.positionsForDefenders = param2
        self.teamNumber = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.positionsForChallengers = []
        self.positionsForDefenders = []
        self.teamNumber = 2
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightPlacementPossiblePositionsMessage(param1)

    def serializeAs_GameFightPlacementPossiblePositionsMessage(self, param1):
        param1.write_short(len(self.positionsForChallengers))
        _loc2_ = 0
        while _loc2_ < len(self.positionsForChallengers):
            if self.positionsForChallengers[_loc2_] < 0 or self.positionsForChallengers[_loc2_] > 559:
                raise RuntimeError("Forbidden value (" + str(self.positionsForChallengers[_loc2_]) + ") on element 1 (starting at 1) of positionsForChallengers.")
            param1.write_var_short(self.positionsForChallengers[_loc2_])
            _loc2_ += 1
        param1.write_short(len(self.positionsForDefenders))
        _loc3_ = 0
        while _loc3_ < len(self.positionsForDefenders):
            if self.positionsForDefenders[_loc3_] < 0 or self.positionsForDefenders[_loc3_] > 559:
                raise RuntimeError("Forbidden value (" + str(self.positionsForDefenders[_loc3_]) + ") on element 2 (starting at 1) of positionsForDefenders.")
            param1.write_var_short(self.positionsForDefenders[_loc3_])
            _loc3_ += 1
        param1.write_byte(self.teamNumber)

    def deserialize(self, param1):
        self.deserializeAs_GameFightPlacementPossiblePositionsMessage(param1)

    def deserializeAs_GameFightPlacementPossiblePositionsMessage(self, param1):
        _loc6_ = 0
        _loc7_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = param1.read_var_uh_short()
            if _loc6_ < 0 or _loc6_ > 559:
                raise RuntimeError("Forbidden value (" + str(_loc6_) + ") on elements of positionsForChallengers.")
            self.positionsForChallengers.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = param1.read_var_uh_short()
            if _loc7_ < 0 or _loc7_ > 559:
                raise RuntimeError("Forbidden value (" + str(_loc7_) + ") on elements of positionsForDefenders.")
            self.positionsForDefenders.append(_loc7_)
            _loc5_ += 1
        self._teamNumberFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightPlacementPossiblePositionsMessage(param1)

    def deserializeAsyncAs_GameFightPlacementPossiblePositionsMessage(self, param1):
        self._positionsForChallengerstree = param1.add_child(self._positionsForChallengerstreeFunc)
        self._positionsForDefenderstree = param1.add_child(self._positionsForDefenderstreeFunc)
        param1.add_child(self._teamNumberFunc)

    def _positionsForChallengerstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._positionsForChallengerstree.add_child(self._positionsForChallengersFunc)
            _loc3_ += 1

    def _positionsForChallengersFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0 or _loc2_ > 559:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of positionsForChallengers.")
        self.positionsForChallengers.append(_loc2_)

    def _positionsForDefenderstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._positionsForDefenderstree.add_child(self._positionsForDefendersFunc)
            _loc3_ += 1

    def _positionsForDefendersFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0 or _loc2_ > 559:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of positionsForDefenders.")
        self.positionsForDefenders.append(_loc2_)

    def _teamNumberFunc(self, param1):
        self.teamNumber = param1.read_byte()
        if self.teamNumber < 0:
            raise RuntimeError("Forbidden value (" + str(self.teamNumber) + ") on element of GameFightPlacementPossiblePositionsMessage.teamNumber.")


class GameFightPlacementSwapPositionsAcceptMessage(NetworkMessage):
    protocolId = 6547

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.requestId = 0

    def getMessageId(self):
        return 6547

    def initGameFightPlacementSwapPositionsAcceptMessage(self, param1=0):
        self.requestId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.requestId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightPlacementSwapPositionsAcceptMessage(param1)

    def serializeAs_GameFightPlacementSwapPositionsAcceptMessage(self, param1):
        if self.requestId < 0:
            raise RuntimeError("Forbidden value (" + str(self.requestId) + ") on element requestId.")
        param1.write_int(self.requestId)

    def deserialize(self, param1):
        self.deserializeAs_GameFightPlacementSwapPositionsAcceptMessage(param1)

    def deserializeAs_GameFightPlacementSwapPositionsAcceptMessage(self, param1):
        self._requestIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightPlacementSwapPositionsAcceptMessage(param1)

    def deserializeAsyncAs_GameFightPlacementSwapPositionsAcceptMessage(self, param1):
        param1.add_child(self._requestIdFunc)

    def _requestIdFunc(self, param1):
        self.requestId = param1.read_int()
        if self.requestId < 0:
            raise RuntimeError("Forbidden value (" + str(self.requestId) + ") on element of GameFightPlacementSwapPositionsAcceptMessage.requestId.")


class GameFightPlacementSwapPositionsCancelledMessage(NetworkMessage):
    protocolId = 6546

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.requestId = 0
        self.cancellerId = 0

    def getMessageId(self):
        return 6546

    def initGameFightPlacementSwapPositionsCancelledMessage(self, param1=0, param2=0):
        self.requestId = param1
        self.cancellerId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.requestId = 0
        self.cancellerId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightPlacementSwapPositionsCancelledMessage(param1)

    def serializeAs_GameFightPlacementSwapPositionsCancelledMessage(self, param1):
        if self.requestId < 0:
            raise RuntimeError("Forbidden value (" + str(self.requestId) + ") on element requestId.")
        param1.write_int(self.requestId)
        if self.cancellerId < -9007199254740990 or self.cancellerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.cancellerId) + ") on element cancellerId.")
        param1.write_double(self.cancellerId)

    def deserialize(self, param1):
        self.deserializeAs_GameFightPlacementSwapPositionsCancelledMessage(param1)

    def deserializeAs_GameFightPlacementSwapPositionsCancelledMessage(self, param1):
        self._requestIdFunc(param1)
        self._cancellerIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightPlacementSwapPositionsCancelledMessage(param1)

    def deserializeAsyncAs_GameFightPlacementSwapPositionsCancelledMessage(self, param1):
        param1.add_child(self._requestIdFunc)
        param1.add_child(self._cancellerIdFunc)

    def _requestIdFunc(self, param1):
        self.requestId = param1.read_int()
        if self.requestId < 0:
            raise RuntimeError("Forbidden value (" + str(self.requestId) + ") on element of GameFightPlacementSwapPositionsCancelledMessage.requestId.")

    def _cancellerIdFunc(self, param1):
        self.cancellerId = param1.read_double()
        if self.cancellerId < -9007199254740990 or self.cancellerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.cancellerId) + ") on element of GameFightPlacementSwapPositionsCancelledMessage.cancellerId.")


class GameFightPlacementSwapPositionsCancelMessage(NetworkMessage):
    protocolId = 6543

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.requestId = 0

    def getMessageId(self):
        return 6543

    def initGameFightPlacementSwapPositionsCancelMessage(self, param1=0):
        self.requestId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.requestId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightPlacementSwapPositionsCancelMessage(param1)

    def serializeAs_GameFightPlacementSwapPositionsCancelMessage(self, param1):
        if self.requestId < 0:
            raise RuntimeError("Forbidden value (" + str(self.requestId) + ") on element requestId.")
        param1.write_int(self.requestId)

    def deserialize(self, param1):
        self.deserializeAs_GameFightPlacementSwapPositionsCancelMessage(param1)

    def deserializeAs_GameFightPlacementSwapPositionsCancelMessage(self, param1):
        self._requestIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightPlacementSwapPositionsCancelMessage(param1)

    def deserializeAsyncAs_GameFightPlacementSwapPositionsCancelMessage(self, param1):
        param1.add_child(self._requestIdFunc)

    def _requestIdFunc(self, param1):
        self.requestId = param1.read_int()
        if self.requestId < 0:
            raise RuntimeError("Forbidden value (" + str(self.requestId) + ") on element of GameFightPlacementSwapPositionsCancelMessage.requestId.")


class GameFightPlacementSwapPositionsErrorMessage(NetworkMessage):
    protocolId = 6548

    def getMessageId(self):
        return 6548

    def initGameFightPlacementSwapPositionsErrorMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_GameFightPlacementSwapPositionsErrorMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_GameFightPlacementSwapPositionsErrorMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_GameFightPlacementSwapPositionsErrorMessage(self, param1):
        pass


class GameFightPlacementSwapPositionsMessage(NetworkMessage):
    protocolId = 6544

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dispositions = []
        self._dispositionstree = FuncTree()
        self._dispositionsindex = 0

    def getMessageId(self):
        return 6544

    def initGameFightPlacementSwapPositionsMessage(self, param1=[]):
        self.dispositions = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.dispositions = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightPlacementSwapPositionsMessage(param1)

    def serializeAs_GameFightPlacementSwapPositionsMessage(self, param1):
        _loc2_ = 0
        while _loc2_ < 2:
            self.dispositions[_loc2_].serializeAs_IdentifiedEntityDispositionInformations(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GameFightPlacementSwapPositionsMessage(param1)

    def deserializeAs_GameFightPlacementSwapPositionsMessage(self, param1):
        _loc2_ = 0
        while _loc2_ < 2:
            self.dispositions.append(IdentifiedEntityDispositionInformations())
            self.dispositions[_loc2_].deserialize(param1)
            _loc2_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightPlacementSwapPositionsMessage(param1)

    def deserializeAsyncAs_GameFightPlacementSwapPositionsMessage(self, param1):
        self._dispositionstree = param1.add_child(self._dispositionstreeFunc)

    def _dispositionstreeFunc(self, param1):
        _loc2_ = 0
        while _loc2_ < 2:
            self._dispositionstree.add_child(self._dispositionsFunc)
            _loc2_ += 1

    def _dispositionsFunc(self, param1):
        self.dispositions[self._dispositionsindex] = IdentifiedEntityDispositionInformations()
        self.dispositions[self._dispositionsindex].deserializeAsync(self._dispositionstree.children[self._dispositionsindex])
        self._dispositionsindex += 1


class GameFightPlacementSwapPositionsOfferMessage(NetworkMessage):
    protocolId = 6542

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.requestId = 0
        self.requesterId = 0
        self.requesterCellId = 0
        self.requestedId = 0
        self.requestedCellId = 0

    def getMessageId(self):
        return 6542

    def initGameFightPlacementSwapPositionsOfferMessage(self, param1=0, param2=0, param3=0, param4=0, param5=0):
        self.requestId = param1
        self.requesterId = param2
        self.requesterCellId = param3
        self.requestedId = param4
        self.requestedCellId = param5
        self._isInitialized = True
        return self

    def reset(self):
        self.requestId = 0
        self.requesterId = 0
        self.requesterCellId = 0
        self.requestedId = 0
        self.requestedCellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightPlacementSwapPositionsOfferMessage(param1)

    def serializeAs_GameFightPlacementSwapPositionsOfferMessage(self, param1):
        if self.requestId < 0:
            raise RuntimeError("Forbidden value (" + str(self.requestId) + ") on element requestId.")
        param1.write_int(self.requestId)
        if self.requesterId < -9007199254740990 or self.requesterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.requesterId) + ") on element requesterId.")
        param1.write_double(self.requesterId)
        if self.requesterCellId < 0 or self.requesterCellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.requesterCellId) + ") on element requesterCellId.")
        param1.write_var_short(self.requesterCellId)
        if self.requestedId < -9007199254740990 or self.requestedId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.requestedId) + ") on element requestedId.")
        param1.write_double(self.requestedId)
        if self.requestedCellId < 0 or self.requestedCellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.requestedCellId) + ") on element requestedCellId.")
        param1.write_var_short(self.requestedCellId)

    def deserialize(self, param1):
        self.deserializeAs_GameFightPlacementSwapPositionsOfferMessage(param1)

    def deserializeAs_GameFightPlacementSwapPositionsOfferMessage(self, param1):
        self._requestIdFunc(param1)
        self._requesterIdFunc(param1)
        self._requesterCellIdFunc(param1)
        self._requestedIdFunc(param1)
        self._requestedCellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightPlacementSwapPositionsOfferMessage(param1)

    def deserializeAsyncAs_GameFightPlacementSwapPositionsOfferMessage(self, param1):
        param1.add_child(self._requestIdFunc)
        param1.add_child(self._requesterIdFunc)
        param1.add_child(self._requesterCellIdFunc)
        param1.add_child(self._requestedIdFunc)
        param1.add_child(self._requestedCellIdFunc)

    def _requestIdFunc(self, param1):
        self.requestId = param1.read_int()
        if self.requestId < 0:
            raise RuntimeError("Forbidden value (" + str(self.requestId) + ") on element of GameFightPlacementSwapPositionsOfferMessage.requestId.")

    def _requesterIdFunc(self, param1):
        self.requesterId = param1.read_double()
        if self.requesterId < -9007199254740990 or self.requesterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.requesterId) + ") on element of GameFightPlacementSwapPositionsOfferMessage.requesterId.")

    def _requesterCellIdFunc(self, param1):
        self.requesterCellId = param1.read_var_uh_short()
        if self.requesterCellId < 0 or self.requesterCellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.requesterCellId) + ") on element of GameFightPlacementSwapPositionsOfferMessage.requesterCellId.")

    def _requestedIdFunc(self, param1):
        self.requestedId = param1.read_double()
        if self.requestedId < -9007199254740990 or self.requestedId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.requestedId) + ") on element of GameFightPlacementSwapPositionsOfferMessage.requestedId.")

    def _requestedCellIdFunc(self, param1):
        self.requestedCellId = param1.read_var_uh_short()
        if self.requestedCellId < 0 or self.requestedCellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.requestedCellId) + ") on element of GameFightPlacementSwapPositionsOfferMessage.requestedCellId.")


class GameFightReadyMessage(NetworkMessage):
    protocolId = 708

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.isReady = False

    def getMessageId(self):
        return 708

    def initGameFightReadyMessage(self, param1=False):
        self.isReady = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.isReady = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightReadyMessage(param1)

    def serializeAs_GameFightReadyMessage(self, param1):
        param1.write_boolean(self.isReady)

    def deserialize(self, param1):
        self.deserializeAs_GameFightReadyMessage(param1)

    def deserializeAs_GameFightReadyMessage(self, param1):
        self._isReadyFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightReadyMessage(param1)

    def deserializeAsyncAs_GameFightReadyMessage(self, param1):
        param1.add_child(self._isReadyFunc)

    def _isReadyFunc(self, param1):
        self.isReady = param1.read_boolean()


class GameFightRemoveTeamMemberMessage(NetworkMessage):
    protocolId = 711

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fightId = 0
        self.teamId = 2
        self.charId = 0

    def getMessageId(self):
        return 711

    def initGameFightRemoveTeamMemberMessage(self, param1=0, param2=2, param3=0):
        self.fightId = param1
        self.teamId = param2
        self.charId = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.fightId = 0
        self.teamId = 2
        self.charId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightRemoveTeamMemberMessage(param1)

    def serializeAs_GameFightRemoveTeamMemberMessage(self, param1):
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element fightId.")
        param1.write_short(self.fightId)
        param1.write_byte(self.teamId)
        if self.charId < -9007199254740990 or self.charId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.charId) + ") on element charId.")
        param1.write_double(self.charId)

    def deserialize(self, param1):
        self.deserializeAs_GameFightRemoveTeamMemberMessage(param1)

    def deserializeAs_GameFightRemoveTeamMemberMessage(self, param1):
        self._fightIdFunc(param1)
        self._teamIdFunc(param1)
        self._charIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightRemoveTeamMemberMessage(param1)

    def deserializeAsyncAs_GameFightRemoveTeamMemberMessage(self, param1):
        param1.add_child(self._fightIdFunc)
        param1.add_child(self._teamIdFunc)
        param1.add_child(self._charIdFunc)

    def _fightIdFunc(self, param1):
        self.fightId = param1.read_short()
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element of GameFightRemoveTeamMemberMessage.fightId.")

    def _teamIdFunc(self, param1):
        self.teamId = param1.read_byte()
        if self.teamId < 0:
            raise RuntimeError("Forbidden value (" + str(self.teamId) + ") on element of GameFightRemoveTeamMemberMessage.teamId.")

    def _charIdFunc(self, param1):
        self.charId = param1.read_double()
        if self.charId < -9007199254740990 or self.charId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.charId) + ") on element of GameFightRemoveTeamMemberMessage.charId.")


class GameFightSpectateMessage(NetworkMessage):
    protocolId = 6069

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.effects = []
        self.marks = []
        self.gameTurn = 0
        self.fightStart = 0
        self.idols = []
        self._effectstree = FuncTree()
        self._markstree = FuncTree()
        self._idolstree = FuncTree()

    def getMessageId(self):
        return 6069

    def initGameFightSpectateMessage(self, param1=[], param2=[], param3=0, param4=0, param5=[]):
        self.effects = param1
        self.marks = param2
        self.gameTurn = param3
        self.fightStart = param4
        self.idols = param5
        self._isInitialized = True
        return self

    def reset(self):
        self.effects = []
        self.marks = []
        self.gameTurn = 0
        self.fightStart = 0
        self.idols = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightSpectateMessage(param1)

    def serializeAs_GameFightSpectateMessage(self, param1):
        param1.write_short(len(self.effects))
        _loc2_ = 0
        while _loc2_ < len(self.effects):
            as_parent(self.effects[_loc2_], FightDispellableEffectExtendedInformations).serializeAs_FightDispellableEffectExtendedInformations(param1)
            _loc2_ += 1
        param1.write_short(len(self.marks))
        _loc3_ = 0
        while _loc3_ < len(self.marks):
            as_parent(self.marks[_loc3_], GameActionMark).serializeAs_GameActionMark(param1)
            _loc3_ += 1
        if self.gameTurn < 0:
            raise RuntimeError("Forbidden value (" + str(self.gameTurn) + ") on element gameTurn.")
        param1.write_var_short(self.gameTurn)
        if self.fightStart < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightStart) + ") on element fightStart.")
        param1.write_int(self.fightStart)
        param1.write_short(len(self.idols))
        _loc4_ = 0
        while _loc4_ < len(self.idols):
            as_parent(self.idols[_loc4_], Idol).serializeAs_Idol(param1)
            _loc4_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GameFightSpectateMessage(param1)

    def deserializeAs_GameFightSpectateMessage(self, param1):
        _loc8_ = None
        _loc9_ = None
        _loc10_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc8_ = FightDispellableEffectExtendedInformations()
            _loc8_.deserialize(param1)
            self.effects.append(_loc8_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc9_ = GameActionMark()
            _loc9_.deserialize(param1)
            self.marks.append(_loc9_)
            _loc5_ += 1
        self._gameTurnFunc(param1)
        self._fightStartFunc(param1)
        _loc6_ = param1.read_unsigned_short()
        _loc7_ = 0
        while _loc7_ < _loc6_:
            _loc10_ = Idol()
            _loc10_.deserialize(param1)
            self.idols.append(_loc10_)
            _loc7_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightSpectateMessage(param1)

    def deserializeAsyncAs_GameFightSpectateMessage(self, param1):
        self._effectstree = param1.add_child(self._effectstreeFunc)
        self._markstree = param1.add_child(self._markstreeFunc)
        param1.add_child(self._gameTurnFunc)
        param1.add_child(self._fightStartFunc)
        self._idolstree = param1.add_child(self._idolstreeFunc)

    def _effectstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._effectstree.add_child(self._effectsFunc)
            _loc3_ += 1

    def _effectsFunc(self, param1):
        _loc2_ = FightDispellableEffectExtendedInformations()
        _loc2_.deserialize(param1)
        self.effects.append(_loc2_)

    def _markstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._markstree.add_child(self._marksFunc)
            _loc3_ += 1

    def _marksFunc(self, param1):
        _loc2_ = GameActionMark()
        _loc2_.deserialize(param1)
        self.marks.append(_loc2_)

    def _gameTurnFunc(self, param1):
        self.gameTurn = param1.read_var_uh_short()
        if self.gameTurn < 0:
            raise RuntimeError("Forbidden value (" + str(self.gameTurn) + ") on element of GameFightSpectateMessage.gameTurn.")

    def _fightStartFunc(self, param1):
        self.fightStart = param1.read_int()
        if self.fightStart < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightStart) + ") on element of GameFightSpectateMessage.fightStart.")

    def _idolstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._idolstree.add_child(self._idolsFunc)
            _loc3_ += 1

    def _idolsFunc(self, param1):
        _loc2_ = Idol()
        _loc2_.deserialize(param1)
        self.idols.append(_loc2_)


class GameFightSpectatePlayerRequestMessage(NetworkMessage):
    protocolId = 6474

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.playerId = 0

    def getMessageId(self):
        return 6474

    def initGameFightSpectatePlayerRequestMessage(self, param1=0):
        self.playerId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.playerId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightSpectatePlayerRequestMessage(param1)

    def serializeAs_GameFightSpectatePlayerRequestMessage(self, param1):
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element playerId.")
        param1.write_var_long(self.playerId)

    def deserialize(self, param1):
        self.deserializeAs_GameFightSpectatePlayerRequestMessage(param1)

    def deserializeAs_GameFightSpectatePlayerRequestMessage(self, param1):
        self._playerIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightSpectatePlayerRequestMessage(param1)

    def deserializeAsyncAs_GameFightSpectatePlayerRequestMessage(self, param1):
        param1.add_child(self._playerIdFunc)

    def _playerIdFunc(self, param1):
        self.playerId = param1.read_var_uh_long()
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element of GameFightSpectatePlayerRequestMessage.playerId.")


class GameFightStartingMessage(NetworkMessage):
    protocolId = 700

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fightType = 0
        self.attackerId = 0
        self.defenderId = 0

    def getMessageId(self):
        return 700

    def initGameFightStartingMessage(self, param1=0, param2=0, param3=0):
        self.fightType = param1
        self.attackerId = param2
        self.defenderId = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.fightType = 0
        self.attackerId = 0
        self.defenderId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightStartingMessage(param1)

    def serializeAs_GameFightStartingMessage(self, param1):
        param1.write_byte(self.fightType)
        if self.attackerId < -9007199254740990 or self.attackerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.attackerId) + ") on element attackerId.")
        param1.write_double(self.attackerId)
        if self.defenderId < -9007199254740990 or self.defenderId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.defenderId) + ") on element defenderId.")
        param1.write_double(self.defenderId)

    def deserialize(self, param1):
        self.deserializeAs_GameFightStartingMessage(param1)

    def deserializeAs_GameFightStartingMessage(self, param1):
        self._fightTypeFunc(param1)
        self._attackerIdFunc(param1)
        self._defenderIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightStartingMessage(param1)

    def deserializeAsyncAs_GameFightStartingMessage(self, param1):
        param1.add_child(self._fightTypeFunc)
        param1.add_child(self._attackerIdFunc)
        param1.add_child(self._defenderIdFunc)

    def _fightTypeFunc(self, param1):
        self.fightType = param1.read_byte()
        if self.fightType < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightType) + ") on element of GameFightStartingMessage.fightType.")

    def _attackerIdFunc(self, param1):
        self.attackerId = param1.read_double()
        if self.attackerId < -9007199254740990 or self.attackerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.attackerId) + ") on element of GameFightStartingMessage.attackerId.")

    def _defenderIdFunc(self, param1):
        self.defenderId = param1.read_double()
        if self.defenderId < -9007199254740990 or self.defenderId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.defenderId) + ") on element of GameFightStartingMessage.defenderId.")


class GameFightStartMessage(NetworkMessage):
    protocolId = 712

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.idols = []
        self._idolstree = FuncTree()

    def getMessageId(self):
        return 712

    def initGameFightStartMessage(self, param1=[]):
        self.idols = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.idols = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightStartMessage(param1)

    def serializeAs_GameFightStartMessage(self, param1):
        param1.write_short(len(self.idols))
        _loc2_ = 0
        while _loc2_ < len(self.idols):
            as_parent(self.idols[_loc2_], Idol).serializeAs_Idol(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GameFightStartMessage(param1)

    def deserializeAs_GameFightStartMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = Idol()
            _loc4_.deserialize(param1)
            self.idols.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightStartMessage(param1)

    def deserializeAsyncAs_GameFightStartMessage(self, param1):
        self._idolstree = param1.add_child(self._idolstreeFunc)

    def _idolstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._idolstree.add_child(self._idolsFunc)
            _loc3_ += 1

    def _idolsFunc(self, param1):
        _loc2_ = Idol()
        _loc2_.deserialize(param1)
        self.idols.append(_loc2_)


class GameFightSynchronizeMessage(NetworkMessage):
    protocolId = 5921

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fighters = []
        self._fighterstree = FuncTree()

    def getMessageId(self):
        return 5921

    def initGameFightSynchronizeMessage(self, param1=[]):
        self.fighters = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.fighters = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightSynchronizeMessage(param1)

    def serializeAs_GameFightSynchronizeMessage(self, param1):
        param1.write_short(len(self.fighters))
        _loc2_ = 0
        while _loc2_ < len(self.fighters):
            param1.write_short(as_parent(self.fighters[_loc2_], GameFightFighterInformations).getTypeId())
            as_parent(self.fighters[_loc2_], GameFightFighterInformations).serialize(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GameFightSynchronizeMessage(param1)

    def deserializeAs_GameFightSynchronizeMessage(self, param1):
        _loc4_ = 0
        _loc5_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_unsigned_short()
            _loc5_ = ProtocolTypeManager.get_instance(GameFightFighterInformations,_loc4_)
            _loc5_.deserialize(param1)
            self.fighters.append(_loc5_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightSynchronizeMessage(param1)

    def deserializeAsyncAs_GameFightSynchronizeMessage(self, param1):
        self._fighterstree = param1.add_child(self._fighterstreeFunc)

    def _fighterstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._fighterstree.add_child(self._fightersFunc)
            _loc3_ += 1

    def _fightersFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(GameFightFighterInformations,_loc2_)
        _loc3_.deserialize(param1)
        self.fighters.append(_loc3_)


class GameFightTurnEndMessage(NetworkMessage):
    protocolId = 719

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.id = 0

    def getMessageId(self):
        return 719

    def initGameFightTurnEndMessage(self, param1=0):
        self.id = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.id = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightTurnEndMessage(param1)

    def serializeAs_GameFightTurnEndMessage(self, param1):
        if self.id < -9007199254740990 or self.id > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element id.")
        param1.write_double(self.id)

    def deserialize(self, param1):
        self.deserializeAs_GameFightTurnEndMessage(param1)

    def deserializeAs_GameFightTurnEndMessage(self, param1):
        self._idFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightTurnEndMessage(param1)

    def deserializeAsyncAs_GameFightTurnEndMessage(self, param1):
        param1.add_child(self._idFunc)

    def _idFunc(self, param1):
        self.id = param1.read_double()
        if self.id < -9007199254740990 or self.id > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element of GameFightTurnEndMessage.id.")


class GameFightTurnFinishMessage(NetworkMessage):
    protocolId = 718

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.isAfk = False

    def getMessageId(self):
        return 718

    def initGameFightTurnFinishMessage(self, param1=False):
        self.isAfk = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.isAfk = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightTurnFinishMessage(param1)

    def serializeAs_GameFightTurnFinishMessage(self, param1):
        param1.write_boolean(self.isAfk)

    def deserialize(self, param1):
        self.deserializeAs_GameFightTurnFinishMessage(param1)

    def deserializeAs_GameFightTurnFinishMessage(self, param1):
        self._isAfkFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightTurnFinishMessage(param1)

    def deserializeAsyncAs_GameFightTurnFinishMessage(self, param1):
        param1.add_child(self._isAfkFunc)

    def _isAfkFunc(self, param1):
        self.isAfk = param1.read_boolean()


class GameFightTurnListMessage(NetworkMessage):
    protocolId = 713

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.ids = []
        self.deadsIds = []
        self._idstree = FuncTree()
        self._deadsIdstree = FuncTree()

    def getMessageId(self):
        return 713

    def initGameFightTurnListMessage(self, param1=[], param2=[]):
        self.ids = param1
        self.deadsIds = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.ids = []
        self.deadsIds = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightTurnListMessage(param1)

    def serializeAs_GameFightTurnListMessage(self, param1):
        param1.write_short(len(self.ids))
        _loc2_ = 0
        while _loc2_ < len(self.ids):
            if self.ids[_loc2_] < -9007199254740990 or self.ids[_loc2_] > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(self.ids[_loc2_]) + ") on element 1 (starting at 1) of ids.")
            param1.write_double(self.ids[_loc2_])
            _loc2_ += 1
        param1.write_short(len(self.deadsIds))
        _loc3_ = 0
        while _loc3_ < len(self.deadsIds):
            if self.deadsIds[_loc3_] < -9007199254740990 or self.deadsIds[_loc3_] > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(self.deadsIds[_loc3_]) + ") on element 2 (starting at 1) of deadsIds.")
            param1.write_double(self.deadsIds[_loc3_])
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GameFightTurnListMessage(param1)

    def deserializeAs_GameFightTurnListMessage(self, param1):
        _loc6_ = None
        _loc7_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = param1.read_double()
            if _loc6_ < -9007199254740990 or _loc6_ > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(_loc6_) + ") on elements of ids.")
            self.ids.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = param1.read_double()
            if _loc7_ < -9007199254740990 or _loc7_ > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(_loc7_) + ") on elements of deadsIds.")
            self.deadsIds.append(_loc7_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightTurnListMessage(param1)

    def deserializeAsyncAs_GameFightTurnListMessage(self, param1):
        self._idstree = param1.add_child(self._idstreeFunc)
        self._deadsIdstree = param1.add_child(self._deadsIdstreeFunc)

    def _idstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._idstree.add_child(self._idsFunc)
            _loc3_ += 1

    def _idsFunc(self, param1):
        _loc2_ = param1.read_double()
        if _loc2_ < -9007199254740990 or _loc2_ > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of ids.")
        self.ids.append(_loc2_)

    def _deadsIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._deadsIdstree.add_child(self._deadsIdsFunc)
            _loc3_ += 1

    def _deadsIdsFunc(self, param1):
        _loc2_ = param1.read_double()
        if _loc2_ < -9007199254740990 or _loc2_ > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of deadsIds.")
        self.deadsIds.append(_loc2_)


class GameFightTurnReadyMessage(NetworkMessage):
    protocolId = 716

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.isReady = False

    def getMessageId(self):
        return 716

    def initGameFightTurnReadyMessage(self, param1=False):
        self.isReady = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.isReady = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightTurnReadyMessage(param1)

    def serializeAs_GameFightTurnReadyMessage(self, param1):
        param1.write_boolean(self.isReady)

    def deserialize(self, param1):
        self.deserializeAs_GameFightTurnReadyMessage(param1)

    def deserializeAs_GameFightTurnReadyMessage(self, param1):
        self._isReadyFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightTurnReadyMessage(param1)

    def deserializeAsyncAs_GameFightTurnReadyMessage(self, param1):
        param1.add_child(self._isReadyFunc)

    def _isReadyFunc(self, param1):
        self.isReady = param1.read_boolean()


class GameFightTurnReadyRequestMessage(NetworkMessage):
    protocolId = 715

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.id = 0

    def getMessageId(self):
        return 715

    def initGameFightTurnReadyRequestMessage(self, param1=0):
        self.id = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.id = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightTurnReadyRequestMessage(param1)

    def serializeAs_GameFightTurnReadyRequestMessage(self, param1):
        if self.id < -9007199254740990 or self.id > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element id.")
        param1.write_double(self.id)

    def deserialize(self, param1):
        self.deserializeAs_GameFightTurnReadyRequestMessage(param1)

    def deserializeAs_GameFightTurnReadyRequestMessage(self, param1):
        self._idFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightTurnReadyRequestMessage(param1)

    def deserializeAsyncAs_GameFightTurnReadyRequestMessage(self, param1):
        param1.add_child(self._idFunc)

    def _idFunc(self, param1):
        self.id = param1.read_double()
        if self.id < -9007199254740990 or self.id > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element of GameFightTurnReadyRequestMessage.id.")


class GameFightTurnStartMessage(NetworkMessage):
    protocolId = 714

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.id = 0
        self.waitTime = 0

    def getMessageId(self):
        return 714

    def initGameFightTurnStartMessage(self, param1=0, param2=0):
        self.id = param1
        self.waitTime = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.id = 0
        self.waitTime = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightTurnStartMessage(param1)

    def serializeAs_GameFightTurnStartMessage(self, param1):
        if self.id < -9007199254740990 or self.id > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element id.")
        param1.write_double(self.id)
        if self.waitTime < 0:
            raise RuntimeError("Forbidden value (" + str(self.waitTime) + ") on element waitTime.")
        param1.write_var_int(self.waitTime)

    def deserialize(self, param1):
        self.deserializeAs_GameFightTurnStartMessage(param1)

    def deserializeAs_GameFightTurnStartMessage(self, param1):
        self._idFunc(param1)
        self._waitTimeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightTurnStartMessage(param1)

    def deserializeAsyncAs_GameFightTurnStartMessage(self, param1):
        param1.add_child(self._idFunc)
        param1.add_child(self._waitTimeFunc)

    def _idFunc(self, param1):
        self.id = param1.read_double()
        if self.id < -9007199254740990 or self.id > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element of GameFightTurnStartMessage.id.")

    def _waitTimeFunc(self, param1):
        self.waitTime = param1.read_var_uh_int()
        if self.waitTime < 0:
            raise RuntimeError("Forbidden value (" + str(self.waitTime) + ") on element of GameFightTurnStartMessage.waitTime.")


class GameFightTurnStartPlayingMessage(NetworkMessage):
    protocolId = 6465

    def getMessageId(self):
        return 6465

    def initGameFightTurnStartPlayingMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_GameFightTurnStartPlayingMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_GameFightTurnStartPlayingMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_GameFightTurnStartPlayingMessage(self, param1):
        pass


class GameFightUpdateTeamMessage(NetworkMessage):
    protocolId = 5572

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fightId = 0
        self.team = FightTeamInformations()
        self._teamtree = FuncTree()

    def getMessageId(self):
        return 5572

    def initGameFightUpdateTeamMessage(self, param1=0, param2=None):
        self.fightId = param1
        self.team = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.fightId = 0
        self.team = FightTeamInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightUpdateTeamMessage(param1)

    def serializeAs_GameFightUpdateTeamMessage(self, param1):
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element fightId.")
        param1.write_short(self.fightId)
        self.team.serializeAs_FightTeamInformations(param1)

    def deserialize(self, param1):
        self.deserializeAs_GameFightUpdateTeamMessage(param1)

    def deserializeAs_GameFightUpdateTeamMessage(self, param1):
        self._fightIdFunc(param1)
        self.team = FightTeamInformations()
        self.team.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightUpdateTeamMessage(param1)

    def deserializeAsyncAs_GameFightUpdateTeamMessage(self, param1):
        param1.add_child(self._fightIdFunc)
        self._teamtree = param1.add_child(self._teamtreeFunc)

    def _fightIdFunc(self, param1):
        self.fightId = param1.read_short()
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element of GameFightUpdateTeamMessage.fightId.")

    def _teamtreeFunc(self, param1):
        self.team = FightTeamInformations()
        self.team.deserializeAsync(self._teamtree)


class RefreshCharacterStatsMessage(NetworkMessage):
    protocolId = 6699

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fighterId = 0
        self.stats = GameFightMinimalStats()
        self._statstree = FuncTree()

    def getMessageId(self):
        return 6699

    def initRefreshCharacterStatsMessage(self, param1=0, param2=None):
        self.fighterId = param1
        self.stats = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.fighterId = 0
        self.stats = GameFightMinimalStats()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_RefreshCharacterStatsMessage(param1)

    def serializeAs_RefreshCharacterStatsMessage(self, param1):
        if self.fighterId < -9007199254740990 or self.fighterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.fighterId) + ") on element fighterId.")
        param1.write_double(self.fighterId)
        self.stats.serializeAs_GameFightMinimalStats(param1)

    def deserialize(self, param1):
        self.deserializeAs_RefreshCharacterStatsMessage(param1)

    def deserializeAs_RefreshCharacterStatsMessage(self, param1):
        self._fighterIdFunc(param1)
        self.stats = GameFightMinimalStats()
        self.stats.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_RefreshCharacterStatsMessage(param1)

    def deserializeAsyncAs_RefreshCharacterStatsMessage(self, param1):
        param1.add_child(self._fighterIdFunc)
        self._statstree = param1.add_child(self._statstreeFunc)

    def _fighterIdFunc(self, param1):
        self.fighterId = param1.read_double()
        if self.fighterId < -9007199254740990 or self.fighterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.fighterId) + ") on element of RefreshCharacterStatsMessage.fighterId.")

    def _statstreeFunc(self, param1):
        self.stats = GameFightMinimalStats()
        self.stats.deserializeAsync(self._statstree)


class SlaveSwitchContextMessage(NetworkMessage):
    protocolId = 6214

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.masterId = 0
        self.slaveId = 0
        self.slaveSpells = []
        self.slaveStats = CharacterCharacteristicsInformations()
        self.shortcuts = []
        self._slaveSpellstree = FuncTree()
        self._slaveStatstree = FuncTree()
        self._shortcutstree = FuncTree()

    def getMessageId(self):
        return 6214

    def initSlaveSwitchContextMessage(self, param1=0, param2=0, param3=[], param4=None, param5=[]):
        self.masterId = param1
        self.slaveId = param2
        self.slaveSpells = param3
        self.slaveStats = param4
        self.shortcuts = param5
        self._isInitialized = True
        return self

    def reset(self):
        self.masterId = 0
        self.slaveId = 0
        self.slaveSpells = []
        self.slaveStats = CharacterCharacteristicsInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SlaveSwitchContextMessage(param1)

    def serializeAs_SlaveSwitchContextMessage(self, param1):
        if self.masterId < -9007199254740990 or self.masterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.masterId) + ") on element masterId.")
        param1.write_double(self.masterId)
        if self.slaveId < -9007199254740990 or self.slaveId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.slaveId) + ") on element slaveId.")
        param1.write_double(self.slaveId)
        param1.write_short(len(self.slaveSpells))
        _loc2_ = 0
        while _loc2_ < len(self.slaveSpells):
            as_parent(self.slaveSpells[_loc2_], SpellItem).serializeAs_SpellItem(param1)
            _loc2_ += 1
        self.slaveStats.serializeAs_CharacterCharacteristicsInformations(param1)
        param1.write_short(len(self.shortcuts))
        _loc3_ = 0
        while _loc3_ < len(self.shortcuts):
            param1.write_short(as_parent(self.shortcuts[_loc3_], Shortcut).getTypeId())
            as_parent(self.shortcuts[_loc3_], Shortcut).serialize(param1)
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_SlaveSwitchContextMessage(param1)

    def deserializeAs_SlaveSwitchContextMessage(self, param1):
        _loc6_ = None
        _loc7_ = 0
        _loc8_ = None
        self._masterIdFunc(param1)
        self._slaveIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = SpellItem()
            _loc6_.deserialize(param1)
            self.slaveSpells.append(_loc6_)
            _loc3_ += 1
        self.slaveStats = CharacterCharacteristicsInformations()
        self.slaveStats.deserialize(param1)
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = param1.read_unsigned_short()
            _loc8_ = ProtocolTypeManager.get_instance(Shortcut,_loc7_)
            _loc8_.deserialize(param1)
            self.shortcuts.append(_loc8_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SlaveSwitchContextMessage(param1)

    def deserializeAsyncAs_SlaveSwitchContextMessage(self, param1):
        param1.add_child(self._masterIdFunc)
        param1.add_child(self._slaveIdFunc)
        self._slaveSpellstree = param1.add_child(self._slaveSpellstreeFunc)
        self._slaveStatstree = param1.add_child(self._slaveStatstreeFunc)
        self._shortcutstree = param1.add_child(self._shortcutstreeFunc)

    def _masterIdFunc(self, param1):
        self.masterId = param1.read_double()
        if self.masterId < -9007199254740990 or self.masterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.masterId) + ") on element of SlaveSwitchContextMessage.masterId.")

    def _slaveIdFunc(self, param1):
        self.slaveId = param1.read_double()
        if self.slaveId < -9007199254740990 or self.slaveId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.slaveId) + ") on element of SlaveSwitchContextMessage.slaveId.")

    def _slaveSpellstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._slaveSpellstree.add_child(self._slaveSpellsFunc)
            _loc3_ += 1

    def _slaveSpellsFunc(self, param1):
        _loc2_ = SpellItem()
        _loc2_.deserialize(param1)
        self.slaveSpells.append(_loc2_)

    def _slaveStatstreeFunc(self, param1):
        self.slaveStats = CharacterCharacteristicsInformations()
        self.slaveStats.deserializeAsync(self._slaveStatstree)

    def _shortcutstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._shortcutstree.add_child(self._shortcutsFunc)
            _loc3_ += 1

    def _shortcutsFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(Shortcut,_loc2_)
        _loc3_.deserialize(param1)
        self.shortcuts.append(_loc3_)


class ArenaFighterLeaveMessage(NetworkMessage):
    protocolId = 6700

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.leaver = CharacterBasicMinimalInformations()
        self._leavertree = FuncTree()

    def getMessageId(self):
        return 6700

    def initArenaFighterLeaveMessage(self, param1=None):
        self.leaver = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.leaver = CharacterBasicMinimalInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ArenaFighterLeaveMessage(param1)

    def serializeAs_ArenaFighterLeaveMessage(self, param1):
        self.leaver.serializeAs_CharacterBasicMinimalInformations(param1)

    def deserialize(self, param1):
        self.deserializeAs_ArenaFighterLeaveMessage(param1)

    def deserializeAs_ArenaFighterLeaveMessage(self, param1):
        self.leaver = CharacterBasicMinimalInformations()
        self.leaver.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ArenaFighterLeaveMessage(param1)

    def deserializeAsyncAs_ArenaFighterLeaveMessage(self, param1):
        self._leavertree = param1.add_child(self._leavertreeFunc)

    def _leavertreeFunc(self, param1):
        self.leaver = CharacterBasicMinimalInformations()
        self.leaver.deserializeAsync(self._leavertree)


class ChallengeInfoMessage(NetworkMessage):
    protocolId = 6022

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.challengeId = 0
        self.targetId = 0
        self.xpBonus = 0
        self.dropBonus = 0

    def getMessageId(self):
        return 6022

    def initChallengeInfoMessage(self, param1=0, param2=0, param3=0, param4=0):
        self.challengeId = param1
        self.targetId = param2
        self.xpBonus = param3
        self.dropBonus = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.challengeId = 0
        self.targetId = 0
        self.xpBonus = 0
        self.dropBonus = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChallengeInfoMessage(param1)

    def serializeAs_ChallengeInfoMessage(self, param1):
        if self.challengeId < 0:
            raise RuntimeError("Forbidden value (" + str(self.challengeId) + ") on element challengeId.")
        param1.write_var_short(self.challengeId)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)
        if self.xpBonus < 0:
            raise RuntimeError("Forbidden value (" + str(self.xpBonus) + ") on element xpBonus.")
        param1.write_var_int(self.xpBonus)
        if self.dropBonus < 0:
            raise RuntimeError("Forbidden value (" + str(self.dropBonus) + ") on element dropBonus.")
        param1.write_var_int(self.dropBonus)

    def deserialize(self, param1):
        self.deserializeAs_ChallengeInfoMessage(param1)

    def deserializeAs_ChallengeInfoMessage(self, param1):
        self._challengeIdFunc(param1)
        self._targetIdFunc(param1)
        self._xpBonusFunc(param1)
        self._dropBonusFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChallengeInfoMessage(param1)

    def deserializeAsyncAs_ChallengeInfoMessage(self, param1):
        param1.add_child(self._challengeIdFunc)
        param1.add_child(self._targetIdFunc)
        param1.add_child(self._xpBonusFunc)
        param1.add_child(self._dropBonusFunc)

    def _challengeIdFunc(self, param1):
        self.challengeId = param1.read_var_uh_short()
        if self.challengeId < 0:
            raise RuntimeError("Forbidden value (" + str(self.challengeId) + ") on element of ChallengeInfoMessage.challengeId.")

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of ChallengeInfoMessage.targetId.")

    def _xpBonusFunc(self, param1):
        self.xpBonus = param1.read_var_uh_int()
        if self.xpBonus < 0:
            raise RuntimeError("Forbidden value (" + str(self.xpBonus) + ") on element of ChallengeInfoMessage.xpBonus.")

    def _dropBonusFunc(self, param1):
        self.dropBonus = param1.read_var_uh_int()
        if self.dropBonus < 0:
            raise RuntimeError("Forbidden value (" + str(self.dropBonus) + ") on element of ChallengeInfoMessage.dropBonus.")


class ChallengeResultMessage(NetworkMessage):
    protocolId = 6019

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.challengeId = 0
        self.success = False

    def getMessageId(self):
        return 6019

    def initChallengeResultMessage(self, param1=0, param2=False):
        self.challengeId = param1
        self.success = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.challengeId = 0
        self.success = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChallengeResultMessage(param1)

    def serializeAs_ChallengeResultMessage(self, param1):
        if self.challengeId < 0:
            raise RuntimeError("Forbidden value (" + str(self.challengeId) + ") on element challengeId.")
        param1.write_var_short(self.challengeId)
        param1.write_boolean(self.success)

    def deserialize(self, param1):
        self.deserializeAs_ChallengeResultMessage(param1)

    def deserializeAs_ChallengeResultMessage(self, param1):
        self._challengeIdFunc(param1)
        self._successFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChallengeResultMessage(param1)

    def deserializeAsyncAs_ChallengeResultMessage(self, param1):
        param1.add_child(self._challengeIdFunc)
        param1.add_child(self._successFunc)

    def _challengeIdFunc(self, param1):
        self.challengeId = param1.read_var_uh_short()
        if self.challengeId < 0:
            raise RuntimeError("Forbidden value (" + str(self.challengeId) + ") on element of ChallengeResultMessage.challengeId.")

    def _successFunc(self, param1):
        self.success = param1.read_boolean()


class ChallengeTargetsListMessage(NetworkMessage):
    protocolId = 5613

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetIds = []
        self.targetCells = []
        self._targetIdstree = FuncTree()
        self._targetCellstree = FuncTree()

    def getMessageId(self):
        return 5613

    def initChallengeTargetsListMessage(self, param1=[], param2=[]):
        self.targetIds = param1
        self.targetCells = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.targetIds = []
        self.targetCells = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChallengeTargetsListMessage(param1)

    def serializeAs_ChallengeTargetsListMessage(self, param1):
        param1.write_short(len(self.targetIds))
        _loc2_ = 0
        while _loc2_ < len(self.targetIds):
            if self.targetIds[_loc2_] < -9007199254740990 or self.targetIds[_loc2_] > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(self.targetIds[_loc2_]) + ") on element 1 (starting at 1) of targetIds.")
            param1.write_double(self.targetIds[_loc2_])
            _loc2_ += 1
        param1.write_short(len(self.targetCells))
        _loc3_ = 0
        while _loc3_ < len(self.targetCells):
            if self.targetCells[_loc3_] < -1 or self.targetCells[_loc3_] > 559:
                raise RuntimeError("Forbidden value (" + str(self.targetCells[_loc3_]) + ") on element 2 (starting at 1) of targetCells.")
            param1.write_short(self.targetCells[_loc3_])
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ChallengeTargetsListMessage(param1)

    def deserializeAs_ChallengeTargetsListMessage(self, param1):
        _loc6_ = None
        _loc7_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = param1.read_double()
            if _loc6_ < -9007199254740990 or _loc6_ > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(_loc6_) + ") on elements of targetIds.")
            self.targetIds.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = param1.read_short()
            if _loc7_ < -1 or _loc7_ > 559:
                raise RuntimeError("Forbidden value (" + str(_loc7_) + ") on elements of targetCells.")
            self.targetCells.append(_loc7_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChallengeTargetsListMessage(param1)

    def deserializeAsyncAs_ChallengeTargetsListMessage(self, param1):
        self._targetIdstree = param1.add_child(self._targetIdstreeFunc)
        self._targetCellstree = param1.add_child(self._targetCellstreeFunc)

    def _targetIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._targetIdstree.add_child(self._targetIdsFunc)
            _loc3_ += 1

    def _targetIdsFunc(self, param1):
        _loc2_ = param1.read_double()
        if _loc2_ < -9007199254740990 or _loc2_ > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of targetIds.")
        self.targetIds.append(_loc2_)

    def _targetCellstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._targetCellstree.add_child(self._targetCellsFunc)
            _loc3_ += 1

    def _targetCellsFunc(self, param1):
        _loc2_ = param1.read_short()
        if _loc2_ < -1 or _loc2_ > 559:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of targetCells.")
        self.targetCells.append(_loc2_)


class ChallengeTargetsListRequestMessage(NetworkMessage):
    protocolId = 5614

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.challengeId = 0

    def getMessageId(self):
        return 5614

    def initChallengeTargetsListRequestMessage(self, param1=0):
        self.challengeId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.challengeId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChallengeTargetsListRequestMessage(param1)

    def serializeAs_ChallengeTargetsListRequestMessage(self, param1):
        if self.challengeId < 0:
            raise RuntimeError("Forbidden value (" + str(self.challengeId) + ") on element challengeId.")
        param1.write_var_short(self.challengeId)

    def deserialize(self, param1):
        self.deserializeAs_ChallengeTargetsListRequestMessage(param1)

    def deserializeAs_ChallengeTargetsListRequestMessage(self, param1):
        self._challengeIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChallengeTargetsListRequestMessage(param1)

    def deserializeAsyncAs_ChallengeTargetsListRequestMessage(self, param1):
        param1.add_child(self._challengeIdFunc)

    def _challengeIdFunc(self, param1):
        self.challengeId = param1.read_var_uh_short()
        if self.challengeId < 0:
            raise RuntimeError("Forbidden value (" + str(self.challengeId) + ") on element of ChallengeTargetsListRequestMessage.challengeId.")


class ChallengeTargetUpdateMessage(NetworkMessage):
    protocolId = 6123

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.challengeId = 0
        self.targetId = 0

    def getMessageId(self):
        return 6123

    def initChallengeTargetUpdateMessage(self, param1=0, param2=0):
        self.challengeId = param1
        self.targetId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.challengeId = 0
        self.targetId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChallengeTargetUpdateMessage(param1)

    def serializeAs_ChallengeTargetUpdateMessage(self, param1):
        if self.challengeId < 0:
            raise RuntimeError("Forbidden value (" + str(self.challengeId) + ") on element challengeId.")
        param1.write_var_short(self.challengeId)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)

    def deserialize(self, param1):
        self.deserializeAs_ChallengeTargetUpdateMessage(param1)

    def deserializeAs_ChallengeTargetUpdateMessage(self, param1):
        self._challengeIdFunc(param1)
        self._targetIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChallengeTargetUpdateMessage(param1)

    def deserializeAsyncAs_ChallengeTargetUpdateMessage(self, param1):
        param1.add_child(self._challengeIdFunc)
        param1.add_child(self._targetIdFunc)

    def _challengeIdFunc(self, param1):
        self.challengeId = param1.read_var_uh_short()
        if self.challengeId < 0:
            raise RuntimeError("Forbidden value (" + str(self.challengeId) + ") on element of ChallengeTargetUpdateMessage.challengeId.")

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of ChallengeTargetUpdateMessage.targetId.")


class GameFightRefreshFighterMessage(NetworkMessage):
    protocolId = 6309

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.informations = GameContextActorInformations()
        self._informationstree = FuncTree()

    def getMessageId(self):
        return 6309

    def initGameFightRefreshFighterMessage(self, param1=None):
        self.informations = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.informations = GameContextActorInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightRefreshFighterMessage(param1)

    def serializeAs_GameFightRefreshFighterMessage(self, param1):
        param1.write_short(self.informations.getTypeId())
        self.informations.serialize(param1)

    def deserialize(self, param1):
        self.deserializeAs_GameFightRefreshFighterMessage(param1)

    def deserializeAs_GameFightRefreshFighterMessage(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.informations = ProtocolTypeManager.get_instance(GameContextActorInformations,_loc2_)
        self.informations.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightRefreshFighterMessage(param1)

    def deserializeAsyncAs_GameFightRefreshFighterMessage(self, param1):
        self._informationstree = param1.add_child(self._informationstreeFunc)

    def _informationstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.informations = ProtocolTypeManager.get_instance(GameContextActorInformations,_loc2_)
        self.informations.deserializeAsync(self._informationstree)


class GameFightShowFighterMessage(NetworkMessage):
    protocolId = 5864

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.informations = GameFightFighterInformations()
        self._informationstree = FuncTree()

    def getMessageId(self):
        return 5864

    def initGameFightShowFighterMessage(self, param1=None):
        self.informations = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.informations = GameFightFighterInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightShowFighterMessage(param1)

    def serializeAs_GameFightShowFighterMessage(self, param1):
        param1.write_short(self.informations.getTypeId())
        self.informations.serialize(param1)

    def deserialize(self, param1):
        self.deserializeAs_GameFightShowFighterMessage(param1)

    def deserializeAs_GameFightShowFighterMessage(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.informations = ProtocolTypeManager.get_instance(GameFightFighterInformations,_loc2_)
        self.informations.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightShowFighterMessage(param1)

    def deserializeAsyncAs_GameFightShowFighterMessage(self, param1):
        self._informationstree = param1.add_child(self._informationstreeFunc)

    def _informationstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.informations = ProtocolTypeManager.get_instance(GameFightFighterInformations,_loc2_)
        self.informations.deserializeAsync(self._informationstree)


class GameDataPaddockObjectAddMessage(NetworkMessage):
    protocolId = 5990

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.paddockItemDescription = PaddockItem()
        self._paddockItemDescriptiontree = FuncTree()

    def getMessageId(self):
        return 5990

    def initGameDataPaddockObjectAddMessage(self, param1=None):
        self.paddockItemDescription = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.paddockItemDescription = PaddockItem()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameDataPaddockObjectAddMessage(param1)

    def serializeAs_GameDataPaddockObjectAddMessage(self, param1):
        self.paddockItemDescription.serializeAs_PaddockItem(param1)

    def deserialize(self, param1):
        self.deserializeAs_GameDataPaddockObjectAddMessage(param1)

    def deserializeAs_GameDataPaddockObjectAddMessage(self, param1):
        self.paddockItemDescription = PaddockItem()
        self.paddockItemDescription.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameDataPaddockObjectAddMessage(param1)

    def deserializeAsyncAs_GameDataPaddockObjectAddMessage(self, param1):
        self._paddockItemDescriptiontree = param1.add_child(self._paddockItemDescriptiontreeFunc)

    def _paddockItemDescriptiontreeFunc(self, param1):
        self.paddockItemDescription = PaddockItem()
        self.paddockItemDescription.deserializeAsync(self._paddockItemDescriptiontree)


class GameDataPaddockObjectListAddMessage(NetworkMessage):
    protocolId = 5992

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.paddockItemDescription = []
        self._paddockItemDescriptiontree = FuncTree()

    def getMessageId(self):
        return 5992

    def initGameDataPaddockObjectListAddMessage(self, param1=[]):
        self.paddockItemDescription = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.paddockItemDescription = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameDataPaddockObjectListAddMessage(param1)

    def serializeAs_GameDataPaddockObjectListAddMessage(self, param1):
        param1.write_short(len(self.paddockItemDescription))
        _loc2_ = 0
        while _loc2_ < len(self.paddockItemDescription):
            as_parent(self.paddockItemDescription[_loc2_], PaddockItem).serializeAs_PaddockItem(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GameDataPaddockObjectListAddMessage(param1)

    def deserializeAs_GameDataPaddockObjectListAddMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = PaddockItem()
            _loc4_.deserialize(param1)
            self.paddockItemDescription.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameDataPaddockObjectListAddMessage(param1)

    def deserializeAsyncAs_GameDataPaddockObjectListAddMessage(self, param1):
        self._paddockItemDescriptiontree = param1.add_child(self._paddockItemDescriptiontreeFunc)

    def _paddockItemDescriptiontreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._paddockItemDescriptiontree.add_child(self._paddockItemDescriptionFunc)
            _loc3_ += 1

    def _paddockItemDescriptionFunc(self, param1):
        _loc2_ = PaddockItem()
        _loc2_.deserialize(param1)
        self.paddockItemDescription.append(_loc2_)


class GameDataPaddockObjectRemoveMessage(NetworkMessage):
    protocolId = 5993

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.cellId = 0

    def getMessageId(self):
        return 5993

    def initGameDataPaddockObjectRemoveMessage(self, param1=0):
        self.cellId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.cellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameDataPaddockObjectRemoveMessage(param1)

    def serializeAs_GameDataPaddockObjectRemoveMessage(self, param1):
        if self.cellId < 0 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element cellId.")
        param1.write_var_short(self.cellId)

    def deserialize(self, param1):
        self.deserializeAs_GameDataPaddockObjectRemoveMessage(param1)

    def deserializeAs_GameDataPaddockObjectRemoveMessage(self, param1):
        self._cellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameDataPaddockObjectRemoveMessage(param1)

    def deserializeAsyncAs_GameDataPaddockObjectRemoveMessage(self, param1):
        param1.add_child(self._cellIdFunc)

    def _cellIdFunc(self, param1):
        self.cellId = param1.read_var_uh_short()
        if self.cellId < 0 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element of GameDataPaddockObjectRemoveMessage.cellId.")


class MountDataErrorMessage(NetworkMessage):
    protocolId = 6172

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reason = 0

    def getMessageId(self):
        return 6172

    def initMountDataErrorMessage(self, param1=0):
        self.reason = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.reason = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MountDataErrorMessage(param1)

    def serializeAs_MountDataErrorMessage(self, param1):
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_MountDataErrorMessage(param1)

    def deserializeAs_MountDataErrorMessage(self, param1):
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MountDataErrorMessage(param1)

    def deserializeAsyncAs_MountDataErrorMessage(self, param1):
        param1.add_child(self._reasonFunc)

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()
        if self.reason < 0:
            raise RuntimeError("Forbidden value (" + str(self.reason) + ") on element of MountDataErrorMessage.reason.")


class MountDataMessage(NetworkMessage):
    protocolId = 5973

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.mountData = MountClientData()
        self._mountDatatree = FuncTree()

    def getMessageId(self):
        return 5973

    def initMountDataMessage(self, param1=None):
        self.mountData = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.mountData = MountClientData()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MountDataMessage(param1)

    def serializeAs_MountDataMessage(self, param1):
        self.mountData.serializeAs_MountClientData(param1)

    def deserialize(self, param1):
        self.deserializeAs_MountDataMessage(param1)

    def deserializeAs_MountDataMessage(self, param1):
        self.mountData = MountClientData()
        self.mountData.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MountDataMessage(param1)

    def deserializeAsyncAs_MountDataMessage(self, param1):
        self._mountDatatree = param1.add_child(self._mountDatatreeFunc)

    def _mountDatatreeFunc(self, param1):
        self.mountData = MountClientData()
        self.mountData.deserializeAsync(self._mountDatatree)


class MountEmoteIconUsedOkMessage(NetworkMessage):
    protocolId = 5978

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.mountId = 0
        self.reactionType = 0

    def getMessageId(self):
        return 5978

    def initMountEmoteIconUsedOkMessage(self, param1=0, param2=0):
        self.mountId = param1
        self.reactionType = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.mountId = 0
        self.reactionType = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MountEmoteIconUsedOkMessage(param1)

    def serializeAs_MountEmoteIconUsedOkMessage(self, param1):
        param1.write_var_int(self.mountId)
        if self.reactionType < 0:
            raise RuntimeError("Forbidden value (" + str(self.reactionType) + ") on element reactionType.")
        param1.write_byte(self.reactionType)

    def deserialize(self, param1):
        self.deserializeAs_MountEmoteIconUsedOkMessage(param1)

    def deserializeAs_MountEmoteIconUsedOkMessage(self, param1):
        self._mountIdFunc(param1)
        self._reactionTypeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MountEmoteIconUsedOkMessage(param1)

    def deserializeAsyncAs_MountEmoteIconUsedOkMessage(self, param1):
        param1.add_child(self._mountIdFunc)
        param1.add_child(self._reactionTypeFunc)

    def _mountIdFunc(self, param1):
        self.mountId = param1.read_var_int()

    def _reactionTypeFunc(self, param1):
        self.reactionType = param1.read_byte()
        if self.reactionType < 0:
            raise RuntimeError("Forbidden value (" + str(self.reactionType) + ") on element of MountEmoteIconUsedOkMessage.reactionType.")


class MountEquipedErrorMessage(NetworkMessage):
    protocolId = 5963

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.errorType = 0

    def getMessageId(self):
        return 5963

    def initMountEquipedErrorMessage(self, param1=0):
        self.errorType = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.errorType = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MountEquipedErrorMessage(param1)

    def serializeAs_MountEquipedErrorMessage(self, param1):
        param1.write_byte(self.errorType)

    def deserialize(self, param1):
        self.deserializeAs_MountEquipedErrorMessage(param1)

    def deserializeAs_MountEquipedErrorMessage(self, param1):
        self._errorTypeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MountEquipedErrorMessage(param1)

    def deserializeAsyncAs_MountEquipedErrorMessage(self, param1):
        param1.add_child(self._errorTypeFunc)

    def _errorTypeFunc(self, param1):
        self.errorType = param1.read_byte()
        if self.errorType < 0:
            raise RuntimeError("Forbidden value (" + str(self.errorType) + ") on element of MountEquipedErrorMessage.errorType.")


class MountFeedRequestMessage(NetworkMessage):
    protocolId = 6189

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.mountUid = 0
        self.mountLocation = 0
        self.mountFoodUid = 0
        self.quantity = 0

    def getMessageId(self):
        return 6189

    def initMountFeedRequestMessage(self, param1=0, param2=0, param3=0, param4=0):
        self.mountUid = param1
        self.mountLocation = param2
        self.mountFoodUid = param3
        self.quantity = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.mountUid = 0
        self.mountLocation = 0
        self.mountFoodUid = 0
        self.quantity = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MountFeedRequestMessage(param1)

    def serializeAs_MountFeedRequestMessage(self, param1):
        if self.mountUid < 0:
            raise RuntimeError("Forbidden value (" + str(self.mountUid) + ") on element mountUid.")
        param1.write_var_int(self.mountUid)
        param1.write_byte(self.mountLocation)
        if self.mountFoodUid < 0:
            raise RuntimeError("Forbidden value (" + str(self.mountFoodUid) + ") on element mountFoodUid.")
        param1.write_var_int(self.mountFoodUid)
        if self.quantity < 0:
            raise RuntimeError("Forbidden value (" + str(self.quantity) + ") on element quantity.")
        param1.write_var_int(self.quantity)

    def deserialize(self, param1):
        self.deserializeAs_MountFeedRequestMessage(param1)

    def deserializeAs_MountFeedRequestMessage(self, param1):
        self._mountUidFunc(param1)
        self._mountLocationFunc(param1)
        self._mountFoodUidFunc(param1)
        self._quantityFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MountFeedRequestMessage(param1)

    def deserializeAsyncAs_MountFeedRequestMessage(self, param1):
        param1.add_child(self._mountUidFunc)
        param1.add_child(self._mountLocationFunc)
        param1.add_child(self._mountFoodUidFunc)
        param1.add_child(self._quantityFunc)

    def _mountUidFunc(self, param1):
        self.mountUid = param1.read_var_uh_int()
        if self.mountUid < 0:
            raise RuntimeError("Forbidden value (" + str(self.mountUid) + ") on element of MountFeedRequestMessage.mountUid.")

    def _mountLocationFunc(self, param1):
        self.mountLocation = param1.read_byte()

    def _mountFoodUidFunc(self, param1):
        self.mountFoodUid = param1.read_var_uh_int()
        if self.mountFoodUid < 0:
            raise RuntimeError("Forbidden value (" + str(self.mountFoodUid) + ") on element of MountFeedRequestMessage.mountFoodUid.")

    def _quantityFunc(self, param1):
        self.quantity = param1.read_var_uh_int()
        if self.quantity < 0:
            raise RuntimeError("Forbidden value (" + str(self.quantity) + ") on element of MountFeedRequestMessage.quantity.")


class MountHarnessColorsUpdateRequestMessage(NetworkMessage):
    protocolId = 6697

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.useHarnessColors = False

    def getMessageId(self):
        return 6697

    def initMountHarnessColorsUpdateRequestMessage(self, param1=False):
        self.useHarnessColors = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.useHarnessColors = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MountHarnessColorsUpdateRequestMessage(param1)

    def serializeAs_MountHarnessColorsUpdateRequestMessage(self, param1):
        param1.write_boolean(self.useHarnessColors)

    def deserialize(self, param1):
        self.deserializeAs_MountHarnessColorsUpdateRequestMessage(param1)

    def deserializeAs_MountHarnessColorsUpdateRequestMessage(self, param1):
        self._useHarnessColorsFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MountHarnessColorsUpdateRequestMessage(param1)

    def deserializeAsyncAs_MountHarnessColorsUpdateRequestMessage(self, param1):
        param1.add_child(self._useHarnessColorsFunc)

    def _useHarnessColorsFunc(self, param1):
        self.useHarnessColors = param1.read_boolean()


class MountHarnessDissociateRequestMessage(NetworkMessage):
    protocolId = 6696

    def getMessageId(self):
        return 6696

    def initMountHarnessDissociateRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_MountHarnessDissociateRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_MountHarnessDissociateRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_MountHarnessDissociateRequestMessage(self, param1):
        pass


class MountInformationInPaddockRequestMessage(NetworkMessage):
    protocolId = 5975

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.mapRideId = 0

    def getMessageId(self):
        return 5975

    def initMountInformationInPaddockRequestMessage(self, param1=0):
        self.mapRideId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.mapRideId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MountInformationInPaddockRequestMessage(param1)

    def serializeAs_MountInformationInPaddockRequestMessage(self, param1):
        param1.write_var_int(self.mapRideId)

    def deserialize(self, param1):
        self.deserializeAs_MountInformationInPaddockRequestMessage(param1)

    def deserializeAs_MountInformationInPaddockRequestMessage(self, param1):
        self._mapRideIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MountInformationInPaddockRequestMessage(param1)

    def deserializeAsyncAs_MountInformationInPaddockRequestMessage(self, param1):
        param1.add_child(self._mapRideIdFunc)

    def _mapRideIdFunc(self, param1):
        self.mapRideId = param1.read_var_int()


class MountInformationRequestMessage(NetworkMessage):
    protocolId = 5972

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.id = 0
        self.time = 0

    def getMessageId(self):
        return 5972

    def initMountInformationRequestMessage(self, param1=0, param2=0):
        self.id = param1
        self.time = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.id = 0
        self.time = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MountInformationRequestMessage(param1)

    def serializeAs_MountInformationRequestMessage(self, param1):
        if self.id < -9007199254740990 or self.id > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element id.")
        param1.write_double(self.id)
        if self.time < -9007199254740990 or self.time > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.time) + ") on element time.")
        param1.write_double(self.time)

    def deserialize(self, param1):
        self.deserializeAs_MountInformationRequestMessage(param1)

    def deserializeAs_MountInformationRequestMessage(self, param1):
        self._idFunc(param1)
        self._timeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MountInformationRequestMessage(param1)

    def deserializeAsyncAs_MountInformationRequestMessage(self, param1):
        param1.add_child(self._idFunc)
        param1.add_child(self._timeFunc)

    def _idFunc(self, param1):
        self.id = param1.read_double()
        if self.id < -9007199254740990 or self.id > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element of MountInformationRequestMessage.id.")

    def _timeFunc(self, param1):
        self.time = param1.read_double()
        if self.time < -9007199254740990 or self.time > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.time) + ") on element of MountInformationRequestMessage.time.")


class MountReleasedMessage(NetworkMessage):
    protocolId = 6308

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.mountId = 0

    def getMessageId(self):
        return 6308

    def initMountReleasedMessage(self, param1=0):
        self.mountId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.mountId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MountReleasedMessage(param1)

    def serializeAs_MountReleasedMessage(self, param1):
        param1.write_var_int(self.mountId)

    def deserialize(self, param1):
        self.deserializeAs_MountReleasedMessage(param1)

    def deserializeAs_MountReleasedMessage(self, param1):
        self._mountIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MountReleasedMessage(param1)

    def deserializeAsyncAs_MountReleasedMessage(self, param1):
        param1.add_child(self._mountIdFunc)

    def _mountIdFunc(self, param1):
        self.mountId = param1.read_var_int()


class MountReleaseRequestMessage(NetworkMessage):
    protocolId = 5980

    def getMessageId(self):
        return 5980

    def initMountReleaseRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_MountReleaseRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_MountReleaseRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_MountReleaseRequestMessage(self, param1):
        pass


class MountRenamedMessage(NetworkMessage):
    protocolId = 5983

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.mountId = 0
        self.name = ""

    def getMessageId(self):
        return 5983

    def initMountRenamedMessage(self, param1=0, param2=""):
        self.mountId = param1
        self.name = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.mountId = 0
        self.name = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MountRenamedMessage(param1)

    def serializeAs_MountRenamedMessage(self, param1):
        param1.write_var_int(self.mountId)
        param1.write_utf(self.name)

    def deserialize(self, param1):
        self.deserializeAs_MountRenamedMessage(param1)

    def deserializeAs_MountRenamedMessage(self, param1):
        self._mountIdFunc(param1)
        self._nameFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MountRenamedMessage(param1)

    def deserializeAsyncAs_MountRenamedMessage(self, param1):
        param1.add_child(self._mountIdFunc)
        param1.add_child(self._nameFunc)

    def _mountIdFunc(self, param1):
        self.mountId = param1.read_var_int()

    def _nameFunc(self, param1):
        self.name = param1.read_utf()


class MountRenameRequestMessage(NetworkMessage):
    protocolId = 5987

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.name = ""
        self.mountId = 0

    def getMessageId(self):
        return 5987

    def initMountRenameRequestMessage(self, param1="", param2=0):
        self.name = param1
        self.mountId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.name = ""
        self.mountId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MountRenameRequestMessage(param1)

    def serializeAs_MountRenameRequestMessage(self, param1):
        param1.write_utf(self.name)
        param1.write_var_int(self.mountId)

    def deserialize(self, param1):
        self.deserializeAs_MountRenameRequestMessage(param1)

    def deserializeAs_MountRenameRequestMessage(self, param1):
        self._nameFunc(param1)
        self._mountIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MountRenameRequestMessage(param1)

    def deserializeAsyncAs_MountRenameRequestMessage(self, param1):
        param1.add_child(self._nameFunc)
        param1.add_child(self._mountIdFunc)

    def _nameFunc(self, param1):
        self.name = param1.read_utf()

    def _mountIdFunc(self, param1):
        self.mountId = param1.read_var_int()


class MountRidingMessage(NetworkMessage):
    protocolId = 5967

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.isRiding = False

    def getMessageId(self):
        return 5967

    def initMountRidingMessage(self, param1=False):
        self.isRiding = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.isRiding = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MountRidingMessage(param1)

    def serializeAs_MountRidingMessage(self, param1):
        param1.write_boolean(self.isRiding)

    def deserialize(self, param1):
        self.deserializeAs_MountRidingMessage(param1)

    def deserializeAs_MountRidingMessage(self, param1):
        self._isRidingFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MountRidingMessage(param1)

    def deserializeAsyncAs_MountRidingMessage(self, param1):
        param1.add_child(self._isRidingFunc)

    def _isRidingFunc(self, param1):
        self.isRiding = param1.read_boolean()


class MountSetMessage(NetworkMessage):
    protocolId = 5968

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.mountData = MountClientData()
        self._mountDatatree = FuncTree()

    def getMessageId(self):
        return 5968

    def initMountSetMessage(self, param1=None):
        self.mountData = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.mountData = MountClientData()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MountSetMessage(param1)

    def serializeAs_MountSetMessage(self, param1):
        self.mountData.serializeAs_MountClientData(param1)

    def deserialize(self, param1):
        self.deserializeAs_MountSetMessage(param1)

    def deserializeAs_MountSetMessage(self, param1):
        self.mountData = MountClientData()
        self.mountData.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MountSetMessage(param1)

    def deserializeAsyncAs_MountSetMessage(self, param1):
        self._mountDatatree = param1.add_child(self._mountDatatreeFunc)

    def _mountDatatreeFunc(self, param1):
        self.mountData = MountClientData()
        self.mountData.deserializeAsync(self._mountDatatree)


class MountSetXpRatioRequestMessage(NetworkMessage):
    protocolId = 5989

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.xpRatio = 0

    def getMessageId(self):
        return 5989

    def initMountSetXpRatioRequestMessage(self, param1=0):
        self.xpRatio = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.xpRatio = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MountSetXpRatioRequestMessage(param1)

    def serializeAs_MountSetXpRatioRequestMessage(self, param1):
        if self.xpRatio < 0:
            raise RuntimeError("Forbidden value (" + str(self.xpRatio) + ") on element xpRatio.")
        param1.write_byte(self.xpRatio)

    def deserialize(self, param1):
        self.deserializeAs_MountSetXpRatioRequestMessage(param1)

    def deserializeAs_MountSetXpRatioRequestMessage(self, param1):
        self._xpRatioFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MountSetXpRatioRequestMessage(param1)

    def deserializeAsyncAs_MountSetXpRatioRequestMessage(self, param1):
        param1.add_child(self._xpRatioFunc)

    def _xpRatioFunc(self, param1):
        self.xpRatio = param1.read_byte()
        if self.xpRatio < 0:
            raise RuntimeError("Forbidden value (" + str(self.xpRatio) + ") on element of MountSetXpRatioRequestMessage.xpRatio.")


class MountSterilizedMessage(NetworkMessage):
    protocolId = 5977

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.mountId = 0

    def getMessageId(self):
        return 5977

    def initMountSterilizedMessage(self, param1=0):
        self.mountId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.mountId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MountSterilizedMessage(param1)

    def serializeAs_MountSterilizedMessage(self, param1):
        param1.write_var_int(self.mountId)

    def deserialize(self, param1):
        self.deserializeAs_MountSterilizedMessage(param1)

    def deserializeAs_MountSterilizedMessage(self, param1):
        self._mountIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MountSterilizedMessage(param1)

    def deserializeAsyncAs_MountSterilizedMessage(self, param1):
        param1.add_child(self._mountIdFunc)

    def _mountIdFunc(self, param1):
        self.mountId = param1.read_var_int()


class MountSterilizeRequestMessage(NetworkMessage):
    protocolId = 5962

    def getMessageId(self):
        return 5962

    def initMountSterilizeRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_MountSterilizeRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_MountSterilizeRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_MountSterilizeRequestMessage(self, param1):
        pass


class MountToggleRidingRequestMessage(NetworkMessage):
    protocolId = 5976

    def getMessageId(self):
        return 5976

    def initMountToggleRidingRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_MountToggleRidingRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_MountToggleRidingRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_MountToggleRidingRequestMessage(self, param1):
        pass


class MountUnSetMessage(NetworkMessage):
    protocolId = 5982

    def getMessageId(self):
        return 5982

    def initMountUnSetMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_MountUnSetMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_MountUnSetMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_MountUnSetMessage(self, param1):
        pass


class MountXpRatioMessage(NetworkMessage):
    protocolId = 5970

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.ratio = 0

    def getMessageId(self):
        return 5970

    def initMountXpRatioMessage(self, param1=0):
        self.ratio = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.ratio = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MountXpRatioMessage(param1)

    def serializeAs_MountXpRatioMessage(self, param1):
        if self.ratio < 0:
            raise RuntimeError("Forbidden value (" + str(self.ratio) + ") on element ratio.")
        param1.write_byte(self.ratio)

    def deserialize(self, param1):
        self.deserializeAs_MountXpRatioMessage(param1)

    def deserializeAs_MountXpRatioMessage(self, param1):
        self._ratioFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MountXpRatioMessage(param1)

    def deserializeAsyncAs_MountXpRatioMessage(self, param1):
        param1.add_child(self._ratioFunc)

    def _ratioFunc(self, param1):
        self.ratio = param1.read_byte()
        if self.ratio < 0:
            raise RuntimeError("Forbidden value (" + str(self.ratio) + ") on element of MountXpRatioMessage.ratio.")


class PaddockBuyRequestMessage(NetworkMessage):
    protocolId = 5951

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.proposedPrice = 0

    def getMessageId(self):
        return 5951

    def initPaddockBuyRequestMessage(self, param1=0):
        self.proposedPrice = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.proposedPrice = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PaddockBuyRequestMessage(param1)

    def serializeAs_PaddockBuyRequestMessage(self, param1):
        if self.proposedPrice < 0 or self.proposedPrice > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.proposedPrice) + ") on element proposedPrice.")
        param1.write_var_long(self.proposedPrice)

    def deserialize(self, param1):
        self.deserializeAs_PaddockBuyRequestMessage(param1)

    def deserializeAs_PaddockBuyRequestMessage(self, param1):
        self._proposedPriceFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PaddockBuyRequestMessage(param1)

    def deserializeAsyncAs_PaddockBuyRequestMessage(self, param1):
        param1.add_child(self._proposedPriceFunc)

    def _proposedPriceFunc(self, param1):
        self.proposedPrice = param1.read_var_uh_long()
        if self.proposedPrice < 0 or self.proposedPrice > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.proposedPrice) + ") on element of PaddockBuyRequestMessage.proposedPrice.")


class PaddockBuyResultMessage(NetworkMessage):
    protocolId = 6516

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.paddockId = 0
        self.bought = False
        self.realPrice = 0

    def getMessageId(self):
        return 6516

    def initPaddockBuyResultMessage(self, param1=0, param2=False, param3=0):
        self.paddockId = param1
        self.bought = param2
        self.realPrice = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.paddockId = 0
        self.bought = False
        self.realPrice = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PaddockBuyResultMessage(param1)

    def serializeAs_PaddockBuyResultMessage(self, param1):
        param1.write_int(self.paddockId)
        param1.write_boolean(self.bought)
        if self.realPrice < 0 or self.realPrice > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.realPrice) + ") on element realPrice.")
        param1.write_var_long(self.realPrice)

    def deserialize(self, param1):
        self.deserializeAs_PaddockBuyResultMessage(param1)

    def deserializeAs_PaddockBuyResultMessage(self, param1):
        self._paddockIdFunc(param1)
        self._boughtFunc(param1)
        self._realPriceFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PaddockBuyResultMessage(param1)

    def deserializeAsyncAs_PaddockBuyResultMessage(self, param1):
        param1.add_child(self._paddockIdFunc)
        param1.add_child(self._boughtFunc)
        param1.add_child(self._realPriceFunc)

    def _paddockIdFunc(self, param1):
        self.paddockId = param1.read_int()

    def _boughtFunc(self, param1):
        self.bought = param1.read_boolean()

    def _realPriceFunc(self, param1):
        self.realPrice = param1.read_var_uh_long()
        if self.realPrice < 0 or self.realPrice > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.realPrice) + ") on element of PaddockBuyResultMessage.realPrice.")


class PaddockMoveItemRequestMessage(NetworkMessage):
    protocolId = 6052

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.oldCellId = 0
        self.newCellId = 0

    def getMessageId(self):
        return 6052

    def initPaddockMoveItemRequestMessage(self, param1=0, param2=0):
        self.oldCellId = param1
        self.newCellId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.oldCellId = 0
        self.newCellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PaddockMoveItemRequestMessage(param1)

    def serializeAs_PaddockMoveItemRequestMessage(self, param1):
        if self.oldCellId < 0 or self.oldCellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.oldCellId) + ") on element oldCellId.")
        param1.write_var_short(self.oldCellId)
        if self.newCellId < 0 or self.newCellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.newCellId) + ") on element newCellId.")
        param1.write_var_short(self.newCellId)

    def deserialize(self, param1):
        self.deserializeAs_PaddockMoveItemRequestMessage(param1)

    def deserializeAs_PaddockMoveItemRequestMessage(self, param1):
        self._oldCellIdFunc(param1)
        self._newCellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PaddockMoveItemRequestMessage(param1)

    def deserializeAsyncAs_PaddockMoveItemRequestMessage(self, param1):
        param1.add_child(self._oldCellIdFunc)
        param1.add_child(self._newCellIdFunc)

    def _oldCellIdFunc(self, param1):
        self.oldCellId = param1.read_var_uh_short()
        if self.oldCellId < 0 or self.oldCellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.oldCellId) + ") on element of PaddockMoveItemRequestMessage.oldCellId.")

    def _newCellIdFunc(self, param1):
        self.newCellId = param1.read_var_uh_short()
        if self.newCellId < 0 or self.newCellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.newCellId) + ") on element of PaddockMoveItemRequestMessage.newCellId.")


class PaddockRemoveItemRequestMessage(NetworkMessage):
    protocolId = 5958

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.cellId = 0

    def getMessageId(self):
        return 5958

    def initPaddockRemoveItemRequestMessage(self, param1=0):
        self.cellId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.cellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PaddockRemoveItemRequestMessage(param1)

    def serializeAs_PaddockRemoveItemRequestMessage(self, param1):
        if self.cellId < 0 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element cellId.")
        param1.write_var_short(self.cellId)

    def deserialize(self, param1):
        self.deserializeAs_PaddockRemoveItemRequestMessage(param1)

    def deserializeAs_PaddockRemoveItemRequestMessage(self, param1):
        self._cellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PaddockRemoveItemRequestMessage(param1)

    def deserializeAsyncAs_PaddockRemoveItemRequestMessage(self, param1):
        param1.add_child(self._cellIdFunc)

    def _cellIdFunc(self, param1):
        self.cellId = param1.read_var_uh_short()
        if self.cellId < 0 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element of PaddockRemoveItemRequestMessage.cellId.")


class PaddockSellRequestMessage(NetworkMessage):
    protocolId = 5953

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.price = 0
        self.forSale = False

    def getMessageId(self):
        return 5953

    def initPaddockSellRequestMessage(self, param1=0, param2=False):
        self.price = param1
        self.forSale = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.price = 0
        self.forSale = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PaddockSellRequestMessage(param1)

    def serializeAs_PaddockSellRequestMessage(self, param1):
        if self.price < 0 or self.price > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.price) + ") on element price.")
        param1.write_var_long(self.price)
        param1.write_boolean(self.forSale)

    def deserialize(self, param1):
        self.deserializeAs_PaddockSellRequestMessage(param1)

    def deserializeAs_PaddockSellRequestMessage(self, param1):
        self._priceFunc(param1)
        self._forSaleFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PaddockSellRequestMessage(param1)

    def deserializeAsyncAs_PaddockSellRequestMessage(self, param1):
        param1.add_child(self._priceFunc)
        param1.add_child(self._forSaleFunc)

    def _priceFunc(self, param1):
        self.price = param1.read_var_uh_long()
        if self.price < 0 or self.price > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.price) + ") on element of PaddockSellRequestMessage.price.")

    def _forSaleFunc(self, param1):
        self.forSale = param1.read_boolean()


class NotificationByServerMessage(NetworkMessage):
    protocolId = 6103

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.id = 0
        self.parameters = []
        self.forceOpen = False
        self._parameterstree = FuncTree()

    def getMessageId(self):
        return 6103

    def initNotificationByServerMessage(self, param1=0, param2=[], param3=False):
        self.id = param1
        self.parameters = param2
        self.forceOpen = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.id = 0
        self.parameters = []
        self.forceOpen = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_NotificationByServerMessage(param1)

    def serializeAs_NotificationByServerMessage(self, param1):
        if self.id < 0:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element id.")
        param1.write_var_short(self.id)
        param1.write_short(len(self.parameters))
        _loc2_ = 0
        while _loc2_ < len(self.parameters):
            param1.write_utf(self.parameters[_loc2_])
            _loc2_ += 1
        param1.write_boolean(self.forceOpen)

    def deserialize(self, param1):
        self.deserializeAs_NotificationByServerMessage(param1)

    def deserializeAs_NotificationByServerMessage(self, param1):
        _loc4_ = None
        self._idFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_utf()
            self.parameters.append(_loc4_)
            _loc3_ += 1
        self._forceOpenFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_NotificationByServerMessage(param1)

    def deserializeAsyncAs_NotificationByServerMessage(self, param1):
        param1.add_child(self._idFunc)
        self._parameterstree = param1.add_child(self._parameterstreeFunc)
        param1.add_child(self._forceOpenFunc)

    def _idFunc(self, param1):
        self.id = param1.read_var_uh_short()
        if self.id < 0:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element of NotificationByServerMessage.id.")

    def _parameterstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._parameterstree.add_child(self._parametersFunc)
            _loc3_ += 1

    def _parametersFunc(self, param1):
        _loc2_ = param1.read_utf()
        self.parameters.append(_loc2_)

    def _forceOpenFunc(self, param1):
        self.forceOpen = param1.read_boolean()


class NotificationListMessage(NetworkMessage):
    protocolId = 6087

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.flags = []
        self._flagstree = FuncTree()

    def getMessageId(self):
        return 6087

    def initNotificationListMessage(self, param1=[]):
        self.flags = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.flags = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_NotificationListMessage(param1)

    def serializeAs_NotificationListMessage(self, param1):
        param1.write_short(len(self.flags))
        _loc2_ = 0
        while _loc2_ < len(self.flags):
            param1.write_var_int(self.flags[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_NotificationListMessage(param1)

    def deserializeAs_NotificationListMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_int()
            self.flags.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_NotificationListMessage(param1)

    def deserializeAsyncAs_NotificationListMessage(self, param1):
        self._flagstree = param1.add_child(self._flagstreeFunc)

    def _flagstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._flagstree.add_child(self._flagsFunc)
            _loc3_ += 1

    def _flagsFunc(self, param1):
        _loc2_ = param1.read_var_int()
        self.flags.append(_loc2_)


class NotificationResetMessage(NetworkMessage):
    protocolId = 6089

    def getMessageId(self):
        return 6089

    def initNotificationResetMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_NotificationResetMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_NotificationResetMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_NotificationResetMessage(self, param1):
        pass


class NotificationUpdateFlagMessage(NetworkMessage):
    protocolId = 6090

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.index = 0

    def getMessageId(self):
        return 6090

    def initNotificationUpdateFlagMessage(self, param1=0):
        self.index = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.index = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_NotificationUpdateFlagMessage(param1)

    def serializeAs_NotificationUpdateFlagMessage(self, param1):
        if self.index < 0:
            raise RuntimeError("Forbidden value (" + str(self.index) + ") on element index.")
        param1.write_var_short(self.index)

    def deserialize(self, param1):
        self.deserializeAs_NotificationUpdateFlagMessage(param1)

    def deserializeAs_NotificationUpdateFlagMessage(self, param1):
        self._indexFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_NotificationUpdateFlagMessage(param1)

    def deserializeAsyncAs_NotificationUpdateFlagMessage(self, param1):
        param1.add_child(self._indexFunc)

    def _indexFunc(self, param1):
        self.index = param1.read_var_uh_short()
        if self.index < 0:
            raise RuntimeError("Forbidden value (" + str(self.index) + ") on element of NotificationUpdateFlagMessage.index.")


class ChangeMapMessage(NetworkMessage):
    protocolId = 221

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.mapId = 0

    def getMessageId(self):
        return 221

    def initChangeMapMessage(self, param1=0):
        self.mapId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.mapId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChangeMapMessage(param1)

    def serializeAs_ChangeMapMessage(self, param1):
        if self.mapId < 0:
            raise RuntimeError("Forbidden value (" + str(self.mapId) + ") on element mapId.")
        param1.write_int(self.mapId)

    def deserialize(self, param1):
        self.deserializeAs_ChangeMapMessage(param1)

    def deserializeAs_ChangeMapMessage(self, param1):
        self._mapIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChangeMapMessage(param1)

    def deserializeAsyncAs_ChangeMapMessage(self, param1):
        param1.add_child(self._mapIdFunc)

    def _mapIdFunc(self, param1):
        self.mapId = param1.read_int()
        if self.mapId < 0:
            raise RuntimeError("Forbidden value (" + str(self.mapId) + ") on element of ChangeMapMessage.mapId.")


class CurrentMapMessage(NetworkMessage):
    protocolId = 220

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.mapId = 0
        self.mapKey = ""

    def getMessageId(self):
        return 220

    def initCurrentMapMessage(self, param1=0, param2=""):
        self.mapId = param1
        self.mapKey = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.mapId = 0
        self.mapKey = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CurrentMapMessage(param1)

    def serializeAs_CurrentMapMessage(self, param1):
        if self.mapId < 0:
            raise RuntimeError("Forbidden value (" + str(self.mapId) + ") on element mapId.")
        param1.write_int(self.mapId)
        param1.write_utf(self.mapKey)

    def deserialize(self, param1):
        self.deserializeAs_CurrentMapMessage(param1)

    def deserializeAs_CurrentMapMessage(self, param1):
        self._mapIdFunc(param1)
        self._mapKeyFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CurrentMapMessage(param1)

    def deserializeAsyncAs_CurrentMapMessage(self, param1):
        param1.add_child(self._mapIdFunc)
        param1.add_child(self._mapKeyFunc)

    def _mapIdFunc(self, param1):
        self.mapId = param1.read_int()
        if self.mapId < 0:
            raise RuntimeError("Forbidden value (" + str(self.mapId) + ") on element of CurrentMapMessage.mapId.")

    def _mapKeyFunc(self, param1):
        self.mapKey = param1.read_utf()


class ErrorMapNotFoundMessage(NetworkMessage):
    protocolId = 6197

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.mapId = 0

    def getMessageId(self):
        return 6197

    def initErrorMapNotFoundMessage(self, param1=0):
        self.mapId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.mapId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ErrorMapNotFoundMessage(param1)

    def serializeAs_ErrorMapNotFoundMessage(self, param1):
        if self.mapId < 0:
            raise RuntimeError("Forbidden value (" + str(self.mapId) + ") on element mapId.")
        param1.write_int(self.mapId)

    def deserialize(self, param1):
        self.deserializeAs_ErrorMapNotFoundMessage(param1)

    def deserializeAs_ErrorMapNotFoundMessage(self, param1):
        self._mapIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ErrorMapNotFoundMessage(param1)

    def deserializeAsyncAs_ErrorMapNotFoundMessage(self, param1):
        param1.add_child(self._mapIdFunc)

    def _mapIdFunc(self, param1):
        self.mapId = param1.read_int()
        if self.mapId < 0:
            raise RuntimeError("Forbidden value (" + str(self.mapId) + ") on element of ErrorMapNotFoundMessage.mapId.")


class GameRolePlayShowActorMessage(NetworkMessage):
    protocolId = 5632

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.informations = GameRolePlayActorInformations()
        self._informationstree = FuncTree()

    def getMessageId(self):
        return 5632

    def initGameRolePlayShowActorMessage(self, param1=None):
        self.informations = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.informations = GameRolePlayActorInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayShowActorMessage(param1)

    def serializeAs_GameRolePlayShowActorMessage(self, param1):
        param1.write_short(self.informations.getTypeId())
        self.informations.serialize(param1)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayShowActorMessage(param1)

    def deserializeAs_GameRolePlayShowActorMessage(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.informations = ProtocolTypeManager.get_instance(GameRolePlayActorInformations,_loc2_)
        self.informations.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayShowActorMessage(param1)

    def deserializeAsyncAs_GameRolePlayShowActorMessage(self, param1):
        self._informationstree = param1.add_child(self._informationstreeFunc)

    def _informationstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.informations = ProtocolTypeManager.get_instance(GameRolePlayActorInformations,_loc2_)
        self.informations.deserializeAsync(self._informationstree)


class GameRolePlayShowMultipleActorsMessage(NetworkMessage):
    protocolId = 6712

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.informationsList = []
        self._informationsListtree = FuncTree()

    def getMessageId(self):
        return 6712

    def initGameRolePlayShowMultipleActorsMessage(self, param1=[]):
        self.informationsList = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.informationsList = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayShowMultipleActorsMessage(param1)

    def serializeAs_GameRolePlayShowMultipleActorsMessage(self, param1):
        param1.write_short(len(self.informationsList))
        _loc2_ = 0
        while _loc2_ < len(self.informationsList):
            param1.write_short(as_parent(self.informationsList[_loc2_], GameRolePlayActorInformations).getTypeId())
            as_parent(self.informationsList[_loc2_], GameRolePlayActorInformations).serialize(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayShowMultipleActorsMessage(param1)

    def deserializeAs_GameRolePlayShowMultipleActorsMessage(self, param1):
        _loc4_ = 0
        _loc5_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_unsigned_short()
            _loc5_ = ProtocolTypeManager.get_instance(GameRolePlayActorInformations,_loc4_)
            _loc5_.deserialize(param1)
            self.informationsList.append(_loc5_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayShowMultipleActorsMessage(param1)

    def deserializeAsyncAs_GameRolePlayShowMultipleActorsMessage(self, param1):
        self._informationsListtree = param1.add_child(self._informationsListtreeFunc)

    def _informationsListtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._informationsListtree.add_child(self._informationsListFunc)
            _loc3_ += 1

    def _informationsListFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(GameRolePlayActorInformations,_loc2_)
        _loc3_.deserialize(param1)
        self.informationsList.append(_loc3_)


class MapComplementaryInformationsDataMessage(NetworkMessage):
    protocolId = 226

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.subAreaId = 0
        self.mapId = 0
        self.houses = []
        self.actors = []
        self.interactiveElements = []
        self.statedElements = []
        self.obstacles = []
        self.fights = []
        self.hasAggressiveMonsters = False
        self.fightStartPositions = FightStartingPositions()
        self._housestree = FuncTree()
        self._actorstree = FuncTree()
        self._interactiveElementstree = FuncTree()
        self._statedElementstree = FuncTree()
        self._obstaclestree = FuncTree()
        self._fightstree = FuncTree()
        self._fightStartPositionstree = FuncTree()

    def getMessageId(self):
        return 226

    def initMapComplementaryInformationsDataMessage(self, param1=0, param2=0, param3=[], param4=[], param5=[], param6=[], param7=[], param8=[], param9=False, param10=None):
        self.subAreaId = param1
        self.mapId = param2
        self.houses = param3
        self.actors = param4
        self.interactiveElements = param5
        self.statedElements = param6
        self.obstacles = param7
        self.fights = param8
        self.hasAggressiveMonsters = param9
        self.fightStartPositions = param10
        self._isInitialized = True
        return self

    def reset(self):
        self.subAreaId = 0
        self.mapId = 0
        self.houses = []
        self.actors = []
        self.interactiveElements = []
        self.statedElements = []
        self.obstacles = []
        self.fights = []
        self.hasAggressiveMonsters = False
        self.fightStartPositions = FightStartingPositions()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MapComplementaryInformationsDataMessage(param1)

    def serializeAs_MapComplementaryInformationsDataMessage(self, param1):
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element subAreaId.")
        param1.write_var_short(self.subAreaId)
        if self.mapId < 0:
            raise RuntimeError("Forbidden value (" + str(self.mapId) + ") on element mapId.")
        param1.write_int(self.mapId)
        param1.write_short(len(self.houses))
        _loc2_ = 0
        while _loc2_ < len(self.houses):
            param1.write_short(as_parent(self.houses[_loc2_], HouseInformations).getTypeId())
            as_parent(self.houses[_loc2_], HouseInformations).serialize(param1)
            _loc2_ += 1
        param1.write_short(len(self.actors))
        _loc3_ = 0
        while _loc3_ < len(self.actors):
            param1.write_short(as_parent(self.actors[_loc3_], GameRolePlayActorInformations).getTypeId())
            as_parent(self.actors[_loc3_], GameRolePlayActorInformations).serialize(param1)
            _loc3_ += 1
        param1.write_short(len(self.interactiveElements))
        _loc4_ = 0
        while _loc4_ < len(self.interactiveElements):
            param1.write_short(as_parent(self.interactiveElements[_loc4_], InteractiveElement).getTypeId())
            as_parent(self.interactiveElements[_loc4_], InteractiveElement).serialize(param1)
            _loc4_ += 1
        param1.write_short(len(self.statedElements))
        _loc5_ = 0
        while _loc5_ < len(self.statedElements):
            as_parent(self.statedElements[_loc5_], StatedElement).serializeAs_StatedElement(param1)
            _loc5_ += 1
        param1.write_short(len(self.obstacles))
        _loc6_ = 0
        while _loc6_ < len(self.obstacles):
            as_parent(self.obstacles[_loc6_], MapObstacle).serializeAs_MapObstacle(param1)
            _loc6_ += 1
        param1.write_short(len(self.fights))
        _loc7_ = 0
        while _loc7_ < len(self.fights):
            as_parent(self.fights[_loc7_], FightCommonInformations).serializeAs_FightCommonInformations(param1)
            _loc7_ += 1
        param1.write_boolean(self.hasAggressiveMonsters)
        self.fightStartPositions.serializeAs_FightStartingPositions(param1)

    def deserialize(self, param1):
        self.deserializeAs_MapComplementaryInformationsDataMessage(param1)

    def deserializeAs_MapComplementaryInformationsDataMessage(self, param1):
        _loc14_ = 0
        _loc15_ = None
        _loc16_ = 0
        _loc17_ = None
        _loc18_ = 0
        _loc19_ = None
        _loc20_ = None
        _loc21_ = None
        _loc22_ = None
        self._subAreaIdFunc(param1)
        self._mapIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc14_ = param1.read_unsigned_short()
            _loc15_ = ProtocolTypeManager.get_instance(HouseInformations,_loc14_)
            _loc15_.deserialize(param1)
            self.houses.append(_loc15_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc16_ = param1.read_unsigned_short()
            _loc17_ = ProtocolTypeManager.get_instance(GameRolePlayActorInformations,_loc16_)
            _loc17_.deserialize(param1)
            self.actors.append(_loc17_)
            _loc5_ += 1
        _loc6_ = param1.read_unsigned_short()
        _loc7_ = 0
        while _loc7_ < _loc6_:
            _loc18_ = param1.read_unsigned_short()
            _loc19_ = ProtocolTypeManager.get_instance(InteractiveElement,_loc18_)
            _loc19_.deserialize(param1)
            self.interactiveElements.append(_loc19_)
            _loc7_ += 1
        _loc8_ = param1.read_unsigned_short()
        _loc9_ = 0
        while _loc9_ < _loc8_:
            _loc20_ = StatedElement()
            _loc20_.deserialize(param1)
            self.statedElements.append(_loc20_)
            _loc9_ += 1
        _loc10_ = param1.read_unsigned_short()
        _loc11_ = 0
        while _loc11_ < _loc10_:
            _loc21_ = MapObstacle()
            _loc21_.deserialize(param1)
            self.obstacles.append(_loc21_)
            _loc11_ += 1
        _loc12_ = param1.read_unsigned_short()
        _loc13_ = 0
        while _loc13_ < _loc12_:
            _loc22_ = FightCommonInformations()
            _loc22_.deserialize(param1)
            self.fights.append(_loc22_)
            _loc13_ += 1
        self._hasAggressiveMonstersFunc(param1)
        self.fightStartPositions = FightStartingPositions()
        self.fightStartPositions.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MapComplementaryInformationsDataMessage(param1)

    def deserializeAsyncAs_MapComplementaryInformationsDataMessage(self, param1):
        param1.add_child(self._subAreaIdFunc)
        param1.add_child(self._mapIdFunc)
        self._housestree = param1.add_child(self._housestreeFunc)
        self._actorstree = param1.add_child(self._actorstreeFunc)
        self._interactiveElementstree = param1.add_child(self._interactiveElementstreeFunc)
        self._statedElementstree = param1.add_child(self._statedElementstreeFunc)
        self._obstaclestree = param1.add_child(self._obstaclestreeFunc)
        self._fightstree = param1.add_child(self._fightstreeFunc)
        param1.add_child(self._hasAggressiveMonstersFunc)
        self._fightStartPositionstree = param1.add_child(self._fightStartPositionstreeFunc)

    def _subAreaIdFunc(self, param1):
        self.subAreaId = param1.read_var_uh_short()
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element of MapComplementaryInformationsDataMessage.subAreaId.")

    def _mapIdFunc(self, param1):
        self.mapId = param1.read_int()
        if self.mapId < 0:
            raise RuntimeError("Forbidden value (" + str(self.mapId) + ") on element of MapComplementaryInformationsDataMessage.mapId.")

    def _housestreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._housestree.add_child(self._housesFunc)
            _loc3_ += 1

    def _housesFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(HouseInformations,_loc2_)
        _loc3_.deserialize(param1)
        self.houses.append(_loc3_)

    def _actorstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._actorstree.add_child(self._actorsFunc)
            _loc3_ += 1

    def _actorsFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(GameRolePlayActorInformations,_loc2_)
        _loc3_.deserialize(param1)
        self.actors.append(_loc3_)

    def _interactiveElementstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._interactiveElementstree.add_child(self._interactiveElementsFunc)
            _loc3_ += 1

    def _interactiveElementsFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(InteractiveElement,_loc2_)
        _loc3_.deserialize(param1)
        self.interactiveElements.append(_loc3_)

    def _statedElementstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._statedElementstree.add_child(self._statedElementsFunc)
            _loc3_ += 1

    def _statedElementsFunc(self, param1):
        _loc2_ = StatedElement()
        _loc2_.deserialize(param1)
        self.statedElements.append(_loc2_)

    def _obstaclestreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._obstaclestree.add_child(self._obstaclesFunc)
            _loc3_ += 1

    def _obstaclesFunc(self, param1):
        _loc2_ = MapObstacle()
        _loc2_.deserialize(param1)
        self.obstacles.append(_loc2_)

    def _fightstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._fightstree.add_child(self._fightsFunc)
            _loc3_ += 1

    def _fightsFunc(self, param1):
        _loc2_ = FightCommonInformations()
        _loc2_.deserialize(param1)
        self.fights.append(_loc2_)

    def _hasAggressiveMonstersFunc(self, param1):
        self.hasAggressiveMonsters = param1.read_boolean()

    def _fightStartPositionstreeFunc(self, param1):
        self.fightStartPositions = FightStartingPositions()
        self.fightStartPositions.deserializeAsync(self._fightStartPositionstree)


class MapFightCountMessage(NetworkMessage):
    protocolId = 210

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fightCount = 0

    def getMessageId(self):
        return 210

    def initMapFightCountMessage(self, param1=0):
        self.fightCount = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.fightCount = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MapFightCountMessage(param1)

    def serializeAs_MapFightCountMessage(self, param1):
        if self.fightCount < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightCount) + ") on element fightCount.")
        param1.write_var_short(self.fightCount)

    def deserialize(self, param1):
        self.deserializeAs_MapFightCountMessage(param1)

    def deserializeAs_MapFightCountMessage(self, param1):
        self._fightCountFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MapFightCountMessage(param1)

    def deserializeAsyncAs_MapFightCountMessage(self, param1):
        param1.add_child(self._fightCountFunc)

    def _fightCountFunc(self, param1):
        self.fightCount = param1.read_var_uh_short()
        if self.fightCount < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightCount) + ") on element of MapFightCountMessage.fightCount.")


class MapFightStartPositionsUpdateMessage(NetworkMessage):
    protocolId = 6716

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.mapId = 0
        self.fightStartPositions = FightStartingPositions()
        self._fightStartPositionstree = FuncTree()

    def getMessageId(self):
        return 6716

    def initMapFightStartPositionsUpdateMessage(self, param1=0, param2=None):
        self.mapId = param1
        self.fightStartPositions = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.mapId = 0
        self.fightStartPositions = FightStartingPositions()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MapFightStartPositionsUpdateMessage(param1)

    def serializeAs_MapFightStartPositionsUpdateMessage(self, param1):
        if self.mapId < 0:
            raise RuntimeError("Forbidden value (" + str(self.mapId) + ") on element mapId.")
        param1.write_int(self.mapId)
        self.fightStartPositions.serializeAs_FightStartingPositions(param1)

    def deserialize(self, param1):
        self.deserializeAs_MapFightStartPositionsUpdateMessage(param1)

    def deserializeAs_MapFightStartPositionsUpdateMessage(self, param1):
        self._mapIdFunc(param1)
        self.fightStartPositions = FightStartingPositions()
        self.fightStartPositions.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MapFightStartPositionsUpdateMessage(param1)

    def deserializeAsyncAs_MapFightStartPositionsUpdateMessage(self, param1):
        param1.add_child(self._mapIdFunc)
        self._fightStartPositionstree = param1.add_child(self._fightStartPositionstreeFunc)

    def _mapIdFunc(self, param1):
        self.mapId = param1.read_int()
        if self.mapId < 0:
            raise RuntimeError("Forbidden value (" + str(self.mapId) + ") on element of MapFightStartPositionsUpdateMessage.mapId.")

    def _fightStartPositionstreeFunc(self, param1):
        self.fightStartPositions = FightStartingPositions()
        self.fightStartPositions.deserializeAsync(self._fightStartPositionstree)


class MapInformationsRequestMessage(NetworkMessage):
    protocolId = 225

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.mapId = 0

    def getMessageId(self):
        return 225

    def initMapInformationsRequestMessage(self, param1=0):
        self.mapId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.mapId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MapInformationsRequestMessage(param1)

    def serializeAs_MapInformationsRequestMessage(self, param1):
        if self.mapId < 0:
            raise RuntimeError("Forbidden value (" + str(self.mapId) + ") on element mapId.")
        param1.write_int(self.mapId)

    def deserialize(self, param1):
        self.deserializeAs_MapInformationsRequestMessage(param1)

    def deserializeAs_MapInformationsRequestMessage(self, param1):
        self._mapIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MapInformationsRequestMessage(param1)

    def deserializeAsyncAs_MapInformationsRequestMessage(self, param1):
        param1.add_child(self._mapIdFunc)

    def _mapIdFunc(self, param1):
        self.mapId = param1.read_int()
        if self.mapId < 0:
            raise RuntimeError("Forbidden value (" + str(self.mapId) + ") on element of MapInformationsRequestMessage.mapId.")


class MapObstacleUpdateMessage(NetworkMessage):
    protocolId = 6051

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.obstacles = []
        self._obstaclestree = FuncTree()

    def getMessageId(self):
        return 6051

    def initMapObstacleUpdateMessage(self, param1=[]):
        self.obstacles = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.obstacles = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MapObstacleUpdateMessage(param1)

    def serializeAs_MapObstacleUpdateMessage(self, param1):
        param1.write_short(len(self.obstacles))
        _loc2_ = 0
        while _loc2_ < len(self.obstacles):
            as_parent(self.obstacles[_loc2_], MapObstacle).serializeAs_MapObstacle(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_MapObstacleUpdateMessage(param1)

    def deserializeAs_MapObstacleUpdateMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = MapObstacle()
            _loc4_.deserialize(param1)
            self.obstacles.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MapObstacleUpdateMessage(param1)

    def deserializeAsyncAs_MapObstacleUpdateMessage(self, param1):
        self._obstaclestree = param1.add_child(self._obstaclestreeFunc)

    def _obstaclestreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._obstaclestree.add_child(self._obstaclesFunc)
            _loc3_ += 1

    def _obstaclesFunc(self, param1):
        _loc2_ = MapObstacle()
        _loc2_.deserialize(param1)
        self.obstacles.append(_loc2_)


class MapRunningFightDetailsMessage(NetworkMessage):
    protocolId = 5751

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fightId = 0
        self.attackers = []
        self.defenders = []
        self._attackerstree = FuncTree()
        self._defenderstree = FuncTree()

    def getMessageId(self):
        return 5751

    def initMapRunningFightDetailsMessage(self, param1=0, param2=[], param3=[]):
        self.fightId = param1
        self.attackers = param2
        self.defenders = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.fightId = 0
        self.attackers = []
        self.defenders = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MapRunningFightDetailsMessage(param1)

    def serializeAs_MapRunningFightDetailsMessage(self, param1):
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element fightId.")
        param1.write_int(self.fightId)
        param1.write_short(len(self.attackers))
        _loc2_ = 0
        while _loc2_ < len(self.attackers):
            param1.write_short(as_parent(self.attackers[_loc2_], GameFightFighterLightInformations).getTypeId())
            as_parent(self.attackers[_loc2_], GameFightFighterLightInformations).serialize(param1)
            _loc2_ += 1
        param1.write_short(len(self.defenders))
        _loc3_ = 0
        while _loc3_ < len(self.defenders):
            param1.write_short(as_parent(self.defenders[_loc3_], GameFightFighterLightInformations).getTypeId())
            as_parent(self.defenders[_loc3_], GameFightFighterLightInformations).serialize(param1)
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_MapRunningFightDetailsMessage(param1)

    def deserializeAs_MapRunningFightDetailsMessage(self, param1):
        _loc6_ = 0
        _loc7_ = None
        _loc8_ = 0
        _loc9_ = None
        self._fightIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = param1.read_unsigned_short()
            _loc7_ = ProtocolTypeManager.get_instance(GameFightFighterLightInformations,_loc6_)
            _loc7_.deserialize(param1)
            self.attackers.append(_loc7_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc8_ = param1.read_unsigned_short()
            _loc9_ = ProtocolTypeManager.get_instance(GameFightFighterLightInformations,_loc8_)
            _loc9_.deserialize(param1)
            self.defenders.append(_loc9_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MapRunningFightDetailsMessage(param1)

    def deserializeAsyncAs_MapRunningFightDetailsMessage(self, param1):
        param1.add_child(self._fightIdFunc)
        self._attackerstree = param1.add_child(self._attackerstreeFunc)
        self._defenderstree = param1.add_child(self._defenderstreeFunc)

    def _fightIdFunc(self, param1):
        self.fightId = param1.read_int()
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element of MapRunningFightDetailsMessage.fightId.")

    def _attackerstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._attackerstree.add_child(self._attackersFunc)
            _loc3_ += 1

    def _attackersFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(GameFightFighterLightInformations,_loc2_)
        _loc3_.deserialize(param1)
        self.attackers.append(_loc3_)

    def _defenderstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._defenderstree.add_child(self._defendersFunc)
            _loc3_ += 1

    def _defendersFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(GameFightFighterLightInformations,_loc2_)
        _loc3_.deserialize(param1)
        self.defenders.append(_loc3_)


class MapRunningFightDetailsRequestMessage(NetworkMessage):
    protocolId = 5750

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fightId = 0

    def getMessageId(self):
        return 5750

    def initMapRunningFightDetailsRequestMessage(self, param1=0):
        self.fightId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.fightId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MapRunningFightDetailsRequestMessage(param1)

    def serializeAs_MapRunningFightDetailsRequestMessage(self, param1):
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element fightId.")
        param1.write_int(self.fightId)

    def deserialize(self, param1):
        self.deserializeAs_MapRunningFightDetailsRequestMessage(param1)

    def deserializeAs_MapRunningFightDetailsRequestMessage(self, param1):
        self._fightIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MapRunningFightDetailsRequestMessage(param1)

    def deserializeAsyncAs_MapRunningFightDetailsRequestMessage(self, param1):
        param1.add_child(self._fightIdFunc)

    def _fightIdFunc(self, param1):
        self.fightId = param1.read_int()
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element of MapRunningFightDetailsRequestMessage.fightId.")


class MapRunningFightListMessage(NetworkMessage):
    protocolId = 5743

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fights = []
        self._fightstree = FuncTree()

    def getMessageId(self):
        return 5743

    def initMapRunningFightListMessage(self, param1=[]):
        self.fights = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.fights = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MapRunningFightListMessage(param1)

    def serializeAs_MapRunningFightListMessage(self, param1):
        param1.write_short(len(self.fights))
        _loc2_ = 0
        while _loc2_ < len(self.fights):
            as_parent(self.fights[_loc2_], FightExternalInformations).serializeAs_FightExternalInformations(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_MapRunningFightListMessage(param1)

    def deserializeAs_MapRunningFightListMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = FightExternalInformations()
            _loc4_.deserialize(param1)
            self.fights.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MapRunningFightListMessage(param1)

    def deserializeAsyncAs_MapRunningFightListMessage(self, param1):
        self._fightstree = param1.add_child(self._fightstreeFunc)

    def _fightstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._fightstree.add_child(self._fightsFunc)
            _loc3_ += 1

    def _fightsFunc(self, param1):
        _loc2_ = FightExternalInformations()
        _loc2_.deserialize(param1)
        self.fights.append(_loc2_)


class MapRunningFightListRequestMessage(NetworkMessage):
    protocolId = 5742

    def getMessageId(self):
        return 5742

    def initMapRunningFightListRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_MapRunningFightListRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_MapRunningFightListRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_MapRunningFightListRequestMessage(self, param1):
        pass


class StopToListenRunningFightRequestMessage(NetworkMessage):
    protocolId = 6124

    def getMessageId(self):
        return 6124

    def initStopToListenRunningFightRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_StopToListenRunningFightRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_StopToListenRunningFightRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_StopToListenRunningFightRequestMessage(self, param1):
        pass


class TeleportOnSameMapMessage(NetworkMessage):
    protocolId = 6048

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0
        self.cellId = 0

    def getMessageId(self):
        return 6048

    def initTeleportOnSameMapMessage(self, param1=0, param2=0):
        self.targetId = param1
        self.cellId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.targetId = 0
        self.cellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TeleportOnSameMapMessage(param1)

    def serializeAs_TeleportOnSameMapMessage(self, param1):
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)
        if self.cellId < 0 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element cellId.")
        param1.write_var_short(self.cellId)

    def deserialize(self, param1):
        self.deserializeAs_TeleportOnSameMapMessage(param1)

    def deserializeAs_TeleportOnSameMapMessage(self, param1):
        self._targetIdFunc(param1)
        self._cellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TeleportOnSameMapMessage(param1)

    def deserializeAsyncAs_TeleportOnSameMapMessage(self, param1):
        param1.add_child(self._targetIdFunc)
        param1.add_child(self._cellIdFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of TeleportOnSameMapMessage.targetId.")

    def _cellIdFunc(self, param1):
        self.cellId = param1.read_var_uh_short()
        if self.cellId < 0 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element of TeleportOnSameMapMessage.cellId.")


class GameRolePlayFreeSoulRequestMessage(NetworkMessage):
    protocolId = 745

    def getMessageId(self):
        return 745

    def initGameRolePlayFreeSoulRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_GameRolePlayFreeSoulRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_GameRolePlayFreeSoulRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_GameRolePlayFreeSoulRequestMessage(self, param1):
        pass


class GameRolePlayGameOverMessage(NetworkMessage):
    protocolId = 746

    def getMessageId(self):
        return 746

    def initGameRolePlayGameOverMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_GameRolePlayGameOverMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_GameRolePlayGameOverMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_GameRolePlayGameOverMessage(self, param1):
        pass


class GameRolePlayPlayerLifeStatusMessage(NetworkMessage):
    protocolId = 5996

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.state = 0
        self.phenixMapId = 0

    def getMessageId(self):
        return 5996

    def initGameRolePlayPlayerLifeStatusMessage(self, param1=0, param2=0):
        self.state = param1
        self.phenixMapId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.state = 0
        self.phenixMapId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayPlayerLifeStatusMessage(param1)

    def serializeAs_GameRolePlayPlayerLifeStatusMessage(self, param1):
        param1.write_byte(self.state)
        if self.phenixMapId < 0:
            raise RuntimeError("Forbidden value (" + str(self.phenixMapId) + ") on element phenixMapId.")
        param1.write_int(self.phenixMapId)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayPlayerLifeStatusMessage(param1)

    def deserializeAs_GameRolePlayPlayerLifeStatusMessage(self, param1):
        self._stateFunc(param1)
        self._phenixMapIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayPlayerLifeStatusMessage(param1)

    def deserializeAsyncAs_GameRolePlayPlayerLifeStatusMessage(self, param1):
        param1.add_child(self._stateFunc)
        param1.add_child(self._phenixMapIdFunc)

    def _stateFunc(self, param1):
        self.state = param1.read_byte()
        if self.state < 0:
            raise RuntimeError("Forbidden value (" + str(self.state) + ") on element of GameRolePlayPlayerLifeStatusMessage.state.")

    def _phenixMapIdFunc(self, param1):
        self.phenixMapId = param1.read_int()
        if self.phenixMapId < 0:
            raise RuntimeError("Forbidden value (" + str(self.phenixMapId) + ") on element of GameRolePlayPlayerLifeStatusMessage.phenixMapId.")


class WarnOnPermaDeathMessage(NetworkMessage):
    protocolId = 6512

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.enable = False

    def getMessageId(self):
        return 6512

    def initWarnOnPermaDeathMessage(self, param1=False):
        self.enable = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.enable = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_WarnOnPermaDeathMessage(param1)

    def serializeAs_WarnOnPermaDeathMessage(self, param1):
        param1.write_boolean(self.enable)

    def deserialize(self, param1):
        self.deserializeAs_WarnOnPermaDeathMessage(param1)

    def deserializeAs_WarnOnPermaDeathMessage(self, param1):
        self._enableFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_WarnOnPermaDeathMessage(param1)

    def deserializeAsyncAs_WarnOnPermaDeathMessage(self, param1):
        param1.add_child(self._enableFunc)

    def _enableFunc(self, param1):
        self.enable = param1.read_boolean()


class GameRolePlayDelayedActionFinishedMessage(NetworkMessage):
    protocolId = 6150

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.delayedCharacterId = 0
        self.delayTypeId = 0

    def getMessageId(self):
        return 6150

    def initGameRolePlayDelayedActionFinishedMessage(self, param1=0, param2=0):
        self.delayedCharacterId = param1
        self.delayTypeId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.delayedCharacterId = 0
        self.delayTypeId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayDelayedActionFinishedMessage(param1)

    def serializeAs_GameRolePlayDelayedActionFinishedMessage(self, param1):
        if self.delayedCharacterId < -9007199254740990 or self.delayedCharacterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.delayedCharacterId) + ") on element delayedCharacterId.")
        param1.write_double(self.delayedCharacterId)
        param1.write_byte(self.delayTypeId)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayDelayedActionFinishedMessage(param1)

    def deserializeAs_GameRolePlayDelayedActionFinishedMessage(self, param1):
        self._delayedCharacterIdFunc(param1)
        self._delayTypeIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayDelayedActionFinishedMessage(param1)

    def deserializeAsyncAs_GameRolePlayDelayedActionFinishedMessage(self, param1):
        param1.add_child(self._delayedCharacterIdFunc)
        param1.add_child(self._delayTypeIdFunc)

    def _delayedCharacterIdFunc(self, param1):
        self.delayedCharacterId = param1.read_double()
        if self.delayedCharacterId < -9007199254740990 or self.delayedCharacterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.delayedCharacterId) + ") on element of GameRolePlayDelayedActionFinishedMessage.delayedCharacterId.")

    def _delayTypeIdFunc(self, param1):
        self.delayTypeId = param1.read_byte()
        if self.delayTypeId < 0:
            raise RuntimeError("Forbidden value (" + str(self.delayTypeId) + ") on element of GameRolePlayDelayedActionFinishedMessage.delayTypeId.")


class GameRolePlayDelayedActionMessage(NetworkMessage):
    protocolId = 6153

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.delayedCharacterId = 0
        self.delayTypeId = 0
        self.delayEndTime = 0

    def getMessageId(self):
        return 6153

    def initGameRolePlayDelayedActionMessage(self, param1=0, param2=0, param3=0):
        self.delayedCharacterId = param1
        self.delayTypeId = param2
        self.delayEndTime = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.delayedCharacterId = 0
        self.delayTypeId = 0
        self.delayEndTime = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayDelayedActionMessage(param1)

    def serializeAs_GameRolePlayDelayedActionMessage(self, param1):
        if self.delayedCharacterId < -9007199254740990 or self.delayedCharacterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.delayedCharacterId) + ") on element delayedCharacterId.")
        param1.write_double(self.delayedCharacterId)
        param1.write_byte(self.delayTypeId)
        if self.delayEndTime < 0 or self.delayEndTime > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.delayEndTime) + ") on element delayEndTime.")
        param1.write_double(self.delayEndTime)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayDelayedActionMessage(param1)

    def deserializeAs_GameRolePlayDelayedActionMessage(self, param1):
        self._delayedCharacterIdFunc(param1)
        self._delayTypeIdFunc(param1)
        self._delayEndTimeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayDelayedActionMessage(param1)

    def deserializeAsyncAs_GameRolePlayDelayedActionMessage(self, param1):
        param1.add_child(self._delayedCharacterIdFunc)
        param1.add_child(self._delayTypeIdFunc)
        param1.add_child(self._delayEndTimeFunc)

    def _delayedCharacterIdFunc(self, param1):
        self.delayedCharacterId = param1.read_double()
        if self.delayedCharacterId < -9007199254740990 or self.delayedCharacterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.delayedCharacterId) + ") on element of GameRolePlayDelayedActionMessage.delayedCharacterId.")

    def _delayTypeIdFunc(self, param1):
        self.delayTypeId = param1.read_byte()
        if self.delayTypeId < 0:
            raise RuntimeError("Forbidden value (" + str(self.delayTypeId) + ") on element of GameRolePlayDelayedActionMessage.delayTypeId.")

    def _delayEndTimeFunc(self, param1):
        self.delayEndTime = param1.read_double()
        if self.delayEndTime < 0 or self.delayEndTime > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.delayEndTime) + ") on element of GameRolePlayDelayedActionMessage.delayEndTime.")


class ComicReadingBeginMessage(NetworkMessage):
    protocolId = 6536

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.comicId = 0

    def getMessageId(self):
        return 6536

    def initComicReadingBeginMessage(self, param1=0):
        self.comicId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.comicId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ComicReadingBeginMessage(param1)

    def serializeAs_ComicReadingBeginMessage(self, param1):
        if self.comicId < 0:
            raise RuntimeError("Forbidden value (" + str(self.comicId) + ") on element comicId.")
        param1.write_var_short(self.comicId)

    def deserialize(self, param1):
        self.deserializeAs_ComicReadingBeginMessage(param1)

    def deserializeAs_ComicReadingBeginMessage(self, param1):
        self._comicIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ComicReadingBeginMessage(param1)

    def deserializeAsyncAs_ComicReadingBeginMessage(self, param1):
        param1.add_child(self._comicIdFunc)

    def _comicIdFunc(self, param1):
        self.comicId = param1.read_var_uh_short()
        if self.comicId < 0:
            raise RuntimeError("Forbidden value (" + str(self.comicId) + ") on element of ComicReadingBeginMessage.comicId.")


class DocumentReadingBeginMessage(NetworkMessage):
    protocolId = 5675

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.documentId = 0

    def getMessageId(self):
        return 5675

    def initDocumentReadingBeginMessage(self, param1=0):
        self.documentId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.documentId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DocumentReadingBeginMessage(param1)

    def serializeAs_DocumentReadingBeginMessage(self, param1):
        if self.documentId < 0:
            raise RuntimeError("Forbidden value (" + str(self.documentId) + ") on element documentId.")
        param1.write_var_short(self.documentId)

    def deserialize(self, param1):
        self.deserializeAs_DocumentReadingBeginMessage(param1)

    def deserializeAs_DocumentReadingBeginMessage(self, param1):
        self._documentIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DocumentReadingBeginMessage(param1)

    def deserializeAsyncAs_DocumentReadingBeginMessage(self, param1):
        param1.add_child(self._documentIdFunc)

    def _documentIdFunc(self, param1):
        self.documentId = param1.read_var_uh_short()
        if self.documentId < 0:
            raise RuntimeError("Forbidden value (" + str(self.documentId) + ") on element of DocumentReadingBeginMessage.documentId.")


class EmoteAddMessage(NetworkMessage):
    protocolId = 5644

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.emoteId = 0

    def getMessageId(self):
        return 5644

    def initEmoteAddMessage(self, param1=0):
        self.emoteId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.emoteId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_EmoteAddMessage(param1)

    def serializeAs_EmoteAddMessage(self, param1):
        if self.emoteId < 0 or self.emoteId > 255:
            raise RuntimeError("Forbidden value (" + str(self.emoteId) + ") on element emoteId.")
        param1.write_byte(self.emoteId)

    def deserialize(self, param1):
        self.deserializeAs_EmoteAddMessage(param1)

    def deserializeAs_EmoteAddMessage(self, param1):
        self._emoteIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_EmoteAddMessage(param1)

    def deserializeAsyncAs_EmoteAddMessage(self, param1):
        param1.add_child(self._emoteIdFunc)

    def _emoteIdFunc(self, param1):
        self.emoteId = param1.read_unsigned_byte()
        if self.emoteId < 0 or self.emoteId > 255:
            raise RuntimeError("Forbidden value (" + str(self.emoteId) + ") on element of EmoteAddMessage.emoteId.")


class EmoteListMessage(NetworkMessage):
    protocolId = 5689

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.emoteIds = []
        self._emoteIdstree = FuncTree()

    def getMessageId(self):
        return 5689

    def initEmoteListMessage(self, param1=[]):
        self.emoteIds = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.emoteIds = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_EmoteListMessage(param1)

    def serializeAs_EmoteListMessage(self, param1):
        param1.write_short(len(self.emoteIds))
        _loc2_ = 0
        while _loc2_ < len(self.emoteIds):
            if self.emoteIds[_loc2_] < 0 or self.emoteIds[_loc2_] > 255:
                raise RuntimeError("Forbidden value (" + str(self.emoteIds[_loc2_]) + ") on element 1 (starting at 1) of emoteIds.")
            param1.write_byte(self.emoteIds[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_EmoteListMessage(param1)

    def deserializeAs_EmoteListMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_unsigned_byte()
            if _loc4_ < 0 or _loc4_ > 255:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of emoteIds.")
            self.emoteIds.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_EmoteListMessage(param1)

    def deserializeAsyncAs_EmoteListMessage(self, param1):
        self._emoteIdstree = param1.add_child(self._emoteIdstreeFunc)

    def _emoteIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._emoteIdstree.add_child(self._emoteIdsFunc)
            _loc3_ += 1

    def _emoteIdsFunc(self, param1):
        _loc2_ = param1.read_unsigned_byte()
        if _loc2_ < 0 or _loc2_ > 255:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of emoteIds.")
        self.emoteIds.append(_loc2_)


class EmotePlayAbstractMessage(NetworkMessage):
    protocolId = 5690

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.emoteId = 0
        self.emoteStartTime = 0

    def getMessageId(self):
        return 5690

    def initEmotePlayAbstractMessage(self, param1=0, param2=0):
        self.emoteId = param1
        self.emoteStartTime = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.emoteId = 0
        self.emoteStartTime = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_EmotePlayAbstractMessage(param1)

    def serializeAs_EmotePlayAbstractMessage(self, param1):
        if self.emoteId < 0 or self.emoteId > 255:
            raise RuntimeError("Forbidden value (" + str(self.emoteId) + ") on element emoteId.")
        param1.write_byte(self.emoteId)
        if self.emoteStartTime < -9007199254740990 or self.emoteStartTime > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.emoteStartTime) + ") on element emoteStartTime.")
        param1.write_double(self.emoteStartTime)

    def deserialize(self, param1):
        self.deserializeAs_EmotePlayAbstractMessage(param1)

    def deserializeAs_EmotePlayAbstractMessage(self, param1):
        self._emoteIdFunc(param1)
        self._emoteStartTimeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_EmotePlayAbstractMessage(param1)

    def deserializeAsyncAs_EmotePlayAbstractMessage(self, param1):
        param1.add_child(self._emoteIdFunc)
        param1.add_child(self._emoteStartTimeFunc)

    def _emoteIdFunc(self, param1):
        self.emoteId = param1.read_unsigned_byte()
        if self.emoteId < 0 or self.emoteId > 255:
            raise RuntimeError("Forbidden value (" + str(self.emoteId) + ") on element of EmotePlayAbstractMessage.emoteId.")

    def _emoteStartTimeFunc(self, param1):
        self.emoteStartTime = param1.read_double()
        if self.emoteStartTime < -9007199254740990 or self.emoteStartTime > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.emoteStartTime) + ") on element of EmotePlayAbstractMessage.emoteStartTime.")


class EmotePlayErrorMessage(NetworkMessage):
    protocolId = 5688

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.emoteId = 0

    def getMessageId(self):
        return 5688

    def initEmotePlayErrorMessage(self, param1=0):
        self.emoteId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.emoteId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_EmotePlayErrorMessage(param1)

    def serializeAs_EmotePlayErrorMessage(self, param1):
        if self.emoteId < 0 or self.emoteId > 255:
            raise RuntimeError("Forbidden value (" + str(self.emoteId) + ") on element emoteId.")
        param1.write_byte(self.emoteId)

    def deserialize(self, param1):
        self.deserializeAs_EmotePlayErrorMessage(param1)

    def deserializeAs_EmotePlayErrorMessage(self, param1):
        self._emoteIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_EmotePlayErrorMessage(param1)

    def deserializeAsyncAs_EmotePlayErrorMessage(self, param1):
        param1.add_child(self._emoteIdFunc)

    def _emoteIdFunc(self, param1):
        self.emoteId = param1.read_unsigned_byte()
        if self.emoteId < 0 or self.emoteId > 255:
            raise RuntimeError("Forbidden value (" + str(self.emoteId) + ") on element of EmotePlayErrorMessage.emoteId.")


class EmotePlayRequestMessage(NetworkMessage):
    protocolId = 5685

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.emoteId = 0

    def getMessageId(self):
        return 5685

    def initEmotePlayRequestMessage(self, param1=0):
        self.emoteId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.emoteId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_EmotePlayRequestMessage(param1)

    def serializeAs_EmotePlayRequestMessage(self, param1):
        if self.emoteId < 0 or self.emoteId > 255:
            raise RuntimeError("Forbidden value (" + str(self.emoteId) + ") on element emoteId.")
        param1.write_byte(self.emoteId)

    def deserialize(self, param1):
        self.deserializeAs_EmotePlayRequestMessage(param1)

    def deserializeAs_EmotePlayRequestMessage(self, param1):
        self._emoteIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_EmotePlayRequestMessage(param1)

    def deserializeAsyncAs_EmotePlayRequestMessage(self, param1):
        param1.add_child(self._emoteIdFunc)

    def _emoteIdFunc(self, param1):
        self.emoteId = param1.read_unsigned_byte()
        if self.emoteId < 0 or self.emoteId > 255:
            raise RuntimeError("Forbidden value (" + str(self.emoteId) + ") on element of EmotePlayRequestMessage.emoteId.")


class EmoteRemoveMessage(NetworkMessage):
    protocolId = 5687

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.emoteId = 0

    def getMessageId(self):
        return 5687

    def initEmoteRemoveMessage(self, param1=0):
        self.emoteId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.emoteId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_EmoteRemoveMessage(param1)

    def serializeAs_EmoteRemoveMessage(self, param1):
        if self.emoteId < 0 or self.emoteId > 255:
            raise RuntimeError("Forbidden value (" + str(self.emoteId) + ") on element emoteId.")
        param1.write_byte(self.emoteId)

    def deserialize(self, param1):
        self.deserializeAs_EmoteRemoveMessage(param1)

    def deserializeAs_EmoteRemoveMessage(self, param1):
        self._emoteIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_EmoteRemoveMessage(param1)

    def deserializeAsyncAs_EmoteRemoveMessage(self, param1):
        param1.add_child(self._emoteIdFunc)

    def _emoteIdFunc(self, param1):
        self.emoteId = param1.read_unsigned_byte()
        if self.emoteId < 0 or self.emoteId > 255:
            raise RuntimeError("Forbidden value (" + str(self.emoteId) + ") on element of EmoteRemoveMessage.emoteId.")


class GameRolePlayAggressionMessage(NetworkMessage):
    protocolId = 6073

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.attackerId = 0
        self.defenderId = 0

    def getMessageId(self):
        return 6073

    def initGameRolePlayAggressionMessage(self, param1=0, param2=0):
        self.attackerId = param1
        self.defenderId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.attackerId = 0
        self.defenderId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayAggressionMessage(param1)

    def serializeAs_GameRolePlayAggressionMessage(self, param1):
        if self.attackerId < 0 or self.attackerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.attackerId) + ") on element attackerId.")
        param1.write_var_long(self.attackerId)
        if self.defenderId < 0 or self.defenderId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.defenderId) + ") on element defenderId.")
        param1.write_var_long(self.defenderId)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayAggressionMessage(param1)

    def deserializeAs_GameRolePlayAggressionMessage(self, param1):
        self._attackerIdFunc(param1)
        self._defenderIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayAggressionMessage(param1)

    def deserializeAsyncAs_GameRolePlayAggressionMessage(self, param1):
        param1.add_child(self._attackerIdFunc)
        param1.add_child(self._defenderIdFunc)

    def _attackerIdFunc(self, param1):
        self.attackerId = param1.read_var_uh_long()
        if self.attackerId < 0 or self.attackerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.attackerId) + ") on element of GameRolePlayAggressionMessage.attackerId.")

    def _defenderIdFunc(self, param1):
        self.defenderId = param1.read_var_uh_long()
        if self.defenderId < 0 or self.defenderId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.defenderId) + ") on element of GameRolePlayAggressionMessage.defenderId.")


class GameRolePlayAttackMonsterRequestMessage(NetworkMessage):
    protocolId = 6191

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.monsterGroupId = 0

    def getMessageId(self):
        return 6191

    def initGameRolePlayAttackMonsterRequestMessage(self, param1=0):
        self.monsterGroupId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.monsterGroupId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayAttackMonsterRequestMessage(param1)

    def serializeAs_GameRolePlayAttackMonsterRequestMessage(self, param1):
        if self.monsterGroupId < -9007199254740990 or self.monsterGroupId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.monsterGroupId) + ") on element monsterGroupId.")
        param1.write_double(self.monsterGroupId)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayAttackMonsterRequestMessage(param1)

    def deserializeAs_GameRolePlayAttackMonsterRequestMessage(self, param1):
        self._monsterGroupIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayAttackMonsterRequestMessage(param1)

    def deserializeAsyncAs_GameRolePlayAttackMonsterRequestMessage(self, param1):
        param1.add_child(self._monsterGroupIdFunc)

    def _monsterGroupIdFunc(self, param1):
        self.monsterGroupId = param1.read_double()
        if self.monsterGroupId < -9007199254740990 or self.monsterGroupId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.monsterGroupId) + ") on element of GameRolePlayAttackMonsterRequestMessage.monsterGroupId.")


class GameRolePlayFightRequestCanceledMessage(NetworkMessage):
    protocolId = 5822

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fightId = 0
        self.sourceId = 0
        self.targetId = 0

    def getMessageId(self):
        return 5822

    def initGameRolePlayFightRequestCanceledMessage(self, param1=0, param2=0, param3=0):
        self.fightId = param1
        self.sourceId = param2
        self.targetId = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.fightId = 0
        self.sourceId = 0
        self.targetId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayFightRequestCanceledMessage(param1)

    def serializeAs_GameRolePlayFightRequestCanceledMessage(self, param1):
        param1.write_int(self.fightId)
        if self.sourceId < -9007199254740990 or self.sourceId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.sourceId) + ") on element sourceId.")
        param1.write_double(self.sourceId)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayFightRequestCanceledMessage(param1)

    def deserializeAs_GameRolePlayFightRequestCanceledMessage(self, param1):
        self._fightIdFunc(param1)
        self._sourceIdFunc(param1)
        self._targetIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayFightRequestCanceledMessage(param1)

    def deserializeAsyncAs_GameRolePlayFightRequestCanceledMessage(self, param1):
        param1.add_child(self._fightIdFunc)
        param1.add_child(self._sourceIdFunc)
        param1.add_child(self._targetIdFunc)

    def _fightIdFunc(self, param1):
        self.fightId = param1.read_int()

    def _sourceIdFunc(self, param1):
        self.sourceId = param1.read_double()
        if self.sourceId < -9007199254740990 or self.sourceId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.sourceId) + ") on element of GameRolePlayFightRequestCanceledMessage.sourceId.")

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameRolePlayFightRequestCanceledMessage.targetId.")


class GameRolePlayPlayerFightFriendlyAnsweredMessage(NetworkMessage):
    protocolId = 5733

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fightId = 0
        self.sourceId = 0
        self.targetId = 0
        self.accept = False

    def getMessageId(self):
        return 5733

    def initGameRolePlayPlayerFightFriendlyAnsweredMessage(self, param1=0, param2=0, param3=0, param4=False):
        self.fightId = param1
        self.sourceId = param2
        self.targetId = param3
        self.accept = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.fightId = 0
        self.sourceId = 0
        self.targetId = 0
        self.accept = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayPlayerFightFriendlyAnsweredMessage(param1)

    def serializeAs_GameRolePlayPlayerFightFriendlyAnsweredMessage(self, param1):
        param1.write_int(self.fightId)
        if self.sourceId < 0 or self.sourceId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.sourceId) + ") on element sourceId.")
        param1.write_var_long(self.sourceId)
        if self.targetId < 0 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_var_long(self.targetId)
        param1.write_boolean(self.accept)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayPlayerFightFriendlyAnsweredMessage(param1)

    def deserializeAs_GameRolePlayPlayerFightFriendlyAnsweredMessage(self, param1):
        self._fightIdFunc(param1)
        self._sourceIdFunc(param1)
        self._targetIdFunc(param1)
        self._acceptFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayPlayerFightFriendlyAnsweredMessage(param1)

    def deserializeAsyncAs_GameRolePlayPlayerFightFriendlyAnsweredMessage(self, param1):
        param1.add_child(self._fightIdFunc)
        param1.add_child(self._sourceIdFunc)
        param1.add_child(self._targetIdFunc)
        param1.add_child(self._acceptFunc)

    def _fightIdFunc(self, param1):
        self.fightId = param1.read_int()

    def _sourceIdFunc(self, param1):
        self.sourceId = param1.read_var_uh_long()
        if self.sourceId < 0 or self.sourceId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.sourceId) + ") on element of GameRolePlayPlayerFightFriendlyAnsweredMessage.sourceId.")

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_var_uh_long()
        if self.targetId < 0 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameRolePlayPlayerFightFriendlyAnsweredMessage.targetId.")

    def _acceptFunc(self, param1):
        self.accept = param1.read_boolean()


class GameRolePlayPlayerFightFriendlyAnswerMessage(NetworkMessage):
    protocolId = 5732

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fightId = 0
        self.accept = False

    def getMessageId(self):
        return 5732

    def initGameRolePlayPlayerFightFriendlyAnswerMessage(self, param1=0, param2=False):
        self.fightId = param1
        self.accept = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.fightId = 0
        self.accept = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayPlayerFightFriendlyAnswerMessage(param1)

    def serializeAs_GameRolePlayPlayerFightFriendlyAnswerMessage(self, param1):
        param1.write_int(self.fightId)
        param1.write_boolean(self.accept)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayPlayerFightFriendlyAnswerMessage(param1)

    def deserializeAs_GameRolePlayPlayerFightFriendlyAnswerMessage(self, param1):
        self._fightIdFunc(param1)
        self._acceptFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayPlayerFightFriendlyAnswerMessage(param1)

    def deserializeAsyncAs_GameRolePlayPlayerFightFriendlyAnswerMessage(self, param1):
        param1.add_child(self._fightIdFunc)
        param1.add_child(self._acceptFunc)

    def _fightIdFunc(self, param1):
        self.fightId = param1.read_int()

    def _acceptFunc(self, param1):
        self.accept = param1.read_boolean()


class GameRolePlayPlayerFightFriendlyRequestedMessage(NetworkMessage):
    protocolId = 5937

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fightId = 0
        self.sourceId = 0
        self.targetId = 0

    def getMessageId(self):
        return 5937

    def initGameRolePlayPlayerFightFriendlyRequestedMessage(self, param1=0, param2=0, param3=0):
        self.fightId = param1
        self.sourceId = param2
        self.targetId = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.fightId = 0
        self.sourceId = 0
        self.targetId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayPlayerFightFriendlyRequestedMessage(param1)

    def serializeAs_GameRolePlayPlayerFightFriendlyRequestedMessage(self, param1):
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element fightId.")
        param1.write_int(self.fightId)
        if self.sourceId < 0 or self.sourceId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.sourceId) + ") on element sourceId.")
        param1.write_var_long(self.sourceId)
        if self.targetId < 0 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_var_long(self.targetId)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayPlayerFightFriendlyRequestedMessage(param1)

    def deserializeAs_GameRolePlayPlayerFightFriendlyRequestedMessage(self, param1):
        self._fightIdFunc(param1)
        self._sourceIdFunc(param1)
        self._targetIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayPlayerFightFriendlyRequestedMessage(param1)

    def deserializeAsyncAs_GameRolePlayPlayerFightFriendlyRequestedMessage(self, param1):
        param1.add_child(self._fightIdFunc)
        param1.add_child(self._sourceIdFunc)
        param1.add_child(self._targetIdFunc)

    def _fightIdFunc(self, param1):
        self.fightId = param1.read_int()
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element of GameRolePlayPlayerFightFriendlyRequestedMessage.fightId.")

    def _sourceIdFunc(self, param1):
        self.sourceId = param1.read_var_uh_long()
        if self.sourceId < 0 or self.sourceId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.sourceId) + ") on element of GameRolePlayPlayerFightFriendlyRequestedMessage.sourceId.")

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_var_uh_long()
        if self.targetId < 0 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameRolePlayPlayerFightFriendlyRequestedMessage.targetId.")


class GameRolePlayPlayerFightRequestMessage(NetworkMessage):
    protocolId = 5731

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0
        self.targetCellId = 0
        self.friendly = False

    def getMessageId(self):
        return 5731

    def initGameRolePlayPlayerFightRequestMessage(self, param1=0, param2=0, param3=False):
        self.targetId = param1
        self.targetCellId = param2
        self.friendly = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.targetId = 0
        self.targetCellId = 0
        self.friendly = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        if HASH_FUNCTION != None:
            HASH_FUNCTION(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayPlayerFightRequestMessage(param1)

    def serializeAs_GameRolePlayPlayerFightRequestMessage(self, param1):
        if self.targetId < 0 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_var_long(self.targetId)
        if self.targetCellId < -1 or self.targetCellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.targetCellId) + ") on element targetCellId.")
        param1.write_short(self.targetCellId)
        param1.write_boolean(self.friendly)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayPlayerFightRequestMessage(param1)

    def deserializeAs_GameRolePlayPlayerFightRequestMessage(self, param1):
        self._targetIdFunc(param1)
        self._targetCellIdFunc(param1)
        self._friendlyFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayPlayerFightRequestMessage(param1)

    def deserializeAsyncAs_GameRolePlayPlayerFightRequestMessage(self, param1):
        param1.add_child(self._targetIdFunc)
        param1.add_child(self._targetCellIdFunc)
        param1.add_child(self._friendlyFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_var_uh_long()
        if self.targetId < 0 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameRolePlayPlayerFightRequestMessage.targetId.")

    def _targetCellIdFunc(self, param1):
        self.targetCellId = param1.read_short()
        if self.targetCellId < -1 or self.targetCellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.targetCellId) + ") on element of GameRolePlayPlayerFightRequestMessage.targetCellId.")

    def _friendlyFunc(self, param1):
        self.friendly = param1.read_boolean()


class GameRolePlayRemoveChallengeMessage(NetworkMessage):
    protocolId = 300

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fightId = 0

    def getMessageId(self):
        return 300

    def initGameRolePlayRemoveChallengeMessage(self, param1=0):
        self.fightId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.fightId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayRemoveChallengeMessage(param1)

    def serializeAs_GameRolePlayRemoveChallengeMessage(self, param1):
        param1.write_int(self.fightId)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayRemoveChallengeMessage(param1)

    def deserializeAs_GameRolePlayRemoveChallengeMessage(self, param1):
        self._fightIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayRemoveChallengeMessage(param1)

    def deserializeAsyncAs_GameRolePlayRemoveChallengeMessage(self, param1):
        param1.add_child(self._fightIdFunc)

    def _fightIdFunc(self, param1):
        self.fightId = param1.read_int()


class GameRolePlayShowChallengeMessage(NetworkMessage):
    protocolId = 301

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.commonsInfos = FightCommonInformations()
        self._commonsInfostree = FuncTree()

    def getMessageId(self):
        return 301

    def initGameRolePlayShowChallengeMessage(self, param1=None):
        self.commonsInfos = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.commonsInfos = FightCommonInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayShowChallengeMessage(param1)

    def serializeAs_GameRolePlayShowChallengeMessage(self, param1):
        self.commonsInfos.serializeAs_FightCommonInformations(param1)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayShowChallengeMessage(param1)

    def deserializeAs_GameRolePlayShowChallengeMessage(self, param1):
        self.commonsInfos = FightCommonInformations()
        self.commonsInfos.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayShowChallengeMessage(param1)

    def deserializeAsyncAs_GameRolePlayShowChallengeMessage(self, param1):
        self._commonsInfostree = param1.add_child(self._commonsInfostreeFunc)

    def _commonsInfostreeFunc(self, param1):
        self.commonsInfos = FightCommonInformations()
        self.commonsInfos.deserializeAsync(self._commonsInfostree)


class GameRolePlayArenaFightAnswerMessage(NetworkMessage):
    protocolId = 6279

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fightId = 0
        self.accept = False

    def getMessageId(self):
        return 6279

    def initGameRolePlayArenaFightAnswerMessage(self, param1=0, param2=False):
        self.fightId = param1
        self.accept = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.fightId = 0
        self.accept = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayArenaFightAnswerMessage(param1)

    def serializeAs_GameRolePlayArenaFightAnswerMessage(self, param1):
        param1.write_int(self.fightId)
        param1.write_boolean(self.accept)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayArenaFightAnswerMessage(param1)

    def deserializeAs_GameRolePlayArenaFightAnswerMessage(self, param1):
        self._fightIdFunc(param1)
        self._acceptFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayArenaFightAnswerMessage(param1)

    def deserializeAsyncAs_GameRolePlayArenaFightAnswerMessage(self, param1):
        param1.add_child(self._fightIdFunc)
        param1.add_child(self._acceptFunc)

    def _fightIdFunc(self, param1):
        self.fightId = param1.read_int()

    def _acceptFunc(self, param1):
        self.accept = param1.read_boolean()


class GameRolePlayArenaFighterStatusMessage(NetworkMessage):
    protocolId = 6281

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fightId = 0
        self.playerId = 0
        self.accepted = False

    def getMessageId(self):
        return 6281

    def initGameRolePlayArenaFighterStatusMessage(self, param1=0, param2=0, param3=False):
        self.fightId = param1
        self.playerId = param2
        self.accepted = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.fightId = 0
        self.playerId = 0
        self.accepted = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayArenaFighterStatusMessage(param1)

    def serializeAs_GameRolePlayArenaFighterStatusMessage(self, param1):
        param1.write_int(self.fightId)
        param1.write_int(self.playerId)
        param1.write_boolean(self.accepted)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayArenaFighterStatusMessage(param1)

    def deserializeAs_GameRolePlayArenaFighterStatusMessage(self, param1):
        self._fightIdFunc(param1)
        self._playerIdFunc(param1)
        self._acceptedFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayArenaFighterStatusMessage(param1)

    def deserializeAsyncAs_GameRolePlayArenaFighterStatusMessage(self, param1):
        param1.add_child(self._fightIdFunc)
        param1.add_child(self._playerIdFunc)
        param1.add_child(self._acceptedFunc)

    def _fightIdFunc(self, param1):
        self.fightId = param1.read_int()

    def _playerIdFunc(self, param1):
        self.playerId = param1.read_int()

    def _acceptedFunc(self, param1):
        self.accepted = param1.read_boolean()


class GameRolePlayArenaFightPropositionMessage(NetworkMessage):
    protocolId = 6276

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fightId = 0
        self.alliesId = []
        self.duration = 0
        self._alliesIdtree = FuncTree()

    def getMessageId(self):
        return 6276

    def initGameRolePlayArenaFightPropositionMessage(self, param1=0, param2=[], param3=0):
        self.fightId = param1
        self.alliesId = param2
        self.duration = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.fightId = 0
        self.alliesId = []
        self.duration = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayArenaFightPropositionMessage(param1)

    def serializeAs_GameRolePlayArenaFightPropositionMessage(self, param1):
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element fightId.")
        param1.write_int(self.fightId)
        param1.write_short(len(self.alliesId))
        _loc2_ = 0
        while _loc2_ < len(self.alliesId):
            if self.alliesId[_loc2_] < -9007199254740990 or self.alliesId[_loc2_] > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(self.alliesId[_loc2_]) + ") on element 2 (starting at 1) of alliesId.")
            param1.write_double(self.alliesId[_loc2_])
            _loc2_ += 1
        if self.duration < 0:
            raise RuntimeError("Forbidden value (" + str(self.duration) + ") on element duration.")
        param1.write_var_short(self.duration)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayArenaFightPropositionMessage(param1)

    def deserializeAs_GameRolePlayArenaFightPropositionMessage(self, param1):
        _loc4_ = None
        self._fightIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_double()
            if _loc4_ < -9007199254740990 or _loc4_ > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of alliesId.")
            self.alliesId.append(_loc4_)
            _loc3_ += 1
        self._durationFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayArenaFightPropositionMessage(param1)

    def deserializeAsyncAs_GameRolePlayArenaFightPropositionMessage(self, param1):
        param1.add_child(self._fightIdFunc)
        self._alliesIdtree = param1.add_child(self._alliesIdtreeFunc)
        param1.add_child(self._durationFunc)

    def _fightIdFunc(self, param1):
        self.fightId = param1.read_int()
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element of GameRolePlayArenaFightPropositionMessage.fightId.")

    def _alliesIdtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._alliesIdtree.add_child(self._alliesIdFunc)
            _loc3_ += 1

    def _alliesIdFunc(self, param1):
        _loc2_ = param1.read_double()
        if _loc2_ < -9007199254740990 or _loc2_ > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of alliesId.")
        self.alliesId.append(_loc2_)

    def _durationFunc(self, param1):
        self.duration = param1.read_var_uh_short()
        if self.duration < 0:
            raise RuntimeError("Forbidden value (" + str(self.duration) + ") on element of GameRolePlayArenaFightPropositionMessage.duration.")


class GameRolePlayArenaRegisterMessage(NetworkMessage):
    protocolId = 6280

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.battleMode = 3

    def getMessageId(self):
        return 6280

    def initGameRolePlayArenaRegisterMessage(self, param1=3):
        self.battleMode = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.battleMode = 3
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayArenaRegisterMessage(param1)

    def serializeAs_GameRolePlayArenaRegisterMessage(self, param1):
        param1.write_int(self.battleMode)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayArenaRegisterMessage(param1)

    def deserializeAs_GameRolePlayArenaRegisterMessage(self, param1):
        self._battleModeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayArenaRegisterMessage(param1)

    def deserializeAsyncAs_GameRolePlayArenaRegisterMessage(self, param1):
        param1.add_child(self._battleModeFunc)

    def _battleModeFunc(self, param1):
        self.battleMode = param1.read_int()
        if self.battleMode < 0:
            raise RuntimeError("Forbidden value (" + str(self.battleMode) + ") on element of GameRolePlayArenaRegisterMessage.battleMode.")


class GameRolePlayArenaRegistrationStatusMessage(NetworkMessage):
    protocolId = 6284

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.registered = False
        self.step = 0
        self.battleMode = 3

    def getMessageId(self):
        return 6284

    def initGameRolePlayArenaRegistrationStatusMessage(self, param1=False, param2=0, param3=3):
        self.registered = param1
        self.step = param2
        self.battleMode = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.registered = False
        self.step = 0
        self.battleMode = 3
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayArenaRegistrationStatusMessage(param1)

    def serializeAs_GameRolePlayArenaRegistrationStatusMessage(self, param1):
        param1.write_boolean(self.registered)
        param1.write_byte(self.step)
        param1.write_int(self.battleMode)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayArenaRegistrationStatusMessage(param1)

    def deserializeAs_GameRolePlayArenaRegistrationStatusMessage(self, param1):
        self._registeredFunc(param1)
        self._stepFunc(param1)
        self._battleModeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayArenaRegistrationStatusMessage(param1)

    def deserializeAsyncAs_GameRolePlayArenaRegistrationStatusMessage(self, param1):
        param1.add_child(self._registeredFunc)
        param1.add_child(self._stepFunc)
        param1.add_child(self._battleModeFunc)

    def _registeredFunc(self, param1):
        self.registered = param1.read_boolean()

    def _stepFunc(self, param1):
        self.step = param1.read_byte()
        if self.step < 0:
            raise RuntimeError("Forbidden value (" + str(self.step) + ") on element of GameRolePlayArenaRegistrationStatusMessage.step.")

    def _battleModeFunc(self, param1):
        self.battleMode = param1.read_int()
        if self.battleMode < 0:
            raise RuntimeError("Forbidden value (" + str(self.battleMode) + ") on element of GameRolePlayArenaRegistrationStatusMessage.battleMode.")


class GameRolePlayArenaSwitchToFightServerMessage(NetworkMessage):
    protocolId = 6575

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.address = ""
        self.ports = []
        self.ticket = []
        self._portstree = FuncTree()
        self._tickettree = FuncTree()

    def getMessageId(self):
        return 6575

    def initGameRolePlayArenaSwitchToFightServerMessage(self, param1="", param2=[], param3=[]):
        self.address = param1
        self.ports = param2
        self.ticket = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.address = ""
        self.ports = []
        self.ticket = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        if HASH_FUNCTION != None:
            HASH_FUNCTION(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayArenaSwitchToFightServerMessage(param1)

    def serializeAs_GameRolePlayArenaSwitchToFightServerMessage(self, param1):
        param1.write_utf(self.address)
        param1.write_short(len(self.ports))
        _loc2_ = 0
        while _loc2_ < len(self.ports):
            if self.ports[_loc2_] < 0 or self.ports[_loc2_] > 65535:
                raise RuntimeError("Forbidden value (" + str(self.ports[_loc2_]) + ") on element 2 (starting at 1) of ports.")
            param1.write_short(self.ports[_loc2_])
            _loc2_ += 1
        param1.write_var_int(len(self.ticket))
        _loc3_ = 0
        while _loc3_ < len(self.ticket):
            param1.write_byte(self.ticket[_loc3_])
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayArenaSwitchToFightServerMessage(param1)

    def deserializeAs_GameRolePlayArenaSwitchToFightServerMessage(self, param1):
        _loc6_ = 0
        _loc7_ = 0
        self._addressFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = param1.read_unsigned_short()
            if _loc6_ < 0 or _loc6_ > 65535:
                raise RuntimeError("Forbidden value (" + str(_loc6_) + ") on elements of ports.")
            self.ports.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_var_int()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = param1.read_byte()
            self.ticket.append(_loc7_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayArenaSwitchToFightServerMessage(param1)

    def deserializeAsyncAs_GameRolePlayArenaSwitchToFightServerMessage(self, param1):
        param1.add_child(self._addressFunc)
        self._portstree = param1.add_child(self._portstreeFunc)
        self._tickettree = param1.add_child(self._tickettreeFunc)

    def _addressFunc(self, param1):
        self.address = param1.read_utf()

    def _portstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._portstree.add_child(self._portsFunc)
            _loc3_ += 1

    def _portsFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        if _loc2_ < 0 or _loc2_ > 65535:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of ports.")
        self.ports.append(_loc2_)

    def _tickettreeFunc(self, param1):
        _loc2_ = param1.read_var_int()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._tickettree.add_child(self._ticketFunc)
            _loc3_ += 1

    def _ticketFunc(self, param1):
        _loc2_ = param1.read_byte()
        self.ticket.append(_loc2_)


class GameRolePlayArenaSwitchToGameServerMessage(NetworkMessage):
    protocolId = 6574

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.validToken = False
        self.ticket = []
        self.homeServerId = 0
        self._tickettree = FuncTree()

    def getMessageId(self):
        return 6574

    def initGameRolePlayArenaSwitchToGameServerMessage(self, param1=False, param2=[], param3=0):
        self.validToken = param1
        self.ticket = param2
        self.homeServerId = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.validToken = False
        self.ticket = []
        self.homeServerId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayArenaSwitchToGameServerMessage(param1)

    def serializeAs_GameRolePlayArenaSwitchToGameServerMessage(self, param1):
        param1.write_boolean(self.validToken)
        param1.write_var_int(len(self.ticket))
        _loc2_ = 0
        while _loc2_ < len(self.ticket):
            param1.write_byte(self.ticket[_loc2_])
            _loc2_ += 1
        param1.write_short(self.homeServerId)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayArenaSwitchToGameServerMessage(param1)

    def deserializeAs_GameRolePlayArenaSwitchToGameServerMessage(self, param1):
        _loc4_ = 0
        self._validTokenFunc(param1)
        _loc2_ = param1.read_var_int()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_byte()
            self.ticket.append(_loc4_)
            _loc3_ += 1
        self._homeServerIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayArenaSwitchToGameServerMessage(param1)

    def deserializeAsyncAs_GameRolePlayArenaSwitchToGameServerMessage(self, param1):
        param1.add_child(self._validTokenFunc)
        self._tickettree = param1.add_child(self._tickettreeFunc)
        param1.add_child(self._homeServerIdFunc)

    def _validTokenFunc(self, param1):
        self.validToken = param1.read_boolean()

    def _tickettreeFunc(self, param1):
        _loc2_ = param1.read_var_int()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._tickettree.add_child(self._ticketFunc)
            _loc3_ += 1

    def _ticketFunc(self, param1):
        _loc2_ = param1.read_byte()
        self.ticket.append(_loc2_)

    def _homeServerIdFunc(self, param1):
        self.homeServerId = param1.read_short()


class GameRolePlayArenaUnregisterMessage(NetworkMessage):
    protocolId = 6282

    def getMessageId(self):
        return 6282

    def initGameRolePlayArenaUnregisterMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_GameRolePlayArenaUnregisterMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_GameRolePlayArenaUnregisterMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_GameRolePlayArenaUnregisterMessage(self, param1):
        pass


class GameRolePlayArenaUpdatePlayerInfosMessage(NetworkMessage):
    protocolId = 6301

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.solo = ArenaRankInfos()
        self._solotree = FuncTree()

    def getMessageId(self):
        return 6301

    def initGameRolePlayArenaUpdatePlayerInfosMessage(self, param1=None):
        self.solo = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.solo = ArenaRankInfos()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayArenaUpdatePlayerInfosMessage(param1)

    def serializeAs_GameRolePlayArenaUpdatePlayerInfosMessage(self, param1):
        self.solo.serializeAs_ArenaRankInfos(param1)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayArenaUpdatePlayerInfosMessage(param1)

    def deserializeAs_GameRolePlayArenaUpdatePlayerInfosMessage(self, param1):
        self.solo = ArenaRankInfos()
        self.solo.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayArenaUpdatePlayerInfosMessage(param1)

    def deserializeAsyncAs_GameRolePlayArenaUpdatePlayerInfosMessage(self, param1):
        self._solotree = param1.add_child(self._solotreeFunc)

    def _solotreeFunc(self, param1):
        self.solo = ArenaRankInfos()
        self.solo.deserializeAsync(self._solotree)


class ChangeHavenBagRoomRequestMessage(NetworkMessage):
    protocolId = 6638

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.roomId = 0

    def getMessageId(self):
        return 6638

    def initChangeHavenBagRoomRequestMessage(self, param1=0):
        self.roomId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.roomId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChangeHavenBagRoomRequestMessage(param1)

    def serializeAs_ChangeHavenBagRoomRequestMessage(self, param1):
        if self.roomId < 0:
            raise RuntimeError("Forbidden value (" + str(self.roomId) + ") on element roomId.")
        param1.write_byte(self.roomId)

    def deserialize(self, param1):
        self.deserializeAs_ChangeHavenBagRoomRequestMessage(param1)

    def deserializeAs_ChangeHavenBagRoomRequestMessage(self, param1):
        self._roomIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChangeHavenBagRoomRequestMessage(param1)

    def deserializeAsyncAs_ChangeHavenBagRoomRequestMessage(self, param1):
        param1.add_child(self._roomIdFunc)

    def _roomIdFunc(self, param1):
        self.roomId = param1.read_byte()
        if self.roomId < 0:
            raise RuntimeError("Forbidden value (" + str(self.roomId) + ") on element of ChangeHavenBagRoomRequestMessage.roomId.")


class ChangeThemeRequestMessage(NetworkMessage):
    protocolId = 6639

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.theme = 0

    def getMessageId(self):
        return 6639

    def initChangeThemeRequestMessage(self, param1=0):
        self.theme = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.theme = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChangeThemeRequestMessage(param1)

    def serializeAs_ChangeThemeRequestMessage(self, param1):
        param1.write_byte(self.theme)

    def deserialize(self, param1):
        self.deserializeAs_ChangeThemeRequestMessage(param1)

    def deserializeAs_ChangeThemeRequestMessage(self, param1):
        self._themeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChangeThemeRequestMessage(param1)

    def deserializeAsyncAs_ChangeThemeRequestMessage(self, param1):
        param1.add_child(self._themeFunc)

    def _themeFunc(self, param1):
        self.theme = param1.read_byte()


class CloseHavenBagFurnitureSequenceRequestMessage(NetworkMessage):
    protocolId = 6621

    def getMessageId(self):
        return 6621

    def initCloseHavenBagFurnitureSequenceRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_CloseHavenBagFurnitureSequenceRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_CloseHavenBagFurnitureSequenceRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_CloseHavenBagFurnitureSequenceRequestMessage(self, param1):
        pass


class EditHavenBagCancelRequestMessage(NetworkMessage):
    protocolId = 6619

    def getMessageId(self):
        return 6619

    def initEditHavenBagCancelRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_EditHavenBagCancelRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_EditHavenBagCancelRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_EditHavenBagCancelRequestMessage(self, param1):
        pass


class EditHavenBagFinishedMessage(NetworkMessage):
    protocolId = 6628

    def getMessageId(self):
        return 6628

    def initEditHavenBagFinishedMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_EditHavenBagFinishedMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_EditHavenBagFinishedMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_EditHavenBagFinishedMessage(self, param1):
        pass


class EditHavenBagRequestMessage(NetworkMessage):
    protocolId = 6626

    def getMessageId(self):
        return 6626

    def initEditHavenBagRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_EditHavenBagRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_EditHavenBagRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_EditHavenBagRequestMessage(self, param1):
        pass


class EditHavenBagStartMessage(NetworkMessage):
    protocolId = 6632

    def getMessageId(self):
        return 6632

    def initEditHavenBagStartMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_EditHavenBagStartMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_EditHavenBagStartMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_EditHavenBagStartMessage(self, param1):
        pass


class EnterHavenBagRequestMessage(NetworkMessage):
    protocolId = 6636

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.havenBagOwner = 0

    def getMessageId(self):
        return 6636

    def initEnterHavenBagRequestMessage(self, param1=0):
        self.havenBagOwner = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.havenBagOwner = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_EnterHavenBagRequestMessage(param1)

    def serializeAs_EnterHavenBagRequestMessage(self, param1):
        if self.havenBagOwner < 0 or self.havenBagOwner > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.havenBagOwner) + ") on element havenBagOwner.")
        param1.write_var_long(self.havenBagOwner)

    def deserialize(self, param1):
        self.deserializeAs_EnterHavenBagRequestMessage(param1)

    def deserializeAs_EnterHavenBagRequestMessage(self, param1):
        self._havenBagOwnerFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_EnterHavenBagRequestMessage(param1)

    def deserializeAsyncAs_EnterHavenBagRequestMessage(self, param1):
        param1.add_child(self._havenBagOwnerFunc)

    def _havenBagOwnerFunc(self, param1):
        self.havenBagOwner = param1.read_var_uh_long()
        if self.havenBagOwner < 0 or self.havenBagOwner > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.havenBagOwner) + ") on element of EnterHavenBagRequestMessage.havenBagOwner.")


class ExitHavenBagRequestMessage(NetworkMessage):
    protocolId = 6631

    def getMessageId(self):
        return 6631

    def initExitHavenBagRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_ExitHavenBagRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_ExitHavenBagRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_ExitHavenBagRequestMessage(self, param1):
        pass


class HavenBagDailyLoteryMessage(NetworkMessage):
    protocolId = 6644

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.returnType = 0
        self.tokenId = ""

    def getMessageId(self):
        return 6644

    def initHavenBagDailyLoteryMessage(self, param1=0, param2=""):
        self.returnType = param1
        self.tokenId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.returnType = 0
        self.tokenId = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HavenBagDailyLoteryMessage(param1)

    def serializeAs_HavenBagDailyLoteryMessage(self, param1):
        param1.write_byte(self.returnType)
        param1.write_utf(self.tokenId)

    def deserialize(self, param1):
        self.deserializeAs_HavenBagDailyLoteryMessage(param1)

    def deserializeAs_HavenBagDailyLoteryMessage(self, param1):
        self._returnTypeFunc(param1)
        self._tokenIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HavenBagDailyLoteryMessage(param1)

    def deserializeAsyncAs_HavenBagDailyLoteryMessage(self, param1):
        param1.add_child(self._returnTypeFunc)
        param1.add_child(self._tokenIdFunc)

    def _returnTypeFunc(self, param1):
        self.returnType = param1.read_byte()
        if self.returnType < 0:
            raise RuntimeError("Forbidden value (" + str(self.returnType) + ") on element of HavenBagDailyLoteryMessage.returnType.")

    def _tokenIdFunc(self, param1):
        self.tokenId = param1.read_utf()


class HavenBagFurnituresMessage(NetworkMessage):
    protocolId = 6634

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.furnituresInfos = []
        self._furnituresInfostree = FuncTree()

    def getMessageId(self):
        return 6634

    def initHavenBagFurnituresMessage(self, param1=[]):
        self.furnituresInfos = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.furnituresInfos = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HavenBagFurnituresMessage(param1)

    def serializeAs_HavenBagFurnituresMessage(self, param1):
        param1.write_short(len(self.furnituresInfos))
        _loc2_ = 0
        while _loc2_ < len(self.furnituresInfos):
            as_parent(self.furnituresInfos[_loc2_], HavenBagFurnitureInformation).serializeAs_HavenBagFurnitureInformation(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_HavenBagFurnituresMessage(param1)

    def deserializeAs_HavenBagFurnituresMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = HavenBagFurnitureInformation()
            _loc4_.deserialize(param1)
            self.furnituresInfos.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HavenBagFurnituresMessage(param1)

    def deserializeAsyncAs_HavenBagFurnituresMessage(self, param1):
        self._furnituresInfostree = param1.add_child(self._furnituresInfostreeFunc)

    def _furnituresInfostreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._furnituresInfostree.add_child(self._furnituresInfosFunc)
            _loc3_ += 1

    def _furnituresInfosFunc(self, param1):
        _loc2_ = HavenBagFurnitureInformation()
        _loc2_.deserialize(param1)
        self.furnituresInfos.append(_loc2_)


class HavenBagFurnituresRequestMessage(NetworkMessage):
    protocolId = 6637

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.cellIds = []
        self.funitureIds = []
        self.orientations = []
        self._cellIdstree = FuncTree()
        self._funitureIdstree = FuncTree()
        self._orientationstree = FuncTree()

    def getMessageId(self):
        return 6637

    def initHavenBagFurnituresRequestMessage(self, param1=[], param2=[], param3=[]):
        self.cellIds = param1
        self.funitureIds = param2
        self.orientations = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.cellIds = []
        self.funitureIds = []
        self.orientations = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HavenBagFurnituresRequestMessage(param1)

    def serializeAs_HavenBagFurnituresRequestMessage(self, param1):
        param1.write_short(len(self.cellIds))
        _loc2_ = 0
        while _loc2_ < len(self.cellIds):
            if self.cellIds[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.cellIds[_loc2_]) + ") on element 1 (starting at 1) of cellIds.")
            param1.write_var_short(self.cellIds[_loc2_])
            _loc2_ += 1
        param1.write_short(len(self.funitureIds))
        _loc3_ = 0
        while _loc3_ < len(self.funitureIds):
            param1.write_int(self.funitureIds[_loc3_])
            _loc3_ += 1
        param1.write_short(len(self.orientations))
        _loc4_ = 0
        while _loc4_ < len(self.orientations):
            if self.orientations[_loc4_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.orientations[_loc4_]) + ") on element 3 (starting at 1) of orientations.")
            param1.write_byte(self.orientations[_loc4_])
            _loc4_ += 1

    def deserialize(self, param1):
        self.deserializeAs_HavenBagFurnituresRequestMessage(param1)

    def deserializeAs_HavenBagFurnituresRequestMessage(self, param1):
        _loc8_ = 0
        _loc9_ = 0
        _loc10_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc8_ = param1.read_var_uh_short()
            if _loc8_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc8_) + ") on elements of cellIds.")
            self.cellIds.append(_loc8_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc9_ = param1.read_int()
            self.funitureIds.append(_loc9_)
            _loc5_ += 1
        _loc6_ = param1.read_unsigned_short()
        _loc7_ = 0
        while _loc7_ < _loc6_:
            _loc10_ = param1.read_byte()
            if _loc10_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc10_) + ") on elements of orientations.")
            self.orientations.append(_loc10_)
            _loc7_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HavenBagFurnituresRequestMessage(param1)

    def deserializeAsyncAs_HavenBagFurnituresRequestMessage(self, param1):
        self._cellIdstree = param1.add_child(self._cellIdstreeFunc)
        self._funitureIdstree = param1.add_child(self._funitureIdstreeFunc)
        self._orientationstree = param1.add_child(self._orientationstreeFunc)

    def _cellIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._cellIdstree.add_child(self._cellIdsFunc)
            _loc3_ += 1

    def _cellIdsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of cellIds.")
        self.cellIds.append(_loc2_)

    def _funitureIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._funitureIdstree.add_child(self._funitureIdsFunc)
            _loc3_ += 1

    def _funitureIdsFunc(self, param1):
        _loc2_ = param1.read_int()
        self.funitureIds.append(_loc2_)

    def _orientationstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._orientationstree.add_child(self._orientationsFunc)
            _loc3_ += 1

    def _orientationsFunc(self, param1):
        _loc2_ = param1.read_byte()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of orientations.")
        self.orientations.append(_loc2_)


class HavenBagPackListMessage(NetworkMessage):
    protocolId = 6620

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.packIds = []
        self._packIdstree = FuncTree()

    def getMessageId(self):
        return 6620

    def initHavenBagPackListMessage(self, param1=[]):
        self.packIds = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.packIds = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HavenBagPackListMessage(param1)

    def serializeAs_HavenBagPackListMessage(self, param1):
        param1.write_short(len(self.packIds))
        _loc2_ = 0
        while _loc2_ < len(self.packIds):
            param1.write_byte(self.packIds[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_HavenBagPackListMessage(param1)

    def deserializeAs_HavenBagPackListMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_byte()
            self.packIds.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HavenBagPackListMessage(param1)

    def deserializeAsyncAs_HavenBagPackListMessage(self, param1):
        self._packIdstree = param1.add_child(self._packIdstreeFunc)

    def _packIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._packIdstree.add_child(self._packIdsFunc)
            _loc3_ += 1

    def _packIdsFunc(self, param1):
        _loc2_ = param1.read_byte()
        self.packIds.append(_loc2_)


class KickHavenBagRequestMessage(NetworkMessage):
    protocolId = 6652

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.guestId = 0

    def getMessageId(self):
        return 6652

    def initKickHavenBagRequestMessage(self, param1=0):
        self.guestId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.guestId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_KickHavenBagRequestMessage(param1)

    def serializeAs_KickHavenBagRequestMessage(self, param1):
        if self.guestId < 0 or self.guestId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.guestId) + ") on element guestId.")
        param1.write_var_long(self.guestId)

    def deserialize(self, param1):
        self.deserializeAs_KickHavenBagRequestMessage(param1)

    def deserializeAs_KickHavenBagRequestMessage(self, param1):
        self._guestIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_KickHavenBagRequestMessage(param1)

    def deserializeAsyncAs_KickHavenBagRequestMessage(self, param1):
        param1.add_child(self._guestIdFunc)

    def _guestIdFunc(self, param1):
        self.guestId = param1.read_var_uh_long()
        if self.guestId < 0 or self.guestId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.guestId) + ") on element of KickHavenBagRequestMessage.guestId.")


class OpenHavenBagFurnitureSequenceRequestMessage(NetworkMessage):
    protocolId = 6635

    def getMessageId(self):
        return 6635

    def initOpenHavenBagFurnitureSequenceRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_OpenHavenBagFurnitureSequenceRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_OpenHavenBagFurnitureSequenceRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_OpenHavenBagFurnitureSequenceRequestMessage(self, param1):
        pass


class RoomAvailableUpdateMessage(NetworkMessage):
    protocolId = 6630

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.nbRoom = 0

    def getMessageId(self):
        return 6630

    def initRoomAvailableUpdateMessage(self, param1=0):
        self.nbRoom = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.nbRoom = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_RoomAvailableUpdateMessage(param1)

    def serializeAs_RoomAvailableUpdateMessage(self, param1):
        if self.nbRoom < 0 or self.nbRoom > 255:
            raise RuntimeError("Forbidden value (" + str(self.nbRoom) + ") on element nbRoom.")
        param1.write_byte(self.nbRoom)

    def deserialize(self, param1):
        self.deserializeAs_RoomAvailableUpdateMessage(param1)

    def deserializeAs_RoomAvailableUpdateMessage(self, param1):
        self._nbRoomFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_RoomAvailableUpdateMessage(param1)

    def deserializeAsyncAs_RoomAvailableUpdateMessage(self, param1):
        param1.add_child(self._nbRoomFunc)

    def _nbRoomFunc(self, param1):
        self.nbRoom = param1.read_unsigned_byte()
        if self.nbRoom < 0 or self.nbRoom > 255:
            raise RuntimeError("Forbidden value (" + str(self.nbRoom) + ") on element of RoomAvailableUpdateMessage.nbRoom.")


class HavenBagPermissionsUpdateMessage(NetworkMessage):
    protocolId = 6713

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.permissions = 0

    def getMessageId(self):
        return 6713

    def initHavenBagPermissionsUpdateMessage(self, param1=0):
        self.permissions = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.permissions = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HavenBagPermissionsUpdateMessage(param1)

    def serializeAs_HavenBagPermissionsUpdateMessage(self, param1):
        if self.permissions < 0:
            raise RuntimeError("Forbidden value (" + str(self.permissions) + ") on element permissions.")
        param1.write_int(self.permissions)

    def deserialize(self, param1):
        self.deserializeAs_HavenBagPermissionsUpdateMessage(param1)

    def deserializeAs_HavenBagPermissionsUpdateMessage(self, param1):
        self._permissionsFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HavenBagPermissionsUpdateMessage(param1)

    def deserializeAsyncAs_HavenBagPermissionsUpdateMessage(self, param1):
        param1.add_child(self._permissionsFunc)

    def _permissionsFunc(self, param1):
        self.permissions = param1.read_int()
        if self.permissions < 0:
            raise RuntimeError("Forbidden value (" + str(self.permissions) + ") on element of HavenBagPermissionsUpdateMessage.permissions.")


class HavenBagPermissionsUpdateRequestMessage(NetworkMessage):
    protocolId = 6714

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.permissions = 0

    def getMessageId(self):
        return 6714

    def initHavenBagPermissionsUpdateRequestMessage(self, param1=0):
        self.permissions = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.permissions = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HavenBagPermissionsUpdateRequestMessage(param1)

    def serializeAs_HavenBagPermissionsUpdateRequestMessage(self, param1):
        if self.permissions < 0:
            raise RuntimeError("Forbidden value (" + str(self.permissions) + ") on element permissions.")
        param1.write_int(self.permissions)

    def deserialize(self, param1):
        self.deserializeAs_HavenBagPermissionsUpdateRequestMessage(param1)

    def deserializeAs_HavenBagPermissionsUpdateRequestMessage(self, param1):
        self._permissionsFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HavenBagPermissionsUpdateRequestMessage(param1)

    def deserializeAsyncAs_HavenBagPermissionsUpdateRequestMessage(self, param1):
        param1.add_child(self._permissionsFunc)

    def _permissionsFunc(self, param1):
        self.permissions = param1.read_int()
        if self.permissions < 0:
            raise RuntimeError("Forbidden value (" + str(self.permissions) + ") on element of HavenBagPermissionsUpdateRequestMessage.permissions.")


class InviteInHavenBagClosedMessage(NetworkMessage):
    protocolId = 6645

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.hostInformations = CharacterMinimalInformations()
        self._hostInformationstree = FuncTree()

    def getMessageId(self):
        return 6645

    def initInviteInHavenBagClosedMessage(self, param1=None):
        self.hostInformations = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.hostInformations = CharacterMinimalInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_InviteInHavenBagClosedMessage(param1)

    def serializeAs_InviteInHavenBagClosedMessage(self, param1):
        self.hostInformations.serializeAs_CharacterMinimalInformations(param1)

    def deserialize(self, param1):
        self.deserializeAs_InviteInHavenBagClosedMessage(param1)

    def deserializeAs_InviteInHavenBagClosedMessage(self, param1):
        self.hostInformations = CharacterMinimalInformations()
        self.hostInformations.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_InviteInHavenBagClosedMessage(param1)

    def deserializeAsyncAs_InviteInHavenBagClosedMessage(self, param1):
        self._hostInformationstree = param1.add_child(self._hostInformationstreeFunc)

    def _hostInformationstreeFunc(self, param1):
        self.hostInformations = CharacterMinimalInformations()
        self.hostInformations.deserializeAsync(self._hostInformationstree)


class InviteInHavenBagMessage(NetworkMessage):
    protocolId = 6642

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.guestInformations = CharacterMinimalInformations()
        self.accept = False
        self._guestInformationstree = FuncTree()

    def getMessageId(self):
        return 6642

    def initInviteInHavenBagMessage(self, param1=None, param2=False):
        self.guestInformations = param1
        self.accept = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.guestInformations = CharacterMinimalInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_InviteInHavenBagMessage(param1)

    def serializeAs_InviteInHavenBagMessage(self, param1):
        self.guestInformations.serializeAs_CharacterMinimalInformations(param1)
        param1.write_boolean(self.accept)

    def deserialize(self, param1):
        self.deserializeAs_InviteInHavenBagMessage(param1)

    def deserializeAs_InviteInHavenBagMessage(self, param1):
        self.guestInformations = CharacterMinimalInformations()
        self.guestInformations.deserialize(param1)
        self._acceptFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_InviteInHavenBagMessage(param1)

    def deserializeAsyncAs_InviteInHavenBagMessage(self, param1):
        self._guestInformationstree = param1.add_child(self._guestInformationstreeFunc)
        param1.add_child(self._acceptFunc)

    def _guestInformationstreeFunc(self, param1):
        self.guestInformations = CharacterMinimalInformations()
        self.guestInformations.deserializeAsync(self._guestInformationstree)

    def _acceptFunc(self, param1):
        self.accept = param1.read_boolean()


class InviteInHavenBagOfferMessage(NetworkMessage):
    protocolId = 6643

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.hostInformations = CharacterMinimalInformations()
        self.timeLeftBeforeCancel = 0
        self._hostInformationstree = FuncTree()

    def getMessageId(self):
        return 6643

    def initInviteInHavenBagOfferMessage(self, param1=None, param2=0):
        self.hostInformations = param1
        self.timeLeftBeforeCancel = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.hostInformations = CharacterMinimalInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_InviteInHavenBagOfferMessage(param1)

    def serializeAs_InviteInHavenBagOfferMessage(self, param1):
        self.hostInformations.serializeAs_CharacterMinimalInformations(param1)
        param1.write_var_int(self.timeLeftBeforeCancel)

    def deserialize(self, param1):
        self.deserializeAs_InviteInHavenBagOfferMessage(param1)

    def deserializeAs_InviteInHavenBagOfferMessage(self, param1):
        self.hostInformations = CharacterMinimalInformations()
        self.hostInformations.deserialize(param1)
        self._timeLeftBeforeCancelFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_InviteInHavenBagOfferMessage(param1)

    def deserializeAsyncAs_InviteInHavenBagOfferMessage(self, param1):
        self._hostInformationstree = param1.add_child(self._hostInformationstreeFunc)
        param1.add_child(self._timeLeftBeforeCancelFunc)

    def _hostInformationstreeFunc(self, param1):
        self.hostInformations = CharacterMinimalInformations()
        self.hostInformations.deserializeAsync(self._hostInformationstree)

    def _timeLeftBeforeCancelFunc(self, param1):
        self.timeLeftBeforeCancel = param1.read_var_int()


class TeleportHavenBagAnswerMessage(NetworkMessage):
    protocolId = 6646

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.accept = False

    def getMessageId(self):
        return 6646

    def initTeleportHavenBagAnswerMessage(self, param1=False):
        self.accept = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.accept = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TeleportHavenBagAnswerMessage(param1)

    def serializeAs_TeleportHavenBagAnswerMessage(self, param1):
        param1.write_boolean(self.accept)

    def deserialize(self, param1):
        self.deserializeAs_TeleportHavenBagAnswerMessage(param1)

    def deserializeAs_TeleportHavenBagAnswerMessage(self, param1):
        self._acceptFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TeleportHavenBagAnswerMessage(param1)

    def deserializeAsyncAs_TeleportHavenBagAnswerMessage(self, param1):
        param1.add_child(self._acceptFunc)

    def _acceptFunc(self, param1):
        self.accept = param1.read_boolean()


class TeleportHavenBagRequestMessage(NetworkMessage):
    protocolId = 6647

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.guestId = 0

    def getMessageId(self):
        return 6647

    def initTeleportHavenBagRequestMessage(self, param1=0):
        self.guestId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.guestId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TeleportHavenBagRequestMessage(param1)

    def serializeAs_TeleportHavenBagRequestMessage(self, param1):
        if self.guestId < 0 or self.guestId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.guestId) + ") on element guestId.")
        param1.write_var_long(self.guestId)

    def deserialize(self, param1):
        self.deserializeAs_TeleportHavenBagRequestMessage(param1)

    def deserializeAs_TeleportHavenBagRequestMessage(self, param1):
        self._guestIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TeleportHavenBagRequestMessage(param1)

    def deserializeAsyncAs_TeleportHavenBagRequestMessage(self, param1):
        param1.add_child(self._guestIdFunc)

    def _guestIdFunc(self, param1):
        self.guestId = param1.read_var_uh_long()
        if self.guestId < 0 or self.guestId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.guestId) + ") on element of TeleportHavenBagRequestMessage.guestId.")


class AccountHouseMessage(NetworkMessage):
    protocolId = 6315

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.houses = []
        self._housestree = FuncTree()

    def getMessageId(self):
        return 6315

    def initAccountHouseMessage(self, param1=[]):
        self.houses = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.houses = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AccountHouseMessage(param1)

    def serializeAs_AccountHouseMessage(self, param1):
        param1.write_short(len(self.houses))
        _loc2_ = 0
        while _loc2_ < len(self.houses):
            as_parent(self.houses[_loc2_], AccountHouseInformations).serializeAs_AccountHouseInformations(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_AccountHouseMessage(param1)

    def deserializeAs_AccountHouseMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = AccountHouseInformations()
            _loc4_.deserialize(param1)
            self.houses.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AccountHouseMessage(param1)

    def deserializeAsyncAs_AccountHouseMessage(self, param1):
        self._housestree = param1.add_child(self._housestreeFunc)

    def _housestreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._housestree.add_child(self._housesFunc)
            _loc3_ += 1

    def _housesFunc(self, param1):
        _loc2_ = AccountHouseInformations()
        _loc2_.deserialize(param1)
        self.houses.append(_loc2_)


class HouseBuyRequestMessage(NetworkMessage):
    protocolId = 5738

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.proposedPrice = 0

    def getMessageId(self):
        return 5738

    def initHouseBuyRequestMessage(self, param1=0):
        self.proposedPrice = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.proposedPrice = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HouseBuyRequestMessage(param1)

    def serializeAs_HouseBuyRequestMessage(self, param1):
        if self.proposedPrice < 0 or self.proposedPrice > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.proposedPrice) + ") on element proposedPrice.")
        param1.write_var_long(self.proposedPrice)

    def deserialize(self, param1):
        self.deserializeAs_HouseBuyRequestMessage(param1)

    def deserializeAs_HouseBuyRequestMessage(self, param1):
        self._proposedPriceFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HouseBuyRequestMessage(param1)

    def deserializeAsyncAs_HouseBuyRequestMessage(self, param1):
        param1.add_child(self._proposedPriceFunc)

    def _proposedPriceFunc(self, param1):
        self.proposedPrice = param1.read_var_uh_long()
        if self.proposedPrice < 0 or self.proposedPrice > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.proposedPrice) + ") on element of HouseBuyRequestMessage.proposedPrice.")


class HouseBuyResultMessage(NetworkMessage):
    protocolId = 5735

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.houseId = 0
        self.instanceId = 0
        self.secondHand = False
        self.bought = False
        self.realPrice = 0

    def getMessageId(self):
        return 5735

    def initHouseBuyResultMessage(self, param1=0, param2=0, param3=False, param4=False, param5=0):
        self.houseId = param1
        self.instanceId = param2
        self.secondHand = param3
        self.bought = param4
        self.realPrice = param5
        self._isInitialized = True
        return self

    def reset(self):
        self.houseId = 0
        self.instanceId = 0
        self.secondHand = False
        self.bought = False
        self.realPrice = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HouseBuyResultMessage(param1)

    def serializeAs_HouseBuyResultMessage(self, param1):
        _loc2_ = 0
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,0,self.secondHand)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,1,self.bought)
        param1.write_byte(_loc2_)
        if self.houseId < 0:
            raise RuntimeError("Forbidden value (" + str(self.houseId) + ") on element houseId.")
        param1.write_var_int(self.houseId)
        if self.instanceId < 0:
            raise RuntimeError("Forbidden value (" + str(self.instanceId) + ") on element instanceId.")
        param1.write_int(self.instanceId)
        if self.realPrice < 0 or self.realPrice > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.realPrice) + ") on element realPrice.")
        param1.write_var_long(self.realPrice)

    def deserialize(self, param1):
        self.deserializeAs_HouseBuyResultMessage(param1)

    def deserializeAs_HouseBuyResultMessage(self, param1):
        self.deserializeByteBoxes(param1)
        self._houseIdFunc(param1)
        self._instanceIdFunc(param1)
        self._realPriceFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HouseBuyResultMessage(param1)

    def deserializeAsyncAs_HouseBuyResultMessage(self, param1):
        param1.add_child(self.deserializeByteBoxes)
        param1.add_child(self._houseIdFunc)
        param1.add_child(self._instanceIdFunc)
        param1.add_child(self._realPriceFunc)

    def deserializeByteBoxes(self, param1):
        _loc2_ = param1.read_byte()
        self.secondHand = BooleanByteWrapper.get_flag(_loc2_,0)
        self.bought = BooleanByteWrapper.get_flag(_loc2_,1)

    def _houseIdFunc(self, param1):
        self.houseId = param1.read_var_uh_int()
        if self.houseId < 0:
            raise RuntimeError("Forbidden value (" + str(self.houseId) + ") on element of HouseBuyResultMessage.houseId.")

    def _instanceIdFunc(self, param1):
        self.instanceId = param1.read_int()
        if self.instanceId < 0:
            raise RuntimeError("Forbidden value (" + str(self.instanceId) + ") on element of HouseBuyResultMessage.instanceId.")

    def _realPriceFunc(self, param1):
        self.realPrice = param1.read_var_uh_long()
        if self.realPrice < 0 or self.realPrice > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.realPrice) + ") on element of HouseBuyResultMessage.realPrice.")


class HouseKickIndoorMerchantRequestMessage(NetworkMessage):
    protocolId = 5661

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.cellId = 0

    def getMessageId(self):
        return 5661

    def initHouseKickIndoorMerchantRequestMessage(self, param1=0):
        self.cellId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.cellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HouseKickIndoorMerchantRequestMessage(param1)

    def serializeAs_HouseKickIndoorMerchantRequestMessage(self, param1):
        if self.cellId < 0 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element cellId.")
        param1.write_var_short(self.cellId)

    def deserialize(self, param1):
        self.deserializeAs_HouseKickIndoorMerchantRequestMessage(param1)

    def deserializeAs_HouseKickIndoorMerchantRequestMessage(self, param1):
        self._cellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HouseKickIndoorMerchantRequestMessage(param1)

    def deserializeAsyncAs_HouseKickIndoorMerchantRequestMessage(self, param1):
        param1.add_child(self._cellIdFunc)

    def _cellIdFunc(self, param1):
        self.cellId = param1.read_var_uh_short()
        if self.cellId < 0 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element of HouseKickIndoorMerchantRequestMessage.cellId.")


class HouseKickRequestMessage(NetworkMessage):
    protocolId = 5698

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.id = 0

    def getMessageId(self):
        return 5698

    def initHouseKickRequestMessage(self, param1=0):
        self.id = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.id = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HouseKickRequestMessage(param1)

    def serializeAs_HouseKickRequestMessage(self, param1):
        if self.id < 0 or self.id > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element id.")
        param1.write_var_long(self.id)

    def deserialize(self, param1):
        self.deserializeAs_HouseKickRequestMessage(param1)

    def deserializeAs_HouseKickRequestMessage(self, param1):
        self._idFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HouseKickRequestMessage(param1)

    def deserializeAsyncAs_HouseKickRequestMessage(self, param1):
        param1.add_child(self._idFunc)

    def _idFunc(self, param1):
        self.id = param1.read_var_uh_long()
        if self.id < 0 or self.id > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element of HouseKickRequestMessage.id.")


class HousePropertiesMessage(NetworkMessage):
    protocolId = 5734

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.houseId = 0
        self.doorsOnMap = []
        self.properties = HouseInstanceInformations()
        self._doorsOnMaptree = FuncTree()
        self._propertiestree = FuncTree()

    def getMessageId(self):
        return 5734

    def initHousePropertiesMessage(self, param1=0, param2=[], param3=None):
        self.houseId = param1
        self.doorsOnMap = param2
        self.properties = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.houseId = 0
        self.doorsOnMap = []
        self.properties = HouseInstanceInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HousePropertiesMessage(param1)

    def serializeAs_HousePropertiesMessage(self, param1):
        if self.houseId < 0:
            raise RuntimeError("Forbidden value (" + str(self.houseId) + ") on element houseId.")
        param1.write_var_int(self.houseId)
        param1.write_short(len(self.doorsOnMap))
        _loc2_ = 0
        while _loc2_ < len(self.doorsOnMap):
            if self.doorsOnMap[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.doorsOnMap[_loc2_]) + ") on element 2 (starting at 1) of doorsOnMap.")
            param1.write_int(self.doorsOnMap[_loc2_])
            _loc2_ += 1
        param1.write_short(self.properties.getTypeId())
        self.properties.serialize(param1)

    def deserialize(self, param1):
        self.deserializeAs_HousePropertiesMessage(param1)

    def deserializeAs_HousePropertiesMessage(self, param1):
        _loc5_ = 0
        self._houseIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc5_ = param1.read_int()
            if _loc5_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc5_) + ") on elements of doorsOnMap.")
            self.doorsOnMap.append(_loc5_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        self.properties = ProtocolTypeManager.get_instance(HouseInstanceInformations,_loc4_)
        self.properties.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HousePropertiesMessage(param1)

    def deserializeAsyncAs_HousePropertiesMessage(self, param1):
        param1.add_child(self._houseIdFunc)
        self._doorsOnMaptree = param1.add_child(self._doorsOnMaptreeFunc)
        self._propertiestree = param1.add_child(self._propertiestreeFunc)

    def _houseIdFunc(self, param1):
        self.houseId = param1.read_var_uh_int()
        if self.houseId < 0:
            raise RuntimeError("Forbidden value (" + str(self.houseId) + ") on element of HousePropertiesMessage.houseId.")

    def _doorsOnMaptreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._doorsOnMaptree.add_child(self._doorsOnMapFunc)
            _loc3_ += 1

    def _doorsOnMapFunc(self, param1):
        _loc2_ = param1.read_int()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of doorsOnMap.")
        self.doorsOnMap.append(_loc2_)

    def _propertiestreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.properties = ProtocolTypeManager.get_instance(HouseInstanceInformations,_loc2_)
        self.properties.deserializeAsync(self._propertiestree)


class HouseSellingUpdateMessage(NetworkMessage):
    protocolId = 6727

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.houseId = 0
        self.instanceId = 0
        self.secondHand = False
        self.realPrice = 0
        self.buyerName = ""

    def getMessageId(self):
        return 6727

    def initHouseSellingUpdateMessage(self, param1=0, param2=0, param3=False, param4=0, param5=""):
        self.houseId = param1
        self.instanceId = param2
        self.secondHand = param3
        self.realPrice = param4
        self.buyerName = param5
        self._isInitialized = True
        return self

    def reset(self):
        self.houseId = 0
        self.instanceId = 0
        self.secondHand = False
        self.realPrice = 0
        self.buyerName = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HouseSellingUpdateMessage(param1)

    def serializeAs_HouseSellingUpdateMessage(self, param1):
        if self.houseId < 0:
            raise RuntimeError("Forbidden value (" + str(self.houseId) + ") on element houseId.")
        param1.write_var_int(self.houseId)
        if self.instanceId < 0:
            raise RuntimeError("Forbidden value (" + str(self.instanceId) + ") on element instanceId.")
        param1.write_int(self.instanceId)
        param1.write_boolean(self.secondHand)
        if self.realPrice < 0 or self.realPrice > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.realPrice) + ") on element realPrice.")
        param1.write_var_long(self.realPrice)
        param1.write_utf(self.buyerName)

    def deserialize(self, param1):
        self.deserializeAs_HouseSellingUpdateMessage(param1)

    def deserializeAs_HouseSellingUpdateMessage(self, param1):
        self._houseIdFunc(param1)
        self._instanceIdFunc(param1)
        self._secondHandFunc(param1)
        self._realPriceFunc(param1)
        self._buyerNameFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HouseSellingUpdateMessage(param1)

    def deserializeAsyncAs_HouseSellingUpdateMessage(self, param1):
        param1.add_child(self._houseIdFunc)
        param1.add_child(self._instanceIdFunc)
        param1.add_child(self._secondHandFunc)
        param1.add_child(self._realPriceFunc)
        param1.add_child(self._buyerNameFunc)

    def _houseIdFunc(self, param1):
        self.houseId = param1.read_var_uh_int()
        if self.houseId < 0:
            raise RuntimeError("Forbidden value (" + str(self.houseId) + ") on element of HouseSellingUpdateMessage.houseId.")

    def _instanceIdFunc(self, param1):
        self.instanceId = param1.read_int()
        if self.instanceId < 0:
            raise RuntimeError("Forbidden value (" + str(self.instanceId) + ") on element of HouseSellingUpdateMessage.instanceId.")

    def _secondHandFunc(self, param1):
        self.secondHand = param1.read_boolean()

    def _realPriceFunc(self, param1):
        self.realPrice = param1.read_var_uh_long()
        if self.realPrice < 0 or self.realPrice > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.realPrice) + ") on element of HouseSellingUpdateMessage.realPrice.")

    def _buyerNameFunc(self, param1):
        self.buyerName = param1.read_utf()


class HouseSellRequestMessage(NetworkMessage):
    protocolId = 5697

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.instanceId = 0
        self.amount = 0
        self.forSale = False

    def getMessageId(self):
        return 5697

    def initHouseSellRequestMessage(self, param1=0, param2=0, param3=False):
        self.instanceId = param1
        self.amount = param2
        self.forSale = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.instanceId = 0
        self.amount = 0
        self.forSale = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HouseSellRequestMessage(param1)

    def serializeAs_HouseSellRequestMessage(self, param1):
        if self.instanceId < 0:
            raise RuntimeError("Forbidden value (" + str(self.instanceId) + ") on element instanceId.")
        param1.write_int(self.instanceId)
        if self.amount < 0 or self.amount > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.amount) + ") on element amount.")
        param1.write_var_long(self.amount)
        param1.write_boolean(self.forSale)

    def deserialize(self, param1):
        self.deserializeAs_HouseSellRequestMessage(param1)

    def deserializeAs_HouseSellRequestMessage(self, param1):
        self._instanceIdFunc(param1)
        self._amountFunc(param1)
        self._forSaleFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HouseSellRequestMessage(param1)

    def deserializeAsyncAs_HouseSellRequestMessage(self, param1):
        param1.add_child(self._instanceIdFunc)
        param1.add_child(self._amountFunc)
        param1.add_child(self._forSaleFunc)

    def _instanceIdFunc(self, param1):
        self.instanceId = param1.read_int()
        if self.instanceId < 0:
            raise RuntimeError("Forbidden value (" + str(self.instanceId) + ") on element of HouseSellRequestMessage.instanceId.")

    def _amountFunc(self, param1):
        self.amount = param1.read_var_uh_long()
        if self.amount < 0 or self.amount > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.amount) + ") on element of HouseSellRequestMessage.amount.")

    def _forSaleFunc(self, param1):
        self.forSale = param1.read_boolean()


class HouseSoldMessage(NetworkMessage):
    protocolId = 5737

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.houseId = 0
        self.instanceId = 0
        self.secondHand = False
        self.realPrice = 0
        self.buyerName = ""

    def getMessageId(self):
        return 5737

    def initHouseSoldMessage(self, param1=0, param2=0, param3=False, param4=0, param5=""):
        self.houseId = param1
        self.instanceId = param2
        self.secondHand = param3
        self.realPrice = param4
        self.buyerName = param5
        self._isInitialized = True
        return self

    def reset(self):
        self.houseId = 0
        self.instanceId = 0
        self.secondHand = False
        self.realPrice = 0
        self.buyerName = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HouseSoldMessage(param1)

    def serializeAs_HouseSoldMessage(self, param1):
        if self.houseId < 0:
            raise RuntimeError("Forbidden value (" + str(self.houseId) + ") on element houseId.")
        param1.write_var_int(self.houseId)
        if self.instanceId < 0 or self.instanceId > 4294967295:
            raise RuntimeError("Forbidden value (" + str(self.instanceId) + ") on element instanceId.")
        param1.write_unsigned_int(self.instanceId)
        param1.write_boolean(self.secondHand)
        if self.realPrice < 0 or self.realPrice > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.realPrice) + ") on element realPrice.")
        param1.write_var_long(self.realPrice)
        param1.write_utf(self.buyerName)

    def deserialize(self, param1):
        self.deserializeAs_HouseSoldMessage(param1)

    def deserializeAs_HouseSoldMessage(self, param1):
        self._houseIdFunc(param1)
        self._instanceIdFunc(param1)
        self._secondHandFunc(param1)
        self._realPriceFunc(param1)
        self._buyerNameFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HouseSoldMessage(param1)

    def deserializeAsyncAs_HouseSoldMessage(self, param1):
        param1.add_child(self._houseIdFunc)
        param1.add_child(self._instanceIdFunc)
        param1.add_child(self._secondHandFunc)
        param1.add_child(self._realPriceFunc)
        param1.add_child(self._buyerNameFunc)

    def _houseIdFunc(self, param1):
        self.houseId = param1.read_var_uh_int()
        if self.houseId < 0:
            raise RuntimeError("Forbidden value (" + str(self.houseId) + ") on element of HouseSoldMessage.houseId.")

    def _instanceIdFunc(self, param1):
        self.instanceId = param1.read_unsigned_int()
        if self.instanceId < 0 or self.instanceId > 4294967295:
            raise RuntimeError("Forbidden value (" + str(self.instanceId) + ") on element of HouseSoldMessage.instanceId.")

    def _secondHandFunc(self, param1):
        self.secondHand = param1.read_boolean()

    def _realPriceFunc(self, param1):
        self.realPrice = param1.read_var_uh_long()
        if self.realPrice < 0 or self.realPrice > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.realPrice) + ") on element of HouseSoldMessage.realPrice.")

    def _buyerNameFunc(self, param1):
        self.buyerName = param1.read_utf()


class HouseToSellFilterMessage(NetworkMessage):
    protocolId = 6137

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.areaId = 0
        self.atLeastNbRoom = 0
        self.atLeastNbChest = 0
        self.skillRequested = 0
        self.maxPrice = 0

    def getMessageId(self):
        return 6137

    def initHouseToSellFilterMessage(self, param1=0, param2=0, param3=0, param4=0, param5=0):
        self.areaId = param1
        self.atLeastNbRoom = param2
        self.atLeastNbChest = param3
        self.skillRequested = param4
        self.maxPrice = param5
        self._isInitialized = True
        return self

    def reset(self):
        self.areaId = 0
        self.atLeastNbRoom = 0
        self.atLeastNbChest = 0
        self.skillRequested = 0
        self.maxPrice = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HouseToSellFilterMessage(param1)

    def serializeAs_HouseToSellFilterMessage(self, param1):
        param1.write_int(self.areaId)
        if self.atLeastNbRoom < 0:
            raise RuntimeError("Forbidden value (" + str(self.atLeastNbRoom) + ") on element atLeastNbRoom.")
        param1.write_byte(self.atLeastNbRoom)
        if self.atLeastNbChest < 0:
            raise RuntimeError("Forbidden value (" + str(self.atLeastNbChest) + ") on element atLeastNbChest.")
        param1.write_byte(self.atLeastNbChest)
        if self.skillRequested < 0:
            raise RuntimeError("Forbidden value (" + str(self.skillRequested) + ") on element skillRequested.")
        param1.write_var_short(self.skillRequested)
        if self.maxPrice < 0 or self.maxPrice > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.maxPrice) + ") on element maxPrice.")
        param1.write_var_long(self.maxPrice)

    def deserialize(self, param1):
        self.deserializeAs_HouseToSellFilterMessage(param1)

    def deserializeAs_HouseToSellFilterMessage(self, param1):
        self._areaIdFunc(param1)
        self._atLeastNbRoomFunc(param1)
        self._atLeastNbChestFunc(param1)
        self._skillRequestedFunc(param1)
        self._maxPriceFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HouseToSellFilterMessage(param1)

    def deserializeAsyncAs_HouseToSellFilterMessage(self, param1):
        param1.add_child(self._areaIdFunc)
        param1.add_child(self._atLeastNbRoomFunc)
        param1.add_child(self._atLeastNbChestFunc)
        param1.add_child(self._skillRequestedFunc)
        param1.add_child(self._maxPriceFunc)

    def _areaIdFunc(self, param1):
        self.areaId = param1.read_int()

    def _atLeastNbRoomFunc(self, param1):
        self.atLeastNbRoom = param1.read_byte()
        if self.atLeastNbRoom < 0:
            raise RuntimeError("Forbidden value (" + str(self.atLeastNbRoom) + ") on element of HouseToSellFilterMessage.atLeastNbRoom.")

    def _atLeastNbChestFunc(self, param1):
        self.atLeastNbChest = param1.read_byte()
        if self.atLeastNbChest < 0:
            raise RuntimeError("Forbidden value (" + str(self.atLeastNbChest) + ") on element of HouseToSellFilterMessage.atLeastNbChest.")

    def _skillRequestedFunc(self, param1):
        self.skillRequested = param1.read_var_uh_short()
        if self.skillRequested < 0:
            raise RuntimeError("Forbidden value (" + str(self.skillRequested) + ") on element of HouseToSellFilterMessage.skillRequested.")

    def _maxPriceFunc(self, param1):
        self.maxPrice = param1.read_var_uh_long()
        if self.maxPrice < 0 or self.maxPrice > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.maxPrice) + ") on element of HouseToSellFilterMessage.maxPrice.")


class HouseToSellListMessage(NetworkMessage):
    protocolId = 6140

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.pageIndex = 0
        self.totalPage = 0
        self.houseList = []
        self._houseListtree = FuncTree()

    def getMessageId(self):
        return 6140

    def initHouseToSellListMessage(self, param1=0, param2=0, param3=[]):
        self.pageIndex = param1
        self.totalPage = param2
        self.houseList = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.pageIndex = 0
        self.totalPage = 0
        self.houseList = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HouseToSellListMessage(param1)

    def serializeAs_HouseToSellListMessage(self, param1):
        if self.pageIndex < 0:
            raise RuntimeError("Forbidden value (" + str(self.pageIndex) + ") on element pageIndex.")
        param1.write_var_short(self.pageIndex)
        if self.totalPage < 0:
            raise RuntimeError("Forbidden value (" + str(self.totalPage) + ") on element totalPage.")
        param1.write_var_short(self.totalPage)
        param1.write_short(len(self.houseList))
        _loc2_ = 0
        while _loc2_ < len(self.houseList):
            as_parent(self.houseList[_loc2_], HouseInformationsForSell).serializeAs_HouseInformationsForSell(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_HouseToSellListMessage(param1)

    def deserializeAs_HouseToSellListMessage(self, param1):
        _loc4_ = None
        self._pageIndexFunc(param1)
        self._totalPageFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = HouseInformationsForSell()
            _loc4_.deserialize(param1)
            self.houseList.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HouseToSellListMessage(param1)

    def deserializeAsyncAs_HouseToSellListMessage(self, param1):
        param1.add_child(self._pageIndexFunc)
        param1.add_child(self._totalPageFunc)
        self._houseListtree = param1.add_child(self._houseListtreeFunc)

    def _pageIndexFunc(self, param1):
        self.pageIndex = param1.read_var_uh_short()
        if self.pageIndex < 0:
            raise RuntimeError("Forbidden value (" + str(self.pageIndex) + ") on element of HouseToSellListMessage.pageIndex.")

    def _totalPageFunc(self, param1):
        self.totalPage = param1.read_var_uh_short()
        if self.totalPage < 0:
            raise RuntimeError("Forbidden value (" + str(self.totalPage) + ") on element of HouseToSellListMessage.totalPage.")

    def _houseListtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._houseListtree.add_child(self._houseListFunc)
            _loc3_ += 1

    def _houseListFunc(self, param1):
        _loc2_ = HouseInformationsForSell()
        _loc2_.deserialize(param1)
        self.houseList.append(_loc2_)


class HouseToSellListRequestMessage(NetworkMessage):
    protocolId = 6139

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.pageIndex = 0

    def getMessageId(self):
        return 6139

    def initHouseToSellListRequestMessage(self, param1=0):
        self.pageIndex = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.pageIndex = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HouseToSellListRequestMessage(param1)

    def serializeAs_HouseToSellListRequestMessage(self, param1):
        if self.pageIndex < 0:
            raise RuntimeError("Forbidden value (" + str(self.pageIndex) + ") on element pageIndex.")
        param1.write_var_short(self.pageIndex)

    def deserialize(self, param1):
        self.deserializeAs_HouseToSellListRequestMessage(param1)

    def deserializeAs_HouseToSellListRequestMessage(self, param1):
        self._pageIndexFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HouseToSellListRequestMessage(param1)

    def deserializeAsyncAs_HouseToSellListRequestMessage(self, param1):
        param1.add_child(self._pageIndexFunc)

    def _pageIndexFunc(self, param1):
        self.pageIndex = param1.read_var_uh_short()
        if self.pageIndex < 0:
            raise RuntimeError("Forbidden value (" + str(self.pageIndex) + ") on element of HouseToSellListRequestMessage.pageIndex.")


class HouseGuildNoneMessage(NetworkMessage):
    protocolId = 5701

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.houseId = 0
        self.instanceId = 0
        self.secondHand = False

    def getMessageId(self):
        return 5701

    def initHouseGuildNoneMessage(self, param1=0, param2=0, param3=False):
        self.houseId = param1
        self.instanceId = param2
        self.secondHand = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.houseId = 0
        self.instanceId = 0
        self.secondHand = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HouseGuildNoneMessage(param1)

    def serializeAs_HouseGuildNoneMessage(self, param1):
        if self.houseId < 0:
            raise RuntimeError("Forbidden value (" + str(self.houseId) + ") on element houseId.")
        param1.write_var_int(self.houseId)
        if self.instanceId < 0:
            raise RuntimeError("Forbidden value (" + str(self.instanceId) + ") on element instanceId.")
        param1.write_int(self.instanceId)
        param1.write_boolean(self.secondHand)

    def deserialize(self, param1):
        self.deserializeAs_HouseGuildNoneMessage(param1)

    def deserializeAs_HouseGuildNoneMessage(self, param1):
        self._houseIdFunc(param1)
        self._instanceIdFunc(param1)
        self._secondHandFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HouseGuildNoneMessage(param1)

    def deserializeAsyncAs_HouseGuildNoneMessage(self, param1):
        param1.add_child(self._houseIdFunc)
        param1.add_child(self._instanceIdFunc)
        param1.add_child(self._secondHandFunc)

    def _houseIdFunc(self, param1):
        self.houseId = param1.read_var_uh_int()
        if self.houseId < 0:
            raise RuntimeError("Forbidden value (" + str(self.houseId) + ") on element of HouseGuildNoneMessage.houseId.")

    def _instanceIdFunc(self, param1):
        self.instanceId = param1.read_int()
        if self.instanceId < 0:
            raise RuntimeError("Forbidden value (" + str(self.instanceId) + ") on element of HouseGuildNoneMessage.instanceId.")

    def _secondHandFunc(self, param1):
        self.secondHand = param1.read_boolean()


class HouseGuildRightsMessage(NetworkMessage):
    protocolId = 5703

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.houseId = 0
        self.instanceId = 0
        self.secondHand = False
        self.guildInfo = GuildInformations()
        self.rights = 0
        self._guildInfotree = FuncTree()

    def getMessageId(self):
        return 5703

    def initHouseGuildRightsMessage(self, param1=0, param2=0, param3=False, param4=None, param5=0):
        self.houseId = param1
        self.instanceId = param2
        self.secondHand = param3
        self.guildInfo = param4
        self.rights = param5
        self._isInitialized = True
        return self

    def reset(self):
        self.houseId = 0
        self.instanceId = 0
        self.secondHand = False
        self.guildInfo = GuildInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HouseGuildRightsMessage(param1)

    def serializeAs_HouseGuildRightsMessage(self, param1):
        if self.houseId < 0:
            raise RuntimeError("Forbidden value (" + str(self.houseId) + ") on element houseId.")
        param1.write_var_int(self.houseId)
        if self.instanceId < 0:
            raise RuntimeError("Forbidden value (" + str(self.instanceId) + ") on element instanceId.")
        param1.write_int(self.instanceId)
        param1.write_boolean(self.secondHand)
        self.guildInfo.serializeAs_GuildInformations(param1)
        if self.rights < 0:
            raise RuntimeError("Forbidden value (" + str(self.rights) + ") on element rights.")
        param1.write_var_int(self.rights)

    def deserialize(self, param1):
        self.deserializeAs_HouseGuildRightsMessage(param1)

    def deserializeAs_HouseGuildRightsMessage(self, param1):
        self._houseIdFunc(param1)
        self._instanceIdFunc(param1)
        self._secondHandFunc(param1)
        self.guildInfo = GuildInformations()
        self.guildInfo.deserialize(param1)
        self._rightsFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HouseGuildRightsMessage(param1)

    def deserializeAsyncAs_HouseGuildRightsMessage(self, param1):
        param1.add_child(self._houseIdFunc)
        param1.add_child(self._instanceIdFunc)
        param1.add_child(self._secondHandFunc)
        self._guildInfotree = param1.add_child(self._guildInfotreeFunc)
        param1.add_child(self._rightsFunc)

    def _houseIdFunc(self, param1):
        self.houseId = param1.read_var_uh_int()
        if self.houseId < 0:
            raise RuntimeError("Forbidden value (" + str(self.houseId) + ") on element of HouseGuildRightsMessage.houseId.")

    def _instanceIdFunc(self, param1):
        self.instanceId = param1.read_int()
        if self.instanceId < 0:
            raise RuntimeError("Forbidden value (" + str(self.instanceId) + ") on element of HouseGuildRightsMessage.instanceId.")

    def _secondHandFunc(self, param1):
        self.secondHand = param1.read_boolean()

    def _guildInfotreeFunc(self, param1):
        self.guildInfo = GuildInformations()
        self.guildInfo.deserializeAsync(self._guildInfotree)

    def _rightsFunc(self, param1):
        self.rights = param1.read_var_uh_int()
        if self.rights < 0:
            raise RuntimeError("Forbidden value (" + str(self.rights) + ") on element of HouseGuildRightsMessage.rights.")


class HouseGuildRightsViewMessage(NetworkMessage):
    protocolId = 5700

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.houseId = 0
        self.instanceId = 0

    def getMessageId(self):
        return 5700

    def initHouseGuildRightsViewMessage(self, param1=0, param2=0):
        self.houseId = param1
        self.instanceId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.houseId = 0
        self.instanceId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HouseGuildRightsViewMessage(param1)

    def serializeAs_HouseGuildRightsViewMessage(self, param1):
        if self.houseId < 0:
            raise RuntimeError("Forbidden value (" + str(self.houseId) + ") on element houseId.")
        param1.write_var_int(self.houseId)
        if self.instanceId < 0:
            raise RuntimeError("Forbidden value (" + str(self.instanceId) + ") on element instanceId.")
        param1.write_int(self.instanceId)

    def deserialize(self, param1):
        self.deserializeAs_HouseGuildRightsViewMessage(param1)

    def deserializeAs_HouseGuildRightsViewMessage(self, param1):
        self._houseIdFunc(param1)
        self._instanceIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HouseGuildRightsViewMessage(param1)

    def deserializeAsyncAs_HouseGuildRightsViewMessage(self, param1):
        param1.add_child(self._houseIdFunc)
        param1.add_child(self._instanceIdFunc)

    def _houseIdFunc(self, param1):
        self.houseId = param1.read_var_uh_int()
        if self.houseId < 0:
            raise RuntimeError("Forbidden value (" + str(self.houseId) + ") on element of HouseGuildRightsViewMessage.houseId.")

    def _instanceIdFunc(self, param1):
        self.instanceId = param1.read_int()
        if self.instanceId < 0:
            raise RuntimeError("Forbidden value (" + str(self.instanceId) + ") on element of HouseGuildRightsViewMessage.instanceId.")


class HouseGuildShareRequestMessage(NetworkMessage):
    protocolId = 5704

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.houseId = 0
        self.instanceId = 0
        self.enable = False
        self.rights = 0

    def getMessageId(self):
        return 5704

    def initHouseGuildShareRequestMessage(self, param1=0, param2=0, param3=False, param4=0):
        self.houseId = param1
        self.instanceId = param2
        self.enable = param3
        self.rights = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.houseId = 0
        self.instanceId = 0
        self.enable = False
        self.rights = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HouseGuildShareRequestMessage(param1)

    def serializeAs_HouseGuildShareRequestMessage(self, param1):
        if self.houseId < 0:
            raise RuntimeError("Forbidden value (" + str(self.houseId) + ") on element houseId.")
        param1.write_var_int(self.houseId)
        if self.instanceId < 0:
            raise RuntimeError("Forbidden value (" + str(self.instanceId) + ") on element instanceId.")
        param1.write_int(self.instanceId)
        param1.write_boolean(self.enable)
        if self.rights < 0:
            raise RuntimeError("Forbidden value (" + str(self.rights) + ") on element rights.")
        param1.write_var_int(self.rights)

    def deserialize(self, param1):
        self.deserializeAs_HouseGuildShareRequestMessage(param1)

    def deserializeAs_HouseGuildShareRequestMessage(self, param1):
        self._houseIdFunc(param1)
        self._instanceIdFunc(param1)
        self._enableFunc(param1)
        self._rightsFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HouseGuildShareRequestMessage(param1)

    def deserializeAsyncAs_HouseGuildShareRequestMessage(self, param1):
        param1.add_child(self._houseIdFunc)
        param1.add_child(self._instanceIdFunc)
        param1.add_child(self._enableFunc)
        param1.add_child(self._rightsFunc)

    def _houseIdFunc(self, param1):
        self.houseId = param1.read_var_uh_int()
        if self.houseId < 0:
            raise RuntimeError("Forbidden value (" + str(self.houseId) + ") on element of HouseGuildShareRequestMessage.houseId.")

    def _instanceIdFunc(self, param1):
        self.instanceId = param1.read_int()
        if self.instanceId < 0:
            raise RuntimeError("Forbidden value (" + str(self.instanceId) + ") on element of HouseGuildShareRequestMessage.instanceId.")

    def _enableFunc(self, param1):
        self.enable = param1.read_boolean()

    def _rightsFunc(self, param1):
        self.rights = param1.read_var_uh_int()
        if self.rights < 0:
            raise RuntimeError("Forbidden value (" + str(self.rights) + ") on element of HouseGuildShareRequestMessage.rights.")


class JobAllowMultiCraftRequestMessage(NetworkMessage):
    protocolId = 5748

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.enabled = False

    def getMessageId(self):
        return 5748

    def initJobAllowMultiCraftRequestMessage(self, param1=False):
        self.enabled = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.enabled = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_JobAllowMultiCraftRequestMessage(param1)

    def serializeAs_JobAllowMultiCraftRequestMessage(self, param1):
        param1.write_boolean(self.enabled)

    def deserialize(self, param1):
        self.deserializeAs_JobAllowMultiCraftRequestMessage(param1)

    def deserializeAs_JobAllowMultiCraftRequestMessage(self, param1):
        self._enabledFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_JobAllowMultiCraftRequestMessage(param1)

    def deserializeAsyncAs_JobAllowMultiCraftRequestMessage(self, param1):
        param1.add_child(self._enabledFunc)

    def _enabledFunc(self, param1):
        self.enabled = param1.read_boolean()


class JobBookSubscriptionMessage(NetworkMessage):
    protocolId = 6593

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.subscriptions = []
        self._subscriptionstree = FuncTree()

    def getMessageId(self):
        return 6593

    def initJobBookSubscriptionMessage(self, param1=[]):
        self.subscriptions = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.subscriptions = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_JobBookSubscriptionMessage(param1)

    def serializeAs_JobBookSubscriptionMessage(self, param1):
        param1.write_short(len(self.subscriptions))
        _loc2_ = 0
        while _loc2_ < len(self.subscriptions):
            as_parent(self.subscriptions[_loc2_], JobBookSubscription).serializeAs_JobBookSubscription(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_JobBookSubscriptionMessage(param1)

    def deserializeAs_JobBookSubscriptionMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = JobBookSubscription()
            _loc4_.deserialize(param1)
            self.subscriptions.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_JobBookSubscriptionMessage(param1)

    def deserializeAsyncAs_JobBookSubscriptionMessage(self, param1):
        self._subscriptionstree = param1.add_child(self._subscriptionstreeFunc)

    def _subscriptionstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._subscriptionstree.add_child(self._subscriptionsFunc)
            _loc3_ += 1

    def _subscriptionsFunc(self, param1):
        _loc2_ = JobBookSubscription()
        _loc2_.deserialize(param1)
        self.subscriptions.append(_loc2_)


class JobCrafterDirectoryAddMessage(NetworkMessage):
    protocolId = 5651

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.listEntry = JobCrafterDirectoryListEntry()
        self._listEntrytree = FuncTree()

    def getMessageId(self):
        return 5651

    def initJobCrafterDirectoryAddMessage(self, param1=None):
        self.listEntry = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.listEntry = JobCrafterDirectoryListEntry()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_JobCrafterDirectoryAddMessage(param1)

    def serializeAs_JobCrafterDirectoryAddMessage(self, param1):
        self.listEntry.serializeAs_JobCrafterDirectoryListEntry(param1)

    def deserialize(self, param1):
        self.deserializeAs_JobCrafterDirectoryAddMessage(param1)

    def deserializeAs_JobCrafterDirectoryAddMessage(self, param1):
        self.listEntry = JobCrafterDirectoryListEntry()
        self.listEntry.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_JobCrafterDirectoryAddMessage(param1)

    def deserializeAsyncAs_JobCrafterDirectoryAddMessage(self, param1):
        self._listEntrytree = param1.add_child(self._listEntrytreeFunc)

    def _listEntrytreeFunc(self, param1):
        self.listEntry = JobCrafterDirectoryListEntry()
        self.listEntry.deserializeAsync(self._listEntrytree)


class JobCrafterDirectoryDefineSettingsMessage(NetworkMessage):
    protocolId = 5649

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.settings = JobCrafterDirectorySettings()
        self._settingstree = FuncTree()

    def getMessageId(self):
        return 5649

    def initJobCrafterDirectoryDefineSettingsMessage(self, param1=None):
        self.settings = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.settings = JobCrafterDirectorySettings()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_JobCrafterDirectoryDefineSettingsMessage(param1)

    def serializeAs_JobCrafterDirectoryDefineSettingsMessage(self, param1):
        self.settings.serializeAs_JobCrafterDirectorySettings(param1)

    def deserialize(self, param1):
        self.deserializeAs_JobCrafterDirectoryDefineSettingsMessage(param1)

    def deserializeAs_JobCrafterDirectoryDefineSettingsMessage(self, param1):
        self.settings = JobCrafterDirectorySettings()
        self.settings.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_JobCrafterDirectoryDefineSettingsMessage(param1)

    def deserializeAsyncAs_JobCrafterDirectoryDefineSettingsMessage(self, param1):
        self._settingstree = param1.add_child(self._settingstreeFunc)

    def _settingstreeFunc(self, param1):
        self.settings = JobCrafterDirectorySettings()
        self.settings.deserializeAsync(self._settingstree)


class JobCrafterDirectoryEntryMessage(NetworkMessage):
    protocolId = 6044

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.playerInfo = JobCrafterDirectoryEntryPlayerInfo()
        self.jobInfoList = []
        self.playerLook = EntityLook()
        self._playerInfotree = FuncTree()
        self._jobInfoListtree = FuncTree()
        self._playerLooktree = FuncTree()

    def getMessageId(self):
        return 6044

    def initJobCrafterDirectoryEntryMessage(self, param1=None, param2=[], param3=None):
        self.playerInfo = param1
        self.jobInfoList = param2
        self.playerLook = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.playerInfo = JobCrafterDirectoryEntryPlayerInfo()
        self.playerLook = EntityLook()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_JobCrafterDirectoryEntryMessage(param1)

    def serializeAs_JobCrafterDirectoryEntryMessage(self, param1):
        self.playerInfo.serializeAs_JobCrafterDirectoryEntryPlayerInfo(param1)
        param1.write_short(len(self.jobInfoList))
        _loc2_ = 0
        while _loc2_ < len(self.jobInfoList):
            as_parent(self.jobInfoList[_loc2_], JobCrafterDirectoryEntryJobInfo).serializeAs_JobCrafterDirectoryEntryJobInfo(param1)
            _loc2_ += 1
        self.playerLook.serializeAs_EntityLook(param1)

    def deserialize(self, param1):
        self.deserializeAs_JobCrafterDirectoryEntryMessage(param1)

    def deserializeAs_JobCrafterDirectoryEntryMessage(self, param1):
        _loc4_ = None
        self.playerInfo = JobCrafterDirectoryEntryPlayerInfo()
        self.playerInfo.deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = JobCrafterDirectoryEntryJobInfo()
            _loc4_.deserialize(param1)
            self.jobInfoList.append(_loc4_)
            _loc3_ += 1
        self.playerLook = EntityLook()
        self.playerLook.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_JobCrafterDirectoryEntryMessage(param1)

    def deserializeAsyncAs_JobCrafterDirectoryEntryMessage(self, param1):
        self._playerInfotree = param1.add_child(self._playerInfotreeFunc)
        self._jobInfoListtree = param1.add_child(self._jobInfoListtreeFunc)
        self._playerLooktree = param1.add_child(self._playerLooktreeFunc)

    def _playerInfotreeFunc(self, param1):
        self.playerInfo = JobCrafterDirectoryEntryPlayerInfo()
        self.playerInfo.deserializeAsync(self._playerInfotree)

    def _jobInfoListtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._jobInfoListtree.add_child(self._jobInfoListFunc)
            _loc3_ += 1

    def _jobInfoListFunc(self, param1):
        _loc2_ = JobCrafterDirectoryEntryJobInfo()
        _loc2_.deserialize(param1)
        self.jobInfoList.append(_loc2_)

    def _playerLooktreeFunc(self, param1):
        self.playerLook = EntityLook()
        self.playerLook.deserializeAsync(self._playerLooktree)


class JobCrafterDirectoryEntryRequestMessage(NetworkMessage):
    protocolId = 6043

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.playerId = 0

    def getMessageId(self):
        return 6043

    def initJobCrafterDirectoryEntryRequestMessage(self, param1=0):
        self.playerId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.playerId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_JobCrafterDirectoryEntryRequestMessage(param1)

    def serializeAs_JobCrafterDirectoryEntryRequestMessage(self, param1):
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element playerId.")
        param1.write_var_long(self.playerId)

    def deserialize(self, param1):
        self.deserializeAs_JobCrafterDirectoryEntryRequestMessage(param1)

    def deserializeAs_JobCrafterDirectoryEntryRequestMessage(self, param1):
        self._playerIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_JobCrafterDirectoryEntryRequestMessage(param1)

    def deserializeAsyncAs_JobCrafterDirectoryEntryRequestMessage(self, param1):
        param1.add_child(self._playerIdFunc)

    def _playerIdFunc(self, param1):
        self.playerId = param1.read_var_uh_long()
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element of JobCrafterDirectoryEntryRequestMessage.playerId.")


class JobCrafterDirectoryListMessage(NetworkMessage):
    protocolId = 6046

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.listEntries = []
        self._listEntriestree = FuncTree()

    def getMessageId(self):
        return 6046

    def initJobCrafterDirectoryListMessage(self, param1=[]):
        self.listEntries = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.listEntries = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_JobCrafterDirectoryListMessage(param1)

    def serializeAs_JobCrafterDirectoryListMessage(self, param1):
        param1.write_short(len(self.listEntries))
        _loc2_ = 0
        while _loc2_ < len(self.listEntries):
            as_parent(self.listEntries[_loc2_], JobCrafterDirectoryListEntry).serializeAs_JobCrafterDirectoryListEntry(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_JobCrafterDirectoryListMessage(param1)

    def deserializeAs_JobCrafterDirectoryListMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = JobCrafterDirectoryListEntry()
            _loc4_.deserialize(param1)
            self.listEntries.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_JobCrafterDirectoryListMessage(param1)

    def deserializeAsyncAs_JobCrafterDirectoryListMessage(self, param1):
        self._listEntriestree = param1.add_child(self._listEntriestreeFunc)

    def _listEntriestreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._listEntriestree.add_child(self._listEntriesFunc)
            _loc3_ += 1

    def _listEntriesFunc(self, param1):
        _loc2_ = JobCrafterDirectoryListEntry()
        _loc2_.deserialize(param1)
        self.listEntries.append(_loc2_)


class JobCrafterDirectoryListRequestMessage(NetworkMessage):
    protocolId = 6047

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.jobId = 0

    def getMessageId(self):
        return 6047

    def initJobCrafterDirectoryListRequestMessage(self, param1=0):
        self.jobId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.jobId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_JobCrafterDirectoryListRequestMessage(param1)

    def serializeAs_JobCrafterDirectoryListRequestMessage(self, param1):
        if self.jobId < 0:
            raise RuntimeError("Forbidden value (" + str(self.jobId) + ") on element jobId.")
        param1.write_byte(self.jobId)

    def deserialize(self, param1):
        self.deserializeAs_JobCrafterDirectoryListRequestMessage(param1)

    def deserializeAs_JobCrafterDirectoryListRequestMessage(self, param1):
        self._jobIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_JobCrafterDirectoryListRequestMessage(param1)

    def deserializeAsyncAs_JobCrafterDirectoryListRequestMessage(self, param1):
        param1.add_child(self._jobIdFunc)

    def _jobIdFunc(self, param1):
        self.jobId = param1.read_byte()
        if self.jobId < 0:
            raise RuntimeError("Forbidden value (" + str(self.jobId) + ") on element of JobCrafterDirectoryListRequestMessage.jobId.")


class JobCrafterDirectoryRemoveMessage(NetworkMessage):
    protocolId = 5653

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.jobId = 0
        self.playerId = 0

    def getMessageId(self):
        return 5653

    def initJobCrafterDirectoryRemoveMessage(self, param1=0, param2=0):
        self.jobId = param1
        self.playerId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.jobId = 0
        self.playerId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_JobCrafterDirectoryRemoveMessage(param1)

    def serializeAs_JobCrafterDirectoryRemoveMessage(self, param1):
        if self.jobId < 0:
            raise RuntimeError("Forbidden value (" + str(self.jobId) + ") on element jobId.")
        param1.write_byte(self.jobId)
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element playerId.")
        param1.write_var_long(self.playerId)

    def deserialize(self, param1):
        self.deserializeAs_JobCrafterDirectoryRemoveMessage(param1)

    def deserializeAs_JobCrafterDirectoryRemoveMessage(self, param1):
        self._jobIdFunc(param1)
        self._playerIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_JobCrafterDirectoryRemoveMessage(param1)

    def deserializeAsyncAs_JobCrafterDirectoryRemoveMessage(self, param1):
        param1.add_child(self._jobIdFunc)
        param1.add_child(self._playerIdFunc)

    def _jobIdFunc(self, param1):
        self.jobId = param1.read_byte()
        if self.jobId < 0:
            raise RuntimeError("Forbidden value (" + str(self.jobId) + ") on element of JobCrafterDirectoryRemoveMessage.jobId.")

    def _playerIdFunc(self, param1):
        self.playerId = param1.read_var_uh_long()
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element of JobCrafterDirectoryRemoveMessage.playerId.")


class JobCrafterDirectorySettingsMessage(NetworkMessage):
    protocolId = 5652

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.craftersSettings = []
        self._craftersSettingstree = FuncTree()

    def getMessageId(self):
        return 5652

    def initJobCrafterDirectorySettingsMessage(self, param1=[]):
        self.craftersSettings = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.craftersSettings = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_JobCrafterDirectorySettingsMessage(param1)

    def serializeAs_JobCrafterDirectorySettingsMessage(self, param1):
        param1.write_short(len(self.craftersSettings))
        _loc2_ = 0
        while _loc2_ < len(self.craftersSettings):
            as_parent(self.craftersSettings[_loc2_], JobCrafterDirectorySettings).serializeAs_JobCrafterDirectorySettings(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_JobCrafterDirectorySettingsMessage(param1)

    def deserializeAs_JobCrafterDirectorySettingsMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = JobCrafterDirectorySettings()
            _loc4_.deserialize(param1)
            self.craftersSettings.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_JobCrafterDirectorySettingsMessage(param1)

    def deserializeAsyncAs_JobCrafterDirectorySettingsMessage(self, param1):
        self._craftersSettingstree = param1.add_child(self._craftersSettingstreeFunc)

    def _craftersSettingstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._craftersSettingstree.add_child(self._craftersSettingsFunc)
            _loc3_ += 1

    def _craftersSettingsFunc(self, param1):
        _loc2_ = JobCrafterDirectorySettings()
        _loc2_.deserialize(param1)
        self.craftersSettings.append(_loc2_)


class JobDescriptionMessage(NetworkMessage):
    protocolId = 5655

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.jobsDescription = []
        self._jobsDescriptiontree = FuncTree()

    def getMessageId(self):
        return 5655

    def initJobDescriptionMessage(self, param1=[]):
        self.jobsDescription = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.jobsDescription = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_JobDescriptionMessage(param1)

    def serializeAs_JobDescriptionMessage(self, param1):
        param1.write_short(len(self.jobsDescription))
        _loc2_ = 0
        while _loc2_ < len(self.jobsDescription):
            as_parent(self.jobsDescription[_loc2_], JobDescription).serializeAs_JobDescription(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_JobDescriptionMessage(param1)

    def deserializeAs_JobDescriptionMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = JobDescription()
            _loc4_.deserialize(param1)
            self.jobsDescription.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_JobDescriptionMessage(param1)

    def deserializeAsyncAs_JobDescriptionMessage(self, param1):
        self._jobsDescriptiontree = param1.add_child(self._jobsDescriptiontreeFunc)

    def _jobsDescriptiontreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._jobsDescriptiontree.add_child(self._jobsDescriptionFunc)
            _loc3_ += 1

    def _jobsDescriptionFunc(self, param1):
        _loc2_ = JobDescription()
        _loc2_.deserialize(param1)
        self.jobsDescription.append(_loc2_)


class JobExperienceMultiUpdateMessage(NetworkMessage):
    protocolId = 5809

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.experiencesUpdate = []
        self._experiencesUpdatetree = FuncTree()

    def getMessageId(self):
        return 5809

    def initJobExperienceMultiUpdateMessage(self, param1=[]):
        self.experiencesUpdate = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.experiencesUpdate = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_JobExperienceMultiUpdateMessage(param1)

    def serializeAs_JobExperienceMultiUpdateMessage(self, param1):
        param1.write_short(len(self.experiencesUpdate))
        _loc2_ = 0
        while _loc2_ < len(self.experiencesUpdate):
            as_parent(self.experiencesUpdate[_loc2_], JobExperience).serializeAs_JobExperience(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_JobExperienceMultiUpdateMessage(param1)

    def deserializeAs_JobExperienceMultiUpdateMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = JobExperience()
            _loc4_.deserialize(param1)
            self.experiencesUpdate.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_JobExperienceMultiUpdateMessage(param1)

    def deserializeAsyncAs_JobExperienceMultiUpdateMessage(self, param1):
        self._experiencesUpdatetree = param1.add_child(self._experiencesUpdatetreeFunc)

    def _experiencesUpdatetreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._experiencesUpdatetree.add_child(self._experiencesUpdateFunc)
            _loc3_ += 1

    def _experiencesUpdateFunc(self, param1):
        _loc2_ = JobExperience()
        _loc2_.deserialize(param1)
        self.experiencesUpdate.append(_loc2_)


class JobExperienceUpdateMessage(NetworkMessage):
    protocolId = 5654

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.experiencesUpdate = JobExperience()
        self._experiencesUpdatetree = FuncTree()

    def getMessageId(self):
        return 5654

    def initJobExperienceUpdateMessage(self, param1=None):
        self.experiencesUpdate = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.experiencesUpdate = JobExperience()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_JobExperienceUpdateMessage(param1)

    def serializeAs_JobExperienceUpdateMessage(self, param1):
        self.experiencesUpdate.serializeAs_JobExperience(param1)

    def deserialize(self, param1):
        self.deserializeAs_JobExperienceUpdateMessage(param1)

    def deserializeAs_JobExperienceUpdateMessage(self, param1):
        self.experiencesUpdate = JobExperience()
        self.experiencesUpdate.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_JobExperienceUpdateMessage(param1)

    def deserializeAsyncAs_JobExperienceUpdateMessage(self, param1):
        self._experiencesUpdatetree = param1.add_child(self._experiencesUpdatetreeFunc)

    def _experiencesUpdatetreeFunc(self, param1):
        self.experiencesUpdate = JobExperience()
        self.experiencesUpdate.deserializeAsync(self._experiencesUpdatetree)


class JobLevelUpMessage(NetworkMessage):
    protocolId = 5656

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.newLevel = 0
        self.jobsDescription = JobDescription()
        self._jobsDescriptiontree = FuncTree()

    def getMessageId(self):
        return 5656

    def initJobLevelUpMessage(self, param1=0, param2=None):
        self.newLevel = param1
        self.jobsDescription = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.newLevel = 0
        self.jobsDescription = JobDescription()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_JobLevelUpMessage(param1)

    def serializeAs_JobLevelUpMessage(self, param1):
        if self.newLevel < 0 or self.newLevel > 255:
            raise RuntimeError("Forbidden value (" + str(self.newLevel) + ") on element newLevel.")
        param1.write_byte(self.newLevel)
        self.jobsDescription.serializeAs_JobDescription(param1)

    def deserialize(self, param1):
        self.deserializeAs_JobLevelUpMessage(param1)

    def deserializeAs_JobLevelUpMessage(self, param1):
        self._newLevelFunc(param1)
        self.jobsDescription = JobDescription()
        self.jobsDescription.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_JobLevelUpMessage(param1)

    def deserializeAsyncAs_JobLevelUpMessage(self, param1):
        param1.add_child(self._newLevelFunc)
        self._jobsDescriptiontree = param1.add_child(self._jobsDescriptiontreeFunc)

    def _newLevelFunc(self, param1):
        self.newLevel = param1.read_unsigned_byte()
        if self.newLevel < 0 or self.newLevel > 255:
            raise RuntimeError("Forbidden value (" + str(self.newLevel) + ") on element of JobLevelUpMessage.newLevel.")

    def _jobsDescriptiontreeFunc(self, param1):
        self.jobsDescription = JobDescription()
        self.jobsDescription.deserializeAsync(self._jobsDescriptiontree)


class LockableChangeCodeMessage(NetworkMessage):
    protocolId = 5666

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.code = ""

    def getMessageId(self):
        return 5666

    def initLockableChangeCodeMessage(self, param1=""):
        self.code = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.code = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_LockableChangeCodeMessage(param1)

    def serializeAs_LockableChangeCodeMessage(self, param1):
        param1.write_utf(self.code)

    def deserialize(self, param1):
        self.deserializeAs_LockableChangeCodeMessage(param1)

    def deserializeAs_LockableChangeCodeMessage(self, param1):
        self._codeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_LockableChangeCodeMessage(param1)

    def deserializeAsyncAs_LockableChangeCodeMessage(self, param1):
        param1.add_child(self._codeFunc)

    def _codeFunc(self, param1):
        self.code = param1.read_utf()


class LockableCodeResultMessage(NetworkMessage):
    protocolId = 5672

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.result = 0

    def getMessageId(self):
        return 5672

    def initLockableCodeResultMessage(self, param1=0):
        self.result = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.result = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_LockableCodeResultMessage(param1)

    def serializeAs_LockableCodeResultMessage(self, param1):
        param1.write_byte(self.result)

    def deserialize(self, param1):
        self.deserializeAs_LockableCodeResultMessage(param1)

    def deserializeAs_LockableCodeResultMessage(self, param1):
        self._resultFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_LockableCodeResultMessage(param1)

    def deserializeAsyncAs_LockableCodeResultMessage(self, param1):
        param1.add_child(self._resultFunc)

    def _resultFunc(self, param1):
        self.result = param1.read_byte()
        if self.result < 0:
            raise RuntimeError("Forbidden value (" + str(self.result) + ") on element of LockableCodeResultMessage.result.")


class LockableShowCodeDialogMessage(NetworkMessage):
    protocolId = 5740

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.changeOrUse = False
        self.codeSize = 0

    def getMessageId(self):
        return 5740

    def initLockableShowCodeDialogMessage(self, param1=False, param2=0):
        self.changeOrUse = param1
        self.codeSize = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.changeOrUse = False
        self.codeSize = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_LockableShowCodeDialogMessage(param1)

    def serializeAs_LockableShowCodeDialogMessage(self, param1):
        param1.write_boolean(self.changeOrUse)
        if self.codeSize < 0:
            raise RuntimeError("Forbidden value (" + str(self.codeSize) + ") on element codeSize.")
        param1.write_byte(self.codeSize)

    def deserialize(self, param1):
        self.deserializeAs_LockableShowCodeDialogMessage(param1)

    def deserializeAs_LockableShowCodeDialogMessage(self, param1):
        self._changeOrUseFunc(param1)
        self._codeSizeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_LockableShowCodeDialogMessage(param1)

    def deserializeAsyncAs_LockableShowCodeDialogMessage(self, param1):
        param1.add_child(self._changeOrUseFunc)
        param1.add_child(self._codeSizeFunc)

    def _changeOrUseFunc(self, param1):
        self.changeOrUse = param1.read_boolean()

    def _codeSizeFunc(self, param1):
        self.codeSize = param1.read_byte()
        if self.codeSize < 0:
            raise RuntimeError("Forbidden value (" + str(self.codeSize) + ") on element of LockableShowCodeDialogMessage.codeSize.")


class LockableStateUpdateAbstractMessage(NetworkMessage):
    protocolId = 5671

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.locked = False

    def getMessageId(self):
        return 5671

    def initLockableStateUpdateAbstractMessage(self, param1=False):
        self.locked = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.locked = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_LockableStateUpdateAbstractMessage(param1)

    def serializeAs_LockableStateUpdateAbstractMessage(self, param1):
        param1.write_boolean(self.locked)

    def deserialize(self, param1):
        self.deserializeAs_LockableStateUpdateAbstractMessage(param1)

    def deserializeAs_LockableStateUpdateAbstractMessage(self, param1):
        self._lockedFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_LockableStateUpdateAbstractMessage(param1)

    def deserializeAsyncAs_LockableStateUpdateAbstractMessage(self, param1):
        param1.add_child(self._lockedFunc)

    def _lockedFunc(self, param1):
        self.locked = param1.read_boolean()


class LockableUseCodeMessage(NetworkMessage):
    protocolId = 5667

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.code = ""

    def getMessageId(self):
        return 5667

    def initLockableUseCodeMessage(self, param1=""):
        self.code = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.code = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_LockableUseCodeMessage(param1)

    def serializeAs_LockableUseCodeMessage(self, param1):
        param1.write_utf(self.code)

    def deserialize(self, param1):
        self.deserializeAs_LockableUseCodeMessage(param1)

    def deserializeAs_LockableUseCodeMessage(self, param1):
        self._codeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_LockableUseCodeMessage(param1)

    def deserializeAsyncAs_LockableUseCodeMessage(self, param1):
        param1.add_child(self._codeFunc)

    def _codeFunc(self, param1):
        self.code = param1.read_utf()


class AlliancePrismDialogQuestionMessage(NetworkMessage):
    protocolId = 6448

    def getMessageId(self):
        return 6448

    def initAlliancePrismDialogQuestionMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_AlliancePrismDialogQuestionMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_AlliancePrismDialogQuestionMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_AlliancePrismDialogQuestionMessage(self, param1):
        pass


class EntityTalkMessage(NetworkMessage):
    protocolId = 6110

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.entityId = 0
        self.textId = 0
        self.parameters = []
        self._parameterstree = FuncTree()

    def getMessageId(self):
        return 6110

    def initEntityTalkMessage(self, param1=0, param2=0, param3=[]):
        self.entityId = param1
        self.textId = param2
        self.parameters = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.entityId = 0
        self.textId = 0
        self.parameters = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_EntityTalkMessage(param1)

    def serializeAs_EntityTalkMessage(self, param1):
        if self.entityId < -9007199254740990 or self.entityId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.entityId) + ") on element entityId.")
        param1.write_double(self.entityId)
        if self.textId < 0:
            raise RuntimeError("Forbidden value (" + str(self.textId) + ") on element textId.")
        param1.write_var_short(self.textId)
        param1.write_short(len(self.parameters))
        _loc2_ = 0
        while _loc2_ < len(self.parameters):
            param1.write_utf(self.parameters[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_EntityTalkMessage(param1)

    def deserializeAs_EntityTalkMessage(self, param1):
        _loc4_ = None
        self._entityIdFunc(param1)
        self._textIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_utf()
            self.parameters.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_EntityTalkMessage(param1)

    def deserializeAsyncAs_EntityTalkMessage(self, param1):
        param1.add_child(self._entityIdFunc)
        param1.add_child(self._textIdFunc)
        self._parameterstree = param1.add_child(self._parameterstreeFunc)

    def _entityIdFunc(self, param1):
        self.entityId = param1.read_double()
        if self.entityId < -9007199254740990 or self.entityId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.entityId) + ") on element of EntityTalkMessage.entityId.")

    def _textIdFunc(self, param1):
        self.textId = param1.read_var_uh_short()
        if self.textId < 0:
            raise RuntimeError("Forbidden value (" + str(self.textId) + ") on element of EntityTalkMessage.textId.")

    def _parameterstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._parameterstree.add_child(self._parametersFunc)
            _loc3_ += 1

    def _parametersFunc(self, param1):
        _loc2_ = param1.read_utf()
        self.parameters.append(_loc2_)


class MapNpcsQuestStatusUpdateMessage(NetworkMessage):
    protocolId = 5642

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.mapId = 0
        self.npcsIdsWithQuest = []
        self.questFlags = []
        self.npcsIdsWithoutQuest = []
        self._npcsIdsWithQuesttree = FuncTree()
        self._questFlagstree = FuncTree()
        self._npcsIdsWithoutQuesttree = FuncTree()

    def getMessageId(self):
        return 5642

    def initMapNpcsQuestStatusUpdateMessage(self, param1=0, param2=[], param3=[], param4=[]):
        self.mapId = param1
        self.npcsIdsWithQuest = param2
        self.questFlags = param3
        self.npcsIdsWithoutQuest = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.mapId = 0
        self.npcsIdsWithQuest = []
        self.questFlags = []
        self.npcsIdsWithoutQuest = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MapNpcsQuestStatusUpdateMessage(param1)

    def serializeAs_MapNpcsQuestStatusUpdateMessage(self, param1):
        param1.write_int(self.mapId)
        param1.write_short(len(self.npcsIdsWithQuest))
        _loc2_ = 0
        while _loc2_ < len(self.npcsIdsWithQuest):
            param1.write_int(self.npcsIdsWithQuest[_loc2_])
            _loc2_ += 1
        param1.write_short(len(self.questFlags))
        _loc3_ = 0
        while _loc3_ < len(self.questFlags):
            as_parent(self.questFlags[_loc3_], GameRolePlayNpcQuestFlag).serializeAs_GameRolePlayNpcQuestFlag(param1)
            _loc3_ += 1
        param1.write_short(len(self.npcsIdsWithoutQuest))
        _loc4_ = 0
        while _loc4_ < len(self.npcsIdsWithoutQuest):
            param1.write_int(self.npcsIdsWithoutQuest[_loc4_])
            _loc4_ += 1

    def deserialize(self, param1):
        self.deserializeAs_MapNpcsQuestStatusUpdateMessage(param1)

    def deserializeAs_MapNpcsQuestStatusUpdateMessage(self, param1):
        _loc8_ = 0
        _loc9_ = None
        _loc10_ = 0
        self._mapIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc8_ = param1.read_int()
            self.npcsIdsWithQuest.append(_loc8_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc9_ = GameRolePlayNpcQuestFlag()
            _loc9_.deserialize(param1)
            self.questFlags.append(_loc9_)
            _loc5_ += 1
        _loc6_ = param1.read_unsigned_short()
        _loc7_ = 0
        while _loc7_ < _loc6_:
            _loc10_ = param1.read_int()
            self.npcsIdsWithoutQuest.append(_loc10_)
            _loc7_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MapNpcsQuestStatusUpdateMessage(param1)

    def deserializeAsyncAs_MapNpcsQuestStatusUpdateMessage(self, param1):
        param1.add_child(self._mapIdFunc)
        self._npcsIdsWithQuesttree = param1.add_child(self._npcsIdsWithQuesttreeFunc)
        self._questFlagstree = param1.add_child(self._questFlagstreeFunc)
        self._npcsIdsWithoutQuesttree = param1.add_child(self._npcsIdsWithoutQuesttreeFunc)

    def _mapIdFunc(self, param1):
        self.mapId = param1.read_int()

    def _npcsIdsWithQuesttreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._npcsIdsWithQuesttree.add_child(self._npcsIdsWithQuestFunc)
            _loc3_ += 1

    def _npcsIdsWithQuestFunc(self, param1):
        _loc2_ = param1.read_int()
        self.npcsIdsWithQuest.append(_loc2_)

    def _questFlagstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._questFlagstree.add_child(self._questFlagsFunc)
            _loc3_ += 1

    def _questFlagsFunc(self, param1):
        _loc2_ = GameRolePlayNpcQuestFlag()
        _loc2_.deserialize(param1)
        self.questFlags.append(_loc2_)

    def _npcsIdsWithoutQuesttreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._npcsIdsWithoutQuesttree.add_child(self._npcsIdsWithoutQuestFunc)
            _loc3_ += 1

    def _npcsIdsWithoutQuestFunc(self, param1):
        _loc2_ = param1.read_int()
        self.npcsIdsWithoutQuest.append(_loc2_)


class NpcDialogCreationMessage(NetworkMessage):
    protocolId = 5618

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.mapId = 0
        self.npcId = 0

    def getMessageId(self):
        return 5618

    def initNpcDialogCreationMessage(self, param1=0, param2=0):
        self.mapId = param1
        self.npcId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.mapId = 0
        self.npcId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_NpcDialogCreationMessage(param1)

    def serializeAs_NpcDialogCreationMessage(self, param1):
        param1.write_int(self.mapId)
        param1.write_int(self.npcId)

    def deserialize(self, param1):
        self.deserializeAs_NpcDialogCreationMessage(param1)

    def deserializeAs_NpcDialogCreationMessage(self, param1):
        self._mapIdFunc(param1)
        self._npcIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_NpcDialogCreationMessage(param1)

    def deserializeAsyncAs_NpcDialogCreationMessage(self, param1):
        param1.add_child(self._mapIdFunc)
        param1.add_child(self._npcIdFunc)

    def _mapIdFunc(self, param1):
        self.mapId = param1.read_int()

    def _npcIdFunc(self, param1):
        self.npcId = param1.read_int()


class NpcDialogQuestionMessage(NetworkMessage):
    protocolId = 5617

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.messageId = 0
        self.dialogParams = []
        self.visibleReplies = []
        self._dialogParamstree = FuncTree()
        self._visibleRepliestree = FuncTree()

    def getMessageId(self):
        return 5617

    def initNpcDialogQuestionMessage(self, param1=0, param2=[], param3=[]):
        self.messageId = param1
        self.dialogParams = param2
        self.visibleReplies = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.messageId = 0
        self.dialogParams = []
        self.visibleReplies = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_NpcDialogQuestionMessage(param1)

    def serializeAs_NpcDialogQuestionMessage(self, param1):
        if self.messageId < 0:
            raise RuntimeError("Forbidden value (" + str(self.messageId) + ") on element messageId.")
        param1.write_var_int(self.messageId)
        param1.write_short(len(self.dialogParams))
        _loc2_ = 0
        while _loc2_ < len(self.dialogParams):
            param1.write_utf(self.dialogParams[_loc2_])
            _loc2_ += 1
        param1.write_short(len(self.visibleReplies))
        _loc3_ = 0
        while _loc3_ < len(self.visibleReplies):
            if self.visibleReplies[_loc3_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.visibleReplies[_loc3_]) + ") on element 3 (starting at 1) of visibleReplies.")
            param1.write_var_int(self.visibleReplies[_loc3_])
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_NpcDialogQuestionMessage(param1)

    def deserializeAs_NpcDialogQuestionMessage(self, param1):
        _loc6_ = None
        _loc7_ = 0
        self._messageIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = param1.read_utf()
            self.dialogParams.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = param1.read_var_uh_int()
            if _loc7_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc7_) + ") on elements of visibleReplies.")
            self.visibleReplies.append(_loc7_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_NpcDialogQuestionMessage(param1)

    def deserializeAsyncAs_NpcDialogQuestionMessage(self, param1):
        param1.add_child(self._messageIdFunc)
        self._dialogParamstree = param1.add_child(self._dialogParamstreeFunc)
        self._visibleRepliestree = param1.add_child(self._visibleRepliestreeFunc)

    def _messageIdFunc(self, param1):
        self.messageId = param1.read_var_uh_int()
        if self.messageId < 0:
            raise RuntimeError("Forbidden value (" + str(self.messageId) + ") on element of NpcDialogQuestionMessage.messageId.")

    def _dialogParamstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._dialogParamstree.add_child(self._dialogParamsFunc)
            _loc3_ += 1

    def _dialogParamsFunc(self, param1):
        _loc2_ = param1.read_utf()
        self.dialogParams.append(_loc2_)

    def _visibleRepliestreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._visibleRepliestree.add_child(self._visibleRepliesFunc)
            _loc3_ += 1

    def _visibleRepliesFunc(self, param1):
        _loc2_ = param1.read_var_uh_int()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of visibleReplies.")
        self.visibleReplies.append(_loc2_)


class NpcDialogReplyMessage(NetworkMessage):
    protocolId = 5616

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.replyId = 0

    def getMessageId(self):
        return 5616

    def initNpcDialogReplyMessage(self, param1=0):
        self.replyId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.replyId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_NpcDialogReplyMessage(param1)

    def serializeAs_NpcDialogReplyMessage(self, param1):
        if self.replyId < 0:
            raise RuntimeError("Forbidden value (" + str(self.replyId) + ") on element replyId.")
        param1.write_var_int(self.replyId)

    def deserialize(self, param1):
        self.deserializeAs_NpcDialogReplyMessage(param1)

    def deserializeAs_NpcDialogReplyMessage(self, param1):
        self._replyIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_NpcDialogReplyMessage(param1)

    def deserializeAsyncAs_NpcDialogReplyMessage(self, param1):
        param1.add_child(self._replyIdFunc)

    def _replyIdFunc(self, param1):
        self.replyId = param1.read_var_uh_int()
        if self.replyId < 0:
            raise RuntimeError("Forbidden value (" + str(self.replyId) + ") on element of NpcDialogReplyMessage.replyId.")


class NpcGenericActionFailureMessage(NetworkMessage):
    protocolId = 5900

    def getMessageId(self):
        return 5900

    def initNpcGenericActionFailureMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_NpcGenericActionFailureMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_NpcGenericActionFailureMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_NpcGenericActionFailureMessage(self, param1):
        pass


class NpcGenericActionRequestMessage(NetworkMessage):
    protocolId = 5898

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.npcId = 0
        self.npcActionId = 0
        self.npcMapId = 0

    def getMessageId(self):
        return 5898

    def initNpcGenericActionRequestMessage(self, param1=0, param2=0, param3=0):
        self.npcId = param1
        self.npcActionId = param2
        self.npcMapId = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.npcId = 0
        self.npcActionId = 0
        self.npcMapId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        if HASH_FUNCTION != None:
            HASH_FUNCTION(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_NpcGenericActionRequestMessage(param1)

    def serializeAs_NpcGenericActionRequestMessage(self, param1):
        param1.write_int(self.npcId)
        if self.npcActionId < 0:
            raise RuntimeError("Forbidden value (" + str(self.npcActionId) + ") on element npcActionId.")
        param1.write_byte(self.npcActionId)
        param1.write_int(self.npcMapId)

    def deserialize(self, param1):
        self.deserializeAs_NpcGenericActionRequestMessage(param1)

    def deserializeAs_NpcGenericActionRequestMessage(self, param1):
        self._npcIdFunc(param1)
        self._npcActionIdFunc(param1)
        self._npcMapIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_NpcGenericActionRequestMessage(param1)

    def deserializeAsyncAs_NpcGenericActionRequestMessage(self, param1):
        param1.add_child(self._npcIdFunc)
        param1.add_child(self._npcActionIdFunc)
        param1.add_child(self._npcMapIdFunc)

    def _npcIdFunc(self, param1):
        self.npcId = param1.read_int()

    def _npcActionIdFunc(self, param1):
        self.npcActionId = param1.read_byte()
        if self.npcActionId < 0:
            raise RuntimeError("Forbidden value (" + str(self.npcActionId) + ") on element of NpcGenericActionRequestMessage.npcActionId.")

    def _npcMapIdFunc(self, param1):
        self.npcMapId = param1.read_int()


class TaxCollectorDialogQuestionBasicMessage(NetworkMessage):
    protocolId = 5619

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.guildInfo = BasicGuildInformations()
        self._guildInfotree = FuncTree()

    def getMessageId(self):
        return 5619

    def initTaxCollectorDialogQuestionBasicMessage(self, param1=None):
        self.guildInfo = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.guildInfo = BasicGuildInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TaxCollectorDialogQuestionBasicMessage(param1)

    def serializeAs_TaxCollectorDialogQuestionBasicMessage(self, param1):
        self.guildInfo.serializeAs_BasicGuildInformations(param1)

    def deserialize(self, param1):
        self.deserializeAs_TaxCollectorDialogQuestionBasicMessage(param1)

    def deserializeAs_TaxCollectorDialogQuestionBasicMessage(self, param1):
        self.guildInfo = BasicGuildInformations()
        self.guildInfo.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TaxCollectorDialogQuestionBasicMessage(param1)

    def deserializeAsyncAs_TaxCollectorDialogQuestionBasicMessage(self, param1):
        self._guildInfotree = param1.add_child(self._guildInfotreeFunc)

    def _guildInfotreeFunc(self, param1):
        self.guildInfo = BasicGuildInformations()
        self.guildInfo.deserializeAsync(self._guildInfotree)


class ObjectGroundAddedMessage(NetworkMessage):
    protocolId = 3017

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.cellId = 0
        self.objectGID = 0

    def getMessageId(self):
        return 3017

    def initObjectGroundAddedMessage(self, param1=0, param2=0):
        self.cellId = param1
        self.objectGID = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.cellId = 0
        self.objectGID = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObjectGroundAddedMessage(param1)

    def serializeAs_ObjectGroundAddedMessage(self, param1):
        if self.cellId < 0 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element cellId.")
        param1.write_var_short(self.cellId)
        if self.objectGID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectGID) + ") on element objectGID.")
        param1.write_var_short(self.objectGID)

    def deserialize(self, param1):
        self.deserializeAs_ObjectGroundAddedMessage(param1)

    def deserializeAs_ObjectGroundAddedMessage(self, param1):
        self._cellIdFunc(param1)
        self._objectGIDFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObjectGroundAddedMessage(param1)

    def deserializeAsyncAs_ObjectGroundAddedMessage(self, param1):
        param1.add_child(self._cellIdFunc)
        param1.add_child(self._objectGIDFunc)

    def _cellIdFunc(self, param1):
        self.cellId = param1.read_var_uh_short()
        if self.cellId < 0 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element of ObjectGroundAddedMessage.cellId.")

    def _objectGIDFunc(self, param1):
        self.objectGID = param1.read_var_uh_short()
        if self.objectGID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectGID) + ") on element of ObjectGroundAddedMessage.objectGID.")


class ObjectGroundListAddedMessage(NetworkMessage):
    protocolId = 5925

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.cells = []
        self.referenceIds = []
        self._cellstree = FuncTree()
        self._referenceIdstree = FuncTree()

    def getMessageId(self):
        return 5925

    def initObjectGroundListAddedMessage(self, param1=[], param2=[]):
        self.cells = param1
        self.referenceIds = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.cells = []
        self.referenceIds = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObjectGroundListAddedMessage(param1)

    def serializeAs_ObjectGroundListAddedMessage(self, param1):
        param1.write_short(len(self.cells))
        _loc2_ = 0
        while _loc2_ < len(self.cells):
            if self.cells[_loc2_] < 0 or self.cells[_loc2_] > 559:
                raise RuntimeError("Forbidden value (" + str(self.cells[_loc2_]) + ") on element 1 (starting at 1) of cells.")
            param1.write_var_short(self.cells[_loc2_])
            _loc2_ += 1
        param1.write_short(len(self.referenceIds))
        _loc3_ = 0
        while _loc3_ < len(self.referenceIds):
            if self.referenceIds[_loc3_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.referenceIds[_loc3_]) + ") on element 2 (starting at 1) of referenceIds.")
            param1.write_var_short(self.referenceIds[_loc3_])
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ObjectGroundListAddedMessage(param1)

    def deserializeAs_ObjectGroundListAddedMessage(self, param1):
        _loc6_ = 0
        _loc7_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = param1.read_var_uh_short()
            if _loc6_ < 0 or _loc6_ > 559:
                raise RuntimeError("Forbidden value (" + str(_loc6_) + ") on elements of cells.")
            self.cells.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = param1.read_var_uh_short()
            if _loc7_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc7_) + ") on elements of referenceIds.")
            self.referenceIds.append(_loc7_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObjectGroundListAddedMessage(param1)

    def deserializeAsyncAs_ObjectGroundListAddedMessage(self, param1):
        self._cellstree = param1.add_child(self._cellstreeFunc)
        self._referenceIdstree = param1.add_child(self._referenceIdstreeFunc)

    def _cellstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._cellstree.add_child(self._cellsFunc)
            _loc3_ += 1

    def _cellsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0 or _loc2_ > 559:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of cells.")
        self.cells.append(_loc2_)

    def _referenceIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._referenceIdstree.add_child(self._referenceIdsFunc)
            _loc3_ += 1

    def _referenceIdsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of referenceIds.")
        self.referenceIds.append(_loc2_)


class ObjectGroundRemovedMessage(NetworkMessage):
    protocolId = 3014

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.cell = 0

    def getMessageId(self):
        return 3014

    def initObjectGroundRemovedMessage(self, param1=0):
        self.cell = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.cell = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObjectGroundRemovedMessage(param1)

    def serializeAs_ObjectGroundRemovedMessage(self, param1):
        if self.cell < 0 or self.cell > 559:
            raise RuntimeError("Forbidden value (" + str(self.cell) + ") on element cell.")
        param1.write_var_short(self.cell)

    def deserialize(self, param1):
        self.deserializeAs_ObjectGroundRemovedMessage(param1)

    def deserializeAs_ObjectGroundRemovedMessage(self, param1):
        self._cellFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObjectGroundRemovedMessage(param1)

    def deserializeAsyncAs_ObjectGroundRemovedMessage(self, param1):
        param1.add_child(self._cellFunc)

    def _cellFunc(self, param1):
        self.cell = param1.read_var_uh_short()
        if self.cell < 0 or self.cell > 559:
            raise RuntimeError("Forbidden value (" + str(self.cell) + ") on element of ObjectGroundRemovedMessage.cell.")


class ObjectGroundRemovedMultipleMessage(NetworkMessage):
    protocolId = 5944

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.cells = []
        self._cellstree = FuncTree()

    def getMessageId(self):
        return 5944

    def initObjectGroundRemovedMultipleMessage(self, param1=[]):
        self.cells = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.cells = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObjectGroundRemovedMultipleMessage(param1)

    def serializeAs_ObjectGroundRemovedMultipleMessage(self, param1):
        param1.write_short(len(self.cells))
        _loc2_ = 0
        while _loc2_ < len(self.cells):
            if self.cells[_loc2_] < 0 or self.cells[_loc2_] > 559:
                raise RuntimeError("Forbidden value (" + str(self.cells[_loc2_]) + ") on element 1 (starting at 1) of cells.")
            param1.write_var_short(self.cells[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ObjectGroundRemovedMultipleMessage(param1)

    def deserializeAs_ObjectGroundRemovedMultipleMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_uh_short()
            if _loc4_ < 0 or _loc4_ > 559:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of cells.")
            self.cells.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObjectGroundRemovedMultipleMessage(param1)

    def deserializeAsyncAs_ObjectGroundRemovedMultipleMessage(self, param1):
        self._cellstree = param1.add_child(self._cellstreeFunc)

    def _cellstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._cellstree.add_child(self._cellsFunc)
            _loc3_ += 1

    def _cellsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0 or _loc2_ > 559:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of cells.")
        self.cells.append(_loc2_)


class GameDataPlayFarmObjectAnimationMessage(NetworkMessage):
    protocolId = 6026

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.cellId = []
        self._cellIdtree = FuncTree()

    def getMessageId(self):
        return 6026

    def initGameDataPlayFarmObjectAnimationMessage(self, param1=[]):
        self.cellId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.cellId = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameDataPlayFarmObjectAnimationMessage(param1)

    def serializeAs_GameDataPlayFarmObjectAnimationMessage(self, param1):
        param1.write_short(len(self.cellId))
        _loc2_ = 0
        while _loc2_ < len(self.cellId):
            if self.cellId[_loc2_] < 0 or self.cellId[_loc2_] > 559:
                raise RuntimeError("Forbidden value (" + str(self.cellId[_loc2_]) + ") on element 1 (starting at 1) of cellId.")
            param1.write_var_short(self.cellId[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GameDataPlayFarmObjectAnimationMessage(param1)

    def deserializeAs_GameDataPlayFarmObjectAnimationMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_uh_short()
            if _loc4_ < 0 or _loc4_ > 559:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of cellId.")
            self.cellId.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameDataPlayFarmObjectAnimationMessage(param1)

    def deserializeAsyncAs_GameDataPlayFarmObjectAnimationMessage(self, param1):
        self._cellIdtree = param1.add_child(self._cellIdtreeFunc)

    def _cellIdtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._cellIdtree.add_child(self._cellIdFunc)
            _loc3_ += 1

    def _cellIdFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0 or _loc2_ > 559:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of cellId.")
        self.cellId.append(_loc2_)


class PaddockPropertiesMessage(NetworkMessage):
    protocolId = 5824

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.properties = PaddockInstancesInformations()
        self._propertiestree = FuncTree()

    def getMessageId(self):
        return 5824

    def initPaddockPropertiesMessage(self, param1=None):
        self.properties = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.properties = PaddockInstancesInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PaddockPropertiesMessage(param1)

    def serializeAs_PaddockPropertiesMessage(self, param1):
        self.properties.serializeAs_PaddockInstancesInformations(param1)

    def deserialize(self, param1):
        self.deserializeAs_PaddockPropertiesMessage(param1)

    def deserializeAs_PaddockPropertiesMessage(self, param1):
        self.properties = PaddockInstancesInformations()
        self.properties.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PaddockPropertiesMessage(param1)

    def deserializeAsyncAs_PaddockPropertiesMessage(self, param1):
        self._propertiestree = param1.add_child(self._propertiestreeFunc)

    def _propertiestreeFunc(self, param1):
        self.properties = PaddockInstancesInformations()
        self.properties.deserializeAsync(self._propertiestree)


class PaddockSellBuyDialogMessage(NetworkMessage):
    protocolId = 6018

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.bsell = False
        self.ownerId = 0
        self.price = 0

    def getMessageId(self):
        return 6018

    def initPaddockSellBuyDialogMessage(self, param1=False, param2=0, param3=0):
        self.bsell = param1
        self.ownerId = param2
        self.price = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.bsell = False
        self.ownerId = 0
        self.price = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PaddockSellBuyDialogMessage(param1)

    def serializeAs_PaddockSellBuyDialogMessage(self, param1):
        param1.write_boolean(self.bsell)
        if self.ownerId < 0:
            raise RuntimeError("Forbidden value (" + str(self.ownerId) + ") on element ownerId.")
        param1.write_var_int(self.ownerId)
        if self.price < 0 or self.price > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.price) + ") on element price.")
        param1.write_var_long(self.price)

    def deserialize(self, param1):
        self.deserializeAs_PaddockSellBuyDialogMessage(param1)

    def deserializeAs_PaddockSellBuyDialogMessage(self, param1):
        self._bsellFunc(param1)
        self._ownerIdFunc(param1)
        self._priceFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PaddockSellBuyDialogMessage(param1)

    def deserializeAsyncAs_PaddockSellBuyDialogMessage(self, param1):
        param1.add_child(self._bsellFunc)
        param1.add_child(self._ownerIdFunc)
        param1.add_child(self._priceFunc)

    def _bsellFunc(self, param1):
        self.bsell = param1.read_boolean()

    def _ownerIdFunc(self, param1):
        self.ownerId = param1.read_var_uh_int()
        if self.ownerId < 0:
            raise RuntimeError("Forbidden value (" + str(self.ownerId) + ") on element of PaddockSellBuyDialogMessage.ownerId.")

    def _priceFunc(self, param1):
        self.price = param1.read_var_uh_long()
        if self.price < 0 or self.price > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.price) + ") on element of PaddockSellBuyDialogMessage.price.")


class PaddockToSellFilterMessage(NetworkMessage):
    protocolId = 6161

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.areaId = 0
        self.atLeastNbMount = 0
        self.atLeastNbMachine = 0
        self.maxPrice = 0

    def getMessageId(self):
        return 6161

    def initPaddockToSellFilterMessage(self, param1=0, param2=0, param3=0, param4=0):
        self.areaId = param1
        self.atLeastNbMount = param2
        self.atLeastNbMachine = param3
        self.maxPrice = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.areaId = 0
        self.atLeastNbMount = 0
        self.atLeastNbMachine = 0
        self.maxPrice = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PaddockToSellFilterMessage(param1)

    def serializeAs_PaddockToSellFilterMessage(self, param1):
        param1.write_int(self.areaId)
        param1.write_byte(self.atLeastNbMount)
        param1.write_byte(self.atLeastNbMachine)
        if self.maxPrice < 0 or self.maxPrice > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.maxPrice) + ") on element maxPrice.")
        param1.write_var_long(self.maxPrice)

    def deserialize(self, param1):
        self.deserializeAs_PaddockToSellFilterMessage(param1)

    def deserializeAs_PaddockToSellFilterMessage(self, param1):
        self._areaIdFunc(param1)
        self._atLeastNbMountFunc(param1)
        self._atLeastNbMachineFunc(param1)
        self._maxPriceFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PaddockToSellFilterMessage(param1)

    def deserializeAsyncAs_PaddockToSellFilterMessage(self, param1):
        param1.add_child(self._areaIdFunc)
        param1.add_child(self._atLeastNbMountFunc)
        param1.add_child(self._atLeastNbMachineFunc)
        param1.add_child(self._maxPriceFunc)

    def _areaIdFunc(self, param1):
        self.areaId = param1.read_int()

    def _atLeastNbMountFunc(self, param1):
        self.atLeastNbMount = param1.read_byte()

    def _atLeastNbMachineFunc(self, param1):
        self.atLeastNbMachine = param1.read_byte()

    def _maxPriceFunc(self, param1):
        self.maxPrice = param1.read_var_uh_long()
        if self.maxPrice < 0 or self.maxPrice > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.maxPrice) + ") on element of PaddockToSellFilterMessage.maxPrice.")


class PaddockToSellListMessage(NetworkMessage):
    protocolId = 6138

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.pageIndex = 0
        self.totalPage = 0
        self.paddockList = []
        self._paddockListtree = FuncTree()

    def getMessageId(self):
        return 6138

    def initPaddockToSellListMessage(self, param1=0, param2=0, param3=[]):
        self.pageIndex = param1
        self.totalPage = param2
        self.paddockList = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.pageIndex = 0
        self.totalPage = 0
        self.paddockList = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PaddockToSellListMessage(param1)

    def serializeAs_PaddockToSellListMessage(self, param1):
        if self.pageIndex < 0:
            raise RuntimeError("Forbidden value (" + str(self.pageIndex) + ") on element pageIndex.")
        param1.write_var_short(self.pageIndex)
        if self.totalPage < 0:
            raise RuntimeError("Forbidden value (" + str(self.totalPage) + ") on element totalPage.")
        param1.write_var_short(self.totalPage)
        param1.write_short(len(self.paddockList))
        _loc2_ = 0
        while _loc2_ < len(self.paddockList):
            as_parent(self.paddockList[_loc2_], PaddockInformationsForSell).serializeAs_PaddockInformationsForSell(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_PaddockToSellListMessage(param1)

    def deserializeAs_PaddockToSellListMessage(self, param1):
        _loc4_ = None
        self._pageIndexFunc(param1)
        self._totalPageFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = PaddockInformationsForSell()
            _loc4_.deserialize(param1)
            self.paddockList.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PaddockToSellListMessage(param1)

    def deserializeAsyncAs_PaddockToSellListMessage(self, param1):
        param1.add_child(self._pageIndexFunc)
        param1.add_child(self._totalPageFunc)
        self._paddockListtree = param1.add_child(self._paddockListtreeFunc)

    def _pageIndexFunc(self, param1):
        self.pageIndex = param1.read_var_uh_short()
        if self.pageIndex < 0:
            raise RuntimeError("Forbidden value (" + str(self.pageIndex) + ") on element of PaddockToSellListMessage.pageIndex.")

    def _totalPageFunc(self, param1):
        self.totalPage = param1.read_var_uh_short()
        if self.totalPage < 0:
            raise RuntimeError("Forbidden value (" + str(self.totalPage) + ") on element of PaddockToSellListMessage.totalPage.")

    def _paddockListtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._paddockListtree.add_child(self._paddockListFunc)
            _loc3_ += 1

    def _paddockListFunc(self, param1):
        _loc2_ = PaddockInformationsForSell()
        _loc2_.deserialize(param1)
        self.paddockList.append(_loc2_)


class PaddockToSellListRequestMessage(NetworkMessage):
    protocolId = 6141

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.pageIndex = 0

    def getMessageId(self):
        return 6141

    def initPaddockToSellListRequestMessage(self, param1=0):
        self.pageIndex = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.pageIndex = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PaddockToSellListRequestMessage(param1)

    def serializeAs_PaddockToSellListRequestMessage(self, param1):
        if self.pageIndex < 0:
            raise RuntimeError("Forbidden value (" + str(self.pageIndex) + ") on element pageIndex.")
        param1.write_var_short(self.pageIndex)

    def deserialize(self, param1):
        self.deserializeAs_PaddockToSellListRequestMessage(param1)

    def deserializeAs_PaddockToSellListRequestMessage(self, param1):
        self._pageIndexFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PaddockToSellListRequestMessage(param1)

    def deserializeAsyncAs_PaddockToSellListRequestMessage(self, param1):
        param1.add_child(self._pageIndexFunc)

    def _pageIndexFunc(self, param1):
        self.pageIndex = param1.read_var_uh_short()
        if self.pageIndex < 0:
            raise RuntimeError("Forbidden value (" + str(self.pageIndex) + ") on element of PaddockToSellListRequestMessage.pageIndex.")


class AbstractPartyMessage(NetworkMessage):
    protocolId = 6274

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.partyId = 0

    def getMessageId(self):
        return 6274

    def initAbstractPartyMessage(self, param1=0):
        self.partyId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.partyId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AbstractPartyMessage(param1)

    def serializeAs_AbstractPartyMessage(self, param1):
        if self.partyId < 0:
            raise RuntimeError("Forbidden value (" + str(self.partyId) + ") on element partyId.")
        param1.write_var_int(self.partyId)

    def deserialize(self, param1):
        self.deserializeAs_AbstractPartyMessage(param1)

    def deserializeAs_AbstractPartyMessage(self, param1):
        self._partyIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AbstractPartyMessage(param1)

    def deserializeAsyncAs_AbstractPartyMessage(self, param1):
        param1.add_child(self._partyIdFunc)

    def _partyIdFunc(self, param1):
        self.partyId = param1.read_var_uh_int()
        if self.partyId < 0:
            raise RuntimeError("Forbidden value (" + str(self.partyId) + ") on element of AbstractPartyMessage.partyId.")


class DungeonPartyFinderAvailableDungeonsMessage(NetworkMessage):
    protocolId = 6242

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dungeonIds = []
        self._dungeonIdstree = FuncTree()

    def getMessageId(self):
        return 6242

    def initDungeonPartyFinderAvailableDungeonsMessage(self, param1=[]):
        self.dungeonIds = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.dungeonIds = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DungeonPartyFinderAvailableDungeonsMessage(param1)

    def serializeAs_DungeonPartyFinderAvailableDungeonsMessage(self, param1):
        param1.write_short(len(self.dungeonIds))
        _loc2_ = 0
        while _loc2_ < len(self.dungeonIds):
            if self.dungeonIds[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.dungeonIds[_loc2_]) + ") on element 1 (starting at 1) of dungeonIds.")
            param1.write_var_short(self.dungeonIds[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_DungeonPartyFinderAvailableDungeonsMessage(param1)

    def deserializeAs_DungeonPartyFinderAvailableDungeonsMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_uh_short()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of dungeonIds.")
            self.dungeonIds.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DungeonPartyFinderAvailableDungeonsMessage(param1)

    def deserializeAsyncAs_DungeonPartyFinderAvailableDungeonsMessage(self, param1):
        self._dungeonIdstree = param1.add_child(self._dungeonIdstreeFunc)

    def _dungeonIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._dungeonIdstree.add_child(self._dungeonIdsFunc)
            _loc3_ += 1

    def _dungeonIdsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of dungeonIds.")
        self.dungeonIds.append(_loc2_)


class DungeonPartyFinderAvailableDungeonsRequestMessage(NetworkMessage):
    protocolId = 6240

    def getMessageId(self):
        return 6240

    def initDungeonPartyFinderAvailableDungeonsRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_DungeonPartyFinderAvailableDungeonsRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_DungeonPartyFinderAvailableDungeonsRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_DungeonPartyFinderAvailableDungeonsRequestMessage(self, param1):
        pass


class DungeonPartyFinderListenErrorMessage(NetworkMessage):
    protocolId = 6248

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dungeonId = 0

    def getMessageId(self):
        return 6248

    def initDungeonPartyFinderListenErrorMessage(self, param1=0):
        self.dungeonId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.dungeonId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DungeonPartyFinderListenErrorMessage(param1)

    def serializeAs_DungeonPartyFinderListenErrorMessage(self, param1):
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element dungeonId.")
        param1.write_var_short(self.dungeonId)

    def deserialize(self, param1):
        self.deserializeAs_DungeonPartyFinderListenErrorMessage(param1)

    def deserializeAs_DungeonPartyFinderListenErrorMessage(self, param1):
        self._dungeonIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DungeonPartyFinderListenErrorMessage(param1)

    def deserializeAsyncAs_DungeonPartyFinderListenErrorMessage(self, param1):
        param1.add_child(self._dungeonIdFunc)

    def _dungeonIdFunc(self, param1):
        self.dungeonId = param1.read_var_uh_short()
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element of DungeonPartyFinderListenErrorMessage.dungeonId.")


class DungeonPartyFinderListenRequestMessage(NetworkMessage):
    protocolId = 6246

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dungeonId = 0

    def getMessageId(self):
        return 6246

    def initDungeonPartyFinderListenRequestMessage(self, param1=0):
        self.dungeonId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.dungeonId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DungeonPartyFinderListenRequestMessage(param1)

    def serializeAs_DungeonPartyFinderListenRequestMessage(self, param1):
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element dungeonId.")
        param1.write_var_short(self.dungeonId)

    def deserialize(self, param1):
        self.deserializeAs_DungeonPartyFinderListenRequestMessage(param1)

    def deserializeAs_DungeonPartyFinderListenRequestMessage(self, param1):
        self._dungeonIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DungeonPartyFinderListenRequestMessage(param1)

    def deserializeAsyncAs_DungeonPartyFinderListenRequestMessage(self, param1):
        param1.add_child(self._dungeonIdFunc)

    def _dungeonIdFunc(self, param1):
        self.dungeonId = param1.read_var_uh_short()
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element of DungeonPartyFinderListenRequestMessage.dungeonId.")


class DungeonPartyFinderRegisterErrorMessage(NetworkMessage):
    protocolId = 6243

    def getMessageId(self):
        return 6243

    def initDungeonPartyFinderRegisterErrorMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_DungeonPartyFinderRegisterErrorMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_DungeonPartyFinderRegisterErrorMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_DungeonPartyFinderRegisterErrorMessage(self, param1):
        pass


class DungeonPartyFinderRegisterRequestMessage(NetworkMessage):
    protocolId = 6249

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dungeonIds = []
        self._dungeonIdstree = FuncTree()

    def getMessageId(self):
        return 6249

    def initDungeonPartyFinderRegisterRequestMessage(self, param1=[]):
        self.dungeonIds = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.dungeonIds = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DungeonPartyFinderRegisterRequestMessage(param1)

    def serializeAs_DungeonPartyFinderRegisterRequestMessage(self, param1):
        param1.write_short(len(self.dungeonIds))
        _loc2_ = 0
        while _loc2_ < len(self.dungeonIds):
            if self.dungeonIds[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.dungeonIds[_loc2_]) + ") on element 1 (starting at 1) of dungeonIds.")
            param1.write_var_short(self.dungeonIds[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_DungeonPartyFinderRegisterRequestMessage(param1)

    def deserializeAs_DungeonPartyFinderRegisterRequestMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_uh_short()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of dungeonIds.")
            self.dungeonIds.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DungeonPartyFinderRegisterRequestMessage(param1)

    def deserializeAsyncAs_DungeonPartyFinderRegisterRequestMessage(self, param1):
        self._dungeonIdstree = param1.add_child(self._dungeonIdstreeFunc)

    def _dungeonIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._dungeonIdstree.add_child(self._dungeonIdsFunc)
            _loc3_ += 1

    def _dungeonIdsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of dungeonIds.")
        self.dungeonIds.append(_loc2_)


class DungeonPartyFinderRegisterSuccessMessage(NetworkMessage):
    protocolId = 6241

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dungeonIds = []
        self._dungeonIdstree = FuncTree()

    def getMessageId(self):
        return 6241

    def initDungeonPartyFinderRegisterSuccessMessage(self, param1=[]):
        self.dungeonIds = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.dungeonIds = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DungeonPartyFinderRegisterSuccessMessage(param1)

    def serializeAs_DungeonPartyFinderRegisterSuccessMessage(self, param1):
        param1.write_short(len(self.dungeonIds))
        _loc2_ = 0
        while _loc2_ < len(self.dungeonIds):
            if self.dungeonIds[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.dungeonIds[_loc2_]) + ") on element 1 (starting at 1) of dungeonIds.")
            param1.write_var_short(self.dungeonIds[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_DungeonPartyFinderRegisterSuccessMessage(param1)

    def deserializeAs_DungeonPartyFinderRegisterSuccessMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_uh_short()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of dungeonIds.")
            self.dungeonIds.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DungeonPartyFinderRegisterSuccessMessage(param1)

    def deserializeAsyncAs_DungeonPartyFinderRegisterSuccessMessage(self, param1):
        self._dungeonIdstree = param1.add_child(self._dungeonIdstreeFunc)

    def _dungeonIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._dungeonIdstree.add_child(self._dungeonIdsFunc)
            _loc3_ += 1

    def _dungeonIdsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of dungeonIds.")
        self.dungeonIds.append(_loc2_)


class DungeonPartyFinderRoomContentMessage(NetworkMessage):
    protocolId = 6247

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dungeonId = 0
        self.players = []
        self._playerstree = FuncTree()

    def getMessageId(self):
        return 6247

    def initDungeonPartyFinderRoomContentMessage(self, param1=0, param2=[]):
        self.dungeonId = param1
        self.players = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.dungeonId = 0
        self.players = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DungeonPartyFinderRoomContentMessage(param1)

    def serializeAs_DungeonPartyFinderRoomContentMessage(self, param1):
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element dungeonId.")
        param1.write_var_short(self.dungeonId)
        param1.write_short(len(self.players))
        _loc2_ = 0
        while _loc2_ < len(self.players):
            as_parent(self.players[_loc2_], DungeonPartyFinderPlayer).serializeAs_DungeonPartyFinderPlayer(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_DungeonPartyFinderRoomContentMessage(param1)

    def deserializeAs_DungeonPartyFinderRoomContentMessage(self, param1):
        _loc4_ = None
        self._dungeonIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = DungeonPartyFinderPlayer()
            _loc4_.deserialize(param1)
            self.players.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DungeonPartyFinderRoomContentMessage(param1)

    def deserializeAsyncAs_DungeonPartyFinderRoomContentMessage(self, param1):
        param1.add_child(self._dungeonIdFunc)
        self._playerstree = param1.add_child(self._playerstreeFunc)

    def _dungeonIdFunc(self, param1):
        self.dungeonId = param1.read_var_uh_short()
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element of DungeonPartyFinderRoomContentMessage.dungeonId.")

    def _playerstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._playerstree.add_child(self._playersFunc)
            _loc3_ += 1

    def _playersFunc(self, param1):
        _loc2_ = DungeonPartyFinderPlayer()
        _loc2_.deserialize(param1)
        self.players.append(_loc2_)


class DungeonPartyFinderRoomContentUpdateMessage(NetworkMessage):
    protocolId = 6250

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dungeonId = 0
        self.addedPlayers = []
        self.removedPlayersIds = []
        self._addedPlayerstree = FuncTree()
        self._removedPlayersIdstree = FuncTree()

    def getMessageId(self):
        return 6250

    def initDungeonPartyFinderRoomContentUpdateMessage(self, param1=0, param2=[], param3=[]):
        self.dungeonId = param1
        self.addedPlayers = param2
        self.removedPlayersIds = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.dungeonId = 0
        self.addedPlayers = []
        self.removedPlayersIds = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DungeonPartyFinderRoomContentUpdateMessage(param1)

    def serializeAs_DungeonPartyFinderRoomContentUpdateMessage(self, param1):
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element dungeonId.")
        param1.write_var_short(self.dungeonId)
        param1.write_short(len(self.addedPlayers))
        _loc2_ = 0
        while _loc2_ < len(self.addedPlayers):
            as_parent(self.addedPlayers[_loc2_], DungeonPartyFinderPlayer).serializeAs_DungeonPartyFinderPlayer(param1)
            _loc2_ += 1
        param1.write_short(len(self.removedPlayersIds))
        _loc3_ = 0
        while _loc3_ < len(self.removedPlayersIds):
            if self.removedPlayersIds[_loc3_] < 0 or self.removedPlayersIds[_loc3_] > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(self.removedPlayersIds[_loc3_]) + ") on element 3 (starting at 1) of removedPlayersIds.")
            param1.write_var_long(self.removedPlayersIds[_loc3_])
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_DungeonPartyFinderRoomContentUpdateMessage(param1)

    def deserializeAs_DungeonPartyFinderRoomContentUpdateMessage(self, param1):
        _loc6_ = None
        _loc7_ = None
        self._dungeonIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = DungeonPartyFinderPlayer()
            _loc6_.deserialize(param1)
            self.addedPlayers.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = param1.read_var_uh_long()
            if _loc7_ < 0 or _loc7_ > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(_loc7_) + ") on elements of removedPlayersIds.")
            self.removedPlayersIds.append(_loc7_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DungeonPartyFinderRoomContentUpdateMessage(param1)

    def deserializeAsyncAs_DungeonPartyFinderRoomContentUpdateMessage(self, param1):
        param1.add_child(self._dungeonIdFunc)
        self._addedPlayerstree = param1.add_child(self._addedPlayerstreeFunc)
        self._removedPlayersIdstree = param1.add_child(self._removedPlayersIdstreeFunc)

    def _dungeonIdFunc(self, param1):
        self.dungeonId = param1.read_var_uh_short()
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element of DungeonPartyFinderRoomContentUpdateMessage.dungeonId.")

    def _addedPlayerstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._addedPlayerstree.add_child(self._addedPlayersFunc)
            _loc3_ += 1

    def _addedPlayersFunc(self, param1):
        _loc2_ = DungeonPartyFinderPlayer()
        _loc2_.deserialize(param1)
        self.addedPlayers.append(_loc2_)

    def _removedPlayersIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._removedPlayersIdstree.add_child(self._removedPlayersIdsFunc)
            _loc3_ += 1

    def _removedPlayersIdsFunc(self, param1):
        _loc2_ = param1.read_var_uh_long()
        if _loc2_ < 0 or _loc2_ > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of removedPlayersIds.")
        self.removedPlayersIds.append(_loc2_)


class PartyInvitationRequestMessage(NetworkMessage):
    protocolId = 5585

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.name = ""

    def getMessageId(self):
        return 5585

    def initPartyInvitationRequestMessage(self, param1=""):
        self.name = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.name = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyInvitationRequestMessage(param1)

    def serializeAs_PartyInvitationRequestMessage(self, param1):
        param1.write_utf(self.name)

    def deserialize(self, param1):
        self.deserializeAs_PartyInvitationRequestMessage(param1)

    def deserializeAs_PartyInvitationRequestMessage(self, param1):
        self._nameFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyInvitationRequestMessage(param1)

    def deserializeAsyncAs_PartyInvitationRequestMessage(self, param1):
        param1.add_child(self._nameFunc)

    def _nameFunc(self, param1):
        self.name = param1.read_utf()


class PurchasableDialogMessage(NetworkMessage):
    protocolId = 5739

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.buyOrSell = False
        self.purchasableId = 0
        self.purchasableInstanceId = 0
        self.secondHand = False
        self.price = 0

    def getMessageId(self):
        return 5739

    def initPurchasableDialogMessage(self, param1=False, param2=0, param3=0, param4=False, param5=0):
        self.buyOrSell = param1
        self.purchasableId = param2
        self.purchasableInstanceId = param3
        self.secondHand = param4
        self.price = param5
        self._isInitialized = True
        return self

    def reset(self):
        self.buyOrSell = False
        self.purchasableId = 0
        self.purchasableInstanceId = 0
        self.secondHand = False
        self.price = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PurchasableDialogMessage(param1)

    def serializeAs_PurchasableDialogMessage(self, param1):
        _loc2_ = 0
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,0,self.buyOrSell)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,1,self.secondHand)
        param1.write_byte(_loc2_)
        if self.purchasableId < 0:
            raise RuntimeError("Forbidden value (" + str(self.purchasableId) + ") on element purchasableId.")
        param1.write_var_int(self.purchasableId)
        if self.purchasableInstanceId < 0:
            raise RuntimeError("Forbidden value (" + str(self.purchasableInstanceId) + ") on element purchasableInstanceId.")
        param1.write_int(self.purchasableInstanceId)
        if self.price < 0 or self.price > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.price) + ") on element price.")
        param1.write_var_long(self.price)

    def deserialize(self, param1):
        self.deserializeAs_PurchasableDialogMessage(param1)

    def deserializeAs_PurchasableDialogMessage(self, param1):
        self.deserializeByteBoxes(param1)
        self._purchasableIdFunc(param1)
        self._purchasableInstanceIdFunc(param1)
        self._priceFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PurchasableDialogMessage(param1)

    def deserializeAsyncAs_PurchasableDialogMessage(self, param1):
        param1.add_child(self.deserializeByteBoxes)
        param1.add_child(self._purchasableIdFunc)
        param1.add_child(self._purchasableInstanceIdFunc)
        param1.add_child(self._priceFunc)

    def deserializeByteBoxes(self, param1):
        _loc2_ = param1.read_byte()
        self.buyOrSell = BooleanByteWrapper.get_flag(_loc2_,0)
        self.secondHand = BooleanByteWrapper.get_flag(_loc2_,1)

    def _purchasableIdFunc(self, param1):
        self.purchasableId = param1.read_var_uh_int()
        if self.purchasableId < 0:
            raise RuntimeError("Forbidden value (" + str(self.purchasableId) + ") on element of PurchasableDialogMessage.purchasableId.")

    def _purchasableInstanceIdFunc(self, param1):
        self.purchasableInstanceId = param1.read_int()
        if self.purchasableInstanceId < 0:
            raise RuntimeError("Forbidden value (" + str(self.purchasableInstanceId) + ") on element of PurchasableDialogMessage.purchasableInstanceId.")

    def _priceFunc(self, param1):
        self.price = param1.read_var_uh_long()
        if self.price < 0 or self.price > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.price) + ") on element of PurchasableDialogMessage.price.")


class FollowedQuestsMessage(NetworkMessage):
    protocolId = 6717

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.quests = []
        self._queststree = FuncTree()

    def getMessageId(self):
        return 6717

    def initFollowedQuestsMessage(self, param1=[]):
        self.quests = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.quests = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_FollowedQuestsMessage(param1)

    def serializeAs_FollowedQuestsMessage(self, param1):
        param1.write_short(len(self.quests))
        _loc2_ = 0
        while _loc2_ < len(self.quests):
            as_parent(self.quests[_loc2_], QuestActiveDetailedInformations).serializeAs_QuestActiveDetailedInformations(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_FollowedQuestsMessage(param1)

    def deserializeAs_FollowedQuestsMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = QuestActiveDetailedInformations()
            _loc4_.deserialize(param1)
            self.quests.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_FollowedQuestsMessage(param1)

    def deserializeAsyncAs_FollowedQuestsMessage(self, param1):
        self._queststree = param1.add_child(self._queststreeFunc)

    def _queststreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._queststree.add_child(self._questsFunc)
            _loc3_ += 1

    def _questsFunc(self, param1):
        _loc2_ = QuestActiveDetailedInformations()
        _loc2_.deserialize(param1)
        self.quests.append(_loc2_)


class FollowQuestObjectiveRequestMessage(NetworkMessage):
    protocolId = 6724

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.questId = 0
        self.objectiveId = 0

    def getMessageId(self):
        return 6724

    def initFollowQuestObjectiveRequestMessage(self, param1=0, param2=0):
        self.questId = param1
        self.objectiveId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.questId = 0
        self.objectiveId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_FollowQuestObjectiveRequestMessage(param1)

    def serializeAs_FollowQuestObjectiveRequestMessage(self, param1):
        if self.questId < 0:
            raise RuntimeError("Forbidden value (" + str(self.questId) + ") on element questId.")
        param1.write_var_short(self.questId)
        param1.write_short(self.objectiveId)

    def deserialize(self, param1):
        self.deserializeAs_FollowQuestObjectiveRequestMessage(param1)

    def deserializeAs_FollowQuestObjectiveRequestMessage(self, param1):
        self._questIdFunc(param1)
        self._objectiveIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_FollowQuestObjectiveRequestMessage(param1)

    def deserializeAsyncAs_FollowQuestObjectiveRequestMessage(self, param1):
        param1.add_child(self._questIdFunc)
        param1.add_child(self._objectiveIdFunc)

    def _questIdFunc(self, param1):
        self.questId = param1.read_var_uh_short()
        if self.questId < 0:
            raise RuntimeError("Forbidden value (" + str(self.questId) + ") on element of FollowQuestObjectiveRequestMessage.questId.")

    def _objectiveIdFunc(self, param1):
        self.objectiveId = param1.read_short()


class GuidedModeQuitRequestMessage(NetworkMessage):
    protocolId = 6092

    def getMessageId(self):
        return 6092

    def initGuidedModeQuitRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_GuidedModeQuitRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_GuidedModeQuitRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_GuidedModeQuitRequestMessage(self, param1):
        pass


class GuidedModeReturnRequestMessage(NetworkMessage):
    protocolId = 6088

    def getMessageId(self):
        return 6088

    def initGuidedModeReturnRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_GuidedModeReturnRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_GuidedModeReturnRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_GuidedModeReturnRequestMessage(self, param1):
        pass


class QuestListMessage(NetworkMessage):
    protocolId = 5626

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.finishedQuestsIds = []
        self.finishedQuestsCounts = []
        self.activeQuests = []
        self.reinitDoneQuestsIds = []
        self._finishedQuestsIdstree = FuncTree()
        self._finishedQuestsCountstree = FuncTree()
        self._activeQueststree = FuncTree()
        self._reinitDoneQuestsIdstree = FuncTree()

    def getMessageId(self):
        return 5626

    def initQuestListMessage(self, param1=[], param2=[], param3=[], param4=[]):
        self.finishedQuestsIds = param1
        self.finishedQuestsCounts = param2
        self.activeQuests = param3
        self.reinitDoneQuestsIds = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.finishedQuestsIds = []
        self.finishedQuestsCounts = []
        self.activeQuests = []
        self.reinitDoneQuestsIds = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_QuestListMessage(param1)

    def serializeAs_QuestListMessage(self, param1):
        param1.write_short(len(self.finishedQuestsIds))
        _loc2_ = 0
        while _loc2_ < len(self.finishedQuestsIds):
            if self.finishedQuestsIds[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.finishedQuestsIds[_loc2_]) + ") on element 1 (starting at 1) of finishedQuestsIds.")
            param1.write_var_short(self.finishedQuestsIds[_loc2_])
            _loc2_ += 1
        param1.write_short(len(self.finishedQuestsCounts))
        _loc3_ = 0
        while _loc3_ < len(self.finishedQuestsCounts):
            if self.finishedQuestsCounts[_loc3_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.finishedQuestsCounts[_loc3_]) + ") on element 2 (starting at 1) of finishedQuestsCounts.")
            param1.write_var_short(self.finishedQuestsCounts[_loc3_])
            _loc3_ += 1
        param1.write_short(len(self.activeQuests))
        _loc4_ = 0
        while _loc4_ < len(self.activeQuests):
            param1.write_short(as_parent(self.activeQuests[_loc4_], QuestActiveInformations).getTypeId())
            as_parent(self.activeQuests[_loc4_], QuestActiveInformations).serialize(param1)
            _loc4_ += 1
        param1.write_short(len(self.reinitDoneQuestsIds))
        _loc5_ = 0
        while _loc5_ < len(self.reinitDoneQuestsIds):
            if self.reinitDoneQuestsIds[_loc5_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.reinitDoneQuestsIds[_loc5_]) + ") on element 4 (starting at 1) of reinitDoneQuestsIds.")
            param1.write_var_short(self.reinitDoneQuestsIds[_loc5_])
            _loc5_ += 1

    def deserialize(self, param1):
        self.deserializeAs_QuestListMessage(param1)

    def deserializeAs_QuestListMessage(self, param1):
        _loc10_ = 0
        _loc11_ = 0
        _loc12_ = 0
        _loc13_ = None
        _loc14_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc10_ = param1.read_var_uh_short()
            if _loc10_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc10_) + ") on elements of finishedQuestsIds.")
            self.finishedQuestsIds.append(_loc10_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc11_ = param1.read_var_uh_short()
            if _loc11_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc11_) + ") on elements of finishedQuestsCounts.")
            self.finishedQuestsCounts.append(_loc11_)
            _loc5_ += 1
        _loc6_ = param1.read_unsigned_short()
        _loc7_ = 0
        while _loc7_ < _loc6_:
            _loc12_ = param1.read_unsigned_short()
            _loc13_ = ProtocolTypeManager.get_instance(QuestActiveInformations,_loc12_)
            _loc13_.deserialize(param1)
            self.activeQuests.append(_loc13_)
            _loc7_ += 1
        _loc8_ = param1.read_unsigned_short()
        _loc9_ = 0
        while _loc9_ < _loc8_:
            _loc14_ = param1.read_var_uh_short()
            if _loc14_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc14_) + ") on elements of reinitDoneQuestsIds.")
            self.reinitDoneQuestsIds.append(_loc14_)
            _loc9_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_QuestListMessage(param1)

    def deserializeAsyncAs_QuestListMessage(self, param1):
        self._finishedQuestsIdstree = param1.add_child(self._finishedQuestsIdstreeFunc)
        self._finishedQuestsCountstree = param1.add_child(self._finishedQuestsCountstreeFunc)
        self._activeQueststree = param1.add_child(self._activeQueststreeFunc)
        self._reinitDoneQuestsIdstree = param1.add_child(self._reinitDoneQuestsIdstreeFunc)

    def _finishedQuestsIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._finishedQuestsIdstree.add_child(self._finishedQuestsIdsFunc)
            _loc3_ += 1

    def _finishedQuestsIdsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of finishedQuestsIds.")
        self.finishedQuestsIds.append(_loc2_)

    def _finishedQuestsCountstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._finishedQuestsCountstree.add_child(self._finishedQuestsCountsFunc)
            _loc3_ += 1

    def _finishedQuestsCountsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of finishedQuestsCounts.")
        self.finishedQuestsCounts.append(_loc2_)

    def _activeQueststreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._activeQueststree.add_child(self._activeQuestsFunc)
            _loc3_ += 1

    def _activeQuestsFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(QuestActiveInformations,_loc2_)
        _loc3_.deserialize(param1)
        self.activeQuests.append(_loc3_)

    def _reinitDoneQuestsIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._reinitDoneQuestsIdstree.add_child(self._reinitDoneQuestsIdsFunc)
            _loc3_ += 1

    def _reinitDoneQuestsIdsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of reinitDoneQuestsIds.")
        self.reinitDoneQuestsIds.append(_loc2_)


class QuestListRequestMessage(NetworkMessage):
    protocolId = 5623

    def getMessageId(self):
        return 5623

    def initQuestListRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_QuestListRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_QuestListRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_QuestListRequestMessage(self, param1):
        pass


class QuestObjectiveValidatedMessage(NetworkMessage):
    protocolId = 6098

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.questId = 0
        self.objectiveId = 0

    def getMessageId(self):
        return 6098

    def initQuestObjectiveValidatedMessage(self, param1=0, param2=0):
        self.questId = param1
        self.objectiveId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.questId = 0
        self.objectiveId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_QuestObjectiveValidatedMessage(param1)

    def serializeAs_QuestObjectiveValidatedMessage(self, param1):
        if self.questId < 0:
            raise RuntimeError("Forbidden value (" + str(self.questId) + ") on element questId.")
        param1.write_var_short(self.questId)
        if self.objectiveId < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectiveId) + ") on element objectiveId.")
        param1.write_var_short(self.objectiveId)

    def deserialize(self, param1):
        self.deserializeAs_QuestObjectiveValidatedMessage(param1)

    def deserializeAs_QuestObjectiveValidatedMessage(self, param1):
        self._questIdFunc(param1)
        self._objectiveIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_QuestObjectiveValidatedMessage(param1)

    def deserializeAsyncAs_QuestObjectiveValidatedMessage(self, param1):
        param1.add_child(self._questIdFunc)
        param1.add_child(self._objectiveIdFunc)

    def _questIdFunc(self, param1):
        self.questId = param1.read_var_uh_short()
        if self.questId < 0:
            raise RuntimeError("Forbidden value (" + str(self.questId) + ") on element of QuestObjectiveValidatedMessage.questId.")

    def _objectiveIdFunc(self, param1):
        self.objectiveId = param1.read_var_uh_short()
        if self.objectiveId < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectiveId) + ") on element of QuestObjectiveValidatedMessage.objectiveId.")


class QuestObjectiveValidationMessage(NetworkMessage):
    protocolId = 6085

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.questId = 0
        self.objectiveId = 0

    def getMessageId(self):
        return 6085

    def initQuestObjectiveValidationMessage(self, param1=0, param2=0):
        self.questId = param1
        self.objectiveId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.questId = 0
        self.objectiveId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_QuestObjectiveValidationMessage(param1)

    def serializeAs_QuestObjectiveValidationMessage(self, param1):
        if self.questId < 0:
            raise RuntimeError("Forbidden value (" + str(self.questId) + ") on element questId.")
        param1.write_var_short(self.questId)
        if self.objectiveId < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectiveId) + ") on element objectiveId.")
        param1.write_var_short(self.objectiveId)

    def deserialize(self, param1):
        self.deserializeAs_QuestObjectiveValidationMessage(param1)

    def deserializeAs_QuestObjectiveValidationMessage(self, param1):
        self._questIdFunc(param1)
        self._objectiveIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_QuestObjectiveValidationMessage(param1)

    def deserializeAsyncAs_QuestObjectiveValidationMessage(self, param1):
        param1.add_child(self._questIdFunc)
        param1.add_child(self._objectiveIdFunc)

    def _questIdFunc(self, param1):
        self.questId = param1.read_var_uh_short()
        if self.questId < 0:
            raise RuntimeError("Forbidden value (" + str(self.questId) + ") on element of QuestObjectiveValidationMessage.questId.")

    def _objectiveIdFunc(self, param1):
        self.objectiveId = param1.read_var_uh_short()
        if self.objectiveId < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectiveId) + ") on element of QuestObjectiveValidationMessage.objectiveId.")


class QuestStartedMessage(NetworkMessage):
    protocolId = 6091

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.questId = 0

    def getMessageId(self):
        return 6091

    def initQuestStartedMessage(self, param1=0):
        self.questId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.questId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_QuestStartedMessage(param1)

    def serializeAs_QuestStartedMessage(self, param1):
        if self.questId < 0:
            raise RuntimeError("Forbidden value (" + str(self.questId) + ") on element questId.")
        param1.write_var_short(self.questId)

    def deserialize(self, param1):
        self.deserializeAs_QuestStartedMessage(param1)

    def deserializeAs_QuestStartedMessage(self, param1):
        self._questIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_QuestStartedMessage(param1)

    def deserializeAsyncAs_QuestStartedMessage(self, param1):
        param1.add_child(self._questIdFunc)

    def _questIdFunc(self, param1):
        self.questId = param1.read_var_uh_short()
        if self.questId < 0:
            raise RuntimeError("Forbidden value (" + str(self.questId) + ") on element of QuestStartedMessage.questId.")


class QuestStartRequestMessage(NetworkMessage):
    protocolId = 5643

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.questId = 0

    def getMessageId(self):
        return 5643

    def initQuestStartRequestMessage(self, param1=0):
        self.questId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.questId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_QuestStartRequestMessage(param1)

    def serializeAs_QuestStartRequestMessage(self, param1):
        if self.questId < 0:
            raise RuntimeError("Forbidden value (" + str(self.questId) + ") on element questId.")
        param1.write_var_short(self.questId)

    def deserialize(self, param1):
        self.deserializeAs_QuestStartRequestMessage(param1)

    def deserializeAs_QuestStartRequestMessage(self, param1):
        self._questIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_QuestStartRequestMessage(param1)

    def deserializeAsyncAs_QuestStartRequestMessage(self, param1):
        param1.add_child(self._questIdFunc)

    def _questIdFunc(self, param1):
        self.questId = param1.read_var_uh_short()
        if self.questId < 0:
            raise RuntimeError("Forbidden value (" + str(self.questId) + ") on element of QuestStartRequestMessage.questId.")


class QuestStepInfoMessage(NetworkMessage):
    protocolId = 5625

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.infos = QuestActiveInformations()
        self._infostree = FuncTree()

    def getMessageId(self):
        return 5625

    def initQuestStepInfoMessage(self, param1=None):
        self.infos = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.infos = QuestActiveInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_QuestStepInfoMessage(param1)

    def serializeAs_QuestStepInfoMessage(self, param1):
        param1.write_short(self.infos.getTypeId())
        self.infos.serialize(param1)

    def deserialize(self, param1):
        self.deserializeAs_QuestStepInfoMessage(param1)

    def deserializeAs_QuestStepInfoMessage(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.infos = ProtocolTypeManager.get_instance(QuestActiveInformations,_loc2_)
        self.infos.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_QuestStepInfoMessage(param1)

    def deserializeAsyncAs_QuestStepInfoMessage(self, param1):
        self._infostree = param1.add_child(self._infostreeFunc)

    def _infostreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.infos = ProtocolTypeManager.get_instance(QuestActiveInformations,_loc2_)
        self.infos.deserializeAsync(self._infostree)


class QuestStepInfoRequestMessage(NetworkMessage):
    protocolId = 5622

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.questId = 0

    def getMessageId(self):
        return 5622

    def initQuestStepInfoRequestMessage(self, param1=0):
        self.questId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.questId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_QuestStepInfoRequestMessage(param1)

    def serializeAs_QuestStepInfoRequestMessage(self, param1):
        if self.questId < 0:
            raise RuntimeError("Forbidden value (" + str(self.questId) + ") on element questId.")
        param1.write_var_short(self.questId)

    def deserialize(self, param1):
        self.deserializeAs_QuestStepInfoRequestMessage(param1)

    def deserializeAs_QuestStepInfoRequestMessage(self, param1):
        self._questIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_QuestStepInfoRequestMessage(param1)

    def deserializeAsyncAs_QuestStepInfoRequestMessage(self, param1):
        param1.add_child(self._questIdFunc)

    def _questIdFunc(self, param1):
        self.questId = param1.read_var_uh_short()
        if self.questId < 0:
            raise RuntimeError("Forbidden value (" + str(self.questId) + ") on element of QuestStepInfoRequestMessage.questId.")


class QuestStepStartedMessage(NetworkMessage):
    protocolId = 6096

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.questId = 0
        self.stepId = 0

    def getMessageId(self):
        return 6096

    def initQuestStepStartedMessage(self, param1=0, param2=0):
        self.questId = param1
        self.stepId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.questId = 0
        self.stepId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_QuestStepStartedMessage(param1)

    def serializeAs_QuestStepStartedMessage(self, param1):
        if self.questId < 0:
            raise RuntimeError("Forbidden value (" + str(self.questId) + ") on element questId.")
        param1.write_var_short(self.questId)
        if self.stepId < 0:
            raise RuntimeError("Forbidden value (" + str(self.stepId) + ") on element stepId.")
        param1.write_var_short(self.stepId)

    def deserialize(self, param1):
        self.deserializeAs_QuestStepStartedMessage(param1)

    def deserializeAs_QuestStepStartedMessage(self, param1):
        self._questIdFunc(param1)
        self._stepIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_QuestStepStartedMessage(param1)

    def deserializeAsyncAs_QuestStepStartedMessage(self, param1):
        param1.add_child(self._questIdFunc)
        param1.add_child(self._stepIdFunc)

    def _questIdFunc(self, param1):
        self.questId = param1.read_var_uh_short()
        if self.questId < 0:
            raise RuntimeError("Forbidden value (" + str(self.questId) + ") on element of QuestStepStartedMessage.questId.")

    def _stepIdFunc(self, param1):
        self.stepId = param1.read_var_uh_short()
        if self.stepId < 0:
            raise RuntimeError("Forbidden value (" + str(self.stepId) + ") on element of QuestStepStartedMessage.stepId.")


class QuestStepValidatedMessage(NetworkMessage):
    protocolId = 6099

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.questId = 0
        self.stepId = 0

    def getMessageId(self):
        return 6099

    def initQuestStepValidatedMessage(self, param1=0, param2=0):
        self.questId = param1
        self.stepId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.questId = 0
        self.stepId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_QuestStepValidatedMessage(param1)

    def serializeAs_QuestStepValidatedMessage(self, param1):
        if self.questId < 0:
            raise RuntimeError("Forbidden value (" + str(self.questId) + ") on element questId.")
        param1.write_var_short(self.questId)
        if self.stepId < 0:
            raise RuntimeError("Forbidden value (" + str(self.stepId) + ") on element stepId.")
        param1.write_var_short(self.stepId)

    def deserialize(self, param1):
        self.deserializeAs_QuestStepValidatedMessage(param1)

    def deserializeAs_QuestStepValidatedMessage(self, param1):
        self._questIdFunc(param1)
        self._stepIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_QuestStepValidatedMessage(param1)

    def deserializeAsyncAs_QuestStepValidatedMessage(self, param1):
        param1.add_child(self._questIdFunc)
        param1.add_child(self._stepIdFunc)

    def _questIdFunc(self, param1):
        self.questId = param1.read_var_uh_short()
        if self.questId < 0:
            raise RuntimeError("Forbidden value (" + str(self.questId) + ") on element of QuestStepValidatedMessage.questId.")

    def _stepIdFunc(self, param1):
        self.stepId = param1.read_var_uh_short()
        if self.stepId < 0:
            raise RuntimeError("Forbidden value (" + str(self.stepId) + ") on element of QuestStepValidatedMessage.stepId.")


class QuestValidatedMessage(NetworkMessage):
    protocolId = 6097

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.questId = 0

    def getMessageId(self):
        return 6097

    def initQuestValidatedMessage(self, param1=0):
        self.questId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.questId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_QuestValidatedMessage(param1)

    def serializeAs_QuestValidatedMessage(self, param1):
        if self.questId < 0:
            raise RuntimeError("Forbidden value (" + str(self.questId) + ") on element questId.")
        param1.write_var_short(self.questId)

    def deserialize(self, param1):
        self.deserializeAs_QuestValidatedMessage(param1)

    def deserializeAs_QuestValidatedMessage(self, param1):
        self._questIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_QuestValidatedMessage(param1)

    def deserializeAsyncAs_QuestValidatedMessage(self, param1):
        param1.add_child(self._questIdFunc)

    def _questIdFunc(self, param1):
        self.questId = param1.read_var_uh_short()
        if self.questId < 0:
            raise RuntimeError("Forbidden value (" + str(self.questId) + ") on element of QuestValidatedMessage.questId.")


class RefreshFollowedQuestsOrderRequestMessage(NetworkMessage):
    protocolId = 6722

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.quests = []
        self._queststree = FuncTree()

    def getMessageId(self):
        return 6722

    def initRefreshFollowedQuestsOrderRequestMessage(self, param1=[]):
        self.quests = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.quests = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_RefreshFollowedQuestsOrderRequestMessage(param1)

    def serializeAs_RefreshFollowedQuestsOrderRequestMessage(self, param1):
        param1.write_short(len(self.quests))
        _loc2_ = 0
        while _loc2_ < len(self.quests):
            if self.quests[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.quests[_loc2_]) + ") on element 1 (starting at 1) of quests.")
            param1.write_var_short(self.quests[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_RefreshFollowedQuestsOrderRequestMessage(param1)

    def deserializeAs_RefreshFollowedQuestsOrderRequestMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_uh_short()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of quests.")
            self.quests.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_RefreshFollowedQuestsOrderRequestMessage(param1)

    def deserializeAsyncAs_RefreshFollowedQuestsOrderRequestMessage(self, param1):
        self._queststree = param1.add_child(self._queststreeFunc)

    def _queststreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._queststree.add_child(self._questsFunc)
            _loc3_ += 1

    def _questsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of quests.")
        self.quests.append(_loc2_)


class UnfollowQuestObjectiveRequestMessage(NetworkMessage):
    protocolId = 6723

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.questId = 0
        self.objectiveId = 0

    def getMessageId(self):
        return 6723

    def initUnfollowQuestObjectiveRequestMessage(self, param1=0, param2=0):
        self.questId = param1
        self.objectiveId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.questId = 0
        self.objectiveId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_UnfollowQuestObjectiveRequestMessage(param1)

    def serializeAs_UnfollowQuestObjectiveRequestMessage(self, param1):
        if self.questId < 0:
            raise RuntimeError("Forbidden value (" + str(self.questId) + ") on element questId.")
        param1.write_var_short(self.questId)
        param1.write_short(self.objectiveId)

    def deserialize(self, param1):
        self.deserializeAs_UnfollowQuestObjectiveRequestMessage(param1)

    def deserializeAs_UnfollowQuestObjectiveRequestMessage(self, param1):
        self._questIdFunc(param1)
        self._objectiveIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_UnfollowQuestObjectiveRequestMessage(param1)

    def deserializeAsyncAs_UnfollowQuestObjectiveRequestMessage(self, param1):
        param1.add_child(self._questIdFunc)
        param1.add_child(self._objectiveIdFunc)

    def _questIdFunc(self, param1):
        self.questId = param1.read_var_uh_short()
        if self.questId < 0:
            raise RuntimeError("Forbidden value (" + str(self.questId) + ") on element of UnfollowQuestObjectiveRequestMessage.questId.")

    def _objectiveIdFunc(self, param1):
        self.objectiveId = param1.read_short()


class SpellItemBoostMessage(NetworkMessage):
    protocolId = 6011

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.statId = 0
        self.spellId = 0
        self.value = 0

    def getMessageId(self):
        return 6011

    def initSpellItemBoostMessage(self, param1=0, param2=0, param3=0):
        self.statId = param1
        self.spellId = param2
        self.value = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.statId = 0
        self.spellId = 0
        self.value = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SpellItemBoostMessage(param1)

    def serializeAs_SpellItemBoostMessage(self, param1):
        if self.statId < 0:
            raise RuntimeError("Forbidden value (" + str(self.statId) + ") on element statId.")
        param1.write_var_int(self.statId)
        if self.spellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spellId) + ") on element spellId.")
        param1.write_var_short(self.spellId)
        param1.write_var_short(self.value)

    def deserialize(self, param1):
        self.deserializeAs_SpellItemBoostMessage(param1)

    def deserializeAs_SpellItemBoostMessage(self, param1):
        self._statIdFunc(param1)
        self._spellIdFunc(param1)
        self._valueFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SpellItemBoostMessage(param1)

    def deserializeAsyncAs_SpellItemBoostMessage(self, param1):
        param1.add_child(self._statIdFunc)
        param1.add_child(self._spellIdFunc)
        param1.add_child(self._valueFunc)

    def _statIdFunc(self, param1):
        self.statId = param1.read_var_uh_int()
        if self.statId < 0:
            raise RuntimeError("Forbidden value (" + str(self.statId) + ") on element of SpellItemBoostMessage.statId.")

    def _spellIdFunc(self, param1):
        self.spellId = param1.read_var_uh_short()
        if self.spellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spellId) + ") on element of SpellItemBoostMessage.spellId.")

    def _valueFunc(self, param1):
        self.value = param1.read_var_short()


class SpellModifyFailureMessage(NetworkMessage):
    protocolId = 6653

    def getMessageId(self):
        return 6653

    def initSpellModifyFailureMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_SpellModifyFailureMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_SpellModifyFailureMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_SpellModifyFailureMessage(self, param1):
        pass


class SpellModifyRequestMessage(NetworkMessage):
    protocolId = 6655

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.spellId = 0
        self.spellLevel = 0

    def getMessageId(self):
        return 6655

    def initSpellModifyRequestMessage(self, param1=0, param2=0):
        self.spellId = param1
        self.spellLevel = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.spellId = 0
        self.spellLevel = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SpellModifyRequestMessage(param1)

    def serializeAs_SpellModifyRequestMessage(self, param1):
        if self.spellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spellId) + ") on element spellId.")
        param1.write_var_short(self.spellId)
        if self.spellLevel < 1 or self.spellLevel > 200:
            raise RuntimeError("Forbidden value (" + str(self.spellLevel) + ") on element spellLevel.")
        param1.write_short(self.spellLevel)

    def deserialize(self, param1):
        self.deserializeAs_SpellModifyRequestMessage(param1)

    def deserializeAs_SpellModifyRequestMessage(self, param1):
        self._spellIdFunc(param1)
        self._spellLevelFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SpellModifyRequestMessage(param1)

    def deserializeAsyncAs_SpellModifyRequestMessage(self, param1):
        param1.add_child(self._spellIdFunc)
        param1.add_child(self._spellLevelFunc)

    def _spellIdFunc(self, param1):
        self.spellId = param1.read_var_uh_short()
        if self.spellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spellId) + ") on element of SpellModifyRequestMessage.spellId.")

    def _spellLevelFunc(self, param1):
        self.spellLevel = param1.read_short()
        if self.spellLevel < 1 or self.spellLevel > 200:
            raise RuntimeError("Forbidden value (" + str(self.spellLevel) + ") on element of SpellModifyRequestMessage.spellLevel.")


class SpellModifySuccessMessage(NetworkMessage):
    protocolId = 6654

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.spellId = 0
        self.spellLevel = 0

    def getMessageId(self):
        return 6654

    def initSpellModifySuccessMessage(self, param1=0, param2=0):
        self.spellId = param1
        self.spellLevel = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.spellId = 0
        self.spellLevel = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SpellModifySuccessMessage(param1)

    def serializeAs_SpellModifySuccessMessage(self, param1):
        param1.write_int(self.spellId)
        if self.spellLevel < 1 or self.spellLevel > 200:
            raise RuntimeError("Forbidden value (" + str(self.spellLevel) + ") on element spellLevel.")
        param1.write_short(self.spellLevel)

    def deserialize(self, param1):
        self.deserializeAs_SpellModifySuccessMessage(param1)

    def deserializeAs_SpellModifySuccessMessage(self, param1):
        self._spellIdFunc(param1)
        self._spellLevelFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SpellModifySuccessMessage(param1)

    def deserializeAsyncAs_SpellModifySuccessMessage(self, param1):
        param1.add_child(self._spellIdFunc)
        param1.add_child(self._spellLevelFunc)

    def _spellIdFunc(self, param1):
        self.spellId = param1.read_int()

    def _spellLevelFunc(self, param1):
        self.spellLevel = param1.read_short()
        if self.spellLevel < 1 or self.spellLevel > 200:
            raise RuntimeError("Forbidden value (" + str(self.spellLevel) + ") on element of SpellModifySuccessMessage.spellLevel.")


class SpellVariantActivationMessage(NetworkMessage):
    protocolId = 6705

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.result = False
        self.activatedSpellId = 0
        self.deactivatedSpellId = 0

    def getMessageId(self):
        return 6705

    def initSpellVariantActivationMessage(self, param1=False, param2=0, param3=0):
        self.result = param1
        self.activatedSpellId = param2
        self.deactivatedSpellId = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.result = False
        self.activatedSpellId = 0
        self.deactivatedSpellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SpellVariantActivationMessage(param1)

    def serializeAs_SpellVariantActivationMessage(self, param1):
        param1.write_boolean(self.result)
        if self.activatedSpellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.activatedSpellId) + ") on element activatedSpellId.")
        param1.write_var_short(self.activatedSpellId)
        if self.deactivatedSpellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.deactivatedSpellId) + ") on element deactivatedSpellId.")
        param1.write_var_short(self.deactivatedSpellId)

    def deserialize(self, param1):
        self.deserializeAs_SpellVariantActivationMessage(param1)

    def deserializeAs_SpellVariantActivationMessage(self, param1):
        self._resultFunc(param1)
        self._activatedSpellIdFunc(param1)
        self._deactivatedSpellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SpellVariantActivationMessage(param1)

    def deserializeAsyncAs_SpellVariantActivationMessage(self, param1):
        param1.add_child(self._resultFunc)
        param1.add_child(self._activatedSpellIdFunc)
        param1.add_child(self._deactivatedSpellIdFunc)

    def _resultFunc(self, param1):
        self.result = param1.read_boolean()

    def _activatedSpellIdFunc(self, param1):
        self.activatedSpellId = param1.read_var_uh_short()
        if self.activatedSpellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.activatedSpellId) + ") on element of SpellVariantActivationMessage.activatedSpellId.")

    def _deactivatedSpellIdFunc(self, param1):
        self.deactivatedSpellId = param1.read_var_uh_short()
        if self.deactivatedSpellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.deactivatedSpellId) + ") on element of SpellVariantActivationMessage.deactivatedSpellId.")


class SpellVariantActivationRequestMessage(NetworkMessage):
    protocolId = 6707

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.spellId = 0

    def getMessageId(self):
        return 6707

    def initSpellVariantActivationRequestMessage(self, param1=0):
        self.spellId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.spellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SpellVariantActivationRequestMessage(param1)

    def serializeAs_SpellVariantActivationRequestMessage(self, param1):
        if self.spellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spellId) + ") on element spellId.")
        param1.write_var_short(self.spellId)

    def deserialize(self, param1):
        self.deserializeAs_SpellVariantActivationRequestMessage(param1)

    def deserializeAs_SpellVariantActivationRequestMessage(self, param1):
        self._spellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SpellVariantActivationRequestMessage(param1)

    def deserializeAsyncAs_SpellVariantActivationRequestMessage(self, param1):
        param1.add_child(self._spellIdFunc)

    def _spellIdFunc(self, param1):
        self.spellId = param1.read_var_uh_short()
        if self.spellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spellId) + ") on element of SpellVariantActivationRequestMessage.spellId.")


class StatsUpgradeRequestMessage(NetworkMessage):
    protocolId = 5610

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.useAdditionnal = False
        self.statId = 11
        self.boostPoint = 0

    def getMessageId(self):
        return 5610

    def initStatsUpgradeRequestMessage(self, param1=False, param2=11, param3=0):
        self.useAdditionnal = param1
        self.statId = param2
        self.boostPoint = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.useAdditionnal = False
        self.statId = 11
        self.boostPoint = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_StatsUpgradeRequestMessage(param1)

    def serializeAs_StatsUpgradeRequestMessage(self, param1):
        param1.write_boolean(self.useAdditionnal)
        param1.write_byte(self.statId)
        if self.boostPoint < 0:
            raise RuntimeError("Forbidden value (" + str(self.boostPoint) + ") on element boostPoint.")
        param1.write_var_short(self.boostPoint)

    def deserialize(self, param1):
        self.deserializeAs_StatsUpgradeRequestMessage(param1)

    def deserializeAs_StatsUpgradeRequestMessage(self, param1):
        self._useAdditionnalFunc(param1)
        self._statIdFunc(param1)
        self._boostPointFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_StatsUpgradeRequestMessage(param1)

    def deserializeAsyncAs_StatsUpgradeRequestMessage(self, param1):
        param1.add_child(self._useAdditionnalFunc)
        param1.add_child(self._statIdFunc)
        param1.add_child(self._boostPointFunc)

    def _useAdditionnalFunc(self, param1):
        self.useAdditionnal = param1.read_boolean()

    def _statIdFunc(self, param1):
        self.statId = param1.read_byte()
        if self.statId < 0:
            raise RuntimeError("Forbidden value (" + str(self.statId) + ") on element of StatsUpgradeRequestMessage.statId.")

    def _boostPointFunc(self, param1):
        self.boostPoint = param1.read_var_uh_short()
        if self.boostPoint < 0:
            raise RuntimeError("Forbidden value (" + str(self.boostPoint) + ") on element of StatsUpgradeRequestMessage.boostPoint.")


class StatsUpgradeResultMessage(NetworkMessage):
    protocolId = 5609

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.result = 0
        self.nbCharacBoost = 0

    def getMessageId(self):
        return 5609

    def initStatsUpgradeResultMessage(self, param1=0, param2=0):
        self.result = param1
        self.nbCharacBoost = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.result = 0
        self.nbCharacBoost = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_StatsUpgradeResultMessage(param1)

    def serializeAs_StatsUpgradeResultMessage(self, param1):
        param1.write_byte(self.result)
        if self.nbCharacBoost < 0:
            raise RuntimeError("Forbidden value (" + str(self.nbCharacBoost) + ") on element nbCharacBoost.")
        param1.write_var_short(self.nbCharacBoost)

    def deserialize(self, param1):
        self.deserializeAs_StatsUpgradeResultMessage(param1)

    def deserializeAs_StatsUpgradeResultMessage(self, param1):
        self._resultFunc(param1)
        self._nbCharacBoostFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_StatsUpgradeResultMessage(param1)

    def deserializeAsyncAs_StatsUpgradeResultMessage(self, param1):
        param1.add_child(self._resultFunc)
        param1.add_child(self._nbCharacBoostFunc)

    def _resultFunc(self, param1):
        self.result = param1.read_byte()

    def _nbCharacBoostFunc(self, param1):
        self.nbCharacBoost = param1.read_var_uh_short()
        if self.nbCharacBoost < 0:
            raise RuntimeError("Forbidden value (" + str(self.nbCharacBoost) + ") on element of StatsUpgradeResultMessage.nbCharacBoost.")


class PortalUseRequestMessage(NetworkMessage):
    protocolId = 6492

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.portalId = 0

    def getMessageId(self):
        return 6492

    def initPortalUseRequestMessage(self, param1=0):
        self.portalId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.portalId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PortalUseRequestMessage(param1)

    def serializeAs_PortalUseRequestMessage(self, param1):
        if self.portalId < 0:
            raise RuntimeError("Forbidden value (" + str(self.portalId) + ") on element portalId.")
        param1.write_var_int(self.portalId)

    def deserialize(self, param1):
        self.deserializeAs_PortalUseRequestMessage(param1)

    def deserializeAs_PortalUseRequestMessage(self, param1):
        self._portalIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PortalUseRequestMessage(param1)

    def deserializeAsyncAs_PortalUseRequestMessage(self, param1):
        param1.add_child(self._portalIdFunc)

    def _portalIdFunc(self, param1):
        self.portalId = param1.read_var_uh_int()
        if self.portalId < 0:
            raise RuntimeError("Forbidden value (" + str(self.portalId) + ") on element of PortalUseRequestMessage.portalId.")


class TreasureHuntAvailableRetryCountUpdateMessage(NetworkMessage):
    protocolId = 6491

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.questType = 0
        self.availableRetryCount = 0

    def getMessageId(self):
        return 6491

    def initTreasureHuntAvailableRetryCountUpdateMessage(self, param1=0, param2=0):
        self.questType = param1
        self.availableRetryCount = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.questType = 0
        self.availableRetryCount = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TreasureHuntAvailableRetryCountUpdateMessage(param1)

    def serializeAs_TreasureHuntAvailableRetryCountUpdateMessage(self, param1):
        param1.write_byte(self.questType)
        param1.write_int(self.availableRetryCount)

    def deserialize(self, param1):
        self.deserializeAs_TreasureHuntAvailableRetryCountUpdateMessage(param1)

    def deserializeAs_TreasureHuntAvailableRetryCountUpdateMessage(self, param1):
        self._questTypeFunc(param1)
        self._availableRetryCountFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TreasureHuntAvailableRetryCountUpdateMessage(param1)

    def deserializeAsyncAs_TreasureHuntAvailableRetryCountUpdateMessage(self, param1):
        param1.add_child(self._questTypeFunc)
        param1.add_child(self._availableRetryCountFunc)

    def _questTypeFunc(self, param1):
        self.questType = param1.read_byte()
        if self.questType < 0:
            raise RuntimeError("Forbidden value (" + str(self.questType) + ") on element of TreasureHuntAvailableRetryCountUpdateMessage.questType.")

    def _availableRetryCountFunc(self, param1):
        self.availableRetryCount = param1.read_int()


class TreasureHuntDigRequestAnswerMessage(NetworkMessage):
    protocolId = 6484

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.questType = 0
        self.result = 0

    def getMessageId(self):
        return 6484

    def initTreasureHuntDigRequestAnswerMessage(self, param1=0, param2=0):
        self.questType = param1
        self.result = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.questType = 0
        self.result = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TreasureHuntDigRequestAnswerMessage(param1)

    def serializeAs_TreasureHuntDigRequestAnswerMessage(self, param1):
        param1.write_byte(self.questType)
        param1.write_byte(self.result)

    def deserialize(self, param1):
        self.deserializeAs_TreasureHuntDigRequestAnswerMessage(param1)

    def deserializeAs_TreasureHuntDigRequestAnswerMessage(self, param1):
        self._questTypeFunc(param1)
        self._resultFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TreasureHuntDigRequestAnswerMessage(param1)

    def deserializeAsyncAs_TreasureHuntDigRequestAnswerMessage(self, param1):
        param1.add_child(self._questTypeFunc)
        param1.add_child(self._resultFunc)

    def _questTypeFunc(self, param1):
        self.questType = param1.read_byte()
        if self.questType < 0:
            raise RuntimeError("Forbidden value (" + str(self.questType) + ") on element of TreasureHuntDigRequestAnswerMessage.questType.")

    def _resultFunc(self, param1):
        self.result = param1.read_byte()
        if self.result < 0:
            raise RuntimeError("Forbidden value (" + str(self.result) + ") on element of TreasureHuntDigRequestAnswerMessage.result.")


class TreasureHuntDigRequestMessage(NetworkMessage):
    protocolId = 6485

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.questType = 0

    def getMessageId(self):
        return 6485

    def initTreasureHuntDigRequestMessage(self, param1=0):
        self.questType = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.questType = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TreasureHuntDigRequestMessage(param1)

    def serializeAs_TreasureHuntDigRequestMessage(self, param1):
        param1.write_byte(self.questType)

    def deserialize(self, param1):
        self.deserializeAs_TreasureHuntDigRequestMessage(param1)

    def deserializeAs_TreasureHuntDigRequestMessage(self, param1):
        self._questTypeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TreasureHuntDigRequestMessage(param1)

    def deserializeAsyncAs_TreasureHuntDigRequestMessage(self, param1):
        param1.add_child(self._questTypeFunc)

    def _questTypeFunc(self, param1):
        self.questType = param1.read_byte()
        if self.questType < 0:
            raise RuntimeError("Forbidden value (" + str(self.questType) + ") on element of TreasureHuntDigRequestMessage.questType.")


class TreasureHuntFinishedMessage(NetworkMessage):
    protocolId = 6483

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.questType = 0

    def getMessageId(self):
        return 6483

    def initTreasureHuntFinishedMessage(self, param1=0):
        self.questType = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.questType = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TreasureHuntFinishedMessage(param1)

    def serializeAs_TreasureHuntFinishedMessage(self, param1):
        param1.write_byte(self.questType)

    def deserialize(self, param1):
        self.deserializeAs_TreasureHuntFinishedMessage(param1)

    def deserializeAs_TreasureHuntFinishedMessage(self, param1):
        self._questTypeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TreasureHuntFinishedMessage(param1)

    def deserializeAsyncAs_TreasureHuntFinishedMessage(self, param1):
        param1.add_child(self._questTypeFunc)

    def _questTypeFunc(self, param1):
        self.questType = param1.read_byte()
        if self.questType < 0:
            raise RuntimeError("Forbidden value (" + str(self.questType) + ") on element of TreasureHuntFinishedMessage.questType.")


class TreasureHuntFlagRemoveRequestMessage(NetworkMessage):
    protocolId = 6510

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.questType = 0
        self.index = 0

    def getMessageId(self):
        return 6510

    def initTreasureHuntFlagRemoveRequestMessage(self, param1=0, param2=0):
        self.questType = param1
        self.index = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.questType = 0
        self.index = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TreasureHuntFlagRemoveRequestMessage(param1)

    def serializeAs_TreasureHuntFlagRemoveRequestMessage(self, param1):
        param1.write_byte(self.questType)
        if self.index < 0:
            raise RuntimeError("Forbidden value (" + str(self.index) + ") on element index.")
        param1.write_byte(self.index)

    def deserialize(self, param1):
        self.deserializeAs_TreasureHuntFlagRemoveRequestMessage(param1)

    def deserializeAs_TreasureHuntFlagRemoveRequestMessage(self, param1):
        self._questTypeFunc(param1)
        self._indexFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TreasureHuntFlagRemoveRequestMessage(param1)

    def deserializeAsyncAs_TreasureHuntFlagRemoveRequestMessage(self, param1):
        param1.add_child(self._questTypeFunc)
        param1.add_child(self._indexFunc)

    def _questTypeFunc(self, param1):
        self.questType = param1.read_byte()
        if self.questType < 0:
            raise RuntimeError("Forbidden value (" + str(self.questType) + ") on element of TreasureHuntFlagRemoveRequestMessage.questType.")

    def _indexFunc(self, param1):
        self.index = param1.read_byte()
        if self.index < 0:
            raise RuntimeError("Forbidden value (" + str(self.index) + ") on element of TreasureHuntFlagRemoveRequestMessage.index.")


class TreasureHuntFlagRequestAnswerMessage(NetworkMessage):
    protocolId = 6507

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.questType = 0
        self.result = 0
        self.index = 0

    def getMessageId(self):
        return 6507

    def initTreasureHuntFlagRequestAnswerMessage(self, param1=0, param2=0, param3=0):
        self.questType = param1
        self.result = param2
        self.index = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.questType = 0
        self.result = 0
        self.index = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TreasureHuntFlagRequestAnswerMessage(param1)

    def serializeAs_TreasureHuntFlagRequestAnswerMessage(self, param1):
        param1.write_byte(self.questType)
        param1.write_byte(self.result)
        if self.index < 0:
            raise RuntimeError("Forbidden value (" + str(self.index) + ") on element index.")
        param1.write_byte(self.index)

    def deserialize(self, param1):
        self.deserializeAs_TreasureHuntFlagRequestAnswerMessage(param1)

    def deserializeAs_TreasureHuntFlagRequestAnswerMessage(self, param1):
        self._questTypeFunc(param1)
        self._resultFunc(param1)
        self._indexFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TreasureHuntFlagRequestAnswerMessage(param1)

    def deserializeAsyncAs_TreasureHuntFlagRequestAnswerMessage(self, param1):
        param1.add_child(self._questTypeFunc)
        param1.add_child(self._resultFunc)
        param1.add_child(self._indexFunc)

    def _questTypeFunc(self, param1):
        self.questType = param1.read_byte()
        if self.questType < 0:
            raise RuntimeError("Forbidden value (" + str(self.questType) + ") on element of TreasureHuntFlagRequestAnswerMessage.questType.")

    def _resultFunc(self, param1):
        self.result = param1.read_byte()
        if self.result < 0:
            raise RuntimeError("Forbidden value (" + str(self.result) + ") on element of TreasureHuntFlagRequestAnswerMessage.result.")

    def _indexFunc(self, param1):
        self.index = param1.read_byte()
        if self.index < 0:
            raise RuntimeError("Forbidden value (" + str(self.index) + ") on element of TreasureHuntFlagRequestAnswerMessage.index.")


class TreasureHuntFlagRequestMessage(NetworkMessage):
    protocolId = 6508

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.questType = 0
        self.index = 0

    def getMessageId(self):
        return 6508

    def initTreasureHuntFlagRequestMessage(self, param1=0, param2=0):
        self.questType = param1
        self.index = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.questType = 0
        self.index = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TreasureHuntFlagRequestMessage(param1)

    def serializeAs_TreasureHuntFlagRequestMessage(self, param1):
        param1.write_byte(self.questType)
        if self.index < 0:
            raise RuntimeError("Forbidden value (" + str(self.index) + ") on element index.")
        param1.write_byte(self.index)

    def deserialize(self, param1):
        self.deserializeAs_TreasureHuntFlagRequestMessage(param1)

    def deserializeAs_TreasureHuntFlagRequestMessage(self, param1):
        self._questTypeFunc(param1)
        self._indexFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TreasureHuntFlagRequestMessage(param1)

    def deserializeAsyncAs_TreasureHuntFlagRequestMessage(self, param1):
        param1.add_child(self._questTypeFunc)
        param1.add_child(self._indexFunc)

    def _questTypeFunc(self, param1):
        self.questType = param1.read_byte()
        if self.questType < 0:
            raise RuntimeError("Forbidden value (" + str(self.questType) + ") on element of TreasureHuntFlagRequestMessage.questType.")

    def _indexFunc(self, param1):
        self.index = param1.read_byte()
        if self.index < 0:
            raise RuntimeError("Forbidden value (" + str(self.index) + ") on element of TreasureHuntFlagRequestMessage.index.")


class TreasureHuntGiveUpRequestMessage(NetworkMessage):
    protocolId = 6487

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.questType = 0

    def getMessageId(self):
        return 6487

    def initTreasureHuntGiveUpRequestMessage(self, param1=0):
        self.questType = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.questType = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TreasureHuntGiveUpRequestMessage(param1)

    def serializeAs_TreasureHuntGiveUpRequestMessage(self, param1):
        param1.write_byte(self.questType)

    def deserialize(self, param1):
        self.deserializeAs_TreasureHuntGiveUpRequestMessage(param1)

    def deserializeAs_TreasureHuntGiveUpRequestMessage(self, param1):
        self._questTypeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TreasureHuntGiveUpRequestMessage(param1)

    def deserializeAsyncAs_TreasureHuntGiveUpRequestMessage(self, param1):
        param1.add_child(self._questTypeFunc)

    def _questTypeFunc(self, param1):
        self.questType = param1.read_byte()
        if self.questType < 0:
            raise RuntimeError("Forbidden value (" + str(self.questType) + ") on element of TreasureHuntGiveUpRequestMessage.questType.")


class TreasureHuntLegendaryRequestMessage(NetworkMessage):
    protocolId = 6499

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.legendaryId = 0

    def getMessageId(self):
        return 6499

    def initTreasureHuntLegendaryRequestMessage(self, param1=0):
        self.legendaryId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.legendaryId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TreasureHuntLegendaryRequestMessage(param1)

    def serializeAs_TreasureHuntLegendaryRequestMessage(self, param1):
        if self.legendaryId < 0:
            raise RuntimeError("Forbidden value (" + str(self.legendaryId) + ") on element legendaryId.")
        param1.write_var_short(self.legendaryId)

    def deserialize(self, param1):
        self.deserializeAs_TreasureHuntLegendaryRequestMessage(param1)

    def deserializeAs_TreasureHuntLegendaryRequestMessage(self, param1):
        self._legendaryIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TreasureHuntLegendaryRequestMessage(param1)

    def deserializeAsyncAs_TreasureHuntLegendaryRequestMessage(self, param1):
        param1.add_child(self._legendaryIdFunc)

    def _legendaryIdFunc(self, param1):
        self.legendaryId = param1.read_var_uh_short()
        if self.legendaryId < 0:
            raise RuntimeError("Forbidden value (" + str(self.legendaryId) + ") on element of TreasureHuntLegendaryRequestMessage.legendaryId.")


class TreasureHuntMessage(NetworkMessage):
    protocolId = 6486

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.questType = 0
        self.startMapId = 0
        self.knownStepsList = []
        self.totalStepCount = 0
        self.checkPointCurrent = 0
        self.checkPointTotal = 0
        self.availableRetryCount = 0
        self.flags = []
        self._knownStepsListtree = FuncTree()
        self._flagstree = FuncTree()

    def getMessageId(self):
        return 6486

    def initTreasureHuntMessage(self, param1=0, param2=0, param3=[], param4=0, param5=0, param6=0, param7=0, param8=[]):
        self.questType = param1
        self.startMapId = param2
        self.knownStepsList = param3
        self.totalStepCount = param4
        self.checkPointCurrent = param5
        self.checkPointTotal = param6
        self.availableRetryCount = param7
        self.flags = param8
        self._isInitialized = True
        return self

    def reset(self):
        self.questType = 0
        self.startMapId = 0
        self.knownStepsList = []
        self.totalStepCount = 0
        self.checkPointCurrent = 0
        self.checkPointTotal = 0
        self.availableRetryCount = 0
        self.flags = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TreasureHuntMessage(param1)

    def serializeAs_TreasureHuntMessage(self, param1):
        param1.write_byte(self.questType)
        param1.write_int(self.startMapId)
        param1.write_short(len(self.knownStepsList))
        _loc2_ = 0
        while _loc2_ < len(self.knownStepsList):
            param1.write_short(as_parent(self.knownStepsList[_loc2_], TreasureHuntStep).getTypeId())
            as_parent(self.knownStepsList[_loc2_], TreasureHuntStep).serialize(param1)
            _loc2_ += 1
        if self.totalStepCount < 0:
            raise RuntimeError("Forbidden value (" + str(self.totalStepCount) + ") on element totalStepCount.")
        param1.write_byte(self.totalStepCount)
        if self.checkPointCurrent < 0:
            raise RuntimeError("Forbidden value (" + str(self.checkPointCurrent) + ") on element checkPointCurrent.")
        param1.write_var_int(self.checkPointCurrent)
        if self.checkPointTotal < 0:
            raise RuntimeError("Forbidden value (" + str(self.checkPointTotal) + ") on element checkPointTotal.")
        param1.write_var_int(self.checkPointTotal)
        param1.write_int(self.availableRetryCount)
        param1.write_short(len(self.flags))
        _loc3_ = 0
        while _loc3_ < len(self.flags):
            as_parent(self.flags[_loc3_], TreasureHuntFlag).serializeAs_TreasureHuntFlag(param1)
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_TreasureHuntMessage(param1)

    def deserializeAs_TreasureHuntMessage(self, param1):
        _loc6_ = 0
        _loc7_ = None
        _loc8_ = None
        self._questTypeFunc(param1)
        self._startMapIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = param1.read_unsigned_short()
            _loc7_ = ProtocolTypeManager.get_instance(TreasureHuntStep,_loc6_)
            _loc7_.deserialize(param1)
            self.knownStepsList.append(_loc7_)
            _loc3_ += 1
        self._totalStepCountFunc(param1)
        self._checkPointCurrentFunc(param1)
        self._checkPointTotalFunc(param1)
        self._availableRetryCountFunc(param1)
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc8_ = TreasureHuntFlag()
            _loc8_.deserialize(param1)
            self.flags.append(_loc8_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TreasureHuntMessage(param1)

    def deserializeAsyncAs_TreasureHuntMessage(self, param1):
        param1.add_child(self._questTypeFunc)
        param1.add_child(self._startMapIdFunc)
        self._knownStepsListtree = param1.add_child(self._knownStepsListtreeFunc)
        param1.add_child(self._totalStepCountFunc)
        param1.add_child(self._checkPointCurrentFunc)
        param1.add_child(self._checkPointTotalFunc)
        param1.add_child(self._availableRetryCountFunc)
        self._flagstree = param1.add_child(self._flagstreeFunc)

    def _questTypeFunc(self, param1):
        self.questType = param1.read_byte()
        if self.questType < 0:
            raise RuntimeError("Forbidden value (" + str(self.questType) + ") on element of TreasureHuntMessage.questType.")

    def _startMapIdFunc(self, param1):
        self.startMapId = param1.read_int()

    def _knownStepsListtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._knownStepsListtree.add_child(self._knownStepsListFunc)
            _loc3_ += 1

    def _knownStepsListFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(TreasureHuntStep,_loc2_)
        _loc3_.deserialize(param1)
        self.knownStepsList.append(_loc3_)

    def _totalStepCountFunc(self, param1):
        self.totalStepCount = param1.read_byte()
        if self.totalStepCount < 0:
            raise RuntimeError("Forbidden value (" + str(self.totalStepCount) + ") on element of TreasureHuntMessage.totalStepCount.")

    def _checkPointCurrentFunc(self, param1):
        self.checkPointCurrent = param1.read_var_uh_int()
        if self.checkPointCurrent < 0:
            raise RuntimeError("Forbidden value (" + str(self.checkPointCurrent) + ") on element of TreasureHuntMessage.checkPointCurrent.")

    def _checkPointTotalFunc(self, param1):
        self.checkPointTotal = param1.read_var_uh_int()
        if self.checkPointTotal < 0:
            raise RuntimeError("Forbidden value (" + str(self.checkPointTotal) + ") on element of TreasureHuntMessage.checkPointTotal.")

    def _availableRetryCountFunc(self, param1):
        self.availableRetryCount = param1.read_int()

    def _flagstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._flagstree.add_child(self._flagsFunc)
            _loc3_ += 1

    def _flagsFunc(self, param1):
        _loc2_ = TreasureHuntFlag()
        _loc2_.deserialize(param1)
        self.flags.append(_loc2_)


class TreasureHuntRequestAnswerMessage(NetworkMessage):
    protocolId = 6489

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.questType = 0
        self.result = 0

    def getMessageId(self):
        return 6489

    def initTreasureHuntRequestAnswerMessage(self, param1=0, param2=0):
        self.questType = param1
        self.result = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.questType = 0
        self.result = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TreasureHuntRequestAnswerMessage(param1)

    def serializeAs_TreasureHuntRequestAnswerMessage(self, param1):
        param1.write_byte(self.questType)
        param1.write_byte(self.result)

    def deserialize(self, param1):
        self.deserializeAs_TreasureHuntRequestAnswerMessage(param1)

    def deserializeAs_TreasureHuntRequestAnswerMessage(self, param1):
        self._questTypeFunc(param1)
        self._resultFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TreasureHuntRequestAnswerMessage(param1)

    def deserializeAsyncAs_TreasureHuntRequestAnswerMessage(self, param1):
        param1.add_child(self._questTypeFunc)
        param1.add_child(self._resultFunc)

    def _questTypeFunc(self, param1):
        self.questType = param1.read_byte()
        if self.questType < 0:
            raise RuntimeError("Forbidden value (" + str(self.questType) + ") on element of TreasureHuntRequestAnswerMessage.questType.")

    def _resultFunc(self, param1):
        self.result = param1.read_byte()
        if self.result < 0:
            raise RuntimeError("Forbidden value (" + str(self.result) + ") on element of TreasureHuntRequestAnswerMessage.result.")


class TreasureHuntRequestMessage(NetworkMessage):
    protocolId = 6488

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.questLevel = 0
        self.questType = 0

    def getMessageId(self):
        return 6488

    def initTreasureHuntRequestMessage(self, param1=0, param2=0):
        self.questLevel = param1
        self.questType = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.questLevel = 0
        self.questType = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TreasureHuntRequestMessage(param1)

    def serializeAs_TreasureHuntRequestMessage(self, param1):
        if self.questLevel < 1 or self.questLevel > 206:
            raise RuntimeError("Forbidden value (" + str(self.questLevel) + ") on element questLevel.")
        param1.write_byte(self.questLevel)
        param1.write_byte(self.questType)

    def deserialize(self, param1):
        self.deserializeAs_TreasureHuntRequestMessage(param1)

    def deserializeAs_TreasureHuntRequestMessage(self, param1):
        self._questLevelFunc(param1)
        self._questTypeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TreasureHuntRequestMessage(param1)

    def deserializeAsyncAs_TreasureHuntRequestMessage(self, param1):
        param1.add_child(self._questLevelFunc)
        param1.add_child(self._questTypeFunc)

    def _questLevelFunc(self, param1):
        self.questLevel = param1.read_unsigned_byte()
        if self.questLevel < 1 or self.questLevel > 206:
            raise RuntimeError("Forbidden value (" + str(self.questLevel) + ") on element of TreasureHuntRequestMessage.questLevel.")

    def _questTypeFunc(self, param1):
        self.questType = param1.read_byte()
        if self.questType < 0:
            raise RuntimeError("Forbidden value (" + str(self.questType) + ") on element of TreasureHuntRequestMessage.questType.")


class TreasureHuntShowLegendaryUIMessage(NetworkMessage):
    protocolId = 6498

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.availableLegendaryIds = []
        self._availableLegendaryIdstree = FuncTree()

    def getMessageId(self):
        return 6498

    def initTreasureHuntShowLegendaryUIMessage(self, param1=[]):
        self.availableLegendaryIds = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.availableLegendaryIds = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TreasureHuntShowLegendaryUIMessage(param1)

    def serializeAs_TreasureHuntShowLegendaryUIMessage(self, param1):
        param1.write_short(len(self.availableLegendaryIds))
        _loc2_ = 0
        while _loc2_ < len(self.availableLegendaryIds):
            if self.availableLegendaryIds[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.availableLegendaryIds[_loc2_]) + ") on element 1 (starting at 1) of availableLegendaryIds.")
            param1.write_var_short(self.availableLegendaryIds[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_TreasureHuntShowLegendaryUIMessage(param1)

    def deserializeAs_TreasureHuntShowLegendaryUIMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_uh_short()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of availableLegendaryIds.")
            self.availableLegendaryIds.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TreasureHuntShowLegendaryUIMessage(param1)

    def deserializeAsyncAs_TreasureHuntShowLegendaryUIMessage(self, param1):
        self._availableLegendaryIdstree = param1.add_child(self._availableLegendaryIdstreeFunc)

    def _availableLegendaryIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._availableLegendaryIdstree.add_child(self._availableLegendaryIdsFunc)
            _loc3_ += 1

    def _availableLegendaryIdsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of availableLegendaryIds.")
        self.availableLegendaryIds.append(_loc2_)


class GameRolePlaySpellAnimMessage(NetworkMessage):
    protocolId = 6114

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.casterId = 0
        self.targetCellId = 0
        self.spellId = 0
        self.spellLevel = 0

    def getMessageId(self):
        return 6114

    def initGameRolePlaySpellAnimMessage(self, param1=0, param2=0, param3=0, param4=0):
        self.casterId = param1
        self.targetCellId = param2
        self.spellId = param3
        self.spellLevel = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.casterId = 0
        self.targetCellId = 0
        self.spellId = 0
        self.spellLevel = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlaySpellAnimMessage(param1)

    def serializeAs_GameRolePlaySpellAnimMessage(self, param1):
        if self.casterId < 0 or self.casterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.casterId) + ") on element casterId.")
        param1.write_var_long(self.casterId)
        if self.targetCellId < 0 or self.targetCellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.targetCellId) + ") on element targetCellId.")
        param1.write_var_short(self.targetCellId)
        if self.spellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spellId) + ") on element spellId.")
        param1.write_var_short(self.spellId)
        if self.spellLevel < 1 or self.spellLevel > 200:
            raise RuntimeError("Forbidden value (" + str(self.spellLevel) + ") on element spellLevel.")
        param1.write_short(self.spellLevel)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlaySpellAnimMessage(param1)

    def deserializeAs_GameRolePlaySpellAnimMessage(self, param1):
        self._casterIdFunc(param1)
        self._targetCellIdFunc(param1)
        self._spellIdFunc(param1)
        self._spellLevelFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlaySpellAnimMessage(param1)

    def deserializeAsyncAs_GameRolePlaySpellAnimMessage(self, param1):
        param1.add_child(self._casterIdFunc)
        param1.add_child(self._targetCellIdFunc)
        param1.add_child(self._spellIdFunc)
        param1.add_child(self._spellLevelFunc)

    def _casterIdFunc(self, param1):
        self.casterId = param1.read_var_uh_long()
        if self.casterId < 0 or self.casterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.casterId) + ") on element of GameRolePlaySpellAnimMessage.casterId.")

    def _targetCellIdFunc(self, param1):
        self.targetCellId = param1.read_var_uh_short()
        if self.targetCellId < 0 or self.targetCellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.targetCellId) + ") on element of GameRolePlaySpellAnimMessage.targetCellId.")

    def _spellIdFunc(self, param1):
        self.spellId = param1.read_var_uh_short()
        if self.spellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spellId) + ") on element of GameRolePlaySpellAnimMessage.spellId.")

    def _spellLevelFunc(self, param1):
        self.spellLevel = param1.read_short()
        if self.spellLevel < 1 or self.spellLevel > 200:
            raise RuntimeError("Forbidden value (" + str(self.spellLevel) + ") on element of GameRolePlaySpellAnimMessage.spellLevel.")


class DareCanceledMessage(NetworkMessage):
    protocolId = 6679

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dareId = 0

    def getMessageId(self):
        return 6679

    def initDareCanceledMessage(self, param1=0):
        self.dareId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.dareId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DareCanceledMessage(param1)

    def serializeAs_DareCanceledMessage(self, param1):
        if self.dareId < 0 or self.dareId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.dareId) + ") on element dareId.")
        param1.write_double(self.dareId)

    def deserialize(self, param1):
        self.deserializeAs_DareCanceledMessage(param1)

    def deserializeAs_DareCanceledMessage(self, param1):
        self._dareIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DareCanceledMessage(param1)

    def deserializeAsyncAs_DareCanceledMessage(self, param1):
        param1.add_child(self._dareIdFunc)

    def _dareIdFunc(self, param1):
        self.dareId = param1.read_double()
        if self.dareId < 0 or self.dareId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.dareId) + ") on element of DareCanceledMessage.dareId.")


class DareCancelRequestMessage(NetworkMessage):
    protocolId = 6680

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dareId = 0

    def getMessageId(self):
        return 6680

    def initDareCancelRequestMessage(self, param1=0):
        self.dareId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.dareId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DareCancelRequestMessage(param1)

    def serializeAs_DareCancelRequestMessage(self, param1):
        if self.dareId < 0 or self.dareId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.dareId) + ") on element dareId.")
        param1.write_double(self.dareId)

    def deserialize(self, param1):
        self.deserializeAs_DareCancelRequestMessage(param1)

    def deserializeAs_DareCancelRequestMessage(self, param1):
        self._dareIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DareCancelRequestMessage(param1)

    def deserializeAsyncAs_DareCancelRequestMessage(self, param1):
        param1.add_child(self._dareIdFunc)

    def _dareIdFunc(self, param1):
        self.dareId = param1.read_double()
        if self.dareId < 0 or self.dareId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.dareId) + ") on element of DareCancelRequestMessage.dareId.")


class DareCreatedListMessage(NetworkMessage):
    protocolId = 6663

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.daresFixedInfos = []
        self.daresVersatilesInfos = []
        self._daresFixedInfostree = FuncTree()
        self._daresVersatilesInfostree = FuncTree()

    def getMessageId(self):
        return 6663

    def initDareCreatedListMessage(self, param1=[], param2=[]):
        self.daresFixedInfos = param1
        self.daresVersatilesInfos = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.daresFixedInfos = []
        self.daresVersatilesInfos = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DareCreatedListMessage(param1)

    def serializeAs_DareCreatedListMessage(self, param1):
        param1.write_short(len(self.daresFixedInfos))
        _loc2_ = 0
        while _loc2_ < len(self.daresFixedInfos):
            as_parent(self.daresFixedInfos[_loc2_], DareInformations).serializeAs_DareInformations(param1)
            _loc2_ += 1
        param1.write_short(len(self.daresVersatilesInfos))
        _loc3_ = 0
        while _loc3_ < len(self.daresVersatilesInfos):
            as_parent(self.daresVersatilesInfos[_loc3_], DareVersatileInformations).serializeAs_DareVersatileInformations(param1)
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_DareCreatedListMessage(param1)

    def deserializeAs_DareCreatedListMessage(self, param1):
        _loc6_ = None
        _loc7_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = DareInformations()
            _loc6_.deserialize(param1)
            self.daresFixedInfos.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = DareVersatileInformations()
            _loc7_.deserialize(param1)
            self.daresVersatilesInfos.append(_loc7_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DareCreatedListMessage(param1)

    def deserializeAsyncAs_DareCreatedListMessage(self, param1):
        self._daresFixedInfostree = param1.add_child(self._daresFixedInfostreeFunc)
        self._daresVersatilesInfostree = param1.add_child(self._daresVersatilesInfostreeFunc)

    def _daresFixedInfostreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._daresFixedInfostree.add_child(self._daresFixedInfosFunc)
            _loc3_ += 1

    def _daresFixedInfosFunc(self, param1):
        _loc2_ = DareInformations()
        _loc2_.deserialize(param1)
        self.daresFixedInfos.append(_loc2_)

    def _daresVersatilesInfostreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._daresVersatilesInfostree.add_child(self._daresVersatilesInfosFunc)
            _loc3_ += 1

    def _daresVersatilesInfosFunc(self, param1):
        _loc2_ = DareVersatileInformations()
        _loc2_.deserialize(param1)
        self.daresVersatilesInfos.append(_loc2_)


class DareCreatedMessage(NetworkMessage):
    protocolId = 6668

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dareInfos = DareInformations()
        self.needNotifications = False
        self._dareInfostree = FuncTree()

    def getMessageId(self):
        return 6668

    def initDareCreatedMessage(self, param1=None, param2=False):
        self.dareInfos = param1
        self.needNotifications = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.dareInfos = DareInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DareCreatedMessage(param1)

    def serializeAs_DareCreatedMessage(self, param1):
        self.dareInfos.serializeAs_DareInformations(param1)
        param1.write_boolean(self.needNotifications)

    def deserialize(self, param1):
        self.deserializeAs_DareCreatedMessage(param1)

    def deserializeAs_DareCreatedMessage(self, param1):
        self.dareInfos = DareInformations()
        self.dareInfos.deserialize(param1)
        self._needNotificationsFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DareCreatedMessage(param1)

    def deserializeAsyncAs_DareCreatedMessage(self, param1):
        self._dareInfostree = param1.add_child(self._dareInfostreeFunc)
        param1.add_child(self._needNotificationsFunc)

    def _dareInfostreeFunc(self, param1):
        self.dareInfos = DareInformations()
        self.dareInfos.deserializeAsync(self._dareInfostree)

    def _needNotificationsFunc(self, param1):
        self.needNotifications = param1.read_boolean()


class DareCreationRequestMessage(NetworkMessage):
    protocolId = 6665

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.subscriptionFee = 0
        self.jackpot = 0
        self.maxCountWinners = 0
        self.delayBeforeStart = 0
        self.duration = 0
        self.isPrivate = False
        self.isForGuild = False
        self.isForAlliance = False
        self.needNotifications = False
        self.criterions = []
        self._criterionstree = FuncTree()

    def getMessageId(self):
        return 6665

    def initDareCreationRequestMessage(self, param1=0, param2=0, param3=0, param4=0, param5=0, param6=False, param7=False, param8=False, param9=False, param10=[]):
        self.subscriptionFee = param1
        self.jackpot = param2
        self.maxCountWinners = param3
        self.delayBeforeStart = param4
        self.duration = param5
        self.isPrivate = param6
        self.isForGuild = param7
        self.isForAlliance = param8
        self.needNotifications = param9
        self.criterions = param10
        self._isInitialized = True
        return self

    def reset(self):
        self.subscriptionFee = 0
        self.jackpot = 0
        self.maxCountWinners = 0
        self.delayBeforeStart = 0
        self.duration = 0
        self.isPrivate = False
        self.isForGuild = False
        self.isForAlliance = False
        self.needNotifications = False
        self.criterions = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DareCreationRequestMessage(param1)

    def serializeAs_DareCreationRequestMessage(self, param1):
        _loc2_ = 0
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,0,self.isPrivate)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,1,self.isForGuild)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,2,self.isForAlliance)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,3,self.needNotifications)
        param1.write_byte(_loc2_)
        if self.subscriptionFee < 0 or self.subscriptionFee > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.subscriptionFee) + ") on element subscriptionFee.")
        param1.write_var_long(self.subscriptionFee)
        if self.jackpot < 0 or self.jackpot > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.jackpot) + ") on element jackpot.")
        param1.write_var_long(self.jackpot)
        if self.maxCountWinners < 0 or self.maxCountWinners > 65535:
            raise RuntimeError("Forbidden value (" + str(self.maxCountWinners) + ") on element maxCountWinners.")
        param1.write_short(self.maxCountWinners)
        if self.delayBeforeStart < 0 or self.delayBeforeStart > 4294967295:
            raise RuntimeError("Forbidden value (" + str(self.delayBeforeStart) + ") on element delayBeforeStart.")
        param1.write_unsigned_int(self.delayBeforeStart)
        if self.duration < 0 or self.duration > 4294967295:
            raise RuntimeError("Forbidden value (" + str(self.duration) + ") on element duration.")
        param1.write_unsigned_int(self.duration)
        param1.write_short(len(self.criterions))
        _loc3_ = 0
        while _loc3_ < len(self.criterions):
            as_parent(self.criterions[_loc3_], DareCriteria).serializeAs_DareCriteria(param1)
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_DareCreationRequestMessage(param1)

    def deserializeAs_DareCreationRequestMessage(self, param1):
        _loc4_ = None
        self.deserializeByteBoxes(param1)
        self._subscriptionFeeFunc(param1)
        self._jackpotFunc(param1)
        self._maxCountWinnersFunc(param1)
        self._delayBeforeStartFunc(param1)
        self._durationFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = DareCriteria()
            _loc4_.deserialize(param1)
            self.criterions.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DareCreationRequestMessage(param1)

    def deserializeAsyncAs_DareCreationRequestMessage(self, param1):
        param1.add_child(self.deserializeByteBoxes)
        param1.add_child(self._subscriptionFeeFunc)
        param1.add_child(self._jackpotFunc)
        param1.add_child(self._maxCountWinnersFunc)
        param1.add_child(self._delayBeforeStartFunc)
        param1.add_child(self._durationFunc)
        self._criterionstree = param1.add_child(self._criterionstreeFunc)

    def deserializeByteBoxes(self, param1):
        _loc2_ = param1.read_byte()
        self.isPrivate = BooleanByteWrapper.get_flag(_loc2_,0)
        self.isForGuild = BooleanByteWrapper.get_flag(_loc2_,1)
        self.isForAlliance = BooleanByteWrapper.get_flag(_loc2_,2)
        self.needNotifications = BooleanByteWrapper.get_flag(_loc2_,3)

    def _subscriptionFeeFunc(self, param1):
        self.subscriptionFee = param1.read_var_uh_long()
        if self.subscriptionFee < 0 or self.subscriptionFee > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.subscriptionFee) + ") on element of DareCreationRequestMessage.subscriptionFee.")

    def _jackpotFunc(self, param1):
        self.jackpot = param1.read_var_uh_long()
        if self.jackpot < 0 or self.jackpot > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.jackpot) + ") on element of DareCreationRequestMessage.jackpot.")

    def _maxCountWinnersFunc(self, param1):
        self.maxCountWinners = param1.read_unsigned_short()
        if self.maxCountWinners < 0 or self.maxCountWinners > 65535:
            raise RuntimeError("Forbidden value (" + str(self.maxCountWinners) + ") on element of DareCreationRequestMessage.maxCountWinners.")

    def _delayBeforeStartFunc(self, param1):
        self.delayBeforeStart = param1.read_unsigned_int()
        if self.delayBeforeStart < 0 or self.delayBeforeStart > 4294967295:
            raise RuntimeError("Forbidden value (" + str(self.delayBeforeStart) + ") on element of DareCreationRequestMessage.delayBeforeStart.")

    def _durationFunc(self, param1):
        self.duration = param1.read_unsigned_int()
        if self.duration < 0 or self.duration > 4294967295:
            raise RuntimeError("Forbidden value (" + str(self.duration) + ") on element of DareCreationRequestMessage.duration.")

    def _criterionstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._criterionstree.add_child(self._criterionsFunc)
            _loc3_ += 1

    def _criterionsFunc(self, param1):
        _loc2_ = DareCriteria()
        _loc2_.deserialize(param1)
        self.criterions.append(_loc2_)


class DareErrorMessage(NetworkMessage):
    protocolId = 6667

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.error = 0

    def getMessageId(self):
        return 6667

    def initDareErrorMessage(self, param1=0):
        self.error = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.error = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DareErrorMessage(param1)

    def serializeAs_DareErrorMessage(self, param1):
        param1.write_byte(self.error)

    def deserialize(self, param1):
        self.deserializeAs_DareErrorMessage(param1)

    def deserializeAs_DareErrorMessage(self, param1):
        self._errorFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DareErrorMessage(param1)

    def deserializeAsyncAs_DareErrorMessage(self, param1):
        param1.add_child(self._errorFunc)

    def _errorFunc(self, param1):
        self.error = param1.read_byte()
        if self.error < 0:
            raise RuntimeError("Forbidden value (" + str(self.error) + ") on element of DareErrorMessage.error.")


class DareInformationsMessage(NetworkMessage):
    protocolId = 6656

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dareFixedInfos = DareInformations()
        self.dareVersatilesInfos = DareVersatileInformations()
        self._dareFixedInfostree = FuncTree()
        self._dareVersatilesInfostree = FuncTree()

    def getMessageId(self):
        return 6656

    def initDareInformationsMessage(self, param1=None, param2=None):
        self.dareFixedInfos = param1
        self.dareVersatilesInfos = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.dareFixedInfos = DareInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DareInformationsMessage(param1)

    def serializeAs_DareInformationsMessage(self, param1):
        self.dareFixedInfos.serializeAs_DareInformations(param1)
        self.dareVersatilesInfos.serializeAs_DareVersatileInformations(param1)

    def deserialize(self, param1):
        self.deserializeAs_DareInformationsMessage(param1)

    def deserializeAs_DareInformationsMessage(self, param1):
        self.dareFixedInfos = DareInformations()
        self.dareFixedInfos.deserialize(param1)
        self.dareVersatilesInfos = DareVersatileInformations()
        self.dareVersatilesInfos.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DareInformationsMessage(param1)

    def deserializeAsyncAs_DareInformationsMessage(self, param1):
        self._dareFixedInfostree = param1.add_child(self._dareFixedInfostreeFunc)
        self._dareVersatilesInfostree = param1.add_child(self._dareVersatilesInfostreeFunc)

    def _dareFixedInfostreeFunc(self, param1):
        self.dareFixedInfos = DareInformations()
        self.dareFixedInfos.deserializeAsync(self._dareFixedInfostree)

    def _dareVersatilesInfostreeFunc(self, param1):
        self.dareVersatilesInfos = DareVersatileInformations()
        self.dareVersatilesInfos.deserializeAsync(self._dareVersatilesInfostree)


class DareInformationsRequestMessage(NetworkMessage):
    protocolId = 6659

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dareId = 0

    def getMessageId(self):
        return 6659

    def initDareInformationsRequestMessage(self, param1=0):
        self.dareId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.dareId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DareInformationsRequestMessage(param1)

    def serializeAs_DareInformationsRequestMessage(self, param1):
        if self.dareId < 0 or self.dareId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.dareId) + ") on element dareId.")
        param1.write_double(self.dareId)

    def deserialize(self, param1):
        self.deserializeAs_DareInformationsRequestMessage(param1)

    def deserializeAs_DareInformationsRequestMessage(self, param1):
        self._dareIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DareInformationsRequestMessage(param1)

    def deserializeAsyncAs_DareInformationsRequestMessage(self, param1):
        param1.add_child(self._dareIdFunc)

    def _dareIdFunc(self, param1):
        self.dareId = param1.read_double()
        if self.dareId < 0 or self.dareId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.dareId) + ") on element of DareInformationsRequestMessage.dareId.")


class DareListMessage(NetworkMessage):
    protocolId = 6661

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dares = []
        self._darestree = FuncTree()

    def getMessageId(self):
        return 6661

    def initDareListMessage(self, param1=[]):
        self.dares = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.dares = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DareListMessage(param1)

    def serializeAs_DareListMessage(self, param1):
        param1.write_short(len(self.dares))
        _loc2_ = 0
        while _loc2_ < len(self.dares):
            as_parent(self.dares[_loc2_], DareInformations).serializeAs_DareInformations(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_DareListMessage(param1)

    def deserializeAs_DareListMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = DareInformations()
            _loc4_.deserialize(param1)
            self.dares.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DareListMessage(param1)

    def deserializeAsyncAs_DareListMessage(self, param1):
        self._darestree = param1.add_child(self._darestreeFunc)

    def _darestreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._darestree.add_child(self._daresFunc)
            _loc3_ += 1

    def _daresFunc(self, param1):
        _loc2_ = DareInformations()
        _loc2_.deserialize(param1)
        self.dares.append(_loc2_)


class DareRewardConsumeRequestMessage(NetworkMessage):
    protocolId = 6676

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dareId = 0
        self.type = 0

    def getMessageId(self):
        return 6676

    def initDareRewardConsumeRequestMessage(self, param1=0, param2=0):
        self.dareId = param1
        self.type = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.dareId = 0
        self.type = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DareRewardConsumeRequestMessage(param1)

    def serializeAs_DareRewardConsumeRequestMessage(self, param1):
        if self.dareId < -9007199254740990 or self.dareId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.dareId) + ") on element dareId.")
        param1.write_double(self.dareId)
        param1.write_byte(self.type)

    def deserialize(self, param1):
        self.deserializeAs_DareRewardConsumeRequestMessage(param1)

    def deserializeAs_DareRewardConsumeRequestMessage(self, param1):
        self._dareIdFunc(param1)
        self._typeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DareRewardConsumeRequestMessage(param1)

    def deserializeAsyncAs_DareRewardConsumeRequestMessage(self, param1):
        param1.add_child(self._dareIdFunc)
        param1.add_child(self._typeFunc)

    def _dareIdFunc(self, param1):
        self.dareId = param1.read_double()
        if self.dareId < -9007199254740990 or self.dareId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.dareId) + ") on element of DareRewardConsumeRequestMessage.dareId.")

    def _typeFunc(self, param1):
        self.type = param1.read_byte()
        if self.type < 0:
            raise RuntimeError("Forbidden value (" + str(self.type) + ") on element of DareRewardConsumeRequestMessage.type.")


class DareRewardConsumeValidationMessage(NetworkMessage):
    protocolId = 6675

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dareId = 0
        self.type = 0

    def getMessageId(self):
        return 6675

    def initDareRewardConsumeValidationMessage(self, param1=0, param2=0):
        self.dareId = param1
        self.type = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.dareId = 0
        self.type = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DareRewardConsumeValidationMessage(param1)

    def serializeAs_DareRewardConsumeValidationMessage(self, param1):
        if self.dareId < 0 or self.dareId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.dareId) + ") on element dareId.")
        param1.write_double(self.dareId)
        param1.write_byte(self.type)

    def deserialize(self, param1):
        self.deserializeAs_DareRewardConsumeValidationMessage(param1)

    def deserializeAs_DareRewardConsumeValidationMessage(self, param1):
        self._dareIdFunc(param1)
        self._typeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DareRewardConsumeValidationMessage(param1)

    def deserializeAsyncAs_DareRewardConsumeValidationMessage(self, param1):
        param1.add_child(self._dareIdFunc)
        param1.add_child(self._typeFunc)

    def _dareIdFunc(self, param1):
        self.dareId = param1.read_double()
        if self.dareId < 0 or self.dareId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.dareId) + ") on element of DareRewardConsumeValidationMessage.dareId.")

    def _typeFunc(self, param1):
        self.type = param1.read_byte()
        if self.type < 0:
            raise RuntimeError("Forbidden value (" + str(self.type) + ") on element of DareRewardConsumeValidationMessage.type.")


class DareRewardsListMessage(NetworkMessage):
    protocolId = 6677

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.rewards = []
        self._rewardstree = FuncTree()

    def getMessageId(self):
        return 6677

    def initDareRewardsListMessage(self, param1=[]):
        self.rewards = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.rewards = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DareRewardsListMessage(param1)

    def serializeAs_DareRewardsListMessage(self, param1):
        param1.write_short(len(self.rewards))
        _loc2_ = 0
        while _loc2_ < len(self.rewards):
            as_parent(self.rewards[_loc2_], DareReward).serializeAs_DareReward(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_DareRewardsListMessage(param1)

    def deserializeAs_DareRewardsListMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = DareReward()
            _loc4_.deserialize(param1)
            self.rewards.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DareRewardsListMessage(param1)

    def deserializeAsyncAs_DareRewardsListMessage(self, param1):
        self._rewardstree = param1.add_child(self._rewardstreeFunc)

    def _rewardstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._rewardstree.add_child(self._rewardsFunc)
            _loc3_ += 1

    def _rewardsFunc(self, param1):
        _loc2_ = DareReward()
        _loc2_.deserialize(param1)
        self.rewards.append(_loc2_)


class DareRewardWonMessage(NetworkMessage):
    protocolId = 6678

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reward = DareReward()
        self._rewardtree = FuncTree()

    def getMessageId(self):
        return 6678

    def initDareRewardWonMessage(self, param1=None):
        self.reward = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.reward = DareReward()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DareRewardWonMessage(param1)

    def serializeAs_DareRewardWonMessage(self, param1):
        self.reward.serializeAs_DareReward(param1)

    def deserialize(self, param1):
        self.deserializeAs_DareRewardWonMessage(param1)

    def deserializeAs_DareRewardWonMessage(self, param1):
        self.reward = DareReward()
        self.reward.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DareRewardWonMessage(param1)

    def deserializeAsyncAs_DareRewardWonMessage(self, param1):
        self._rewardtree = param1.add_child(self._rewardtreeFunc)

    def _rewardtreeFunc(self, param1):
        self.reward = DareReward()
        self.reward.deserializeAsync(self._rewardtree)


class DareSubscribedListMessage(NetworkMessage):
    protocolId = 6658

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.daresFixedInfos = []
        self.daresVersatilesInfos = []
        self._daresFixedInfostree = FuncTree()
        self._daresVersatilesInfostree = FuncTree()

    def getMessageId(self):
        return 6658

    def initDareSubscribedListMessage(self, param1=[], param2=[]):
        self.daresFixedInfos = param1
        self.daresVersatilesInfos = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.daresFixedInfos = []
        self.daresVersatilesInfos = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DareSubscribedListMessage(param1)

    def serializeAs_DareSubscribedListMessage(self, param1):
        param1.write_short(len(self.daresFixedInfos))
        _loc2_ = 0
        while _loc2_ < len(self.daresFixedInfos):
            as_parent(self.daresFixedInfos[_loc2_], DareInformations).serializeAs_DareInformations(param1)
            _loc2_ += 1
        param1.write_short(len(self.daresVersatilesInfos))
        _loc3_ = 0
        while _loc3_ < len(self.daresVersatilesInfos):
            as_parent(self.daresVersatilesInfos[_loc3_], DareVersatileInformations).serializeAs_DareVersatileInformations(param1)
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_DareSubscribedListMessage(param1)

    def deserializeAs_DareSubscribedListMessage(self, param1):
        _loc6_ = None
        _loc7_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = DareInformations()
            _loc6_.deserialize(param1)
            self.daresFixedInfos.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = DareVersatileInformations()
            _loc7_.deserialize(param1)
            self.daresVersatilesInfos.append(_loc7_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DareSubscribedListMessage(param1)

    def deserializeAsyncAs_DareSubscribedListMessage(self, param1):
        self._daresFixedInfostree = param1.add_child(self._daresFixedInfostreeFunc)
        self._daresVersatilesInfostree = param1.add_child(self._daresVersatilesInfostreeFunc)

    def _daresFixedInfostreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._daresFixedInfostree.add_child(self._daresFixedInfosFunc)
            _loc3_ += 1

    def _daresFixedInfosFunc(self, param1):
        _loc2_ = DareInformations()
        _loc2_.deserialize(param1)
        self.daresFixedInfos.append(_loc2_)

    def _daresVersatilesInfostreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._daresVersatilesInfostree.add_child(self._daresVersatilesInfosFunc)
            _loc3_ += 1

    def _daresVersatilesInfosFunc(self, param1):
        _loc2_ = DareVersatileInformations()
        _loc2_.deserialize(param1)
        self.daresVersatilesInfos.append(_loc2_)


class DareSubscribedMessage(NetworkMessage):
    protocolId = 6660

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dareId = 0
        self.success = False
        self.subscribe = False
        self.dareVersatilesInfos = DareVersatileInformations()
        self._dareVersatilesInfostree = FuncTree()

    def getMessageId(self):
        return 6660

    def initDareSubscribedMessage(self, param1=0, param2=False, param3=False, param4=None):
        self.dareId = param1
        self.success = param2
        self.subscribe = param3
        self.dareVersatilesInfos = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.dareId = 0
        self.success = False
        self.subscribe = False
        self.dareVersatilesInfos = DareVersatileInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DareSubscribedMessage(param1)

    def serializeAs_DareSubscribedMessage(self, param1):
        _loc2_ = 0
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,0,self.success)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,1,self.subscribe)
        param1.write_byte(_loc2_)
        if self.dareId < 0 or self.dareId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.dareId) + ") on element dareId.")
        param1.write_double(self.dareId)
        self.dareVersatilesInfos.serializeAs_DareVersatileInformations(param1)

    def deserialize(self, param1):
        self.deserializeAs_DareSubscribedMessage(param1)

    def deserializeAs_DareSubscribedMessage(self, param1):
        self.deserializeByteBoxes(param1)
        self._dareIdFunc(param1)
        self.dareVersatilesInfos = DareVersatileInformations()
        self.dareVersatilesInfos.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DareSubscribedMessage(param1)

    def deserializeAsyncAs_DareSubscribedMessage(self, param1):
        param1.add_child(self.deserializeByteBoxes)
        param1.add_child(self._dareIdFunc)
        self._dareVersatilesInfostree = param1.add_child(self._dareVersatilesInfostreeFunc)

    def deserializeByteBoxes(self, param1):
        _loc2_ = param1.read_byte()
        self.success = BooleanByteWrapper.get_flag(_loc2_,0)
        self.subscribe = BooleanByteWrapper.get_flag(_loc2_,1)

    def _dareIdFunc(self, param1):
        self.dareId = param1.read_double()
        if self.dareId < 0 or self.dareId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.dareId) + ") on element of DareSubscribedMessage.dareId.")

    def _dareVersatilesInfostreeFunc(self, param1):
        self.dareVersatilesInfos = DareVersatileInformations()
        self.dareVersatilesInfos.deserializeAsync(self._dareVersatilesInfostree)


class DareSubscribeRequestMessage(NetworkMessage):
    protocolId = 6666

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dareId = 0
        self.subscribe = False

    def getMessageId(self):
        return 6666

    def initDareSubscribeRequestMessage(self, param1=0, param2=False):
        self.dareId = param1
        self.subscribe = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.dareId = 0
        self.subscribe = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DareSubscribeRequestMessage(param1)

    def serializeAs_DareSubscribeRequestMessage(self, param1):
        if self.dareId < 0 or self.dareId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.dareId) + ") on element dareId.")
        param1.write_double(self.dareId)
        param1.write_boolean(self.subscribe)

    def deserialize(self, param1):
        self.deserializeAs_DareSubscribeRequestMessage(param1)

    def deserializeAs_DareSubscribeRequestMessage(self, param1):
        self._dareIdFunc(param1)
        self._subscribeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DareSubscribeRequestMessage(param1)

    def deserializeAsyncAs_DareSubscribeRequestMessage(self, param1):
        param1.add_child(self._dareIdFunc)
        param1.add_child(self._subscribeFunc)

    def _dareIdFunc(self, param1):
        self.dareId = param1.read_double()
        if self.dareId < 0 or self.dareId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.dareId) + ") on element of DareSubscribeRequestMessage.dareId.")

    def _subscribeFunc(self, param1):
        self.subscribe = param1.read_boolean()


class DareVersatileListMessage(NetworkMessage):
    protocolId = 6657

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dares = []
        self._darestree = FuncTree()

    def getMessageId(self):
        return 6657

    def initDareVersatileListMessage(self, param1=[]):
        self.dares = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.dares = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DareVersatileListMessage(param1)

    def serializeAs_DareVersatileListMessage(self, param1):
        param1.write_short(len(self.dares))
        _loc2_ = 0
        while _loc2_ < len(self.dares):
            as_parent(self.dares[_loc2_], DareVersatileInformations).serializeAs_DareVersatileInformations(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_DareVersatileListMessage(param1)

    def deserializeAs_DareVersatileListMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = DareVersatileInformations()
            _loc4_.deserialize(param1)
            self.dares.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DareVersatileListMessage(param1)

    def deserializeAsyncAs_DareVersatileListMessage(self, param1):
        self._darestree = param1.add_child(self._darestreeFunc)

    def _darestreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._darestree.add_child(self._daresFunc)
            _loc3_ += 1

    def _daresFunc(self, param1):
        _loc2_ = DareVersatileInformations()
        _loc2_.deserialize(param1)
        self.dares.append(_loc2_)


class DareWonListMessage(NetworkMessage):
    protocolId = 6682

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dareId = []
        self._dareIdtree = FuncTree()

    def getMessageId(self):
        return 6682

    def initDareWonListMessage(self, param1=[]):
        self.dareId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.dareId = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DareWonListMessage(param1)

    def serializeAs_DareWonListMessage(self, param1):
        param1.write_short(len(self.dareId))
        _loc2_ = 0
        while _loc2_ < len(self.dareId):
            if self.dareId[_loc2_] < 0 or self.dareId[_loc2_] > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(self.dareId[_loc2_]) + ") on element 1 (starting at 1) of dareId.")
            param1.write_double(self.dareId[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_DareWonListMessage(param1)

    def deserializeAs_DareWonListMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_double()
            if _loc4_ < 0 or _loc4_ > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of dareId.")
            self.dareId.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DareWonListMessage(param1)

    def deserializeAsyncAs_DareWonListMessage(self, param1):
        self._dareIdtree = param1.add_child(self._dareIdtreeFunc)

    def _dareIdtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._dareIdtree.add_child(self._dareIdFunc)
            _loc3_ += 1

    def _dareIdFunc(self, param1):
        _loc2_ = param1.read_double()
        if _loc2_ < 0 or _loc2_ > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of dareId.")
        self.dareId.append(_loc2_)


class DareWonMessage(NetworkMessage):
    protocolId = 6681

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dareId = 0

    def getMessageId(self):
        return 6681

    def initDareWonMessage(self, param1=0):
        self.dareId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.dareId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DareWonMessage(param1)

    def serializeAs_DareWonMessage(self, param1):
        if self.dareId < 0 or self.dareId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.dareId) + ") on element dareId.")
        param1.write_double(self.dareId)

    def deserialize(self, param1):
        self.deserializeAs_DareWonMessage(param1)

    def deserializeAs_DareWonMessage(self, param1):
        self._dareIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DareWonMessage(param1)

    def deserializeAsyncAs_DareWonMessage(self, param1):
        param1.add_child(self._dareIdFunc)

    def _dareIdFunc(self, param1):
        self.dareId = param1.read_double()
        if self.dareId < 0 or self.dareId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.dareId) + ") on element of DareWonMessage.dareId.")


class LeaveDialogMessage(NetworkMessage):
    protocolId = 5502

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dialogType = 0

    def getMessageId(self):
        return 5502

    def initLeaveDialogMessage(self, param1=0):
        self.dialogType = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.dialogType = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_LeaveDialogMessage(param1)

    def serializeAs_LeaveDialogMessage(self, param1):
        param1.write_byte(self.dialogType)

    def deserialize(self, param1):
        self.deserializeAs_LeaveDialogMessage(param1)

    def deserializeAs_LeaveDialogMessage(self, param1):
        self._dialogTypeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_LeaveDialogMessage(param1)

    def deserializeAsyncAs_LeaveDialogMessage(self, param1):
        param1.add_child(self._dialogTypeFunc)

    def _dialogTypeFunc(self, param1):
        self.dialogType = param1.read_byte()
        if self.dialogType < 0:
            raise RuntimeError("Forbidden value (" + str(self.dialogType) + ") on element of LeaveDialogMessage.dialogType.")


class LeaveDialogRequestMessage(NetworkMessage):
    protocolId = 5501

    def getMessageId(self):
        return 5501

    def initLeaveDialogRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_LeaveDialogRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_LeaveDialogRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_LeaveDialogRequestMessage(self, param1):
        pass


class PauseDialogMessage(NetworkMessage):
    protocolId = 6012

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dialogType = 0

    def getMessageId(self):
        return 6012

    def initPauseDialogMessage(self, param1=0):
        self.dialogType = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.dialogType = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PauseDialogMessage(param1)

    def serializeAs_PauseDialogMessage(self, param1):
        param1.write_byte(self.dialogType)

    def deserialize(self, param1):
        self.deserializeAs_PauseDialogMessage(param1)

    def deserializeAs_PauseDialogMessage(self, param1):
        self._dialogTypeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PauseDialogMessage(param1)

    def deserializeAsyncAs_PauseDialogMessage(self, param1):
        param1.add_child(self._dialogTypeFunc)

    def _dialogTypeFunc(self, param1):
        self.dialogType = param1.read_byte()
        if self.dialogType < 0:
            raise RuntimeError("Forbidden value (" + str(self.dialogType) + ") on element of PauseDialogMessage.dialogType.")


class FinishMoveListMessage(NetworkMessage):
    protocolId = 6704

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.finishMoves = []
        self._finishMovestree = FuncTree()

    def getMessageId(self):
        return 6704

    def initFinishMoveListMessage(self, param1=[]):
        self.finishMoves = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.finishMoves = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_FinishMoveListMessage(param1)

    def serializeAs_FinishMoveListMessage(self, param1):
        param1.write_short(len(self.finishMoves))
        _loc2_ = 0
        while _loc2_ < len(self.finishMoves):
            as_parent(self.finishMoves[_loc2_], FinishMoveInformations).serializeAs_FinishMoveInformations(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_FinishMoveListMessage(param1)

    def deserializeAs_FinishMoveListMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = FinishMoveInformations()
            _loc4_.deserialize(param1)
            self.finishMoves.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_FinishMoveListMessage(param1)

    def deserializeAsyncAs_FinishMoveListMessage(self, param1):
        self._finishMovestree = param1.add_child(self._finishMovestreeFunc)

    def _finishMovestreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._finishMovestree.add_child(self._finishMovesFunc)
            _loc3_ += 1

    def _finishMovesFunc(self, param1):
        _loc2_ = FinishMoveInformations()
        _loc2_.deserialize(param1)
        self.finishMoves.append(_loc2_)


class FinishMoveListRequestMessage(NetworkMessage):
    protocolId = 6702

    def getMessageId(self):
        return 6702

    def initFinishMoveListRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_FinishMoveListRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_FinishMoveListRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_FinishMoveListRequestMessage(self, param1):
        pass


class FinishMoveSetRequestMessage(NetworkMessage):
    protocolId = 6703

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.finishMoveId = 0
        self.finishMoveState = False

    def getMessageId(self):
        return 6703

    def initFinishMoveSetRequestMessage(self, param1=0, param2=False):
        self.finishMoveId = param1
        self.finishMoveState = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.finishMoveId = 0
        self.finishMoveState = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_FinishMoveSetRequestMessage(param1)

    def serializeAs_FinishMoveSetRequestMessage(self, param1):
        if self.finishMoveId < 0:
            raise RuntimeError("Forbidden value (" + str(self.finishMoveId) + ") on element finishMoveId.")
        param1.write_int(self.finishMoveId)
        param1.write_boolean(self.finishMoveState)

    def deserialize(self, param1):
        self.deserializeAs_FinishMoveSetRequestMessage(param1)

    def deserializeAs_FinishMoveSetRequestMessage(self, param1):
        self._finishMoveIdFunc(param1)
        self._finishMoveStateFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_FinishMoveSetRequestMessage(param1)

    def deserializeAsyncAs_FinishMoveSetRequestMessage(self, param1):
        param1.add_child(self._finishMoveIdFunc)
        param1.add_child(self._finishMoveStateFunc)

    def _finishMoveIdFunc(self, param1):
        self.finishMoveId = param1.read_int()
        if self.finishMoveId < 0:
            raise RuntimeError("Forbidden value (" + str(self.finishMoveId) + ") on element of FinishMoveSetRequestMessage.finishMoveId.")

    def _finishMoveStateFunc(self, param1):
        self.finishMoveState = param1.read_boolean()


class FriendAddedMessage(NetworkMessage):
    protocolId = 5599

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.friendAdded = FriendInformations()
        self._friendAddedtree = FuncTree()

    def getMessageId(self):
        return 5599

    def initFriendAddedMessage(self, param1=None):
        self.friendAdded = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.friendAdded = FriendInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_FriendAddedMessage(param1)

    def serializeAs_FriendAddedMessage(self, param1):
        param1.write_short(self.friendAdded.getTypeId())
        self.friendAdded.serialize(param1)

    def deserialize(self, param1):
        self.deserializeAs_FriendAddedMessage(param1)

    def deserializeAs_FriendAddedMessage(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.friendAdded = ProtocolTypeManager.get_instance(FriendInformations,_loc2_)
        self.friendAdded.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_FriendAddedMessage(param1)

    def deserializeAsyncAs_FriendAddedMessage(self, param1):
        self._friendAddedtree = param1.add_child(self._friendAddedtreeFunc)

    def _friendAddedtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.friendAdded = ProtocolTypeManager.get_instance(FriendInformations,_loc2_)
        self.friendAdded.deserializeAsync(self._friendAddedtree)


class FriendAddFailureMessage(NetworkMessage):
    protocolId = 5600

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reason = 0

    def getMessageId(self):
        return 5600

    def initFriendAddFailureMessage(self, param1=0):
        self.reason = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.reason = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_FriendAddFailureMessage(param1)

    def serializeAs_FriendAddFailureMessage(self, param1):
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_FriendAddFailureMessage(param1)

    def deserializeAs_FriendAddFailureMessage(self, param1):
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_FriendAddFailureMessage(param1)

    def deserializeAsyncAs_FriendAddFailureMessage(self, param1):
        param1.add_child(self._reasonFunc)

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()
        if self.reason < 0:
            raise RuntimeError("Forbidden value (" + str(self.reason) + ") on element of FriendAddFailureMessage.reason.")


class FriendAddRequestMessage(NetworkMessage):
    protocolId = 4004

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.name = ""

    def getMessageId(self):
        return 4004

    def initFriendAddRequestMessage(self, param1=""):
        self.name = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.name = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_FriendAddRequestMessage(param1)

    def serializeAs_FriendAddRequestMessage(self, param1):
        param1.write_utf(self.name)

    def deserialize(self, param1):
        self.deserializeAs_FriendAddRequestMessage(param1)

    def deserializeAs_FriendAddRequestMessage(self, param1):
        self._nameFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_FriendAddRequestMessage(param1)

    def deserializeAsyncAs_FriendAddRequestMessage(self, param1):
        param1.add_child(self._nameFunc)

    def _nameFunc(self, param1):
        self.name = param1.read_utf()


class FriendDeleteRequestMessage(NetworkMessage):
    protocolId = 5603

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.accountId = 0

    def getMessageId(self):
        return 5603

    def initFriendDeleteRequestMessage(self, param1=0):
        self.accountId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.accountId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_FriendDeleteRequestMessage(param1)

    def serializeAs_FriendDeleteRequestMessage(self, param1):
        if self.accountId < 0:
            raise RuntimeError("Forbidden value (" + str(self.accountId) + ") on element accountId.")
        param1.write_int(self.accountId)

    def deserialize(self, param1):
        self.deserializeAs_FriendDeleteRequestMessage(param1)

    def deserializeAs_FriendDeleteRequestMessage(self, param1):
        self._accountIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_FriendDeleteRequestMessage(param1)

    def deserializeAsyncAs_FriendDeleteRequestMessage(self, param1):
        param1.add_child(self._accountIdFunc)

    def _accountIdFunc(self, param1):
        self.accountId = param1.read_int()
        if self.accountId < 0:
            raise RuntimeError("Forbidden value (" + str(self.accountId) + ") on element of FriendDeleteRequestMessage.accountId.")


class FriendDeleteResultMessage(NetworkMessage):
    protocolId = 5601

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.success = False
        self.name = ""

    def getMessageId(self):
        return 5601

    def initFriendDeleteResultMessage(self, param1=False, param2=""):
        self.success = param1
        self.name = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.success = False
        self.name = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_FriendDeleteResultMessage(param1)

    def serializeAs_FriendDeleteResultMessage(self, param1):
        param1.write_boolean(self.success)
        param1.write_utf(self.name)

    def deserialize(self, param1):
        self.deserializeAs_FriendDeleteResultMessage(param1)

    def deserializeAs_FriendDeleteResultMessage(self, param1):
        self._successFunc(param1)
        self._nameFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_FriendDeleteResultMessage(param1)

    def deserializeAsyncAs_FriendDeleteResultMessage(self, param1):
        param1.add_child(self._successFunc)
        param1.add_child(self._nameFunc)

    def _successFunc(self, param1):
        self.success = param1.read_boolean()

    def _nameFunc(self, param1):
        self.name = param1.read_utf()


class FriendJoinRequestMessage(NetworkMessage):
    protocolId = 5605

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.name = ""

    def getMessageId(self):
        return 5605

    def initFriendJoinRequestMessage(self, param1=""):
        self.name = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.name = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_FriendJoinRequestMessage(param1)

    def serializeAs_FriendJoinRequestMessage(self, param1):
        param1.write_utf(self.name)

    def deserialize(self, param1):
        self.deserializeAs_FriendJoinRequestMessage(param1)

    def deserializeAs_FriendJoinRequestMessage(self, param1):
        self._nameFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_FriendJoinRequestMessage(param1)

    def deserializeAsyncAs_FriendJoinRequestMessage(self, param1):
        param1.add_child(self._nameFunc)

    def _nameFunc(self, param1):
        self.name = param1.read_utf()


class FriendSetWarnOnConnectionMessage(NetworkMessage):
    protocolId = 5602

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.enable = False

    def getMessageId(self):
        return 5602

    def initFriendSetWarnOnConnectionMessage(self, param1=False):
        self.enable = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.enable = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_FriendSetWarnOnConnectionMessage(param1)

    def serializeAs_FriendSetWarnOnConnectionMessage(self, param1):
        param1.write_boolean(self.enable)

    def deserialize(self, param1):
        self.deserializeAs_FriendSetWarnOnConnectionMessage(param1)

    def deserializeAs_FriendSetWarnOnConnectionMessage(self, param1):
        self._enableFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_FriendSetWarnOnConnectionMessage(param1)

    def deserializeAsyncAs_FriendSetWarnOnConnectionMessage(self, param1):
        param1.add_child(self._enableFunc)

    def _enableFunc(self, param1):
        self.enable = param1.read_boolean()


class FriendSetWarnOnLevelGainMessage(NetworkMessage):
    protocolId = 6077

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.enable = False

    def getMessageId(self):
        return 6077

    def initFriendSetWarnOnLevelGainMessage(self, param1=False):
        self.enable = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.enable = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_FriendSetWarnOnLevelGainMessage(param1)

    def serializeAs_FriendSetWarnOnLevelGainMessage(self, param1):
        param1.write_boolean(self.enable)

    def deserialize(self, param1):
        self.deserializeAs_FriendSetWarnOnLevelGainMessage(param1)

    def deserializeAs_FriendSetWarnOnLevelGainMessage(self, param1):
        self._enableFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_FriendSetWarnOnLevelGainMessage(param1)

    def deserializeAsyncAs_FriendSetWarnOnLevelGainMessage(self, param1):
        param1.add_child(self._enableFunc)

    def _enableFunc(self, param1):
        self.enable = param1.read_boolean()


class FriendsGetListMessage(NetworkMessage):
    protocolId = 4001

    def getMessageId(self):
        return 4001

    def initFriendsGetListMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_FriendsGetListMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_FriendsGetListMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_FriendsGetListMessage(self, param1):
        pass


class FriendsListMessage(NetworkMessage):
    protocolId = 4002

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.friendsList = []
        self._friendsListtree = FuncTree()

    def getMessageId(self):
        return 4002

    def initFriendsListMessage(self, param1=[]):
        self.friendsList = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.friendsList = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_FriendsListMessage(param1)

    def serializeAs_FriendsListMessage(self, param1):
        param1.write_short(len(self.friendsList))
        _loc2_ = 0
        while _loc2_ < len(self.friendsList):
            param1.write_short(as_parent(self.friendsList[_loc2_], FriendInformations).getTypeId())
            as_parent(self.friendsList[_loc2_], FriendInformations).serialize(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_FriendsListMessage(param1)

    def deserializeAs_FriendsListMessage(self, param1):
        _loc4_ = 0
        _loc5_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_unsigned_short()
            _loc5_ = ProtocolTypeManager.get_instance(FriendInformations,_loc4_)
            _loc5_.deserialize(param1)
            self.friendsList.append(_loc5_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_FriendsListMessage(param1)

    def deserializeAsyncAs_FriendsListMessage(self, param1):
        self._friendsListtree = param1.add_child(self._friendsListtreeFunc)

    def _friendsListtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._friendsListtree.add_child(self._friendsListFunc)
            _loc3_ += 1

    def _friendsListFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(FriendInformations,_loc2_)
        _loc3_.deserialize(param1)
        self.friendsList.append(_loc3_)


class FriendSpouseFollowWithCompassRequestMessage(NetworkMessage):
    protocolId = 5606

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.enable = False

    def getMessageId(self):
        return 5606

    def initFriendSpouseFollowWithCompassRequestMessage(self, param1=False):
        self.enable = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.enable = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_FriendSpouseFollowWithCompassRequestMessage(param1)

    def serializeAs_FriendSpouseFollowWithCompassRequestMessage(self, param1):
        param1.write_boolean(self.enable)

    def deserialize(self, param1):
        self.deserializeAs_FriendSpouseFollowWithCompassRequestMessage(param1)

    def deserializeAs_FriendSpouseFollowWithCompassRequestMessage(self, param1):
        self._enableFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_FriendSpouseFollowWithCompassRequestMessage(param1)

    def deserializeAsyncAs_FriendSpouseFollowWithCompassRequestMessage(self, param1):
        param1.add_child(self._enableFunc)

    def _enableFunc(self, param1):
        self.enable = param1.read_boolean()


class FriendSpouseJoinRequestMessage(NetworkMessage):
    protocolId = 5604

    def getMessageId(self):
        return 5604

    def initFriendSpouseJoinRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_FriendSpouseJoinRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_FriendSpouseJoinRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_FriendSpouseJoinRequestMessage(self, param1):
        pass


class FriendUpdateMessage(NetworkMessage):
    protocolId = 5924

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.friendUpdated = FriendInformations()
        self._friendUpdatedtree = FuncTree()

    def getMessageId(self):
        return 5924

    def initFriendUpdateMessage(self, param1=None):
        self.friendUpdated = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.friendUpdated = FriendInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_FriendUpdateMessage(param1)

    def serializeAs_FriendUpdateMessage(self, param1):
        param1.write_short(self.friendUpdated.getTypeId())
        self.friendUpdated.serialize(param1)

    def deserialize(self, param1):
        self.deserializeAs_FriendUpdateMessage(param1)

    def deserializeAs_FriendUpdateMessage(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.friendUpdated = ProtocolTypeManager.get_instance(FriendInformations,_loc2_)
        self.friendUpdated.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_FriendUpdateMessage(param1)

    def deserializeAsyncAs_FriendUpdateMessage(self, param1):
        self._friendUpdatedtree = param1.add_child(self._friendUpdatedtreeFunc)

    def _friendUpdatedtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.friendUpdated = ProtocolTypeManager.get_instance(FriendInformations,_loc2_)
        self.friendUpdated.deserializeAsync(self._friendUpdatedtree)


class FriendWarnOnConnectionStateMessage(NetworkMessage):
    protocolId = 5630

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.enable = False

    def getMessageId(self):
        return 5630

    def initFriendWarnOnConnectionStateMessage(self, param1=False):
        self.enable = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.enable = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_FriendWarnOnConnectionStateMessage(param1)

    def serializeAs_FriendWarnOnConnectionStateMessage(self, param1):
        param1.write_boolean(self.enable)

    def deserialize(self, param1):
        self.deserializeAs_FriendWarnOnConnectionStateMessage(param1)

    def deserializeAs_FriendWarnOnConnectionStateMessage(self, param1):
        self._enableFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_FriendWarnOnConnectionStateMessage(param1)

    def deserializeAsyncAs_FriendWarnOnConnectionStateMessage(self, param1):
        param1.add_child(self._enableFunc)

    def _enableFunc(self, param1):
        self.enable = param1.read_boolean()


class FriendWarnOnLevelGainStateMessage(NetworkMessage):
    protocolId = 6078

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.enable = False

    def getMessageId(self):
        return 6078

    def initFriendWarnOnLevelGainStateMessage(self, param1=False):
        self.enable = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.enable = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_FriendWarnOnLevelGainStateMessage(param1)

    def serializeAs_FriendWarnOnLevelGainStateMessage(self, param1):
        param1.write_boolean(self.enable)

    def deserialize(self, param1):
        self.deserializeAs_FriendWarnOnLevelGainStateMessage(param1)

    def deserializeAs_FriendWarnOnLevelGainStateMessage(self, param1):
        self._enableFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_FriendWarnOnLevelGainStateMessage(param1)

    def deserializeAsyncAs_FriendWarnOnLevelGainStateMessage(self, param1):
        param1.add_child(self._enableFunc)

    def _enableFunc(self, param1):
        self.enable = param1.read_boolean()


class GuildMemberSetWarnOnConnectionMessage(NetworkMessage):
    protocolId = 6159

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.enable = False

    def getMessageId(self):
        return 6159

    def initGuildMemberSetWarnOnConnectionMessage(self, param1=False):
        self.enable = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.enable = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildMemberSetWarnOnConnectionMessage(param1)

    def serializeAs_GuildMemberSetWarnOnConnectionMessage(self, param1):
        param1.write_boolean(self.enable)

    def deserialize(self, param1):
        self.deserializeAs_GuildMemberSetWarnOnConnectionMessage(param1)

    def deserializeAs_GuildMemberSetWarnOnConnectionMessage(self, param1):
        self._enableFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildMemberSetWarnOnConnectionMessage(param1)

    def deserializeAsyncAs_GuildMemberSetWarnOnConnectionMessage(self, param1):
        param1.add_child(self._enableFunc)

    def _enableFunc(self, param1):
        self.enable = param1.read_boolean()


class GuildMemberWarnOnConnectionStateMessage(NetworkMessage):
    protocolId = 6160

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.enable = False

    def getMessageId(self):
        return 6160

    def initGuildMemberWarnOnConnectionStateMessage(self, param1=False):
        self.enable = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.enable = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildMemberWarnOnConnectionStateMessage(param1)

    def serializeAs_GuildMemberWarnOnConnectionStateMessage(self, param1):
        param1.write_boolean(self.enable)

    def deserialize(self, param1):
        self.deserializeAs_GuildMemberWarnOnConnectionStateMessage(param1)

    def deserializeAs_GuildMemberWarnOnConnectionStateMessage(self, param1):
        self._enableFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildMemberWarnOnConnectionStateMessage(param1)

    def deserializeAsyncAs_GuildMemberWarnOnConnectionStateMessage(self, param1):
        param1.add_child(self._enableFunc)

    def _enableFunc(self, param1):
        self.enable = param1.read_boolean()


class IgnoredAddedMessage(NetworkMessage):
    protocolId = 5678

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.ignoreAdded = IgnoredInformations()
        self.session = False
        self._ignoreAddedtree = FuncTree()

    def getMessageId(self):
        return 5678

    def initIgnoredAddedMessage(self, param1=None, param2=False):
        self.ignoreAdded = param1
        self.session = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.ignoreAdded = IgnoredInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IgnoredAddedMessage(param1)

    def serializeAs_IgnoredAddedMessage(self, param1):
        param1.write_short(self.ignoreAdded.getTypeId())
        self.ignoreAdded.serialize(param1)
        param1.write_boolean(self.session)

    def deserialize(self, param1):
        self.deserializeAs_IgnoredAddedMessage(param1)

    def deserializeAs_IgnoredAddedMessage(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.ignoreAdded = ProtocolTypeManager.get_instance(IgnoredInformations,_loc2_)
        self.ignoreAdded.deserialize(param1)
        self._sessionFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IgnoredAddedMessage(param1)

    def deserializeAsyncAs_IgnoredAddedMessage(self, param1):
        self._ignoreAddedtree = param1.add_child(self._ignoreAddedtreeFunc)
        param1.add_child(self._sessionFunc)

    def _ignoreAddedtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.ignoreAdded = ProtocolTypeManager.get_instance(IgnoredInformations,_loc2_)
        self.ignoreAdded.deserializeAsync(self._ignoreAddedtree)

    def _sessionFunc(self, param1):
        self.session = param1.read_boolean()


class IgnoredAddFailureMessage(NetworkMessage):
    protocolId = 5679

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reason = 0

    def getMessageId(self):
        return 5679

    def initIgnoredAddFailureMessage(self, param1=0):
        self.reason = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.reason = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IgnoredAddFailureMessage(param1)

    def serializeAs_IgnoredAddFailureMessage(self, param1):
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_IgnoredAddFailureMessage(param1)

    def deserializeAs_IgnoredAddFailureMessage(self, param1):
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IgnoredAddFailureMessage(param1)

    def deserializeAsyncAs_IgnoredAddFailureMessage(self, param1):
        param1.add_child(self._reasonFunc)

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()
        if self.reason < 0:
            raise RuntimeError("Forbidden value (" + str(self.reason) + ") on element of IgnoredAddFailureMessage.reason.")


class IgnoredAddRequestMessage(NetworkMessage):
    protocolId = 5673

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.name = ""
        self.session = False

    def getMessageId(self):
        return 5673

    def initIgnoredAddRequestMessage(self, param1="", param2=False):
        self.name = param1
        self.session = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.name = ""
        self.session = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IgnoredAddRequestMessage(param1)

    def serializeAs_IgnoredAddRequestMessage(self, param1):
        param1.write_utf(self.name)
        param1.write_boolean(self.session)

    def deserialize(self, param1):
        self.deserializeAs_IgnoredAddRequestMessage(param1)

    def deserializeAs_IgnoredAddRequestMessage(self, param1):
        self._nameFunc(param1)
        self._sessionFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IgnoredAddRequestMessage(param1)

    def deserializeAsyncAs_IgnoredAddRequestMessage(self, param1):
        param1.add_child(self._nameFunc)
        param1.add_child(self._sessionFunc)

    def _nameFunc(self, param1):
        self.name = param1.read_utf()

    def _sessionFunc(self, param1):
        self.session = param1.read_boolean()


class IgnoredDeleteRequestMessage(NetworkMessage):
    protocolId = 5680

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.accountId = 0
        self.session = False

    def getMessageId(self):
        return 5680

    def initIgnoredDeleteRequestMessage(self, param1=0, param2=False):
        self.accountId = param1
        self.session = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.accountId = 0
        self.session = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IgnoredDeleteRequestMessage(param1)

    def serializeAs_IgnoredDeleteRequestMessage(self, param1):
        if self.accountId < 0:
            raise RuntimeError("Forbidden value (" + str(self.accountId) + ") on element accountId.")
        param1.write_int(self.accountId)
        param1.write_boolean(self.session)

    def deserialize(self, param1):
        self.deserializeAs_IgnoredDeleteRequestMessage(param1)

    def deserializeAs_IgnoredDeleteRequestMessage(self, param1):
        self._accountIdFunc(param1)
        self._sessionFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IgnoredDeleteRequestMessage(param1)

    def deserializeAsyncAs_IgnoredDeleteRequestMessage(self, param1):
        param1.add_child(self._accountIdFunc)
        param1.add_child(self._sessionFunc)

    def _accountIdFunc(self, param1):
        self.accountId = param1.read_int()
        if self.accountId < 0:
            raise RuntimeError("Forbidden value (" + str(self.accountId) + ") on element of IgnoredDeleteRequestMessage.accountId.")

    def _sessionFunc(self, param1):
        self.session = param1.read_boolean()


class IgnoredDeleteResultMessage(NetworkMessage):
    protocolId = 5677

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.success = False
        self.name = ""
        self.session = False

    def getMessageId(self):
        return 5677

    def initIgnoredDeleteResultMessage(self, param1=False, param2="", param3=False):
        self.success = param1
        self.name = param2
        self.session = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.success = False
        self.name = ""
        self.session = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IgnoredDeleteResultMessage(param1)

    def serializeAs_IgnoredDeleteResultMessage(self, param1):
        _loc2_ = 0
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,0,self.success)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,1,self.session)
        param1.write_byte(_loc2_)
        param1.write_utf(self.name)

    def deserialize(self, param1):
        self.deserializeAs_IgnoredDeleteResultMessage(param1)

    def deserializeAs_IgnoredDeleteResultMessage(self, param1):
        self.deserializeByteBoxes(param1)
        self._nameFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IgnoredDeleteResultMessage(param1)

    def deserializeAsyncAs_IgnoredDeleteResultMessage(self, param1):
        param1.add_child(self.deserializeByteBoxes)
        param1.add_child(self._nameFunc)

    def deserializeByteBoxes(self, param1):
        _loc2_ = param1.read_byte()
        self.success = BooleanByteWrapper.get_flag(_loc2_,0)
        self.session = BooleanByteWrapper.get_flag(_loc2_,1)

    def _nameFunc(self, param1):
        self.name = param1.read_utf()


class IgnoredGetListMessage(NetworkMessage):
    protocolId = 5676

    def getMessageId(self):
        return 5676

    def initIgnoredGetListMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_IgnoredGetListMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_IgnoredGetListMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_IgnoredGetListMessage(self, param1):
        pass


class IgnoredListMessage(NetworkMessage):
    protocolId = 5674

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.ignoredList = []
        self._ignoredListtree = FuncTree()

    def getMessageId(self):
        return 5674

    def initIgnoredListMessage(self, param1=[]):
        self.ignoredList = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.ignoredList = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IgnoredListMessage(param1)

    def serializeAs_IgnoredListMessage(self, param1):
        param1.write_short(len(self.ignoredList))
        _loc2_ = 0
        while _loc2_ < len(self.ignoredList):
            param1.write_short(as_parent(self.ignoredList[_loc2_], IgnoredInformations).getTypeId())
            as_parent(self.ignoredList[_loc2_], IgnoredInformations).serialize(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_IgnoredListMessage(param1)

    def deserializeAs_IgnoredListMessage(self, param1):
        _loc4_ = 0
        _loc5_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_unsigned_short()
            _loc5_ = ProtocolTypeManager.get_instance(IgnoredInformations,_loc4_)
            _loc5_.deserialize(param1)
            self.ignoredList.append(_loc5_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IgnoredListMessage(param1)

    def deserializeAsyncAs_IgnoredListMessage(self, param1):
        self._ignoredListtree = param1.add_child(self._ignoredListtreeFunc)

    def _ignoredListtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._ignoredListtree.add_child(self._ignoredListFunc)
            _loc3_ += 1

    def _ignoredListFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(IgnoredInformations,_loc2_)
        _loc3_.deserialize(param1)
        self.ignoredList.append(_loc3_)


class SpouseGetInformationsMessage(NetworkMessage):
    protocolId = 6355

    def getMessageId(self):
        return 6355

    def initSpouseGetInformationsMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_SpouseGetInformationsMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_SpouseGetInformationsMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_SpouseGetInformationsMessage(self, param1):
        pass


class SpouseInformationsMessage(NetworkMessage):
    protocolId = 6356

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.spouse = FriendSpouseInformations()
        self._spousetree = FuncTree()

    def getMessageId(self):
        return 6356

    def initSpouseInformationsMessage(self, param1=None):
        self.spouse = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.spouse = FriendSpouseInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SpouseInformationsMessage(param1)

    def serializeAs_SpouseInformationsMessage(self, param1):
        param1.write_short(self.spouse.getTypeId())
        self.spouse.serialize(param1)

    def deserialize(self, param1):
        self.deserializeAs_SpouseInformationsMessage(param1)

    def deserializeAs_SpouseInformationsMessage(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.spouse = ProtocolTypeManager.get_instance(FriendSpouseInformations,_loc2_)
        self.spouse.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SpouseInformationsMessage(param1)

    def deserializeAsyncAs_SpouseInformationsMessage(self, param1):
        self._spousetree = param1.add_child(self._spousetreeFunc)

    def _spousetreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.spouse = ProtocolTypeManager.get_instance(FriendSpouseInformations,_loc2_)
        self.spouse.deserializeAsync(self._spousetree)


class SpouseStatusMessage(NetworkMessage):
    protocolId = 6265

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.hasSpouse = False

    def getMessageId(self):
        return 6265

    def initSpouseStatusMessage(self, param1=False):
        self.hasSpouse = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.hasSpouse = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SpouseStatusMessage(param1)

    def serializeAs_SpouseStatusMessage(self, param1):
        param1.write_boolean(self.hasSpouse)

    def deserialize(self, param1):
        self.deserializeAs_SpouseStatusMessage(param1)

    def deserializeAs_SpouseStatusMessage(self, param1):
        self._hasSpouseFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SpouseStatusMessage(param1)

    def deserializeAsyncAs_SpouseStatusMessage(self, param1):
        param1.add_child(self._hasSpouseFunc)

    def _hasSpouseFunc(self, param1):
        self.hasSpouse = param1.read_boolean()


class WarnOnPermaDeathStateMessage(NetworkMessage):
    protocolId = 6513

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.enable = False

    def getMessageId(self):
        return 6513

    def initWarnOnPermaDeathStateMessage(self, param1=False):
        self.enable = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.enable = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_WarnOnPermaDeathStateMessage(param1)

    def serializeAs_WarnOnPermaDeathStateMessage(self, param1):
        param1.write_boolean(self.enable)

    def deserialize(self, param1):
        self.deserializeAs_WarnOnPermaDeathStateMessage(param1)

    def deserializeAs_WarnOnPermaDeathStateMessage(self, param1):
        self._enableFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_WarnOnPermaDeathStateMessage(param1)

    def deserializeAsyncAs_WarnOnPermaDeathStateMessage(self, param1):
        param1.add_child(self._enableFunc)

    def _enableFunc(self, param1):
        self.enable = param1.read_boolean()


class GuestLimitationMessage(NetworkMessage):
    protocolId = 6506

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reason = 0

    def getMessageId(self):
        return 6506

    def initGuestLimitationMessage(self, param1=0):
        self.reason = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.reason = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuestLimitationMessage(param1)

    def serializeAs_GuestLimitationMessage(self, param1):
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_GuestLimitationMessage(param1)

    def deserializeAs_GuestLimitationMessage(self, param1):
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuestLimitationMessage(param1)

    def deserializeAsyncAs_GuestLimitationMessage(self, param1):
        param1.add_child(self._reasonFunc)

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()
        if self.reason < 0:
            raise RuntimeError("Forbidden value (" + str(self.reason) + ") on element of GuestLimitationMessage.reason.")


class GuestModeMessage(NetworkMessage):
    protocolId = 6505

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.active = False

    def getMessageId(self):
        return 6505

    def initGuestModeMessage(self, param1=False):
        self.active = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.active = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuestModeMessage(param1)

    def serializeAs_GuestModeMessage(self, param1):
        param1.write_boolean(self.active)

    def deserialize(self, param1):
        self.deserializeAs_GuestModeMessage(param1)

    def deserializeAs_GuestModeMessage(self, param1):
        self._activeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuestModeMessage(param1)

    def deserializeAsyncAs_GuestModeMessage(self, param1):
        param1.add_child(self._activeFunc)

    def _activeFunc(self, param1):
        self.active = param1.read_boolean()


class ChallengeFightJoinRefusedMessage(NetworkMessage):
    protocolId = 5908

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.playerId = 0
        self.reason = 0

    def getMessageId(self):
        return 5908

    def initChallengeFightJoinRefusedMessage(self, param1=0, param2=0):
        self.playerId = param1
        self.reason = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.playerId = 0
        self.reason = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChallengeFightJoinRefusedMessage(param1)

    def serializeAs_ChallengeFightJoinRefusedMessage(self, param1):
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element playerId.")
        param1.write_var_long(self.playerId)
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_ChallengeFightJoinRefusedMessage(param1)

    def deserializeAs_ChallengeFightJoinRefusedMessage(self, param1):
        self._playerIdFunc(param1)
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChallengeFightJoinRefusedMessage(param1)

    def deserializeAsyncAs_ChallengeFightJoinRefusedMessage(self, param1):
        param1.add_child(self._playerIdFunc)
        param1.add_child(self._reasonFunc)

    def _playerIdFunc(self, param1):
        self.playerId = param1.read_var_uh_long()
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element of ChallengeFightJoinRefusedMessage.playerId.")

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()


class GuildChangeMemberParametersMessage(NetworkMessage):
    protocolId = 5549

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.memberId = 0
        self.rank = 0
        self.experienceGivenPercent = 0
        self.rights = 0

    def getMessageId(self):
        return 5549

    def initGuildChangeMemberParametersMessage(self, param1=0, param2=0, param3=0, param4=0):
        self.memberId = param1
        self.rank = param2
        self.experienceGivenPercent = param3
        self.rights = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.memberId = 0
        self.rank = 0
        self.experienceGivenPercent = 0
        self.rights = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildChangeMemberParametersMessage(param1)

    def serializeAs_GuildChangeMemberParametersMessage(self, param1):
        if self.memberId < 0 or self.memberId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.memberId) + ") on element memberId.")
        param1.write_var_long(self.memberId)
        if self.rank < 0:
            raise RuntimeError("Forbidden value (" + str(self.rank) + ") on element rank.")
        param1.write_var_short(self.rank)
        if self.experienceGivenPercent < 0 or self.experienceGivenPercent > 100:
            raise RuntimeError("Forbidden value (" + str(self.experienceGivenPercent) + ") on element experienceGivenPercent.")
        param1.write_byte(self.experienceGivenPercent)
        if self.rights < 0:
            raise RuntimeError("Forbidden value (" + str(self.rights) + ") on element rights.")
        param1.write_var_int(self.rights)

    def deserialize(self, param1):
        self.deserializeAs_GuildChangeMemberParametersMessage(param1)

    def deserializeAs_GuildChangeMemberParametersMessage(self, param1):
        self._memberIdFunc(param1)
        self._rankFunc(param1)
        self._experienceGivenPercentFunc(param1)
        self._rightsFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildChangeMemberParametersMessage(param1)

    def deserializeAsyncAs_GuildChangeMemberParametersMessage(self, param1):
        param1.add_child(self._memberIdFunc)
        param1.add_child(self._rankFunc)
        param1.add_child(self._experienceGivenPercentFunc)
        param1.add_child(self._rightsFunc)

    def _memberIdFunc(self, param1):
        self.memberId = param1.read_var_uh_long()
        if self.memberId < 0 or self.memberId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.memberId) + ") on element of GuildChangeMemberParametersMessage.memberId.")

    def _rankFunc(self, param1):
        self.rank = param1.read_var_uh_short()
        if self.rank < 0:
            raise RuntimeError("Forbidden value (" + str(self.rank) + ") on element of GuildChangeMemberParametersMessage.rank.")

    def _experienceGivenPercentFunc(self, param1):
        self.experienceGivenPercent = param1.read_byte()
        if self.experienceGivenPercent < 0 or self.experienceGivenPercent > 100:
            raise RuntimeError("Forbidden value (" + str(self.experienceGivenPercent) + ") on element of GuildChangeMemberParametersMessage.experienceGivenPercent.")

    def _rightsFunc(self, param1):
        self.rights = param1.read_var_uh_int()
        if self.rights < 0:
            raise RuntimeError("Forbidden value (" + str(self.rights) + ") on element of GuildChangeMemberParametersMessage.rights.")


class GuildCharacsUpgradeRequestMessage(NetworkMessage):
    protocolId = 5706

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.charaTypeTarget = 0

    def getMessageId(self):
        return 5706

    def initGuildCharacsUpgradeRequestMessage(self, param1=0):
        self.charaTypeTarget = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.charaTypeTarget = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildCharacsUpgradeRequestMessage(param1)

    def serializeAs_GuildCharacsUpgradeRequestMessage(self, param1):
        param1.write_byte(self.charaTypeTarget)

    def deserialize(self, param1):
        self.deserializeAs_GuildCharacsUpgradeRequestMessage(param1)

    def deserializeAs_GuildCharacsUpgradeRequestMessage(self, param1):
        self._charaTypeTargetFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildCharacsUpgradeRequestMessage(param1)

    def deserializeAsyncAs_GuildCharacsUpgradeRequestMessage(self, param1):
        param1.add_child(self._charaTypeTargetFunc)

    def _charaTypeTargetFunc(self, param1):
        self.charaTypeTarget = param1.read_byte()
        if self.charaTypeTarget < 0:
            raise RuntimeError("Forbidden value (" + str(self.charaTypeTarget) + ") on element of GuildCharacsUpgradeRequestMessage.charaTypeTarget.")


class GuildCreationResultMessage(NetworkMessage):
    protocolId = 5554

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.result = 0

    def getMessageId(self):
        return 5554

    def initGuildCreationResultMessage(self, param1=0):
        self.result = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.result = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildCreationResultMessage(param1)

    def serializeAs_GuildCreationResultMessage(self, param1):
        param1.write_byte(self.result)

    def deserialize(self, param1):
        self.deserializeAs_GuildCreationResultMessage(param1)

    def deserializeAs_GuildCreationResultMessage(self, param1):
        self._resultFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildCreationResultMessage(param1)

    def deserializeAsyncAs_GuildCreationResultMessage(self, param1):
        param1.add_child(self._resultFunc)

    def _resultFunc(self, param1):
        self.result = param1.read_byte()
        if self.result < 0:
            raise RuntimeError("Forbidden value (" + str(self.result) + ") on element of GuildCreationResultMessage.result.")


class GuildCreationStartedMessage(NetworkMessage):
    protocolId = 5920

    def getMessageId(self):
        return 5920

    def initGuildCreationStartedMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_GuildCreationStartedMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_GuildCreationStartedMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_GuildCreationStartedMessage(self, param1):
        pass


class GuildCreationValidMessage(NetworkMessage):
    protocolId = 5546

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.guildName = ""
        self.guildEmblem = GuildEmblem()
        self._guildEmblemtree = FuncTree()

    def getMessageId(self):
        return 5546

    def initGuildCreationValidMessage(self, param1="", param2=None):
        self.guildName = param1
        self.guildEmblem = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.guildName = ""
        self.guildEmblem = GuildEmblem()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildCreationValidMessage(param1)

    def serializeAs_GuildCreationValidMessage(self, param1):
        param1.write_utf(self.guildName)
        self.guildEmblem.serializeAs_GuildEmblem(param1)

    def deserialize(self, param1):
        self.deserializeAs_GuildCreationValidMessage(param1)

    def deserializeAs_GuildCreationValidMessage(self, param1):
        self._guildNameFunc(param1)
        self.guildEmblem = GuildEmblem()
        self.guildEmblem.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildCreationValidMessage(param1)

    def deserializeAsyncAs_GuildCreationValidMessage(self, param1):
        param1.add_child(self._guildNameFunc)
        self._guildEmblemtree = param1.add_child(self._guildEmblemtreeFunc)

    def _guildNameFunc(self, param1):
        self.guildName = param1.read_utf()

    def _guildEmblemtreeFunc(self, param1):
        self.guildEmblem = GuildEmblem()
        self.guildEmblem.deserializeAsync(self._guildEmblemtree)


class GuildFactsErrorMessage(NetworkMessage):
    protocolId = 6424

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.guildId = 0

    def getMessageId(self):
        return 6424

    def initGuildFactsErrorMessage(self, param1=0):
        self.guildId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.guildId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildFactsErrorMessage(param1)

    def serializeAs_GuildFactsErrorMessage(self, param1):
        if self.guildId < 0:
            raise RuntimeError("Forbidden value (" + str(self.guildId) + ") on element guildId.")
        param1.write_var_int(self.guildId)

    def deserialize(self, param1):
        self.deserializeAs_GuildFactsErrorMessage(param1)

    def deserializeAs_GuildFactsErrorMessage(self, param1):
        self._guildIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildFactsErrorMessage(param1)

    def deserializeAsyncAs_GuildFactsErrorMessage(self, param1):
        param1.add_child(self._guildIdFunc)

    def _guildIdFunc(self, param1):
        self.guildId = param1.read_var_uh_int()
        if self.guildId < 0:
            raise RuntimeError("Forbidden value (" + str(self.guildId) + ") on element of GuildFactsErrorMessage.guildId.")


class GuildFactsMessage(NetworkMessage):
    protocolId = 6415

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.infos = GuildFactSheetInformations()
        self.creationDate = 0
        self.nbTaxCollectors = 0
        self.members = []
        self._infostree = FuncTree()
        self._memberstree = FuncTree()

    def getMessageId(self):
        return 6415

    def initGuildFactsMessage(self, param1=None, param2=0, param3=0, param4=[]):
        self.infos = param1
        self.creationDate = param2
        self.nbTaxCollectors = param3
        self.members = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.infos = GuildFactSheetInformations()
        self.nbTaxCollectors = 0
        self.members = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildFactsMessage(param1)

    def serializeAs_GuildFactsMessage(self, param1):
        param1.write_short(self.infos.getTypeId())
        self.infos.serialize(param1)
        if self.creationDate < 0:
            raise RuntimeError("Forbidden value (" + str(self.creationDate) + ") on element creationDate.")
        param1.write_int(self.creationDate)
        if self.nbTaxCollectors < 0:
            raise RuntimeError("Forbidden value (" + str(self.nbTaxCollectors) + ") on element nbTaxCollectors.")
        param1.write_var_short(self.nbTaxCollectors)
        param1.write_short(len(self.members))
        _loc2_ = 0
        while _loc2_ < len(self.members):
            as_parent(self.members[_loc2_], CharacterMinimalInformations).serializeAs_CharacterMinimalInformations(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GuildFactsMessage(param1)

    def deserializeAs_GuildFactsMessage(self, param1):
        _loc5_ = None
        _loc2_ = param1.read_unsigned_short()
        self.infos = ProtocolTypeManager.get_instance(GuildFactSheetInformations,_loc2_)
        self.infos.deserialize(param1)
        self._creationDateFunc(param1)
        self._nbTaxCollectorsFunc(param1)
        _loc3_ = param1.read_unsigned_short()
        _loc4_ = 0
        while _loc4_ < _loc3_:
            _loc5_ = CharacterMinimalInformations()
            _loc5_.deserialize(param1)
            self.members.append(_loc5_)
            _loc4_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildFactsMessage(param1)

    def deserializeAsyncAs_GuildFactsMessage(self, param1):
        self._infostree = param1.add_child(self._infostreeFunc)
        param1.add_child(self._creationDateFunc)
        param1.add_child(self._nbTaxCollectorsFunc)
        self._memberstree = param1.add_child(self._memberstreeFunc)

    def _infostreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.infos = ProtocolTypeManager.get_instance(GuildFactSheetInformations,_loc2_)
        self.infos.deserializeAsync(self._infostree)

    def _creationDateFunc(self, param1):
        self.creationDate = param1.read_int()
        if self.creationDate < 0:
            raise RuntimeError("Forbidden value (" + str(self.creationDate) + ") on element of GuildFactsMessage.creationDate.")

    def _nbTaxCollectorsFunc(self, param1):
        self.nbTaxCollectors = param1.read_var_uh_short()
        if self.nbTaxCollectors < 0:
            raise RuntimeError("Forbidden value (" + str(self.nbTaxCollectors) + ") on element of GuildFactsMessage.nbTaxCollectors.")

    def _memberstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._memberstree.add_child(self._membersFunc)
            _loc3_ += 1

    def _membersFunc(self, param1):
        _loc2_ = CharacterMinimalInformations()
        _loc2_.deserialize(param1)
        self.members.append(_loc2_)


class GuildFactsRequestMessage(NetworkMessage):
    protocolId = 6404

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.guildId = 0

    def getMessageId(self):
        return 6404

    def initGuildFactsRequestMessage(self, param1=0):
        self.guildId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.guildId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildFactsRequestMessage(param1)

    def serializeAs_GuildFactsRequestMessage(self, param1):
        if self.guildId < 0:
            raise RuntimeError("Forbidden value (" + str(self.guildId) + ") on element guildId.")
        param1.write_var_int(self.guildId)

    def deserialize(self, param1):
        self.deserializeAs_GuildFactsRequestMessage(param1)

    def deserializeAs_GuildFactsRequestMessage(self, param1):
        self._guildIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildFactsRequestMessage(param1)

    def deserializeAsyncAs_GuildFactsRequestMessage(self, param1):
        param1.add_child(self._guildIdFunc)

    def _guildIdFunc(self, param1):
        self.guildId = param1.read_var_uh_int()
        if self.guildId < 0:
            raise RuntimeError("Forbidden value (" + str(self.guildId) + ") on element of GuildFactsRequestMessage.guildId.")


class GuildGetInformationsMessage(NetworkMessage):
    protocolId = 5550

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.infoType = 0

    def getMessageId(self):
        return 5550

    def initGuildGetInformationsMessage(self, param1=0):
        self.infoType = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.infoType = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildGetInformationsMessage(param1)

    def serializeAs_GuildGetInformationsMessage(self, param1):
        param1.write_byte(self.infoType)

    def deserialize(self, param1):
        self.deserializeAs_GuildGetInformationsMessage(param1)

    def deserializeAs_GuildGetInformationsMessage(self, param1):
        self._infoTypeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildGetInformationsMessage(param1)

    def deserializeAsyncAs_GuildGetInformationsMessage(self, param1):
        param1.add_child(self._infoTypeFunc)

    def _infoTypeFunc(self, param1):
        self.infoType = param1.read_byte()
        if self.infoType < 0:
            raise RuntimeError("Forbidden value (" + str(self.infoType) + ") on element of GuildGetInformationsMessage.infoType.")


class GuildHouseRemoveMessage(NetworkMessage):
    protocolId = 6180

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.houseId = 0
        self.instanceId = 0
        self.secondHand = False

    def getMessageId(self):
        return 6180

    def initGuildHouseRemoveMessage(self, param1=0, param2=0, param3=False):
        self.houseId = param1
        self.instanceId = param2
        self.secondHand = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.houseId = 0
        self.instanceId = 0
        self.secondHand = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildHouseRemoveMessage(param1)

    def serializeAs_GuildHouseRemoveMessage(self, param1):
        if self.houseId < 0:
            raise RuntimeError("Forbidden value (" + str(self.houseId) + ") on element houseId.")
        param1.write_var_int(self.houseId)
        if self.instanceId < 0:
            raise RuntimeError("Forbidden value (" + str(self.instanceId) + ") on element instanceId.")
        param1.write_int(self.instanceId)
        param1.write_boolean(self.secondHand)

    def deserialize(self, param1):
        self.deserializeAs_GuildHouseRemoveMessage(param1)

    def deserializeAs_GuildHouseRemoveMessage(self, param1):
        self._houseIdFunc(param1)
        self._instanceIdFunc(param1)
        self._secondHandFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildHouseRemoveMessage(param1)

    def deserializeAsyncAs_GuildHouseRemoveMessage(self, param1):
        param1.add_child(self._houseIdFunc)
        param1.add_child(self._instanceIdFunc)
        param1.add_child(self._secondHandFunc)

    def _houseIdFunc(self, param1):
        self.houseId = param1.read_var_uh_int()
        if self.houseId < 0:
            raise RuntimeError("Forbidden value (" + str(self.houseId) + ") on element of GuildHouseRemoveMessage.houseId.")

    def _instanceIdFunc(self, param1):
        self.instanceId = param1.read_int()
        if self.instanceId < 0:
            raise RuntimeError("Forbidden value (" + str(self.instanceId) + ") on element of GuildHouseRemoveMessage.instanceId.")

    def _secondHandFunc(self, param1):
        self.secondHand = param1.read_boolean()


class GuildHousesInformationMessage(NetworkMessage):
    protocolId = 5919

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.housesInformations = []
        self._housesInformationstree = FuncTree()

    def getMessageId(self):
        return 5919

    def initGuildHousesInformationMessage(self, param1=[]):
        self.housesInformations = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.housesInformations = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildHousesInformationMessage(param1)

    def serializeAs_GuildHousesInformationMessage(self, param1):
        param1.write_short(len(self.housesInformations))
        _loc2_ = 0
        while _loc2_ < len(self.housesInformations):
            as_parent(self.housesInformations[_loc2_], HouseInformationsForGuild).serializeAs_HouseInformationsForGuild(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GuildHousesInformationMessage(param1)

    def deserializeAs_GuildHousesInformationMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = HouseInformationsForGuild()
            _loc4_.deserialize(param1)
            self.housesInformations.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildHousesInformationMessage(param1)

    def deserializeAsyncAs_GuildHousesInformationMessage(self, param1):
        self._housesInformationstree = param1.add_child(self._housesInformationstreeFunc)

    def _housesInformationstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._housesInformationstree.add_child(self._housesInformationsFunc)
            _loc3_ += 1

    def _housesInformationsFunc(self, param1):
        _loc2_ = HouseInformationsForGuild()
        _loc2_.deserialize(param1)
        self.housesInformations.append(_loc2_)


class GuildHouseTeleportRequestMessage(NetworkMessage):
    protocolId = 5712

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.houseId = 0
        self.houseInstanceId = 0

    def getMessageId(self):
        return 5712

    def initGuildHouseTeleportRequestMessage(self, param1=0, param2=0):
        self.houseId = param1
        self.houseInstanceId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.houseId = 0
        self.houseInstanceId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildHouseTeleportRequestMessage(param1)

    def serializeAs_GuildHouseTeleportRequestMessage(self, param1):
        if self.houseId < 0:
            raise RuntimeError("Forbidden value (" + str(self.houseId) + ") on element houseId.")
        param1.write_var_int(self.houseId)
        param1.write_int(self.houseInstanceId)

    def deserialize(self, param1):
        self.deserializeAs_GuildHouseTeleportRequestMessage(param1)

    def deserializeAs_GuildHouseTeleportRequestMessage(self, param1):
        self._houseIdFunc(param1)
        self._houseInstanceIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildHouseTeleportRequestMessage(param1)

    def deserializeAsyncAs_GuildHouseTeleportRequestMessage(self, param1):
        param1.add_child(self._houseIdFunc)
        param1.add_child(self._houseInstanceIdFunc)

    def _houseIdFunc(self, param1):
        self.houseId = param1.read_var_uh_int()
        if self.houseId < 0:
            raise RuntimeError("Forbidden value (" + str(self.houseId) + ") on element of GuildHouseTeleportRequestMessage.houseId.")

    def _houseInstanceIdFunc(self, param1):
        self.houseInstanceId = param1.read_int()


class GuildHouseUpdateInformationMessage(NetworkMessage):
    protocolId = 6181

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.housesInformations = HouseInformationsForGuild()
        self._housesInformationstree = FuncTree()

    def getMessageId(self):
        return 6181

    def initGuildHouseUpdateInformationMessage(self, param1=None):
        self.housesInformations = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.housesInformations = HouseInformationsForGuild()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildHouseUpdateInformationMessage(param1)

    def serializeAs_GuildHouseUpdateInformationMessage(self, param1):
        self.housesInformations.serializeAs_HouseInformationsForGuild(param1)

    def deserialize(self, param1):
        self.deserializeAs_GuildHouseUpdateInformationMessage(param1)

    def deserializeAs_GuildHouseUpdateInformationMessage(self, param1):
        self.housesInformations = HouseInformationsForGuild()
        self.housesInformations.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildHouseUpdateInformationMessage(param1)

    def deserializeAsyncAs_GuildHouseUpdateInformationMessage(self, param1):
        self._housesInformationstree = param1.add_child(self._housesInformationstreeFunc)

    def _housesInformationstreeFunc(self, param1):
        self.housesInformations = HouseInformationsForGuild()
        self.housesInformations.deserializeAsync(self._housesInformationstree)


class GuildInformationsGeneralMessage(NetworkMessage):
    protocolId = 5557

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.abandonnedPaddock = False
        self.level = 0
        self.expLevelFloor = 0
        self.experience = 0
        self.expNextLevelFloor = 0
        self.creationDate = 0
        self.nbTotalMembers = 0
        self.nbConnectedMembers = 0

    def getMessageId(self):
        return 5557

    def initGuildInformationsGeneralMessage(self, param1=False, param2=0, param3=0, param4=0, param5=0, param6=0, param7=0, param8=0):
        self.abandonnedPaddock = param1
        self.level = param2
        self.expLevelFloor = param3
        self.experience = param4
        self.expNextLevelFloor = param5
        self.creationDate = param6
        self.nbTotalMembers = param7
        self.nbConnectedMembers = param8
        self._isInitialized = True
        return self

    def reset(self):
        self.abandonnedPaddock = False
        self.level = 0
        self.expLevelFloor = 0
        self.experience = 0
        self.expNextLevelFloor = 0
        self.creationDate = 0
        self.nbTotalMembers = 0
        self.nbConnectedMembers = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildInformationsGeneralMessage(param1)

    def serializeAs_GuildInformationsGeneralMessage(self, param1):
        param1.write_boolean(self.abandonnedPaddock)
        if self.level < 0 or self.level > 255:
            raise RuntimeError("Forbidden value (" + str(self.level) + ") on element level.")
        param1.write_byte(self.level)
        if self.expLevelFloor < 0 or self.expLevelFloor > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.expLevelFloor) + ") on element expLevelFloor.")
        param1.write_var_long(self.expLevelFloor)
        if self.experience < 0 or self.experience > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.experience) + ") on element experience.")
        param1.write_var_long(self.experience)
        if self.expNextLevelFloor < 0 or self.expNextLevelFloor > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.expNextLevelFloor) + ") on element expNextLevelFloor.")
        param1.write_var_long(self.expNextLevelFloor)
        if self.creationDate < 0:
            raise RuntimeError("Forbidden value (" + str(self.creationDate) + ") on element creationDate.")
        param1.write_int(self.creationDate)
        if self.nbTotalMembers < 0:
            raise RuntimeError("Forbidden value (" + str(self.nbTotalMembers) + ") on element nbTotalMembers.")
        param1.write_var_short(self.nbTotalMembers)
        if self.nbConnectedMembers < 0:
            raise RuntimeError("Forbidden value (" + str(self.nbConnectedMembers) + ") on element nbConnectedMembers.")
        param1.write_var_short(self.nbConnectedMembers)

    def deserialize(self, param1):
        self.deserializeAs_GuildInformationsGeneralMessage(param1)

    def deserializeAs_GuildInformationsGeneralMessage(self, param1):
        self._abandonnedPaddockFunc(param1)
        self._levelFunc(param1)
        self._expLevelFloorFunc(param1)
        self._experienceFunc(param1)
        self._expNextLevelFloorFunc(param1)
        self._creationDateFunc(param1)
        self._nbTotalMembersFunc(param1)
        self._nbConnectedMembersFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildInformationsGeneralMessage(param1)

    def deserializeAsyncAs_GuildInformationsGeneralMessage(self, param1):
        param1.add_child(self._abandonnedPaddockFunc)
        param1.add_child(self._levelFunc)
        param1.add_child(self._expLevelFloorFunc)
        param1.add_child(self._experienceFunc)
        param1.add_child(self._expNextLevelFloorFunc)
        param1.add_child(self._creationDateFunc)
        param1.add_child(self._nbTotalMembersFunc)
        param1.add_child(self._nbConnectedMembersFunc)

    def _abandonnedPaddockFunc(self, param1):
        self.abandonnedPaddock = param1.read_boolean()

    def _levelFunc(self, param1):
        self.level = param1.read_unsigned_byte()
        if self.level < 0 or self.level > 255:
            raise RuntimeError("Forbidden value (" + str(self.level) + ") on element of GuildInformationsGeneralMessage.level.")

    def _expLevelFloorFunc(self, param1):
        self.expLevelFloor = param1.read_var_uh_long()
        if self.expLevelFloor < 0 or self.expLevelFloor > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.expLevelFloor) + ") on element of GuildInformationsGeneralMessage.expLevelFloor.")

    def _experienceFunc(self, param1):
        self.experience = param1.read_var_uh_long()
        if self.experience < 0 or self.experience > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.experience) + ") on element of GuildInformationsGeneralMessage.experience.")

    def _expNextLevelFloorFunc(self, param1):
        self.expNextLevelFloor = param1.read_var_uh_long()
        if self.expNextLevelFloor < 0 or self.expNextLevelFloor > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.expNextLevelFloor) + ") on element of GuildInformationsGeneralMessage.expNextLevelFloor.")

    def _creationDateFunc(self, param1):
        self.creationDate = param1.read_int()
        if self.creationDate < 0:
            raise RuntimeError("Forbidden value (" + str(self.creationDate) + ") on element of GuildInformationsGeneralMessage.creationDate.")

    def _nbTotalMembersFunc(self, param1):
        self.nbTotalMembers = param1.read_var_uh_short()
        if self.nbTotalMembers < 0:
            raise RuntimeError("Forbidden value (" + str(self.nbTotalMembers) + ") on element of GuildInformationsGeneralMessage.nbTotalMembers.")

    def _nbConnectedMembersFunc(self, param1):
        self.nbConnectedMembers = param1.read_var_uh_short()
        if self.nbConnectedMembers < 0:
            raise RuntimeError("Forbidden value (" + str(self.nbConnectedMembers) + ") on element of GuildInformationsGeneralMessage.nbConnectedMembers.")


class GuildInformationsMembersMessage(NetworkMessage):
    protocolId = 5558

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.members = []
        self._memberstree = FuncTree()

    def getMessageId(self):
        return 5558

    def initGuildInformationsMembersMessage(self, param1=[]):
        self.members = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.members = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildInformationsMembersMessage(param1)

    def serializeAs_GuildInformationsMembersMessage(self, param1):
        param1.write_short(len(self.members))
        _loc2_ = 0
        while _loc2_ < len(self.members):
            as_parent(self.members[_loc2_], GuildMember).serializeAs_GuildMember(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GuildInformationsMembersMessage(param1)

    def deserializeAs_GuildInformationsMembersMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = GuildMember()
            _loc4_.deserialize(param1)
            self.members.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildInformationsMembersMessage(param1)

    def deserializeAsyncAs_GuildInformationsMembersMessage(self, param1):
        self._memberstree = param1.add_child(self._memberstreeFunc)

    def _memberstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._memberstree.add_child(self._membersFunc)
            _loc3_ += 1

    def _membersFunc(self, param1):
        _loc2_ = GuildMember()
        _loc2_.deserialize(param1)
        self.members.append(_loc2_)


class GuildInformationsMemberUpdateMessage(NetworkMessage):
    protocolId = 5597

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.member = GuildMember()
        self._membertree = FuncTree()

    def getMessageId(self):
        return 5597

    def initGuildInformationsMemberUpdateMessage(self, param1=None):
        self.member = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.member = GuildMember()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildInformationsMemberUpdateMessage(param1)

    def serializeAs_GuildInformationsMemberUpdateMessage(self, param1):
        self.member.serializeAs_GuildMember(param1)

    def deserialize(self, param1):
        self.deserializeAs_GuildInformationsMemberUpdateMessage(param1)

    def deserializeAs_GuildInformationsMemberUpdateMessage(self, param1):
        self.member = GuildMember()
        self.member.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildInformationsMemberUpdateMessage(param1)

    def deserializeAsyncAs_GuildInformationsMemberUpdateMessage(self, param1):
        self._membertree = param1.add_child(self._membertreeFunc)

    def _membertreeFunc(self, param1):
        self.member = GuildMember()
        self.member.deserializeAsync(self._membertree)


class GuildInformationsPaddocksMessage(NetworkMessage):
    protocolId = 5959

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.nbPaddockMax = 0
        self.paddocksInformations = []
        self._paddocksInformationstree = FuncTree()

    def getMessageId(self):
        return 5959

    def initGuildInformationsPaddocksMessage(self, param1=0, param2=[]):
        self.nbPaddockMax = param1
        self.paddocksInformations = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.nbPaddockMax = 0
        self.paddocksInformations = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildInformationsPaddocksMessage(param1)

    def serializeAs_GuildInformationsPaddocksMessage(self, param1):
        if self.nbPaddockMax < 0:
            raise RuntimeError("Forbidden value (" + str(self.nbPaddockMax) + ") on element nbPaddockMax.")
        param1.write_byte(self.nbPaddockMax)
        param1.write_short(len(self.paddocksInformations))
        _loc2_ = 0
        while _loc2_ < len(self.paddocksInformations):
            as_parent(self.paddocksInformations[_loc2_], PaddockContentInformations).serializeAs_PaddockContentInformations(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GuildInformationsPaddocksMessage(param1)

    def deserializeAs_GuildInformationsPaddocksMessage(self, param1):
        _loc4_ = None
        self._nbPaddockMaxFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = PaddockContentInformations()
            _loc4_.deserialize(param1)
            self.paddocksInformations.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildInformationsPaddocksMessage(param1)

    def deserializeAsyncAs_GuildInformationsPaddocksMessage(self, param1):
        param1.add_child(self._nbPaddockMaxFunc)
        self._paddocksInformationstree = param1.add_child(self._paddocksInformationstreeFunc)

    def _nbPaddockMaxFunc(self, param1):
        self.nbPaddockMax = param1.read_byte()
        if self.nbPaddockMax < 0:
            raise RuntimeError("Forbidden value (" + str(self.nbPaddockMax) + ") on element of GuildInformationsPaddocksMessage.nbPaddockMax.")

    def _paddocksInformationstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._paddocksInformationstree.add_child(self._paddocksInformationsFunc)
            _loc3_ += 1

    def _paddocksInformationsFunc(self, param1):
        _loc2_ = PaddockContentInformations()
        _loc2_.deserialize(param1)
        self.paddocksInformations.append(_loc2_)


class GuildInfosUpgradeMessage(NetworkMessage):
    protocolId = 5636

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.maxTaxCollectorsCount = 0
        self.taxCollectorsCount = 0
        self.taxCollectorLifePoints = 0
        self.taxCollectorDamagesBonuses = 0
        self.taxCollectorPods = 0
        self.taxCollectorProspecting = 0
        self.taxCollectorWisdom = 0
        self.boostPoints = 0
        self.spellId = []
        self.spellLevel = []
        self._spellIdtree = FuncTree()
        self._spellLeveltree = FuncTree()

    def getMessageId(self):
        return 5636

    def initGuildInfosUpgradeMessage(self, param1=0, param2=0, param3=0, param4=0, param5=0, param6=0, param7=0, param8=0, param9=[], param10=[]):
        self.maxTaxCollectorsCount = param1
        self.taxCollectorsCount = param2
        self.taxCollectorLifePoints = param3
        self.taxCollectorDamagesBonuses = param4
        self.taxCollectorPods = param5
        self.taxCollectorProspecting = param6
        self.taxCollectorWisdom = param7
        self.boostPoints = param8
        self.spellId = param9
        self.spellLevel = param10
        self._isInitialized = True
        return self

    def reset(self):
        self.maxTaxCollectorsCount = 0
        self.taxCollectorsCount = 0
        self.taxCollectorLifePoints = 0
        self.taxCollectorDamagesBonuses = 0
        self.taxCollectorPods = 0
        self.taxCollectorProspecting = 0
        self.taxCollectorWisdom = 0
        self.boostPoints = 0
        self.spellId = []
        self.spellLevel = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildInfosUpgradeMessage(param1)

    def serializeAs_GuildInfosUpgradeMessage(self, param1):
        if self.maxTaxCollectorsCount < 0:
            raise RuntimeError("Forbidden value (" + str(self.maxTaxCollectorsCount) + ") on element maxTaxCollectorsCount.")
        param1.write_byte(self.maxTaxCollectorsCount)
        if self.taxCollectorsCount < 0:
            raise RuntimeError("Forbidden value (" + str(self.taxCollectorsCount) + ") on element taxCollectorsCount.")
        param1.write_byte(self.taxCollectorsCount)
        if self.taxCollectorLifePoints < 0:
            raise RuntimeError("Forbidden value (" + str(self.taxCollectorLifePoints) + ") on element taxCollectorLifePoints.")
        param1.write_var_short(self.taxCollectorLifePoints)
        if self.taxCollectorDamagesBonuses < 0:
            raise RuntimeError("Forbidden value (" + str(self.taxCollectorDamagesBonuses) + ") on element taxCollectorDamagesBonuses.")
        param1.write_var_short(self.taxCollectorDamagesBonuses)
        if self.taxCollectorPods < 0:
            raise RuntimeError("Forbidden value (" + str(self.taxCollectorPods) + ") on element taxCollectorPods.")
        param1.write_var_short(self.taxCollectorPods)
        if self.taxCollectorProspecting < 0:
            raise RuntimeError("Forbidden value (" + str(self.taxCollectorProspecting) + ") on element taxCollectorProspecting.")
        param1.write_var_short(self.taxCollectorProspecting)
        if self.taxCollectorWisdom < 0:
            raise RuntimeError("Forbidden value (" + str(self.taxCollectorWisdom) + ") on element taxCollectorWisdom.")
        param1.write_var_short(self.taxCollectorWisdom)
        if self.boostPoints < 0:
            raise RuntimeError("Forbidden value (" + str(self.boostPoints) + ") on element boostPoints.")
        param1.write_var_short(self.boostPoints)
        param1.write_short(len(self.spellId))
        _loc2_ = 0
        while _loc2_ < len(self.spellId):
            if self.spellId[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.spellId[_loc2_]) + ") on element 9 (starting at 1) of spellId.")
            param1.write_var_short(self.spellId[_loc2_])
            _loc2_ += 1
        param1.write_short(len(self.spellLevel))
        _loc3_ = 0
        while _loc3_ < len(self.spellLevel):
            param1.write_short(self.spellLevel[_loc3_])
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GuildInfosUpgradeMessage(param1)

    def deserializeAs_GuildInfosUpgradeMessage(self, param1):
        _loc6_ = 0
        _loc7_ = 0
        self._maxTaxCollectorsCountFunc(param1)
        self._taxCollectorsCountFunc(param1)
        self._taxCollectorLifePointsFunc(param1)
        self._taxCollectorDamagesBonusesFunc(param1)
        self._taxCollectorPodsFunc(param1)
        self._taxCollectorProspectingFunc(param1)
        self._taxCollectorWisdomFunc(param1)
        self._boostPointsFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = param1.read_var_uh_short()
            if _loc6_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc6_) + ") on elements of spellId.")
            self.spellId.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = param1.read_short()
            self.spellLevel.append(_loc7_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildInfosUpgradeMessage(param1)

    def deserializeAsyncAs_GuildInfosUpgradeMessage(self, param1):
        param1.add_child(self._maxTaxCollectorsCountFunc)
        param1.add_child(self._taxCollectorsCountFunc)
        param1.add_child(self._taxCollectorLifePointsFunc)
        param1.add_child(self._taxCollectorDamagesBonusesFunc)
        param1.add_child(self._taxCollectorPodsFunc)
        param1.add_child(self._taxCollectorProspectingFunc)
        param1.add_child(self._taxCollectorWisdomFunc)
        param1.add_child(self._boostPointsFunc)
        self._spellIdtree = param1.add_child(self._spellIdtreeFunc)
        self._spellLeveltree = param1.add_child(self._spellLeveltreeFunc)

    def _maxTaxCollectorsCountFunc(self, param1):
        self.maxTaxCollectorsCount = param1.read_byte()
        if self.maxTaxCollectorsCount < 0:
            raise RuntimeError("Forbidden value (" + str(self.maxTaxCollectorsCount) + ") on element of GuildInfosUpgradeMessage.maxTaxCollectorsCount.")

    def _taxCollectorsCountFunc(self, param1):
        self.taxCollectorsCount = param1.read_byte()
        if self.taxCollectorsCount < 0:
            raise RuntimeError("Forbidden value (" + str(self.taxCollectorsCount) + ") on element of GuildInfosUpgradeMessage.taxCollectorsCount.")

    def _taxCollectorLifePointsFunc(self, param1):
        self.taxCollectorLifePoints = param1.read_var_uh_short()
        if self.taxCollectorLifePoints < 0:
            raise RuntimeError("Forbidden value (" + str(self.taxCollectorLifePoints) + ") on element of GuildInfosUpgradeMessage.taxCollectorLifePoints.")

    def _taxCollectorDamagesBonusesFunc(self, param1):
        self.taxCollectorDamagesBonuses = param1.read_var_uh_short()
        if self.taxCollectorDamagesBonuses < 0:
            raise RuntimeError("Forbidden value (" + str(self.taxCollectorDamagesBonuses) + ") on element of GuildInfosUpgradeMessage.taxCollectorDamagesBonuses.")

    def _taxCollectorPodsFunc(self, param1):
        self.taxCollectorPods = param1.read_var_uh_short()
        if self.taxCollectorPods < 0:
            raise RuntimeError("Forbidden value (" + str(self.taxCollectorPods) + ") on element of GuildInfosUpgradeMessage.taxCollectorPods.")

    def _taxCollectorProspectingFunc(self, param1):
        self.taxCollectorProspecting = param1.read_var_uh_short()
        if self.taxCollectorProspecting < 0:
            raise RuntimeError("Forbidden value (" + str(self.taxCollectorProspecting) + ") on element of GuildInfosUpgradeMessage.taxCollectorProspecting.")

    def _taxCollectorWisdomFunc(self, param1):
        self.taxCollectorWisdom = param1.read_var_uh_short()
        if self.taxCollectorWisdom < 0:
            raise RuntimeError("Forbidden value (" + str(self.taxCollectorWisdom) + ") on element of GuildInfosUpgradeMessage.taxCollectorWisdom.")

    def _boostPointsFunc(self, param1):
        self.boostPoints = param1.read_var_uh_short()
        if self.boostPoints < 0:
            raise RuntimeError("Forbidden value (" + str(self.boostPoints) + ") on element of GuildInfosUpgradeMessage.boostPoints.")

    def _spellIdtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._spellIdtree.add_child(self._spellIdFunc)
            _loc3_ += 1

    def _spellIdFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of spellId.")
        self.spellId.append(_loc2_)

    def _spellLeveltreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._spellLeveltree.add_child(self._spellLevelFunc)
            _loc3_ += 1

    def _spellLevelFunc(self, param1):
        _loc2_ = param1.read_short()
        self.spellLevel.append(_loc2_)


class GuildInvitationAnswerMessage(NetworkMessage):
    protocolId = 5556

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.accept = False

    def getMessageId(self):
        return 5556

    def initGuildInvitationAnswerMessage(self, param1=False):
        self.accept = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.accept = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildInvitationAnswerMessage(param1)

    def serializeAs_GuildInvitationAnswerMessage(self, param1):
        param1.write_boolean(self.accept)

    def deserialize(self, param1):
        self.deserializeAs_GuildInvitationAnswerMessage(param1)

    def deserializeAs_GuildInvitationAnswerMessage(self, param1):
        self._acceptFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildInvitationAnswerMessage(param1)

    def deserializeAsyncAs_GuildInvitationAnswerMessage(self, param1):
        param1.add_child(self._acceptFunc)

    def _acceptFunc(self, param1):
        self.accept = param1.read_boolean()


class GuildInvitationByNameMessage(NetworkMessage):
    protocolId = 6115

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.name = ""

    def getMessageId(self):
        return 6115

    def initGuildInvitationByNameMessage(self, param1=""):
        self.name = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.name = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildInvitationByNameMessage(param1)

    def serializeAs_GuildInvitationByNameMessage(self, param1):
        param1.write_utf(self.name)

    def deserialize(self, param1):
        self.deserializeAs_GuildInvitationByNameMessage(param1)

    def deserializeAs_GuildInvitationByNameMessage(self, param1):
        self._nameFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildInvitationByNameMessage(param1)

    def deserializeAsyncAs_GuildInvitationByNameMessage(self, param1):
        param1.add_child(self._nameFunc)

    def _nameFunc(self, param1):
        self.name = param1.read_utf()


class GuildInvitationMessage(NetworkMessage):
    protocolId = 5551

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0

    def getMessageId(self):
        return 5551

    def initGuildInvitationMessage(self, param1=0):
        self.targetId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.targetId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildInvitationMessage(param1)

    def serializeAs_GuildInvitationMessage(self, param1):
        if self.targetId < 0 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_var_long(self.targetId)

    def deserialize(self, param1):
        self.deserializeAs_GuildInvitationMessage(param1)

    def deserializeAs_GuildInvitationMessage(self, param1):
        self._targetIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildInvitationMessage(param1)

    def deserializeAsyncAs_GuildInvitationMessage(self, param1):
        param1.add_child(self._targetIdFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_var_uh_long()
        if self.targetId < 0 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GuildInvitationMessage.targetId.")


class GuildInvitationStateRecrutedMessage(NetworkMessage):
    protocolId = 5548

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.invitationState = 0

    def getMessageId(self):
        return 5548

    def initGuildInvitationStateRecrutedMessage(self, param1=0):
        self.invitationState = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.invitationState = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildInvitationStateRecrutedMessage(param1)

    def serializeAs_GuildInvitationStateRecrutedMessage(self, param1):
        param1.write_byte(self.invitationState)

    def deserialize(self, param1):
        self.deserializeAs_GuildInvitationStateRecrutedMessage(param1)

    def deserializeAs_GuildInvitationStateRecrutedMessage(self, param1):
        self._invitationStateFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildInvitationStateRecrutedMessage(param1)

    def deserializeAsyncAs_GuildInvitationStateRecrutedMessage(self, param1):
        param1.add_child(self._invitationStateFunc)

    def _invitationStateFunc(self, param1):
        self.invitationState = param1.read_byte()
        if self.invitationState < 0:
            raise RuntimeError("Forbidden value (" + str(self.invitationState) + ") on element of GuildInvitationStateRecrutedMessage.invitationState.")


class GuildInvitationStateRecruterMessage(NetworkMessage):
    protocolId = 5563

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.recrutedName = ""
        self.invitationState = 0

    def getMessageId(self):
        return 5563

    def initGuildInvitationStateRecruterMessage(self, param1="", param2=0):
        self.recrutedName = param1
        self.invitationState = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.recrutedName = ""
        self.invitationState = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildInvitationStateRecruterMessage(param1)

    def serializeAs_GuildInvitationStateRecruterMessage(self, param1):
        param1.write_utf(self.recrutedName)
        param1.write_byte(self.invitationState)

    def deserialize(self, param1):
        self.deserializeAs_GuildInvitationStateRecruterMessage(param1)

    def deserializeAs_GuildInvitationStateRecruterMessage(self, param1):
        self._recrutedNameFunc(param1)
        self._invitationStateFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildInvitationStateRecruterMessage(param1)

    def deserializeAsyncAs_GuildInvitationStateRecruterMessage(self, param1):
        param1.add_child(self._recrutedNameFunc)
        param1.add_child(self._invitationStateFunc)

    def _recrutedNameFunc(self, param1):
        self.recrutedName = param1.read_utf()

    def _invitationStateFunc(self, param1):
        self.invitationState = param1.read_byte()
        if self.invitationState < 0:
            raise RuntimeError("Forbidden value (" + str(self.invitationState) + ") on element of GuildInvitationStateRecruterMessage.invitationState.")


class GuildInvitedMessage(NetworkMessage):
    protocolId = 5552

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.recruterId = 0
        self.recruterName = ""
        self.guildInfo = BasicGuildInformations()
        self._guildInfotree = FuncTree()

    def getMessageId(self):
        return 5552

    def initGuildInvitedMessage(self, param1=0, param2="", param3=None):
        self.recruterId = param1
        self.recruterName = param2
        self.guildInfo = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.recruterId = 0
        self.recruterName = ""
        self.guildInfo = BasicGuildInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildInvitedMessage(param1)

    def serializeAs_GuildInvitedMessage(self, param1):
        if self.recruterId < 0 or self.recruterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.recruterId) + ") on element recruterId.")
        param1.write_var_long(self.recruterId)
        param1.write_utf(self.recruterName)
        self.guildInfo.serializeAs_BasicGuildInformations(param1)

    def deserialize(self, param1):
        self.deserializeAs_GuildInvitedMessage(param1)

    def deserializeAs_GuildInvitedMessage(self, param1):
        self._recruterIdFunc(param1)
        self._recruterNameFunc(param1)
        self.guildInfo = BasicGuildInformations()
        self.guildInfo.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildInvitedMessage(param1)

    def deserializeAsyncAs_GuildInvitedMessage(self, param1):
        param1.add_child(self._recruterIdFunc)
        param1.add_child(self._recruterNameFunc)
        self._guildInfotree = param1.add_child(self._guildInfotreeFunc)

    def _recruterIdFunc(self, param1):
        self.recruterId = param1.read_var_uh_long()
        if self.recruterId < 0 or self.recruterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.recruterId) + ") on element of GuildInvitedMessage.recruterId.")

    def _recruterNameFunc(self, param1):
        self.recruterName = param1.read_utf()

    def _guildInfotreeFunc(self, param1):
        self.guildInfo = BasicGuildInformations()
        self.guildInfo.deserializeAsync(self._guildInfotree)


class GuildJoinedMessage(NetworkMessage):
    protocolId = 5564

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.guildInfo = GuildInformations()
        self.memberRights = 0
        self._guildInfotree = FuncTree()

    def getMessageId(self):
        return 5564

    def initGuildJoinedMessage(self, param1=None, param2=0):
        self.guildInfo = param1
        self.memberRights = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.guildInfo = GuildInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildJoinedMessage(param1)

    def serializeAs_GuildJoinedMessage(self, param1):
        self.guildInfo.serializeAs_GuildInformations(param1)
        if self.memberRights < 0:
            raise RuntimeError("Forbidden value (" + str(self.memberRights) + ") on element memberRights.")
        param1.write_var_int(self.memberRights)

    def deserialize(self, param1):
        self.deserializeAs_GuildJoinedMessage(param1)

    def deserializeAs_GuildJoinedMessage(self, param1):
        self.guildInfo = GuildInformations()
        self.guildInfo.deserialize(param1)
        self._memberRightsFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildJoinedMessage(param1)

    def deserializeAsyncAs_GuildJoinedMessage(self, param1):
        self._guildInfotree = param1.add_child(self._guildInfotreeFunc)
        param1.add_child(self._memberRightsFunc)

    def _guildInfotreeFunc(self, param1):
        self.guildInfo = GuildInformations()
        self.guildInfo.deserializeAsync(self._guildInfotree)

    def _memberRightsFunc(self, param1):
        self.memberRights = param1.read_var_uh_int()
        if self.memberRights < 0:
            raise RuntimeError("Forbidden value (" + str(self.memberRights) + ") on element of GuildJoinedMessage.memberRights.")


class GuildKickRequestMessage(NetworkMessage):
    protocolId = 5887

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.kickedId = 0

    def getMessageId(self):
        return 5887

    def initGuildKickRequestMessage(self, param1=0):
        self.kickedId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.kickedId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildKickRequestMessage(param1)

    def serializeAs_GuildKickRequestMessage(self, param1):
        if self.kickedId < 0 or self.kickedId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.kickedId) + ") on element kickedId.")
        param1.write_var_long(self.kickedId)

    def deserialize(self, param1):
        self.deserializeAs_GuildKickRequestMessage(param1)

    def deserializeAs_GuildKickRequestMessage(self, param1):
        self._kickedIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildKickRequestMessage(param1)

    def deserializeAsyncAs_GuildKickRequestMessage(self, param1):
        param1.add_child(self._kickedIdFunc)

    def _kickedIdFunc(self, param1):
        self.kickedId = param1.read_var_uh_long()
        if self.kickedId < 0 or self.kickedId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.kickedId) + ") on element of GuildKickRequestMessage.kickedId.")


class GuildLeftMessage(NetworkMessage):
    protocolId = 5562

    def getMessageId(self):
        return 5562

    def initGuildLeftMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_GuildLeftMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_GuildLeftMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_GuildLeftMessage(self, param1):
        pass


class GuildLevelUpMessage(NetworkMessage):
    protocolId = 6062

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.newLevel = 0

    def getMessageId(self):
        return 6062

    def initGuildLevelUpMessage(self, param1=0):
        self.newLevel = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.newLevel = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildLevelUpMessage(param1)

    def serializeAs_GuildLevelUpMessage(self, param1):
        if self.newLevel < 2 or self.newLevel > 200:
            raise RuntimeError("Forbidden value (" + str(self.newLevel) + ") on element newLevel.")
        param1.write_byte(self.newLevel)

    def deserialize(self, param1):
        self.deserializeAs_GuildLevelUpMessage(param1)

    def deserializeAs_GuildLevelUpMessage(self, param1):
        self._newLevelFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildLevelUpMessage(param1)

    def deserializeAsyncAs_GuildLevelUpMessage(self, param1):
        param1.add_child(self._newLevelFunc)

    def _newLevelFunc(self, param1):
        self.newLevel = param1.read_unsigned_byte()
        if self.newLevel < 2 or self.newLevel > 200:
            raise RuntimeError("Forbidden value (" + str(self.newLevel) + ") on element of GuildLevelUpMessage.newLevel.")


class GuildListMessage(NetworkMessage):
    protocolId = 6413

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.guilds = []
        self._guildstree = FuncTree()

    def getMessageId(self):
        return 6413

    def initGuildListMessage(self, param1=[]):
        self.guilds = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.guilds = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildListMessage(param1)

    def serializeAs_GuildListMessage(self, param1):
        param1.write_short(len(self.guilds))
        _loc2_ = 0
        while _loc2_ < len(self.guilds):
            as_parent(self.guilds[_loc2_], GuildInformations).serializeAs_GuildInformations(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GuildListMessage(param1)

    def deserializeAs_GuildListMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = GuildInformations()
            _loc4_.deserialize(param1)
            self.guilds.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildListMessage(param1)

    def deserializeAsyncAs_GuildListMessage(self, param1):
        self._guildstree = param1.add_child(self._guildstreeFunc)

    def _guildstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._guildstree.add_child(self._guildsFunc)
            _loc3_ += 1

    def _guildsFunc(self, param1):
        _loc2_ = GuildInformations()
        _loc2_.deserialize(param1)
        self.guilds.append(_loc2_)


class GuildMemberLeavingMessage(NetworkMessage):
    protocolId = 5923

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.kicked = False
        self.memberId = 0

    def getMessageId(self):
        return 5923

    def initGuildMemberLeavingMessage(self, param1=False, param2=0):
        self.kicked = param1
        self.memberId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.kicked = False
        self.memberId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildMemberLeavingMessage(param1)

    def serializeAs_GuildMemberLeavingMessage(self, param1):
        param1.write_boolean(self.kicked)
        if self.memberId < 0 or self.memberId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.memberId) + ") on element memberId.")
        param1.write_var_long(self.memberId)

    def deserialize(self, param1):
        self.deserializeAs_GuildMemberLeavingMessage(param1)

    def deserializeAs_GuildMemberLeavingMessage(self, param1):
        self._kickedFunc(param1)
        self._memberIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildMemberLeavingMessage(param1)

    def deserializeAsyncAs_GuildMemberLeavingMessage(self, param1):
        param1.add_child(self._kickedFunc)
        param1.add_child(self._memberIdFunc)

    def _kickedFunc(self, param1):
        self.kicked = param1.read_boolean()

    def _memberIdFunc(self, param1):
        self.memberId = param1.read_var_uh_long()
        if self.memberId < 0 or self.memberId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.memberId) + ") on element of GuildMemberLeavingMessage.memberId.")


class GuildMemberOnlineStatusMessage(NetworkMessage):
    protocolId = 6061

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.memberId = 0
        self.online = False

    def getMessageId(self):
        return 6061

    def initGuildMemberOnlineStatusMessage(self, param1=0, param2=False):
        self.memberId = param1
        self.online = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.memberId = 0
        self.online = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildMemberOnlineStatusMessage(param1)

    def serializeAs_GuildMemberOnlineStatusMessage(self, param1):
        if self.memberId < 0 or self.memberId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.memberId) + ") on element memberId.")
        param1.write_var_long(self.memberId)
        param1.write_boolean(self.online)

    def deserialize(self, param1):
        self.deserializeAs_GuildMemberOnlineStatusMessage(param1)

    def deserializeAs_GuildMemberOnlineStatusMessage(self, param1):
        self._memberIdFunc(param1)
        self._onlineFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildMemberOnlineStatusMessage(param1)

    def deserializeAsyncAs_GuildMemberOnlineStatusMessage(self, param1):
        param1.add_child(self._memberIdFunc)
        param1.add_child(self._onlineFunc)

    def _memberIdFunc(self, param1):
        self.memberId = param1.read_var_uh_long()
        if self.memberId < 0 or self.memberId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.memberId) + ") on element of GuildMemberOnlineStatusMessage.memberId.")

    def _onlineFunc(self, param1):
        self.online = param1.read_boolean()


class GuildModificationEmblemValidMessage(NetworkMessage):
    protocolId = 6328

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.guildEmblem = GuildEmblem()
        self._guildEmblemtree = FuncTree()

    def getMessageId(self):
        return 6328

    def initGuildModificationEmblemValidMessage(self, param1=None):
        self.guildEmblem = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.guildEmblem = GuildEmblem()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildModificationEmblemValidMessage(param1)

    def serializeAs_GuildModificationEmblemValidMessage(self, param1):
        self.guildEmblem.serializeAs_GuildEmblem(param1)

    def deserialize(self, param1):
        self.deserializeAs_GuildModificationEmblemValidMessage(param1)

    def deserializeAs_GuildModificationEmblemValidMessage(self, param1):
        self.guildEmblem = GuildEmblem()
        self.guildEmblem.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildModificationEmblemValidMessage(param1)

    def deserializeAsyncAs_GuildModificationEmblemValidMessage(self, param1):
        self._guildEmblemtree = param1.add_child(self._guildEmblemtreeFunc)

    def _guildEmblemtreeFunc(self, param1):
        self.guildEmblem = GuildEmblem()
        self.guildEmblem.deserializeAsync(self._guildEmblemtree)


class GuildModificationNameValidMessage(NetworkMessage):
    protocolId = 6327

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.guildName = ""

    def getMessageId(self):
        return 6327

    def initGuildModificationNameValidMessage(self, param1=""):
        self.guildName = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.guildName = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildModificationNameValidMessage(param1)

    def serializeAs_GuildModificationNameValidMessage(self, param1):
        param1.write_utf(self.guildName)

    def deserialize(self, param1):
        self.deserializeAs_GuildModificationNameValidMessage(param1)

    def deserializeAs_GuildModificationNameValidMessage(self, param1):
        self._guildNameFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildModificationNameValidMessage(param1)

    def deserializeAsyncAs_GuildModificationNameValidMessage(self, param1):
        param1.add_child(self._guildNameFunc)

    def _guildNameFunc(self, param1):
        self.guildName = param1.read_utf()


class GuildModificationStartedMessage(NetworkMessage):
    protocolId = 6324

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.canChangeName = False
        self.canChangeEmblem = False

    def getMessageId(self):
        return 6324

    def initGuildModificationStartedMessage(self, param1=False, param2=False):
        self.canChangeName = param1
        self.canChangeEmblem = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.canChangeName = False
        self.canChangeEmblem = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildModificationStartedMessage(param1)

    def serializeAs_GuildModificationStartedMessage(self, param1):
        _loc2_ = 0
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,0,self.canChangeName)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,1,self.canChangeEmblem)
        param1.write_byte(_loc2_)

    def deserialize(self, param1):
        self.deserializeAs_GuildModificationStartedMessage(param1)

    def deserializeAs_GuildModificationStartedMessage(self, param1):
        self.deserializeByteBoxes(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildModificationStartedMessage(param1)

    def deserializeAsyncAs_GuildModificationStartedMessage(self, param1):
        param1.add_child(self.deserializeByteBoxes)

    def deserializeByteBoxes(self, param1):
        _loc2_ = param1.read_byte()
        self.canChangeName = BooleanByteWrapper.get_flag(_loc2_,0)
        self.canChangeEmblem = BooleanByteWrapper.get_flag(_loc2_,1)


class GuildModificationValidMessage(NetworkMessage):
    protocolId = 6323

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.guildName = ""
        self.guildEmblem = GuildEmblem()
        self._guildEmblemtree = FuncTree()

    def getMessageId(self):
        return 6323

    def initGuildModificationValidMessage(self, param1="", param2=None):
        self.guildName = param1
        self.guildEmblem = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.guildName = ""
        self.guildEmblem = GuildEmblem()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildModificationValidMessage(param1)

    def serializeAs_GuildModificationValidMessage(self, param1):
        param1.write_utf(self.guildName)
        self.guildEmblem.serializeAs_GuildEmblem(param1)

    def deserialize(self, param1):
        self.deserializeAs_GuildModificationValidMessage(param1)

    def deserializeAs_GuildModificationValidMessage(self, param1):
        self._guildNameFunc(param1)
        self.guildEmblem = GuildEmblem()
        self.guildEmblem.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildModificationValidMessage(param1)

    def deserializeAsyncAs_GuildModificationValidMessage(self, param1):
        param1.add_child(self._guildNameFunc)
        self._guildEmblemtree = param1.add_child(self._guildEmblemtreeFunc)

    def _guildNameFunc(self, param1):
        self.guildName = param1.read_utf()

    def _guildEmblemtreeFunc(self, param1):
        self.guildEmblem = GuildEmblem()
        self.guildEmblem.deserializeAsync(self._guildEmblemtree)


class GuildPaddockBoughtMessage(NetworkMessage):
    protocolId = 5952

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.paddockInfo = PaddockContentInformations()
        self._paddockInfotree = FuncTree()

    def getMessageId(self):
        return 5952

    def initGuildPaddockBoughtMessage(self, param1=None):
        self.paddockInfo = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.paddockInfo = PaddockContentInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildPaddockBoughtMessage(param1)

    def serializeAs_GuildPaddockBoughtMessage(self, param1):
        self.paddockInfo.serializeAs_PaddockContentInformations(param1)

    def deserialize(self, param1):
        self.deserializeAs_GuildPaddockBoughtMessage(param1)

    def deserializeAs_GuildPaddockBoughtMessage(self, param1):
        self.paddockInfo = PaddockContentInformations()
        self.paddockInfo.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildPaddockBoughtMessage(param1)

    def deserializeAsyncAs_GuildPaddockBoughtMessage(self, param1):
        self._paddockInfotree = param1.add_child(self._paddockInfotreeFunc)

    def _paddockInfotreeFunc(self, param1):
        self.paddockInfo = PaddockContentInformations()
        self.paddockInfo.deserializeAsync(self._paddockInfotree)


class GuildPaddockRemovedMessage(NetworkMessage):
    protocolId = 5955

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.paddockId = 0

    def getMessageId(self):
        return 5955

    def initGuildPaddockRemovedMessage(self, param1=0):
        self.paddockId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.paddockId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildPaddockRemovedMessage(param1)

    def serializeAs_GuildPaddockRemovedMessage(self, param1):
        param1.write_int(self.paddockId)

    def deserialize(self, param1):
        self.deserializeAs_GuildPaddockRemovedMessage(param1)

    def deserializeAs_GuildPaddockRemovedMessage(self, param1):
        self._paddockIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildPaddockRemovedMessage(param1)

    def deserializeAsyncAs_GuildPaddockRemovedMessage(self, param1):
        param1.add_child(self._paddockIdFunc)

    def _paddockIdFunc(self, param1):
        self.paddockId = param1.read_int()


class GuildPaddockTeleportRequestMessage(NetworkMessage):
    protocolId = 5957

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.paddockId = 0

    def getMessageId(self):
        return 5957

    def initGuildPaddockTeleportRequestMessage(self, param1=0):
        self.paddockId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.paddockId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildPaddockTeleportRequestMessage(param1)

    def serializeAs_GuildPaddockTeleportRequestMessage(self, param1):
        param1.write_int(self.paddockId)

    def deserialize(self, param1):
        self.deserializeAs_GuildPaddockTeleportRequestMessage(param1)

    def deserializeAs_GuildPaddockTeleportRequestMessage(self, param1):
        self._paddockIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildPaddockTeleportRequestMessage(param1)

    def deserializeAsyncAs_GuildPaddockTeleportRequestMessage(self, param1):
        param1.add_child(self._paddockIdFunc)

    def _paddockIdFunc(self, param1):
        self.paddockId = param1.read_int()


class GuildSpellUpgradeRequestMessage(NetworkMessage):
    protocolId = 5699

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.spellId = 0

    def getMessageId(self):
        return 5699

    def initGuildSpellUpgradeRequestMessage(self, param1=0):
        self.spellId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.spellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildSpellUpgradeRequestMessage(param1)

    def serializeAs_GuildSpellUpgradeRequestMessage(self, param1):
        if self.spellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spellId) + ") on element spellId.")
        param1.write_int(self.spellId)

    def deserialize(self, param1):
        self.deserializeAs_GuildSpellUpgradeRequestMessage(param1)

    def deserializeAs_GuildSpellUpgradeRequestMessage(self, param1):
        self._spellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildSpellUpgradeRequestMessage(param1)

    def deserializeAsyncAs_GuildSpellUpgradeRequestMessage(self, param1):
        param1.add_child(self._spellIdFunc)

    def _spellIdFunc(self, param1):
        self.spellId = param1.read_int()
        if self.spellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spellId) + ") on element of GuildSpellUpgradeRequestMessage.spellId.")


class GuildVersatileInfoListMessage(NetworkMessage):
    protocolId = 6435

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.guilds = []
        self._guildstree = FuncTree()

    def getMessageId(self):
        return 6435

    def initGuildVersatileInfoListMessage(self, param1=[]):
        self.guilds = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.guilds = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildVersatileInfoListMessage(param1)

    def serializeAs_GuildVersatileInfoListMessage(self, param1):
        param1.write_short(len(self.guilds))
        _loc2_ = 0
        while _loc2_ < len(self.guilds):
            param1.write_short(as_parent(self.guilds[_loc2_], GuildVersatileInformations).getTypeId())
            as_parent(self.guilds[_loc2_], GuildVersatileInformations).serialize(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GuildVersatileInfoListMessage(param1)

    def deserializeAs_GuildVersatileInfoListMessage(self, param1):
        _loc4_ = 0
        _loc5_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_unsigned_short()
            _loc5_ = ProtocolTypeManager.get_instance(GuildVersatileInformations,_loc4_)
            _loc5_.deserialize(param1)
            self.guilds.append(_loc5_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildVersatileInfoListMessage(param1)

    def deserializeAsyncAs_GuildVersatileInfoListMessage(self, param1):
        self._guildstree = param1.add_child(self._guildstreeFunc)

    def _guildstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._guildstree.add_child(self._guildsFunc)
            _loc3_ += 1

    def _guildsFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(GuildVersatileInformations,_loc2_)
        _loc3_.deserialize(param1)
        self.guilds.append(_loc3_)


class AbstractTaxCollectorListMessage(NetworkMessage):
    protocolId = 6568

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.informations = []
        self._informationstree = FuncTree()

    def getMessageId(self):
        return 6568

    def initAbstractTaxCollectorListMessage(self, param1=[]):
        self.informations = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.informations = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AbstractTaxCollectorListMessage(param1)

    def serializeAs_AbstractTaxCollectorListMessage(self, param1):
        param1.write_short(len(self.informations))
        _loc2_ = 0
        while _loc2_ < len(self.informations):
            param1.write_short(as_parent(self.informations[_loc2_], TaxCollectorInformations).getTypeId())
            as_parent(self.informations[_loc2_], TaxCollectorInformations).serialize(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_AbstractTaxCollectorListMessage(param1)

    def deserializeAs_AbstractTaxCollectorListMessage(self, param1):
        _loc4_ = 0
        _loc5_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_unsigned_short()
            _loc5_ = ProtocolTypeManager.get_instance(TaxCollectorInformations,_loc4_)
            _loc5_.deserialize(param1)
            self.informations.append(_loc5_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AbstractTaxCollectorListMessage(param1)

    def deserializeAsyncAs_AbstractTaxCollectorListMessage(self, param1):
        self._informationstree = param1.add_child(self._informationstreeFunc)

    def _informationstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._informationstree.add_child(self._informationsFunc)
            _loc3_ += 1

    def _informationsFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(TaxCollectorInformations,_loc2_)
        _loc3_.deserialize(param1)
        self.informations.append(_loc3_)


class GameRolePlayTaxCollectorFightRequestMessage(NetworkMessage):
    protocolId = 5954

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.taxCollectorId = 0

    def getMessageId(self):
        return 5954

    def initGameRolePlayTaxCollectorFightRequestMessage(self, param1=0):
        self.taxCollectorId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.taxCollectorId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayTaxCollectorFightRequestMessage(param1)

    def serializeAs_GameRolePlayTaxCollectorFightRequestMessage(self, param1):
        param1.write_int(self.taxCollectorId)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayTaxCollectorFightRequestMessage(param1)

    def deserializeAs_GameRolePlayTaxCollectorFightRequestMessage(self, param1):
        self._taxCollectorIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayTaxCollectorFightRequestMessage(param1)

    def deserializeAsyncAs_GameRolePlayTaxCollectorFightRequestMessage(self, param1):
        param1.add_child(self._taxCollectorIdFunc)

    def _taxCollectorIdFunc(self, param1):
        self.taxCollectorId = param1.read_int()


class GuildFightJoinRequestMessage(NetworkMessage):
    protocolId = 5717

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.taxCollectorId = 0

    def getMessageId(self):
        return 5717

    def initGuildFightJoinRequestMessage(self, param1=0):
        self.taxCollectorId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.taxCollectorId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildFightJoinRequestMessage(param1)

    def serializeAs_GuildFightJoinRequestMessage(self, param1):
        param1.write_int(self.taxCollectorId)

    def deserialize(self, param1):
        self.deserializeAs_GuildFightJoinRequestMessage(param1)

    def deserializeAs_GuildFightJoinRequestMessage(self, param1):
        self._taxCollectorIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildFightJoinRequestMessage(param1)

    def deserializeAsyncAs_GuildFightJoinRequestMessage(self, param1):
        param1.add_child(self._taxCollectorIdFunc)

    def _taxCollectorIdFunc(self, param1):
        self.taxCollectorId = param1.read_int()


class GuildFightLeaveRequestMessage(NetworkMessage):
    protocolId = 5715

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.taxCollectorId = 0
        self.characterId = 0

    def getMessageId(self):
        return 5715

    def initGuildFightLeaveRequestMessage(self, param1=0, param2=0):
        self.taxCollectorId = param1
        self.characterId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.taxCollectorId = 0
        self.characterId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildFightLeaveRequestMessage(param1)

    def serializeAs_GuildFightLeaveRequestMessage(self, param1):
        if self.taxCollectorId < 0:
            raise RuntimeError("Forbidden value (" + str(self.taxCollectorId) + ") on element taxCollectorId.")
        param1.write_int(self.taxCollectorId)
        if self.characterId < 0 or self.characterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.characterId) + ") on element characterId.")
        param1.write_var_long(self.characterId)

    def deserialize(self, param1):
        self.deserializeAs_GuildFightLeaveRequestMessage(param1)

    def deserializeAs_GuildFightLeaveRequestMessage(self, param1):
        self._taxCollectorIdFunc(param1)
        self._characterIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildFightLeaveRequestMessage(param1)

    def deserializeAsyncAs_GuildFightLeaveRequestMessage(self, param1):
        param1.add_child(self._taxCollectorIdFunc)
        param1.add_child(self._characterIdFunc)

    def _taxCollectorIdFunc(self, param1):
        self.taxCollectorId = param1.read_int()
        if self.taxCollectorId < 0:
            raise RuntimeError("Forbidden value (" + str(self.taxCollectorId) + ") on element of GuildFightLeaveRequestMessage.taxCollectorId.")

    def _characterIdFunc(self, param1):
        self.characterId = param1.read_var_uh_long()
        if self.characterId < 0 or self.characterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.characterId) + ") on element of GuildFightLeaveRequestMessage.characterId.")


class GuildFightPlayersEnemiesListMessage(NetworkMessage):
    protocolId = 5928

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fightId = 0
        self.playerInfo = []
        self._playerInfotree = FuncTree()

    def getMessageId(self):
        return 5928

    def initGuildFightPlayersEnemiesListMessage(self, param1=0, param2=[]):
        self.fightId = param1
        self.playerInfo = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.fightId = 0
        self.playerInfo = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildFightPlayersEnemiesListMessage(param1)

    def serializeAs_GuildFightPlayersEnemiesListMessage(self, param1):
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element fightId.")
        param1.write_int(self.fightId)
        param1.write_short(len(self.playerInfo))
        _loc2_ = 0
        while _loc2_ < len(self.playerInfo):
            as_parent(self.playerInfo[_loc2_], CharacterMinimalPlusLookInformations).serializeAs_CharacterMinimalPlusLookInformations(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GuildFightPlayersEnemiesListMessage(param1)

    def deserializeAs_GuildFightPlayersEnemiesListMessage(self, param1):
        _loc4_ = None
        self._fightIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = CharacterMinimalPlusLookInformations()
            _loc4_.deserialize(param1)
            self.playerInfo.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildFightPlayersEnemiesListMessage(param1)

    def deserializeAsyncAs_GuildFightPlayersEnemiesListMessage(self, param1):
        param1.add_child(self._fightIdFunc)
        self._playerInfotree = param1.add_child(self._playerInfotreeFunc)

    def _fightIdFunc(self, param1):
        self.fightId = param1.read_int()
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element of GuildFightPlayersEnemiesListMessage.fightId.")

    def _playerInfotreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._playerInfotree.add_child(self._playerInfoFunc)
            _loc3_ += 1

    def _playerInfoFunc(self, param1):
        _loc2_ = CharacterMinimalPlusLookInformations()
        _loc2_.deserialize(param1)
        self.playerInfo.append(_loc2_)


class GuildFightPlayersEnemyRemoveMessage(NetworkMessage):
    protocolId = 5929

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fightId = 0
        self.playerId = 0

    def getMessageId(self):
        return 5929

    def initGuildFightPlayersEnemyRemoveMessage(self, param1=0, param2=0):
        self.fightId = param1
        self.playerId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.fightId = 0
        self.playerId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildFightPlayersEnemyRemoveMessage(param1)

    def serializeAs_GuildFightPlayersEnemyRemoveMessage(self, param1):
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element fightId.")
        param1.write_int(self.fightId)
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element playerId.")
        param1.write_var_long(self.playerId)

    def deserialize(self, param1):
        self.deserializeAs_GuildFightPlayersEnemyRemoveMessage(param1)

    def deserializeAs_GuildFightPlayersEnemyRemoveMessage(self, param1):
        self._fightIdFunc(param1)
        self._playerIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildFightPlayersEnemyRemoveMessage(param1)

    def deserializeAsyncAs_GuildFightPlayersEnemyRemoveMessage(self, param1):
        param1.add_child(self._fightIdFunc)
        param1.add_child(self._playerIdFunc)

    def _fightIdFunc(self, param1):
        self.fightId = param1.read_int()
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element of GuildFightPlayersEnemyRemoveMessage.fightId.")

    def _playerIdFunc(self, param1):
        self.playerId = param1.read_var_uh_long()
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element of GuildFightPlayersEnemyRemoveMessage.playerId.")


class GuildFightPlayersHelpersJoinMessage(NetworkMessage):
    protocolId = 5720

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fightId = 0
        self.playerInfo = CharacterMinimalPlusLookInformations()
        self._playerInfotree = FuncTree()

    def getMessageId(self):
        return 5720

    def initGuildFightPlayersHelpersJoinMessage(self, param1=0, param2=None):
        self.fightId = param1
        self.playerInfo = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.fightId = 0
        self.playerInfo = CharacterMinimalPlusLookInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildFightPlayersHelpersJoinMessage(param1)

    def serializeAs_GuildFightPlayersHelpersJoinMessage(self, param1):
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element fightId.")
        param1.write_int(self.fightId)
        self.playerInfo.serializeAs_CharacterMinimalPlusLookInformations(param1)

    def deserialize(self, param1):
        self.deserializeAs_GuildFightPlayersHelpersJoinMessage(param1)

    def deserializeAs_GuildFightPlayersHelpersJoinMessage(self, param1):
        self._fightIdFunc(param1)
        self.playerInfo = CharacterMinimalPlusLookInformations()
        self.playerInfo.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildFightPlayersHelpersJoinMessage(param1)

    def deserializeAsyncAs_GuildFightPlayersHelpersJoinMessage(self, param1):
        param1.add_child(self._fightIdFunc)
        self._playerInfotree = param1.add_child(self._playerInfotreeFunc)

    def _fightIdFunc(self, param1):
        self.fightId = param1.read_int()
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element of GuildFightPlayersHelpersJoinMessage.fightId.")

    def _playerInfotreeFunc(self, param1):
        self.playerInfo = CharacterMinimalPlusLookInformations()
        self.playerInfo.deserializeAsync(self._playerInfotree)


class GuildFightPlayersHelpersLeaveMessage(NetworkMessage):
    protocolId = 5719

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fightId = 0
        self.playerId = 0

    def getMessageId(self):
        return 5719

    def initGuildFightPlayersHelpersLeaveMessage(self, param1=0, param2=0):
        self.fightId = param1
        self.playerId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.fightId = 0
        self.playerId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildFightPlayersHelpersLeaveMessage(param1)

    def serializeAs_GuildFightPlayersHelpersLeaveMessage(self, param1):
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element fightId.")
        param1.write_int(self.fightId)
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element playerId.")
        param1.write_var_long(self.playerId)

    def deserialize(self, param1):
        self.deserializeAs_GuildFightPlayersHelpersLeaveMessage(param1)

    def deserializeAs_GuildFightPlayersHelpersLeaveMessage(self, param1):
        self._fightIdFunc(param1)
        self._playerIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildFightPlayersHelpersLeaveMessage(param1)

    def deserializeAsyncAs_GuildFightPlayersHelpersLeaveMessage(self, param1):
        param1.add_child(self._fightIdFunc)
        param1.add_child(self._playerIdFunc)

    def _fightIdFunc(self, param1):
        self.fightId = param1.read_int()
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element of GuildFightPlayersHelpersLeaveMessage.fightId.")

    def _playerIdFunc(self, param1):
        self.playerId = param1.read_var_uh_long()
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element of GuildFightPlayersHelpersLeaveMessage.playerId.")


class TaxCollectorAttackedMessage(NetworkMessage):
    protocolId = 5918

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.firstNameId = 0
        self.lastNameId = 0
        self.worldX = 0
        self.worldY = 0
        self.mapId = 0
        self.subAreaId = 0
        self.guild = BasicGuildInformations()
        self._guildtree = FuncTree()

    def getMessageId(self):
        return 5918

    def initTaxCollectorAttackedMessage(self, param1=0, param2=0, param3=0, param4=0, param5=0, param6=0, param7=None):
        self.firstNameId = param1
        self.lastNameId = param2
        self.worldX = param3
        self.worldY = param4
        self.mapId = param5
        self.subAreaId = param6
        self.guild = param7
        self._isInitialized = True
        return self

    def reset(self):
        self.firstNameId = 0
        self.lastNameId = 0
        self.worldX = 0
        self.worldY = 0
        self.mapId = 0
        self.subAreaId = 0
        self.guild = BasicGuildInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TaxCollectorAttackedMessage(param1)

    def serializeAs_TaxCollectorAttackedMessage(self, param1):
        if self.firstNameId < 0:
            raise RuntimeError("Forbidden value (" + str(self.firstNameId) + ") on element firstNameId.")
        param1.write_var_short(self.firstNameId)
        if self.lastNameId < 0:
            raise RuntimeError("Forbidden value (" + str(self.lastNameId) + ") on element lastNameId.")
        param1.write_var_short(self.lastNameId)
        if self.worldX < -255 or self.worldX > 255:
            raise RuntimeError("Forbidden value (" + str(self.worldX) + ") on element worldX.")
        param1.write_short(self.worldX)
        if self.worldY < -255 or self.worldY > 255:
            raise RuntimeError("Forbidden value (" + str(self.worldY) + ") on element worldY.")
        param1.write_short(self.worldY)
        param1.write_int(self.mapId)
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element subAreaId.")
        param1.write_var_short(self.subAreaId)
        self.guild.serializeAs_BasicGuildInformations(param1)

    def deserialize(self, param1):
        self.deserializeAs_TaxCollectorAttackedMessage(param1)

    def deserializeAs_TaxCollectorAttackedMessage(self, param1):
        self._firstNameIdFunc(param1)
        self._lastNameIdFunc(param1)
        self._worldXFunc(param1)
        self._worldYFunc(param1)
        self._mapIdFunc(param1)
        self._subAreaIdFunc(param1)
        self.guild = BasicGuildInformations()
        self.guild.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TaxCollectorAttackedMessage(param1)

    def deserializeAsyncAs_TaxCollectorAttackedMessage(self, param1):
        param1.add_child(self._firstNameIdFunc)
        param1.add_child(self._lastNameIdFunc)
        param1.add_child(self._worldXFunc)
        param1.add_child(self._worldYFunc)
        param1.add_child(self._mapIdFunc)
        param1.add_child(self._subAreaIdFunc)
        self._guildtree = param1.add_child(self._guildtreeFunc)

    def _firstNameIdFunc(self, param1):
        self.firstNameId = param1.read_var_uh_short()
        if self.firstNameId < 0:
            raise RuntimeError("Forbidden value (" + str(self.firstNameId) + ") on element of TaxCollectorAttackedMessage.firstNameId.")

    def _lastNameIdFunc(self, param1):
        self.lastNameId = param1.read_var_uh_short()
        if self.lastNameId < 0:
            raise RuntimeError("Forbidden value (" + str(self.lastNameId) + ") on element of TaxCollectorAttackedMessage.lastNameId.")

    def _worldXFunc(self, param1):
        self.worldX = param1.read_short()
        if self.worldX < -255 or self.worldX > 255:
            raise RuntimeError("Forbidden value (" + str(self.worldX) + ") on element of TaxCollectorAttackedMessage.worldX.")

    def _worldYFunc(self, param1):
        self.worldY = param1.read_short()
        if self.worldY < -255 or self.worldY > 255:
            raise RuntimeError("Forbidden value (" + str(self.worldY) + ") on element of TaxCollectorAttackedMessage.worldY.")

    def _mapIdFunc(self, param1):
        self.mapId = param1.read_int()

    def _subAreaIdFunc(self, param1):
        self.subAreaId = param1.read_var_uh_short()
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element of TaxCollectorAttackedMessage.subAreaId.")

    def _guildtreeFunc(self, param1):
        self.guild = BasicGuildInformations()
        self.guild.deserializeAsync(self._guildtree)


class TaxCollectorAttackedResultMessage(NetworkMessage):
    protocolId = 5635

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.deadOrAlive = False
        self.basicInfos = TaxCollectorBasicInformations()
        self.guild = BasicGuildInformations()
        self._basicInfostree = FuncTree()
        self._guildtree = FuncTree()

    def getMessageId(self):
        return 5635

    def initTaxCollectorAttackedResultMessage(self, param1=False, param2=None, param3=None):
        self.deadOrAlive = param1
        self.basicInfos = param2
        self.guild = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.deadOrAlive = False
        self.basicInfos = TaxCollectorBasicInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TaxCollectorAttackedResultMessage(param1)

    def serializeAs_TaxCollectorAttackedResultMessage(self, param1):
        param1.write_boolean(self.deadOrAlive)
        self.basicInfos.serializeAs_TaxCollectorBasicInformations(param1)
        self.guild.serializeAs_BasicGuildInformations(param1)

    def deserialize(self, param1):
        self.deserializeAs_TaxCollectorAttackedResultMessage(param1)

    def deserializeAs_TaxCollectorAttackedResultMessage(self, param1):
        self._deadOrAliveFunc(param1)
        self.basicInfos = TaxCollectorBasicInformations()
        self.basicInfos.deserialize(param1)
        self.guild = BasicGuildInformations()
        self.guild.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TaxCollectorAttackedResultMessage(param1)

    def deserializeAsyncAs_TaxCollectorAttackedResultMessage(self, param1):
        param1.add_child(self._deadOrAliveFunc)
        self._basicInfostree = param1.add_child(self._basicInfostreeFunc)
        self._guildtree = param1.add_child(self._guildtreeFunc)

    def _deadOrAliveFunc(self, param1):
        self.deadOrAlive = param1.read_boolean()

    def _basicInfostreeFunc(self, param1):
        self.basicInfos = TaxCollectorBasicInformations()
        self.basicInfos.deserializeAsync(self._basicInfostree)

    def _guildtreeFunc(self, param1):
        self.guild = BasicGuildInformations()
        self.guild.deserializeAsync(self._guildtree)


class TaxCollectorErrorMessage(NetworkMessage):
    protocolId = 5634

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reason = 0

    def getMessageId(self):
        return 5634

    def initTaxCollectorErrorMessage(self, param1=0):
        self.reason = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.reason = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TaxCollectorErrorMessage(param1)

    def serializeAs_TaxCollectorErrorMessage(self, param1):
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_TaxCollectorErrorMessage(param1)

    def deserializeAs_TaxCollectorErrorMessage(self, param1):
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TaxCollectorErrorMessage(param1)

    def deserializeAsyncAs_TaxCollectorErrorMessage(self, param1):
        param1.add_child(self._reasonFunc)

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()


class TaxCollectorMovementAddMessage(NetworkMessage):
    protocolId = 5917

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.informations = TaxCollectorInformations()
        self._informationstree = FuncTree()

    def getMessageId(self):
        return 5917

    def initTaxCollectorMovementAddMessage(self, param1=None):
        self.informations = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.informations = TaxCollectorInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TaxCollectorMovementAddMessage(param1)

    def serializeAs_TaxCollectorMovementAddMessage(self, param1):
        param1.write_short(self.informations.getTypeId())
        self.informations.serialize(param1)

    def deserialize(self, param1):
        self.deserializeAs_TaxCollectorMovementAddMessage(param1)

    def deserializeAs_TaxCollectorMovementAddMessage(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.informations = ProtocolTypeManager.get_instance(TaxCollectorInformations,_loc2_)
        self.informations.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TaxCollectorMovementAddMessage(param1)

    def deserializeAsyncAs_TaxCollectorMovementAddMessage(self, param1):
        self._informationstree = param1.add_child(self._informationstreeFunc)

    def _informationstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.informations = ProtocolTypeManager.get_instance(TaxCollectorInformations,_loc2_)
        self.informations.deserializeAsync(self._informationstree)


class TaxCollectorMovementMessage(NetworkMessage):
    protocolId = 5633

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.movementType = 0
        self.basicInfos = TaxCollectorBasicInformations()
        self.playerId = 0
        self.playerName = ""
        self._basicInfostree = FuncTree()

    def getMessageId(self):
        return 5633

    def initTaxCollectorMovementMessage(self, param1=0, param2=None, param3=0, param4=""):
        self.movementType = param1
        self.basicInfos = param2
        self.playerId = param3
        self.playerName = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.movementType = 0
        self.basicInfos = TaxCollectorBasicInformations()
        self.playerName = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TaxCollectorMovementMessage(param1)

    def serializeAs_TaxCollectorMovementMessage(self, param1):
        param1.write_byte(self.movementType)
        self.basicInfos.serializeAs_TaxCollectorBasicInformations(param1)
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element playerId.")
        param1.write_var_long(self.playerId)
        param1.write_utf(self.playerName)

    def deserialize(self, param1):
        self.deserializeAs_TaxCollectorMovementMessage(param1)

    def deserializeAs_TaxCollectorMovementMessage(self, param1):
        self._movementTypeFunc(param1)
        self.basicInfos = TaxCollectorBasicInformations()
        self.basicInfos.deserialize(param1)
        self._playerIdFunc(param1)
        self._playerNameFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TaxCollectorMovementMessage(param1)

    def deserializeAsyncAs_TaxCollectorMovementMessage(self, param1):
        param1.add_child(self._movementTypeFunc)
        self._basicInfostree = param1.add_child(self._basicInfostreeFunc)
        param1.add_child(self._playerIdFunc)
        param1.add_child(self._playerNameFunc)

    def _movementTypeFunc(self, param1):
        self.movementType = param1.read_byte()
        if self.movementType < 0:
            raise RuntimeError("Forbidden value (" + str(self.movementType) + ") on element of TaxCollectorMovementMessage.movementType.")

    def _basicInfostreeFunc(self, param1):
        self.basicInfos = TaxCollectorBasicInformations()
        self.basicInfos.deserializeAsync(self._basicInfostree)

    def _playerIdFunc(self, param1):
        self.playerId = param1.read_var_uh_long()
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element of TaxCollectorMovementMessage.playerId.")

    def _playerNameFunc(self, param1):
        self.playerName = param1.read_utf()


class TaxCollectorMovementRemoveMessage(NetworkMessage):
    protocolId = 5915

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.collectorId = 0

    def getMessageId(self):
        return 5915

    def initTaxCollectorMovementRemoveMessage(self, param1=0):
        self.collectorId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.collectorId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TaxCollectorMovementRemoveMessage(param1)

    def serializeAs_TaxCollectorMovementRemoveMessage(self, param1):
        param1.write_int(self.collectorId)

    def deserialize(self, param1):
        self.deserializeAs_TaxCollectorMovementRemoveMessage(param1)

    def deserializeAs_TaxCollectorMovementRemoveMessage(self, param1):
        self._collectorIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TaxCollectorMovementRemoveMessage(param1)

    def deserializeAsyncAs_TaxCollectorMovementRemoveMessage(self, param1):
        param1.add_child(self._collectorIdFunc)

    def _collectorIdFunc(self, param1):
        self.collectorId = param1.read_int()


class TaxCollectorMovementsOfflineMessage(NetworkMessage):
    protocolId = 6611

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.movements = []
        self._movementstree = FuncTree()

    def getMessageId(self):
        return 6611

    def initTaxCollectorMovementsOfflineMessage(self, param1=[]):
        self.movements = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.movements = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TaxCollectorMovementsOfflineMessage(param1)

    def serializeAs_TaxCollectorMovementsOfflineMessage(self, param1):
        param1.write_short(len(self.movements))
        _loc2_ = 0
        while _loc2_ < len(self.movements):
            as_parent(self.movements[_loc2_], TaxCollectorMovement).serializeAs_TaxCollectorMovement(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_TaxCollectorMovementsOfflineMessage(param1)

    def deserializeAs_TaxCollectorMovementsOfflineMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = TaxCollectorMovement()
            _loc4_.deserialize(param1)
            self.movements.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TaxCollectorMovementsOfflineMessage(param1)

    def deserializeAsyncAs_TaxCollectorMovementsOfflineMessage(self, param1):
        self._movementstree = param1.add_child(self._movementstreeFunc)

    def _movementstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._movementstree.add_child(self._movementsFunc)
            _loc3_ += 1

    def _movementsFunc(self, param1):
        _loc2_ = TaxCollectorMovement()
        _loc2_.deserialize(param1)
        self.movements.append(_loc2_)


class TaxCollectorStateUpdateMessage(NetworkMessage):
    protocolId = 6455

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.uniqueId = 0
        self.state = 0

    def getMessageId(self):
        return 6455

    def initTaxCollectorStateUpdateMessage(self, param1=0, param2=0):
        self.uniqueId = param1
        self.state = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.uniqueId = 0
        self.state = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TaxCollectorStateUpdateMessage(param1)

    def serializeAs_TaxCollectorStateUpdateMessage(self, param1):
        param1.write_int(self.uniqueId)
        param1.write_byte(self.state)

    def deserialize(self, param1):
        self.deserializeAs_TaxCollectorStateUpdateMessage(param1)

    def deserializeAs_TaxCollectorStateUpdateMessage(self, param1):
        self._uniqueIdFunc(param1)
        self._stateFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TaxCollectorStateUpdateMessage(param1)

    def deserializeAsyncAs_TaxCollectorStateUpdateMessage(self, param1):
        param1.add_child(self._uniqueIdFunc)
        param1.add_child(self._stateFunc)

    def _uniqueIdFunc(self, param1):
        self.uniqueId = param1.read_int()

    def _stateFunc(self, param1):
        self.state = param1.read_byte()


class HouseTeleportRequestMessage(NetworkMessage):
    protocolId = 6726

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.houseId = 0
        self.houseInstanceId = 0

    def getMessageId(self):
        return 6726

    def initHouseTeleportRequestMessage(self, param1=0, param2=0):
        self.houseId = param1
        self.houseInstanceId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.houseId = 0
        self.houseInstanceId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HouseTeleportRequestMessage(param1)

    def serializeAs_HouseTeleportRequestMessage(self, param1):
        if self.houseId < 0:
            raise RuntimeError("Forbidden value (" + str(self.houseId) + ") on element houseId.")
        param1.write_var_int(self.houseId)
        param1.write_int(self.houseInstanceId)

    def deserialize(self, param1):
        self.deserializeAs_HouseTeleportRequestMessage(param1)

    def deserializeAs_HouseTeleportRequestMessage(self, param1):
        self._houseIdFunc(param1)
        self._houseInstanceIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HouseTeleportRequestMessage(param1)

    def deserializeAsyncAs_HouseTeleportRequestMessage(self, param1):
        param1.add_child(self._houseIdFunc)
        param1.add_child(self._houseInstanceIdFunc)

    def _houseIdFunc(self, param1):
        self.houseId = param1.read_var_uh_int()
        if self.houseId < 0:
            raise RuntimeError("Forbidden value (" + str(self.houseId) + ") on element of HouseTeleportRequestMessage.houseId.")

    def _houseInstanceIdFunc(self, param1):
        self.houseInstanceId = param1.read_int()


class IdolFightPreparationUpdateMessage(NetworkMessage):
    protocolId = 6586

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.idolSource = 0
        self.idols = []
        self._idolstree = FuncTree()

    def getMessageId(self):
        return 6586

    def initIdolFightPreparationUpdateMessage(self, param1=0, param2=[]):
        self.idolSource = param1
        self.idols = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.idolSource = 0
        self.idols = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IdolFightPreparationUpdateMessage(param1)

    def serializeAs_IdolFightPreparationUpdateMessage(self, param1):
        param1.write_byte(self.idolSource)
        param1.write_short(len(self.idols))
        _loc2_ = 0
        while _loc2_ < len(self.idols):
            param1.write_short(as_parent(self.idols[_loc2_], Idol).getTypeId())
            as_parent(self.idols[_loc2_], Idol).serialize(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_IdolFightPreparationUpdateMessage(param1)

    def deserializeAs_IdolFightPreparationUpdateMessage(self, param1):
        _loc4_ = 0
        _loc5_ = None
        self._idolSourceFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_unsigned_short()
            _loc5_ = ProtocolTypeManager.get_instance(Idol,_loc4_)
            _loc5_.deserialize(param1)
            self.idols.append(_loc5_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IdolFightPreparationUpdateMessage(param1)

    def deserializeAsyncAs_IdolFightPreparationUpdateMessage(self, param1):
        param1.add_child(self._idolSourceFunc)
        self._idolstree = param1.add_child(self._idolstreeFunc)

    def _idolSourceFunc(self, param1):
        self.idolSource = param1.read_byte()
        if self.idolSource < 0:
            raise RuntimeError("Forbidden value (" + str(self.idolSource) + ") on element of IdolFightPreparationUpdateMessage.idolSource.")

    def _idolstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._idolstree.add_child(self._idolsFunc)
            _loc3_ += 1

    def _idolsFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(Idol,_loc2_)
        _loc3_.deserialize(param1)
        self.idols.append(_loc3_)


class IdolListMessage(NetworkMessage):
    protocolId = 6585

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.chosenIdols = []
        self.partyChosenIdols = []
        self.partyIdols = []
        self._chosenIdolstree = FuncTree()
        self._partyChosenIdolstree = FuncTree()
        self._partyIdolstree = FuncTree()

    def getMessageId(self):
        return 6585

    def initIdolListMessage(self, param1=[], param2=[], param3=[]):
        self.chosenIdols = param1
        self.partyChosenIdols = param2
        self.partyIdols = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.chosenIdols = []
        self.partyChosenIdols = []
        self.partyIdols = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IdolListMessage(param1)

    def serializeAs_IdolListMessage(self, param1):
        param1.write_short(len(self.chosenIdols))
        _loc2_ = 0
        while _loc2_ < len(self.chosenIdols):
            if self.chosenIdols[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.chosenIdols[_loc2_]) + ") on element 1 (starting at 1) of chosenIdols.")
            param1.write_var_short(self.chosenIdols[_loc2_])
            _loc2_ += 1
        param1.write_short(len(self.partyChosenIdols))
        _loc3_ = 0
        while _loc3_ < len(self.partyChosenIdols):
            if self.partyChosenIdols[_loc3_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.partyChosenIdols[_loc3_]) + ") on element 2 (starting at 1) of partyChosenIdols.")
            param1.write_var_short(self.partyChosenIdols[_loc3_])
            _loc3_ += 1
        param1.write_short(len(self.partyIdols))
        _loc4_ = 0
        while _loc4_ < len(self.partyIdols):
            param1.write_short(as_parent(self.partyIdols[_loc4_], PartyIdol).getTypeId())
            as_parent(self.partyIdols[_loc4_], PartyIdol).serialize(param1)
            _loc4_ += 1

    def deserialize(self, param1):
        self.deserializeAs_IdolListMessage(param1)

    def deserializeAs_IdolListMessage(self, param1):
        _loc8_ = 0
        _loc9_ = 0
        _loc10_ = 0
        _loc11_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc8_ = param1.read_var_uh_short()
            if _loc8_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc8_) + ") on elements of chosenIdols.")
            self.chosenIdols.append(_loc8_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc9_ = param1.read_var_uh_short()
            if _loc9_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc9_) + ") on elements of partyChosenIdols.")
            self.partyChosenIdols.append(_loc9_)
            _loc5_ += 1
        _loc6_ = param1.read_unsigned_short()
        _loc7_ = 0
        while _loc7_ < _loc6_:
            _loc10_ = param1.read_unsigned_short()
            _loc11_ = ProtocolTypeManager.get_instance(PartyIdol,_loc10_)
            _loc11_.deserialize(param1)
            self.partyIdols.append(_loc11_)
            _loc7_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IdolListMessage(param1)

    def deserializeAsyncAs_IdolListMessage(self, param1):
        self._chosenIdolstree = param1.add_child(self._chosenIdolstreeFunc)
        self._partyChosenIdolstree = param1.add_child(self._partyChosenIdolstreeFunc)
        self._partyIdolstree = param1.add_child(self._partyIdolstreeFunc)

    def _chosenIdolstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._chosenIdolstree.add_child(self._chosenIdolsFunc)
            _loc3_ += 1

    def _chosenIdolsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of chosenIdols.")
        self.chosenIdols.append(_loc2_)

    def _partyChosenIdolstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._partyChosenIdolstree.add_child(self._partyChosenIdolsFunc)
            _loc3_ += 1

    def _partyChosenIdolsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of partyChosenIdols.")
        self.partyChosenIdols.append(_loc2_)

    def _partyIdolstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._partyIdolstree.add_child(self._partyIdolsFunc)
            _loc3_ += 1

    def _partyIdolsFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(PartyIdol,_loc2_)
        _loc3_.deserialize(param1)
        self.partyIdols.append(_loc3_)


class IdolPartyLostMessage(NetworkMessage):
    protocolId = 6580

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.idolId = 0

    def getMessageId(self):
        return 6580

    def initIdolPartyLostMessage(self, param1=0):
        self.idolId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.idolId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IdolPartyLostMessage(param1)

    def serializeAs_IdolPartyLostMessage(self, param1):
        if self.idolId < 0:
            raise RuntimeError("Forbidden value (" + str(self.idolId) + ") on element idolId.")
        param1.write_var_short(self.idolId)

    def deserialize(self, param1):
        self.deserializeAs_IdolPartyLostMessage(param1)

    def deserializeAs_IdolPartyLostMessage(self, param1):
        self._idolIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IdolPartyLostMessage(param1)

    def deserializeAsyncAs_IdolPartyLostMessage(self, param1):
        param1.add_child(self._idolIdFunc)

    def _idolIdFunc(self, param1):
        self.idolId = param1.read_var_uh_short()
        if self.idolId < 0:
            raise RuntimeError("Forbidden value (" + str(self.idolId) + ") on element of IdolPartyLostMessage.idolId.")


class IdolPartyRefreshMessage(NetworkMessage):
    protocolId = 6583

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.partyIdol = PartyIdol()
        self._partyIdoltree = FuncTree()

    def getMessageId(self):
        return 6583

    def initIdolPartyRefreshMessage(self, param1=None):
        self.partyIdol = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.partyIdol = PartyIdol()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IdolPartyRefreshMessage(param1)

    def serializeAs_IdolPartyRefreshMessage(self, param1):
        self.partyIdol.serializeAs_PartyIdol(param1)

    def deserialize(self, param1):
        self.deserializeAs_IdolPartyRefreshMessage(param1)

    def deserializeAs_IdolPartyRefreshMessage(self, param1):
        self.partyIdol = PartyIdol()
        self.partyIdol.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IdolPartyRefreshMessage(param1)

    def deserializeAsyncAs_IdolPartyRefreshMessage(self, param1):
        self._partyIdoltree = param1.add_child(self._partyIdoltreeFunc)

    def _partyIdoltreeFunc(self, param1):
        self.partyIdol = PartyIdol()
        self.partyIdol.deserializeAsync(self._partyIdoltree)


class IdolPartyRegisterRequestMessage(NetworkMessage):
    protocolId = 6582

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.register = False

    def getMessageId(self):
        return 6582

    def initIdolPartyRegisterRequestMessage(self, param1=False):
        self.register = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.register = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IdolPartyRegisterRequestMessage(param1)

    def serializeAs_IdolPartyRegisterRequestMessage(self, param1):
        param1.write_boolean(self.register)

    def deserialize(self, param1):
        self.deserializeAs_IdolPartyRegisterRequestMessage(param1)

    def deserializeAs_IdolPartyRegisterRequestMessage(self, param1):
        self._registerFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IdolPartyRegisterRequestMessage(param1)

    def deserializeAsyncAs_IdolPartyRegisterRequestMessage(self, param1):
        param1.add_child(self._registerFunc)

    def _registerFunc(self, param1):
        self.register = param1.read_boolean()


class IdolSelectedMessage(NetworkMessage):
    protocolId = 6581

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.idolId = 0
        self.activate = False
        self.party = False

    def getMessageId(self):
        return 6581

    def initIdolSelectedMessage(self, param1=0, param2=False, param3=False):
        self.idolId = param1
        self.activate = param2
        self.party = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.idolId = 0
        self.activate = False
        self.party = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IdolSelectedMessage(param1)

    def serializeAs_IdolSelectedMessage(self, param1):
        _loc2_ = 0
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,0,self.activate)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,1,self.party)
        param1.write_byte(_loc2_)
        if self.idolId < 0:
            raise RuntimeError("Forbidden value (" + str(self.idolId) + ") on element idolId.")
        param1.write_var_short(self.idolId)

    def deserialize(self, param1):
        self.deserializeAs_IdolSelectedMessage(param1)

    def deserializeAs_IdolSelectedMessage(self, param1):
        self.deserializeByteBoxes(param1)
        self._idolIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IdolSelectedMessage(param1)

    def deserializeAsyncAs_IdolSelectedMessage(self, param1):
        param1.add_child(self.deserializeByteBoxes)
        param1.add_child(self._idolIdFunc)

    def deserializeByteBoxes(self, param1):
        _loc2_ = param1.read_byte()
        self.activate = BooleanByteWrapper.get_flag(_loc2_,0)
        self.party = BooleanByteWrapper.get_flag(_loc2_,1)

    def _idolIdFunc(self, param1):
        self.idolId = param1.read_var_uh_short()
        if self.idolId < 0:
            raise RuntimeError("Forbidden value (" + str(self.idolId) + ") on element of IdolSelectedMessage.idolId.")


class IdolSelectErrorMessage(NetworkMessage):
    protocolId = 6584

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reason = 0
        self.idolId = 0
        self.activate = False
        self.party = False

    def getMessageId(self):
        return 6584

    def initIdolSelectErrorMessage(self, param1=0, param2=0, param3=False, param4=False):
        self.reason = param1
        self.idolId = param2
        self.activate = param3
        self.party = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.reason = 0
        self.idolId = 0
        self.activate = False
        self.party = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IdolSelectErrorMessage(param1)

    def serializeAs_IdolSelectErrorMessage(self, param1):
        _loc2_ = 0
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,0,self.activate)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,1,self.party)
        param1.write_byte(_loc2_)
        param1.write_byte(self.reason)
        if self.idolId < 0:
            raise RuntimeError("Forbidden value (" + str(self.idolId) + ") on element idolId.")
        param1.write_var_short(self.idolId)

    def deserialize(self, param1):
        self.deserializeAs_IdolSelectErrorMessage(param1)

    def deserializeAs_IdolSelectErrorMessage(self, param1):
        self.deserializeByteBoxes(param1)
        self._reasonFunc(param1)
        self._idolIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IdolSelectErrorMessage(param1)

    def deserializeAsyncAs_IdolSelectErrorMessage(self, param1):
        param1.add_child(self.deserializeByteBoxes)
        param1.add_child(self._reasonFunc)
        param1.add_child(self._idolIdFunc)

    def deserializeByteBoxes(self, param1):
        _loc2_ = param1.read_byte()
        self.activate = BooleanByteWrapper.get_flag(_loc2_,0)
        self.party = BooleanByteWrapper.get_flag(_loc2_,1)

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()
        if self.reason < 0:
            raise RuntimeError("Forbidden value (" + str(self.reason) + ") on element of IdolSelectErrorMessage.reason.")

    def _idolIdFunc(self, param1):
        self.idolId = param1.read_var_uh_short()
        if self.idolId < 0:
            raise RuntimeError("Forbidden value (" + str(self.idolId) + ") on element of IdolSelectErrorMessage.idolId.")


class IdolSelectRequestMessage(NetworkMessage):
    protocolId = 6587

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.idolId = 0
        self.activate = False
        self.party = False

    def getMessageId(self):
        return 6587

    def initIdolSelectRequestMessage(self, param1=0, param2=False, param3=False):
        self.idolId = param1
        self.activate = param2
        self.party = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.idolId = 0
        self.activate = False
        self.party = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IdolSelectRequestMessage(param1)

    def serializeAs_IdolSelectRequestMessage(self, param1):
        _loc2_ = 0
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,0,self.activate)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,1,self.party)
        param1.write_byte(_loc2_)
        if self.idolId < 0:
            raise RuntimeError("Forbidden value (" + str(self.idolId) + ") on element idolId.")
        param1.write_var_short(self.idolId)

    def deserialize(self, param1):
        self.deserializeAs_IdolSelectRequestMessage(param1)

    def deserializeAs_IdolSelectRequestMessage(self, param1):
        self.deserializeByteBoxes(param1)
        self._idolIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IdolSelectRequestMessage(param1)

    def deserializeAsyncAs_IdolSelectRequestMessage(self, param1):
        param1.add_child(self.deserializeByteBoxes)
        param1.add_child(self._idolIdFunc)

    def deserializeByteBoxes(self, param1):
        _loc2_ = param1.read_byte()
        self.activate = BooleanByteWrapper.get_flag(_loc2_,0)
        self.party = BooleanByteWrapper.get_flag(_loc2_,1)

    def _idolIdFunc(self, param1):
        self.idolId = param1.read_var_uh_short()
        if self.idolId < 0:
            raise RuntimeError("Forbidden value (" + str(self.idolId) + ") on element of IdolSelectRequestMessage.idolId.")


class CharacterCapabilitiesMessage(NetworkMessage):
    protocolId = 6339

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.guildEmblemSymbolCategories = 0

    def getMessageId(self):
        return 6339

    def initCharacterCapabilitiesMessage(self, param1=0):
        self.guildEmblemSymbolCategories = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.guildEmblemSymbolCategories = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CharacterCapabilitiesMessage(param1)

    def serializeAs_CharacterCapabilitiesMessage(self, param1):
        if self.guildEmblemSymbolCategories < 0:
            raise RuntimeError("Forbidden value (" + str(self.guildEmblemSymbolCategories) + ") on element guildEmblemSymbolCategories.")
        param1.write_var_int(self.guildEmblemSymbolCategories)

    def deserialize(self, param1):
        self.deserializeAs_CharacterCapabilitiesMessage(param1)

    def deserializeAs_CharacterCapabilitiesMessage(self, param1):
        self._guildEmblemSymbolCategoriesFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CharacterCapabilitiesMessage(param1)

    def deserializeAsyncAs_CharacterCapabilitiesMessage(self, param1):
        param1.add_child(self._guildEmblemSymbolCategoriesFunc)

    def _guildEmblemSymbolCategoriesFunc(self, param1):
        self.guildEmblemSymbolCategories = param1.read_var_uh_int()
        if self.guildEmblemSymbolCategories < 0:
            raise RuntimeError("Forbidden value (" + str(self.guildEmblemSymbolCategories) + ") on element of CharacterCapabilitiesMessage.guildEmblemSymbolCategories.")


class CharacterLoadingCompleteMessage(NetworkMessage):
    protocolId = 6471

    def getMessageId(self):
        return 6471

    def initCharacterLoadingCompleteMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_CharacterLoadingCompleteMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_CharacterLoadingCompleteMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_CharacterLoadingCompleteMessage(self, param1):
        pass


class OnConnectionEventMessage(NetworkMessage):
    protocolId = 5726

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.eventType = 0

    def getMessageId(self):
        return 5726

    def initOnConnectionEventMessage(self, param1=0):
        self.eventType = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.eventType = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_OnConnectionEventMessage(param1)

    def serializeAs_OnConnectionEventMessage(self, param1):
        param1.write_byte(self.eventType)

    def deserialize(self, param1):
        self.deserializeAs_OnConnectionEventMessage(param1)

    def deserializeAs_OnConnectionEventMessage(self, param1):
        self._eventTypeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_OnConnectionEventMessage(param1)

    def deserializeAsyncAs_OnConnectionEventMessage(self, param1):
        param1.add_child(self._eventTypeFunc)

    def _eventTypeFunc(self, param1):
        self.eventType = param1.read_byte()
        if self.eventType < 0:
            raise RuntimeError("Forbidden value (" + str(self.eventType) + ") on element of OnConnectionEventMessage.eventType.")


class ServerExperienceModificatorMessage(NetworkMessage):
    protocolId = 6237

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.experiencePercent = 0

    def getMessageId(self):
        return 6237

    def initServerExperienceModificatorMessage(self, param1=0):
        self.experiencePercent = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.experiencePercent = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ServerExperienceModificatorMessage(param1)

    def serializeAs_ServerExperienceModificatorMessage(self, param1):
        if self.experiencePercent < 0:
            raise RuntimeError("Forbidden value (" + str(self.experiencePercent) + ") on element experiencePercent.")
        param1.write_var_short(self.experiencePercent)

    def deserialize(self, param1):
        self.deserializeAs_ServerExperienceModificatorMessage(param1)

    def deserializeAs_ServerExperienceModificatorMessage(self, param1):
        self._experiencePercentFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ServerExperienceModificatorMessage(param1)

    def deserializeAsyncAs_ServerExperienceModificatorMessage(self, param1):
        param1.add_child(self._experiencePercentFunc)

    def _experiencePercentFunc(self, param1):
        self.experiencePercent = param1.read_var_uh_short()
        if self.experiencePercent < 0:
            raise RuntimeError("Forbidden value (" + str(self.experiencePercent) + ") on element of ServerExperienceModificatorMessage.experiencePercent.")


class SetCharacterRestrictionsMessage(NetworkMessage):
    protocolId = 170

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.actorId = 0
        self.restrictions = ActorRestrictionsInformations()
        self._restrictionstree = FuncTree()

    def getMessageId(self):
        return 170

    def initSetCharacterRestrictionsMessage(self, param1=0, param2=None):
        self.actorId = param1
        self.restrictions = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.actorId = 0
        self.restrictions = ActorRestrictionsInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SetCharacterRestrictionsMessage(param1)

    def serializeAs_SetCharacterRestrictionsMessage(self, param1):
        if self.actorId < -9007199254740990 or self.actorId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.actorId) + ") on element actorId.")
        param1.write_double(self.actorId)
        self.restrictions.serializeAs_ActorRestrictionsInformations(param1)

    def deserialize(self, param1):
        self.deserializeAs_SetCharacterRestrictionsMessage(param1)

    def deserializeAs_SetCharacterRestrictionsMessage(self, param1):
        self._actorIdFunc(param1)
        self.restrictions = ActorRestrictionsInformations()
        self.restrictions.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SetCharacterRestrictionsMessage(param1)

    def deserializeAsyncAs_SetCharacterRestrictionsMessage(self, param1):
        param1.add_child(self._actorIdFunc)
        self._restrictionstree = param1.add_child(self._restrictionstreeFunc)

    def _actorIdFunc(self, param1):
        self.actorId = param1.read_double()
        if self.actorId < -9007199254740990 or self.actorId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.actorId) + ") on element of SetCharacterRestrictionsMessage.actorId.")

    def _restrictionstreeFunc(self, param1):
        self.restrictions = ActorRestrictionsInformations()
        self.restrictions.deserializeAsync(self._restrictionstree)


class InteractiveElementUpdatedMessage(NetworkMessage):
    protocolId = 5708

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.interactiveElement = InteractiveElement()
        self._interactiveElementtree = FuncTree()

    def getMessageId(self):
        return 5708

    def initInteractiveElementUpdatedMessage(self, param1=None):
        self.interactiveElement = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.interactiveElement = InteractiveElement()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_InteractiveElementUpdatedMessage(param1)

    def serializeAs_InteractiveElementUpdatedMessage(self, param1):
        self.interactiveElement.serializeAs_InteractiveElement(param1)

    def deserialize(self, param1):
        self.deserializeAs_InteractiveElementUpdatedMessage(param1)

    def deserializeAs_InteractiveElementUpdatedMessage(self, param1):
        self.interactiveElement = InteractiveElement()
        self.interactiveElement.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_InteractiveElementUpdatedMessage(param1)

    def deserializeAsyncAs_InteractiveElementUpdatedMessage(self, param1):
        self._interactiveElementtree = param1.add_child(self._interactiveElementtreeFunc)

    def _interactiveElementtreeFunc(self, param1):
        self.interactiveElement = InteractiveElement()
        self.interactiveElement.deserializeAsync(self._interactiveElementtree)


class InteractiveMapUpdateMessage(NetworkMessage):
    protocolId = 5002

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.interactiveElements = []
        self._interactiveElementstree = FuncTree()

    def getMessageId(self):
        return 5002

    def initInteractiveMapUpdateMessage(self, param1=[]):
        self.interactiveElements = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.interactiveElements = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_InteractiveMapUpdateMessage(param1)

    def serializeAs_InteractiveMapUpdateMessage(self, param1):
        param1.write_short(len(self.interactiveElements))
        _loc2_ = 0
        while _loc2_ < len(self.interactiveElements):
            param1.write_short(as_parent(self.interactiveElements[_loc2_], InteractiveElement).getTypeId())
            as_parent(self.interactiveElements[_loc2_], InteractiveElement).serialize(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_InteractiveMapUpdateMessage(param1)

    def deserializeAs_InteractiveMapUpdateMessage(self, param1):
        _loc4_ = 0
        _loc5_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_unsigned_short()
            _loc5_ = ProtocolTypeManager.get_instance(InteractiveElement,_loc4_)
            _loc5_.deserialize(param1)
            self.interactiveElements.append(_loc5_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_InteractiveMapUpdateMessage(param1)

    def deserializeAsyncAs_InteractiveMapUpdateMessage(self, param1):
        self._interactiveElementstree = param1.add_child(self._interactiveElementstreeFunc)

    def _interactiveElementstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._interactiveElementstree.add_child(self._interactiveElementsFunc)
            _loc3_ += 1

    def _interactiveElementsFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(InteractiveElement,_loc2_)
        _loc3_.deserialize(param1)
        self.interactiveElements.append(_loc3_)


class InteractiveUsedMessage(NetworkMessage):
    protocolId = 5745

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.entityId = 0
        self.elemId = 0
        self.skillId = 0
        self.duration = 0
        self.canMove = False

    def getMessageId(self):
        return 5745

    def initInteractiveUsedMessage(self, param1=0, param2=0, param3=0, param4=0, param5=False):
        self.entityId = param1
        self.elemId = param2
        self.skillId = param3
        self.duration = param4
        self.canMove = param5
        self._isInitialized = True
        return self

    def reset(self):
        self.entityId = 0
        self.elemId = 0
        self.skillId = 0
        self.duration = 0
        self.canMove = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_InteractiveUsedMessage(param1)

    def serializeAs_InteractiveUsedMessage(self, param1):
        if self.entityId < 0 or self.entityId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.entityId) + ") on element entityId.")
        param1.write_var_long(self.entityId)
        if self.elemId < 0:
            raise RuntimeError("Forbidden value (" + str(self.elemId) + ") on element elemId.")
        param1.write_var_int(self.elemId)
        if self.skillId < 0:
            raise RuntimeError("Forbidden value (" + str(self.skillId) + ") on element skillId.")
        param1.write_var_short(self.skillId)
        if self.duration < 0:
            raise RuntimeError("Forbidden value (" + str(self.duration) + ") on element duration.")
        param1.write_var_short(self.duration)
        param1.write_boolean(self.canMove)

    def deserialize(self, param1):
        self.deserializeAs_InteractiveUsedMessage(param1)

    def deserializeAs_InteractiveUsedMessage(self, param1):
        self._entityIdFunc(param1)
        self._elemIdFunc(param1)
        self._skillIdFunc(param1)
        self._durationFunc(param1)
        self._canMoveFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_InteractiveUsedMessage(param1)

    def deserializeAsyncAs_InteractiveUsedMessage(self, param1):
        param1.add_child(self._entityIdFunc)
        param1.add_child(self._elemIdFunc)
        param1.add_child(self._skillIdFunc)
        param1.add_child(self._durationFunc)
        param1.add_child(self._canMoveFunc)

    def _entityIdFunc(self, param1):
        self.entityId = param1.read_var_uh_long()
        if self.entityId < 0 or self.entityId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.entityId) + ") on element of InteractiveUsedMessage.entityId.")

    def _elemIdFunc(self, param1):
        self.elemId = param1.read_var_uh_int()
        if self.elemId < 0:
            raise RuntimeError("Forbidden value (" + str(self.elemId) + ") on element of InteractiveUsedMessage.elemId.")

    def _skillIdFunc(self, param1):
        self.skillId = param1.read_var_uh_short()
        if self.skillId < 0:
            raise RuntimeError("Forbidden value (" + str(self.skillId) + ") on element of InteractiveUsedMessage.skillId.")

    def _durationFunc(self, param1):
        self.duration = param1.read_var_uh_short()
        if self.duration < 0:
            raise RuntimeError("Forbidden value (" + str(self.duration) + ") on element of InteractiveUsedMessage.duration.")

    def _canMoveFunc(self, param1):
        self.canMove = param1.read_boolean()


class InteractiveUseEndedMessage(NetworkMessage):
    protocolId = 6112

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.elemId = 0
        self.skillId = 0

    def getMessageId(self):
        return 6112

    def initInteractiveUseEndedMessage(self, param1=0, param2=0):
        self.elemId = param1
        self.skillId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.elemId = 0
        self.skillId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_InteractiveUseEndedMessage(param1)

    def serializeAs_InteractiveUseEndedMessage(self, param1):
        if self.elemId < 0:
            raise RuntimeError("Forbidden value (" + str(self.elemId) + ") on element elemId.")
        param1.write_var_int(self.elemId)
        if self.skillId < 0:
            raise RuntimeError("Forbidden value (" + str(self.skillId) + ") on element skillId.")
        param1.write_var_short(self.skillId)

    def deserialize(self, param1):
        self.deserializeAs_InteractiveUseEndedMessage(param1)

    def deserializeAs_InteractiveUseEndedMessage(self, param1):
        self._elemIdFunc(param1)
        self._skillIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_InteractiveUseEndedMessage(param1)

    def deserializeAsyncAs_InteractiveUseEndedMessage(self, param1):
        param1.add_child(self._elemIdFunc)
        param1.add_child(self._skillIdFunc)

    def _elemIdFunc(self, param1):
        self.elemId = param1.read_var_uh_int()
        if self.elemId < 0:
            raise RuntimeError("Forbidden value (" + str(self.elemId) + ") on element of InteractiveUseEndedMessage.elemId.")

    def _skillIdFunc(self, param1):
        self.skillId = param1.read_var_uh_short()
        if self.skillId < 0:
            raise RuntimeError("Forbidden value (" + str(self.skillId) + ") on element of InteractiveUseEndedMessage.skillId.")


class InteractiveUseErrorMessage(NetworkMessage):
    protocolId = 6384

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.elemId = 0
        self.skillInstanceUid = 0

    def getMessageId(self):
        return 6384

    def initInteractiveUseErrorMessage(self, param1=0, param2=0):
        self.elemId = param1
        self.skillInstanceUid = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.elemId = 0
        self.skillInstanceUid = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_InteractiveUseErrorMessage(param1)

    def serializeAs_InteractiveUseErrorMessage(self, param1):
        if self.elemId < 0:
            raise RuntimeError("Forbidden value (" + str(self.elemId) + ") on element elemId.")
        param1.write_var_int(self.elemId)
        if self.skillInstanceUid < 0:
            raise RuntimeError("Forbidden value (" + str(self.skillInstanceUid) + ") on element skillInstanceUid.")
        param1.write_var_int(self.skillInstanceUid)

    def deserialize(self, param1):
        self.deserializeAs_InteractiveUseErrorMessage(param1)

    def deserializeAs_InteractiveUseErrorMessage(self, param1):
        self._elemIdFunc(param1)
        self._skillInstanceUidFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_InteractiveUseErrorMessage(param1)

    def deserializeAsyncAs_InteractiveUseErrorMessage(self, param1):
        param1.add_child(self._elemIdFunc)
        param1.add_child(self._skillInstanceUidFunc)

    def _elemIdFunc(self, param1):
        self.elemId = param1.read_var_uh_int()
        if self.elemId < 0:
            raise RuntimeError("Forbidden value (" + str(self.elemId) + ") on element of InteractiveUseErrorMessage.elemId.")

    def _skillInstanceUidFunc(self, param1):
        self.skillInstanceUid = param1.read_var_uh_int()
        if self.skillInstanceUid < 0:
            raise RuntimeError("Forbidden value (" + str(self.skillInstanceUid) + ") on element of InteractiveUseErrorMessage.skillInstanceUid.")


class InteractiveUseRequestMessage(NetworkMessage):
    protocolId = 5001

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.elemId = 0
        self.skillInstanceUid = 0

    def getMessageId(self):
        return 5001

    def initInteractiveUseRequestMessage(self, param1=0, param2=0):
        self.elemId = param1
        self.skillInstanceUid = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.elemId = 0
        self.skillInstanceUid = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        if HASH_FUNCTION != None:
            HASH_FUNCTION(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_InteractiveUseRequestMessage(param1)

    def serializeAs_InteractiveUseRequestMessage(self, param1):
        if self.elemId < 0:
            raise RuntimeError("Forbidden value (" + str(self.elemId) + ") on element elemId.")
        param1.write_var_int(self.elemId)
        if self.skillInstanceUid < 0:
            raise RuntimeError("Forbidden value (" + str(self.skillInstanceUid) + ") on element skillInstanceUid.")
        param1.write_var_int(self.skillInstanceUid)

    def deserialize(self, param1):
        self.deserializeAs_InteractiveUseRequestMessage(param1)

    def deserializeAs_InteractiveUseRequestMessage(self, param1):
        self._elemIdFunc(param1)
        self._skillInstanceUidFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_InteractiveUseRequestMessage(param1)

    def deserializeAsyncAs_InteractiveUseRequestMessage(self, param1):
        param1.add_child(self._elemIdFunc)
        param1.add_child(self._skillInstanceUidFunc)

    def _elemIdFunc(self, param1):
        self.elemId = param1.read_var_uh_int()
        if self.elemId < 0:
            raise RuntimeError("Forbidden value (" + str(self.elemId) + ") on element of InteractiveUseRequestMessage.elemId.")

    def _skillInstanceUidFunc(self, param1):
        self.skillInstanceUid = param1.read_var_uh_int()
        if self.skillInstanceUid < 0:
            raise RuntimeError("Forbidden value (" + str(self.skillInstanceUid) + ") on element of InteractiveUseRequestMessage.skillInstanceUid.")


class StatedElementUpdatedMessage(NetworkMessage):
    protocolId = 5709

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.statedElement = StatedElement()
        self._statedElementtree = FuncTree()

    def getMessageId(self):
        return 5709

    def initStatedElementUpdatedMessage(self, param1=None):
        self.statedElement = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.statedElement = StatedElement()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_StatedElementUpdatedMessage(param1)

    def serializeAs_StatedElementUpdatedMessage(self, param1):
        self.statedElement.serializeAs_StatedElement(param1)

    def deserialize(self, param1):
        self.deserializeAs_StatedElementUpdatedMessage(param1)

    def deserializeAs_StatedElementUpdatedMessage(self, param1):
        self.statedElement = StatedElement()
        self.statedElement.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_StatedElementUpdatedMessage(param1)

    def deserializeAsyncAs_StatedElementUpdatedMessage(self, param1):
        self._statedElementtree = param1.add_child(self._statedElementtreeFunc)

    def _statedElementtreeFunc(self, param1):
        self.statedElement = StatedElement()
        self.statedElement.deserializeAsync(self._statedElementtree)


class StatedMapUpdateMessage(NetworkMessage):
    protocolId = 5716

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.statedElements = []
        self._statedElementstree = FuncTree()

    def getMessageId(self):
        return 5716

    def initStatedMapUpdateMessage(self, param1=[]):
        self.statedElements = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.statedElements = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_StatedMapUpdateMessage(param1)

    def serializeAs_StatedMapUpdateMessage(self, param1):
        param1.write_short(len(self.statedElements))
        _loc2_ = 0
        while _loc2_ < len(self.statedElements):
            as_parent(self.statedElements[_loc2_], StatedElement).serializeAs_StatedElement(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_StatedMapUpdateMessage(param1)

    def deserializeAs_StatedMapUpdateMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = StatedElement()
            _loc4_.deserialize(param1)
            self.statedElements.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_StatedMapUpdateMessage(param1)

    def deserializeAsyncAs_StatedMapUpdateMessage(self, param1):
        self._statedElementstree = param1.add_child(self._statedElementstreeFunc)

    def _statedElementstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._statedElementstree.add_child(self._statedElementsFunc)
            _loc3_ += 1

    def _statedElementsFunc(self, param1):
        _loc2_ = StatedElement()
        _loc2_.deserialize(param1)
        self.statedElements.append(_loc2_)


class TeleportBuddiesAnswerMessage(NetworkMessage):
    protocolId = 6294

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.accept = False

    def getMessageId(self):
        return 6294

    def initTeleportBuddiesAnswerMessage(self, param1=False):
        self.accept = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.accept = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TeleportBuddiesAnswerMessage(param1)

    def serializeAs_TeleportBuddiesAnswerMessage(self, param1):
        param1.write_boolean(self.accept)

    def deserialize(self, param1):
        self.deserializeAs_TeleportBuddiesAnswerMessage(param1)

    def deserializeAs_TeleportBuddiesAnswerMessage(self, param1):
        self._acceptFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TeleportBuddiesAnswerMessage(param1)

    def deserializeAsyncAs_TeleportBuddiesAnswerMessage(self, param1):
        param1.add_child(self._acceptFunc)

    def _acceptFunc(self, param1):
        self.accept = param1.read_boolean()


class TeleportBuddiesMessage(NetworkMessage):
    protocolId = 6289

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dungeonId = 0

    def getMessageId(self):
        return 6289

    def initTeleportBuddiesMessage(self, param1=0):
        self.dungeonId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.dungeonId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TeleportBuddiesMessage(param1)

    def serializeAs_TeleportBuddiesMessage(self, param1):
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element dungeonId.")
        param1.write_var_short(self.dungeonId)

    def deserialize(self, param1):
        self.deserializeAs_TeleportBuddiesMessage(param1)

    def deserializeAs_TeleportBuddiesMessage(self, param1):
        self._dungeonIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TeleportBuddiesMessage(param1)

    def deserializeAsyncAs_TeleportBuddiesMessage(self, param1):
        param1.add_child(self._dungeonIdFunc)

    def _dungeonIdFunc(self, param1):
        self.dungeonId = param1.read_var_uh_short()
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element of TeleportBuddiesMessage.dungeonId.")


class TeleportBuddiesRequestedMessage(NetworkMessage):
    protocolId = 6302

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dungeonId = 0
        self.inviterId = 0
        self.invalidBuddiesIds = []
        self._invalidBuddiesIdstree = FuncTree()

    def getMessageId(self):
        return 6302

    def initTeleportBuddiesRequestedMessage(self, param1=0, param2=0, param3=[]):
        self.dungeonId = param1
        self.inviterId = param2
        self.invalidBuddiesIds = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.dungeonId = 0
        self.inviterId = 0
        self.invalidBuddiesIds = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TeleportBuddiesRequestedMessage(param1)

    def serializeAs_TeleportBuddiesRequestedMessage(self, param1):
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element dungeonId.")
        param1.write_var_short(self.dungeonId)
        if self.inviterId < 0 or self.inviterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.inviterId) + ") on element inviterId.")
        param1.write_var_long(self.inviterId)
        param1.write_short(len(self.invalidBuddiesIds))
        _loc2_ = 0
        while _loc2_ < len(self.invalidBuddiesIds):
            if self.invalidBuddiesIds[_loc2_] < 0 or self.invalidBuddiesIds[_loc2_] > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(self.invalidBuddiesIds[_loc2_]) + ") on element 3 (starting at 1) of invalidBuddiesIds.")
            param1.write_var_long(self.invalidBuddiesIds[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_TeleportBuddiesRequestedMessage(param1)

    def deserializeAs_TeleportBuddiesRequestedMessage(self, param1):
        _loc4_ = None
        self._dungeonIdFunc(param1)
        self._inviterIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_uh_long()
            if _loc4_ < 0 or _loc4_ > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of invalidBuddiesIds.")
            self.invalidBuddiesIds.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TeleportBuddiesRequestedMessage(param1)

    def deserializeAsyncAs_TeleportBuddiesRequestedMessage(self, param1):
        param1.add_child(self._dungeonIdFunc)
        param1.add_child(self._inviterIdFunc)
        self._invalidBuddiesIdstree = param1.add_child(self._invalidBuddiesIdstreeFunc)

    def _dungeonIdFunc(self, param1):
        self.dungeonId = param1.read_var_uh_short()
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element of TeleportBuddiesRequestedMessage.dungeonId.")

    def _inviterIdFunc(self, param1):
        self.inviterId = param1.read_var_uh_long()
        if self.inviterId < 0 or self.inviterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.inviterId) + ") on element of TeleportBuddiesRequestedMessage.inviterId.")

    def _invalidBuddiesIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._invalidBuddiesIdstree.add_child(self._invalidBuddiesIdsFunc)
            _loc3_ += 1

    def _invalidBuddiesIdsFunc(self, param1):
        _loc2_ = param1.read_var_uh_long()
        if _loc2_ < 0 or _loc2_ > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of invalidBuddiesIds.")
        self.invalidBuddiesIds.append(_loc2_)


class TeleportToBuddyAnswerMessage(NetworkMessage):
    protocolId = 6293

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dungeonId = 0
        self.buddyId = 0
        self.accept = False

    def getMessageId(self):
        return 6293

    def initTeleportToBuddyAnswerMessage(self, param1=0, param2=0, param3=False):
        self.dungeonId = param1
        self.buddyId = param2
        self.accept = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.dungeonId = 0
        self.buddyId = 0
        self.accept = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TeleportToBuddyAnswerMessage(param1)

    def serializeAs_TeleportToBuddyAnswerMessage(self, param1):
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element dungeonId.")
        param1.write_var_short(self.dungeonId)
        if self.buddyId < 0 or self.buddyId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.buddyId) + ") on element buddyId.")
        param1.write_var_long(self.buddyId)
        param1.write_boolean(self.accept)

    def deserialize(self, param1):
        self.deserializeAs_TeleportToBuddyAnswerMessage(param1)

    def deserializeAs_TeleportToBuddyAnswerMessage(self, param1):
        self._dungeonIdFunc(param1)
        self._buddyIdFunc(param1)
        self._acceptFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TeleportToBuddyAnswerMessage(param1)

    def deserializeAsyncAs_TeleportToBuddyAnswerMessage(self, param1):
        param1.add_child(self._dungeonIdFunc)
        param1.add_child(self._buddyIdFunc)
        param1.add_child(self._acceptFunc)

    def _dungeonIdFunc(self, param1):
        self.dungeonId = param1.read_var_uh_short()
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element of TeleportToBuddyAnswerMessage.dungeonId.")

    def _buddyIdFunc(self, param1):
        self.buddyId = param1.read_var_uh_long()
        if self.buddyId < 0 or self.buddyId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.buddyId) + ") on element of TeleportToBuddyAnswerMessage.buddyId.")

    def _acceptFunc(self, param1):
        self.accept = param1.read_boolean()


class TeleportToBuddyCloseMessage(NetworkMessage):
    protocolId = 6303

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dungeonId = 0
        self.buddyId = 0

    def getMessageId(self):
        return 6303

    def initTeleportToBuddyCloseMessage(self, param1=0, param2=0):
        self.dungeonId = param1
        self.buddyId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.dungeonId = 0
        self.buddyId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TeleportToBuddyCloseMessage(param1)

    def serializeAs_TeleportToBuddyCloseMessage(self, param1):
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element dungeonId.")
        param1.write_var_short(self.dungeonId)
        if self.buddyId < 0 or self.buddyId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.buddyId) + ") on element buddyId.")
        param1.write_var_long(self.buddyId)

    def deserialize(self, param1):
        self.deserializeAs_TeleportToBuddyCloseMessage(param1)

    def deserializeAs_TeleportToBuddyCloseMessage(self, param1):
        self._dungeonIdFunc(param1)
        self._buddyIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TeleportToBuddyCloseMessage(param1)

    def deserializeAsyncAs_TeleportToBuddyCloseMessage(self, param1):
        param1.add_child(self._dungeonIdFunc)
        param1.add_child(self._buddyIdFunc)

    def _dungeonIdFunc(self, param1):
        self.dungeonId = param1.read_var_uh_short()
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element of TeleportToBuddyCloseMessage.dungeonId.")

    def _buddyIdFunc(self, param1):
        self.buddyId = param1.read_var_uh_long()
        if self.buddyId < 0 or self.buddyId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.buddyId) + ") on element of TeleportToBuddyCloseMessage.buddyId.")


class TeleportToBuddyOfferMessage(NetworkMessage):
    protocolId = 6287

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dungeonId = 0
        self.buddyId = 0
        self.timeLeft = 0

    def getMessageId(self):
        return 6287

    def initTeleportToBuddyOfferMessage(self, param1=0, param2=0, param3=0):
        self.dungeonId = param1
        self.buddyId = param2
        self.timeLeft = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.dungeonId = 0
        self.buddyId = 0
        self.timeLeft = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TeleportToBuddyOfferMessage(param1)

    def serializeAs_TeleportToBuddyOfferMessage(self, param1):
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element dungeonId.")
        param1.write_var_short(self.dungeonId)
        if self.buddyId < 0 or self.buddyId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.buddyId) + ") on element buddyId.")
        param1.write_var_long(self.buddyId)
        if self.timeLeft < 0:
            raise RuntimeError("Forbidden value (" + str(self.timeLeft) + ") on element timeLeft.")
        param1.write_var_int(self.timeLeft)

    def deserialize(self, param1):
        self.deserializeAs_TeleportToBuddyOfferMessage(param1)

    def deserializeAs_TeleportToBuddyOfferMessage(self, param1):
        self._dungeonIdFunc(param1)
        self._buddyIdFunc(param1)
        self._timeLeftFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TeleportToBuddyOfferMessage(param1)

    def deserializeAsyncAs_TeleportToBuddyOfferMessage(self, param1):
        param1.add_child(self._dungeonIdFunc)
        param1.add_child(self._buddyIdFunc)
        param1.add_child(self._timeLeftFunc)

    def _dungeonIdFunc(self, param1):
        self.dungeonId = param1.read_var_uh_short()
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element of TeleportToBuddyOfferMessage.dungeonId.")

    def _buddyIdFunc(self, param1):
        self.buddyId = param1.read_var_uh_long()
        if self.buddyId < 0 or self.buddyId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.buddyId) + ") on element of TeleportToBuddyOfferMessage.buddyId.")

    def _timeLeftFunc(self, param1):
        self.timeLeft = param1.read_var_uh_int()
        if self.timeLeft < 0:
            raise RuntimeError("Forbidden value (" + str(self.timeLeft) + ") on element of TeleportToBuddyOfferMessage.timeLeft.")


class TeleportDestinationsListMessage(NetworkMessage):
    protocolId = 5960

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.teleporterType = 0
        self.mapIds = []
        self.subAreaIds = []
        self.costs = []
        self.destTeleporterType = []
        self._mapIdstree = FuncTree()
        self._subAreaIdstree = FuncTree()
        self._coststree = FuncTree()
        self._destTeleporterTypetree = FuncTree()

    def getMessageId(self):
        return 5960

    def initTeleportDestinationsListMessage(self, param1=0, param2=[], param3=[], param4=[], param5=[]):
        self.teleporterType = param1
        self.mapIds = param2
        self.subAreaIds = param3
        self.costs = param4
        self.destTeleporterType = param5
        self._isInitialized = True
        return self

    def reset(self):
        self.teleporterType = 0
        self.mapIds = []
        self.subAreaIds = []
        self.costs = []
        self.destTeleporterType = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TeleportDestinationsListMessage(param1)

    def serializeAs_TeleportDestinationsListMessage(self, param1):
        param1.write_byte(self.teleporterType)
        param1.write_short(len(self.mapIds))
        _loc2_ = 0
        while _loc2_ < len(self.mapIds):
            if self.mapIds[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.mapIds[_loc2_]) + ") on element 2 (starting at 1) of mapIds.")
            param1.write_int(self.mapIds[_loc2_])
            _loc2_ += 1
        param1.write_short(len(self.subAreaIds))
        _loc3_ = 0
        while _loc3_ < len(self.subAreaIds):
            if self.subAreaIds[_loc3_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.subAreaIds[_loc3_]) + ") on element 3 (starting at 1) of subAreaIds.")
            param1.write_var_short(self.subAreaIds[_loc3_])
            _loc3_ += 1
        param1.write_short(len(self.costs))
        _loc4_ = 0
        while _loc4_ < len(self.costs):
            if self.costs[_loc4_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.costs[_loc4_]) + ") on element 4 (starting at 1) of costs.")
            param1.write_var_short(self.costs[_loc4_])
            _loc4_ += 1
        param1.write_short(len(self.destTeleporterType))
        _loc5_ = 0
        while _loc5_ < len(self.destTeleporterType):
            param1.write_byte(self.destTeleporterType[_loc5_])
            _loc5_ += 1

    def deserialize(self, param1):
        self.deserializeAs_TeleportDestinationsListMessage(param1)

    def deserializeAs_TeleportDestinationsListMessage(self, param1):
        _loc10_ = 0
        _loc11_ = 0
        _loc12_ = 0
        _loc13_ = 0
        self._teleporterTypeFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc10_ = param1.read_int()
            if _loc10_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc10_) + ") on elements of mapIds.")
            self.mapIds.append(_loc10_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc11_ = param1.read_var_uh_short()
            if _loc11_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc11_) + ") on elements of subAreaIds.")
            self.subAreaIds.append(_loc11_)
            _loc5_ += 1
        _loc6_ = param1.read_unsigned_short()
        _loc7_ = 0
        while _loc7_ < _loc6_:
            _loc12_ = param1.read_var_uh_short()
            if _loc12_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc12_) + ") on elements of costs.")
            self.costs.append(_loc12_)
            _loc7_ += 1
        _loc8_ = param1.read_unsigned_short()
        _loc9_ = 0
        while _loc9_ < _loc8_:
            _loc13_ = param1.read_byte()
            if _loc13_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc13_) + ") on elements of destTeleporterType.")
            self.destTeleporterType.append(_loc13_)
            _loc9_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TeleportDestinationsListMessage(param1)

    def deserializeAsyncAs_TeleportDestinationsListMessage(self, param1):
        param1.add_child(self._teleporterTypeFunc)
        self._mapIdstree = param1.add_child(self._mapIdstreeFunc)
        self._subAreaIdstree = param1.add_child(self._subAreaIdstreeFunc)
        self._coststree = param1.add_child(self._coststreeFunc)
        self._destTeleporterTypetree = param1.add_child(self._destTeleporterTypetreeFunc)

    def _teleporterTypeFunc(self, param1):
        self.teleporterType = param1.read_byte()
        if self.teleporterType < 0:
            raise RuntimeError("Forbidden value (" + str(self.teleporterType) + ") on element of TeleportDestinationsListMessage.teleporterType.")

    def _mapIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._mapIdstree.add_child(self._mapIdsFunc)
            _loc3_ += 1

    def _mapIdsFunc(self, param1):
        _loc2_ = param1.read_int()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of mapIds.")
        self.mapIds.append(_loc2_)

    def _subAreaIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._subAreaIdstree.add_child(self._subAreaIdsFunc)
            _loc3_ += 1

    def _subAreaIdsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of subAreaIds.")
        self.subAreaIds.append(_loc2_)

    def _coststreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._coststree.add_child(self._costsFunc)
            _loc3_ += 1

    def _costsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of costs.")
        self.costs.append(_loc2_)

    def _destTeleporterTypetreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._destTeleporterTypetree.add_child(self._destTeleporterTypeFunc)
            _loc3_ += 1

    def _destTeleporterTypeFunc(self, param1):
        _loc2_ = param1.read_byte()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of destTeleporterType.")
        self.destTeleporterType.append(_loc2_)


class TeleportRequestMessage(NetworkMessage):
    protocolId = 5961

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.teleporterType = 0
        self.mapId = 0

    def getMessageId(self):
        return 5961

    def initTeleportRequestMessage(self, param1=0, param2=0):
        self.teleporterType = param1
        self.mapId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.teleporterType = 0
        self.mapId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TeleportRequestMessage(param1)

    def serializeAs_TeleportRequestMessage(self, param1):
        param1.write_byte(self.teleporterType)
        if self.mapId < 0:
            raise RuntimeError("Forbidden value (" + str(self.mapId) + ") on element mapId.")
        param1.write_int(self.mapId)

    def deserialize(self, param1):
        self.deserializeAs_TeleportRequestMessage(param1)

    def deserializeAs_TeleportRequestMessage(self, param1):
        self._teleporterTypeFunc(param1)
        self._mapIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TeleportRequestMessage(param1)

    def deserializeAsyncAs_TeleportRequestMessage(self, param1):
        param1.add_child(self._teleporterTypeFunc)
        param1.add_child(self._mapIdFunc)

    def _teleporterTypeFunc(self, param1):
        self.teleporterType = param1.read_byte()
        if self.teleporterType < 0:
            raise RuntimeError("Forbidden value (" + str(self.teleporterType) + ") on element of TeleportRequestMessage.teleporterType.")

    def _mapIdFunc(self, param1):
        self.mapId = param1.read_int()
        if self.mapId < 0:
            raise RuntimeError("Forbidden value (" + str(self.mapId) + ") on element of TeleportRequestMessage.mapId.")


class ZaapRespawnSaveRequestMessage(NetworkMessage):
    protocolId = 6572

    def getMessageId(self):
        return 6572

    def initZaapRespawnSaveRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_ZaapRespawnSaveRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_ZaapRespawnSaveRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_ZaapRespawnSaveRequestMessage(self, param1):
        pass


class ZaapRespawnUpdatedMessage(NetworkMessage):
    protocolId = 6571

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.mapId = 0

    def getMessageId(self):
        return 6571

    def initZaapRespawnUpdatedMessage(self, param1=0):
        self.mapId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.mapId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ZaapRespawnUpdatedMessage(param1)

    def serializeAs_ZaapRespawnUpdatedMessage(self, param1):
        if self.mapId < 0:
            raise RuntimeError("Forbidden value (" + str(self.mapId) + ") on element mapId.")
        param1.write_int(self.mapId)

    def deserialize(self, param1):
        self.deserializeAs_ZaapRespawnUpdatedMessage(param1)

    def deserializeAs_ZaapRespawnUpdatedMessage(self, param1):
        self._mapIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ZaapRespawnUpdatedMessage(param1)

    def deserializeAsyncAs_ZaapRespawnUpdatedMessage(self, param1):
        param1.add_child(self._mapIdFunc)

    def _mapIdFunc(self, param1):
        self.mapId = param1.read_int()
        if self.mapId < 0:
            raise RuntimeError("Forbidden value (" + str(self.mapId) + ") on element of ZaapRespawnUpdatedMessage.mapId.")


class AbstractPresetDeleteMessage(NetworkMessage):
    protocolId = 6735

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.presetId = 0

    def getMessageId(self):
        return 6735

    def initAbstractPresetDeleteMessage(self, param1=0):
        self.presetId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.presetId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AbstractPresetDeleteMessage(param1)

    def serializeAs_AbstractPresetDeleteMessage(self, param1):
        if self.presetId < 0:
            raise RuntimeError("Forbidden value (" + str(self.presetId) + ") on element presetId.")
        param1.write_byte(self.presetId)

    def deserialize(self, param1):
        self.deserializeAs_AbstractPresetDeleteMessage(param1)

    def deserializeAs_AbstractPresetDeleteMessage(self, param1):
        self._presetIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AbstractPresetDeleteMessage(param1)

    def deserializeAsyncAs_AbstractPresetDeleteMessage(self, param1):
        param1.add_child(self._presetIdFunc)

    def _presetIdFunc(self, param1):
        self.presetId = param1.read_byte()
        if self.presetId < 0:
            raise RuntimeError("Forbidden value (" + str(self.presetId) + ") on element of AbstractPresetDeleteMessage.presetId.")


class AbstractPresetSaveMessage(NetworkMessage):
    protocolId = 6736

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.presetId = 0
        self.symbolId = 0

    def getMessageId(self):
        return 6736

    def initAbstractPresetSaveMessage(self, param1=0, param2=0):
        self.presetId = param1
        self.symbolId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.presetId = 0
        self.symbolId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AbstractPresetSaveMessage(param1)

    def serializeAs_AbstractPresetSaveMessage(self, param1):
        if self.presetId < 0:
            raise RuntimeError("Forbidden value (" + str(self.presetId) + ") on element presetId.")
        param1.write_byte(self.presetId)
        if self.symbolId < 0:
            raise RuntimeError("Forbidden value (" + str(self.symbolId) + ") on element symbolId.")
        param1.write_byte(self.symbolId)

    def deserialize(self, param1):
        self.deserializeAs_AbstractPresetSaveMessage(param1)

    def deserializeAs_AbstractPresetSaveMessage(self, param1):
        self._presetIdFunc(param1)
        self._symbolIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AbstractPresetSaveMessage(param1)

    def deserializeAsyncAs_AbstractPresetSaveMessage(self, param1):
        param1.add_child(self._presetIdFunc)
        param1.add_child(self._symbolIdFunc)

    def _presetIdFunc(self, param1):
        self.presetId = param1.read_byte()
        if self.presetId < 0:
            raise RuntimeError("Forbidden value (" + str(self.presetId) + ") on element of AbstractPresetSaveMessage.presetId.")

    def _symbolIdFunc(self, param1):
        self.symbolId = param1.read_byte()
        if self.symbolId < 0:
            raise RuntimeError("Forbidden value (" + str(self.symbolId) + ") on element of AbstractPresetSaveMessage.symbolId.")


class AbstractPresetSaveResultMessage(NetworkMessage):
    protocolId = 6734

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.presetId = 0
        self.code = 2

    def getMessageId(self):
        return 6734

    def initAbstractPresetSaveResultMessage(self, param1=0, param2=2):
        self.presetId = param1
        self.code = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.presetId = 0
        self.code = 2
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AbstractPresetSaveResultMessage(param1)

    def serializeAs_AbstractPresetSaveResultMessage(self, param1):
        if self.presetId < 0:
            raise RuntimeError("Forbidden value (" + str(self.presetId) + ") on element presetId.")
        param1.write_byte(self.presetId)
        param1.write_byte(self.code)

    def deserialize(self, param1):
        self.deserializeAs_AbstractPresetSaveResultMessage(param1)

    def deserializeAs_AbstractPresetSaveResultMessage(self, param1):
        self._presetIdFunc(param1)
        self._codeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AbstractPresetSaveResultMessage(param1)

    def deserializeAsyncAs_AbstractPresetSaveResultMessage(self, param1):
        param1.add_child(self._presetIdFunc)
        param1.add_child(self._codeFunc)

    def _presetIdFunc(self, param1):
        self.presetId = param1.read_byte()
        if self.presetId < 0:
            raise RuntimeError("Forbidden value (" + str(self.presetId) + ") on element of AbstractPresetSaveResultMessage.presetId.")

    def _codeFunc(self, param1):
        self.code = param1.read_byte()
        if self.code < 0:
            raise RuntimeError("Forbidden value (" + str(self.code) + ") on element of AbstractPresetSaveResultMessage.code.")


class KamasUpdateMessage(NetworkMessage):
    protocolId = 5537

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.kamasTotal = 0

    def getMessageId(self):
        return 5537

    def initKamasUpdateMessage(self, param1=0):
        self.kamasTotal = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.kamasTotal = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_KamasUpdateMessage(param1)

    def serializeAs_KamasUpdateMessage(self, param1):
        if self.kamasTotal < 0 or self.kamasTotal > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.kamasTotal) + ") on element kamasTotal.")
        param1.write_var_long(self.kamasTotal)

    def deserialize(self, param1):
        self.deserializeAs_KamasUpdateMessage(param1)

    def deserializeAs_KamasUpdateMessage(self, param1):
        self._kamasTotalFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_KamasUpdateMessage(param1)

    def deserializeAsyncAs_KamasUpdateMessage(self, param1):
        param1.add_child(self._kamasTotalFunc)

    def _kamasTotalFunc(self, param1):
        self.kamasTotal = param1.read_var_uh_long()
        if self.kamasTotal < 0 or self.kamasTotal > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.kamasTotal) + ") on element of KamasUpdateMessage.kamasTotal.")


class ObjectAveragePricesErrorMessage(NetworkMessage):
    protocolId = 6336

    def getMessageId(self):
        return 6336

    def initObjectAveragePricesErrorMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_ObjectAveragePricesErrorMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_ObjectAveragePricesErrorMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_ObjectAveragePricesErrorMessage(self, param1):
        pass


class ObjectAveragePricesGetMessage(NetworkMessage):
    protocolId = 6334

    def getMessageId(self):
        return 6334

    def initObjectAveragePricesGetMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_ObjectAveragePricesGetMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_ObjectAveragePricesGetMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_ObjectAveragePricesGetMessage(self, param1):
        pass


class ObjectAveragePricesMessage(NetworkMessage):
    protocolId = 6335

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.ids = []
        self.avgPrices = []
        self._idstree = FuncTree()
        self._avgPricestree = FuncTree()

    def getMessageId(self):
        return 6335

    def initObjectAveragePricesMessage(self, param1=[], param2=[]):
        self.ids = param1
        self.avgPrices = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.ids = []
        self.avgPrices = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObjectAveragePricesMessage(param1)

    def serializeAs_ObjectAveragePricesMessage(self, param1):
        param1.write_short(len(self.ids))
        _loc2_ = 0
        while _loc2_ < len(self.ids):
            if self.ids[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.ids[_loc2_]) + ") on element 1 (starting at 1) of ids.")
            param1.write_var_short(self.ids[_loc2_])
            _loc2_ += 1
        param1.write_short(len(self.avgPrices))
        _loc3_ = 0
        while _loc3_ < len(self.avgPrices):
            if self.avgPrices[_loc3_] < 0 or self.avgPrices[_loc3_] > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(self.avgPrices[_loc3_]) + ") on element 2 (starting at 1) of avgPrices.")
            param1.write_var_long(self.avgPrices[_loc3_])
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ObjectAveragePricesMessage(param1)

    def deserializeAs_ObjectAveragePricesMessage(self, param1):
        _loc6_ = 0
        _loc7_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = param1.read_var_uh_short()
            if _loc6_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc6_) + ") on elements of ids.")
            self.ids.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = param1.read_var_uh_long()
            if _loc7_ < 0 or _loc7_ > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(_loc7_) + ") on elements of avgPrices.")
            self.avgPrices.append(_loc7_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObjectAveragePricesMessage(param1)

    def deserializeAsyncAs_ObjectAveragePricesMessage(self, param1):
        self._idstree = param1.add_child(self._idstreeFunc)
        self._avgPricestree = param1.add_child(self._avgPricestreeFunc)

    def _idstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._idstree.add_child(self._idsFunc)
            _loc3_ += 1

    def _idsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of ids.")
        self.ids.append(_loc2_)

    def _avgPricestreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._avgPricestree.add_child(self._avgPricesFunc)
            _loc3_ += 1

    def _avgPricesFunc(self, param1):
        _loc2_ = param1.read_var_uh_long()
        if _loc2_ < 0 or _loc2_ > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of avgPrices.")
        self.avgPrices.append(_loc2_)


class DecraftResultMessage(NetworkMessage):
    protocolId = 6569

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.results = []
        self._resultstree = FuncTree()

    def getMessageId(self):
        return 6569

    def initDecraftResultMessage(self, param1=[]):
        self.results = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.results = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DecraftResultMessage(param1)

    def serializeAs_DecraftResultMessage(self, param1):
        param1.write_short(len(self.results))
        _loc2_ = 0
        while _loc2_ < len(self.results):
            as_parent(self.results[_loc2_], DecraftedItemStackInfo).serializeAs_DecraftedItemStackInfo(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_DecraftResultMessage(param1)

    def deserializeAs_DecraftResultMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = DecraftedItemStackInfo()
            _loc4_.deserialize(param1)
            self.results.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DecraftResultMessage(param1)

    def deserializeAsyncAs_DecraftResultMessage(self, param1):
        self._resultstree = param1.add_child(self._resultstreeFunc)

    def _resultstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._resultstree.add_child(self._resultsFunc)
            _loc3_ += 1

    def _resultsFunc(self, param1):
        _loc2_ = DecraftedItemStackInfo()
        _loc2_.deserialize(param1)
        self.results.append(_loc2_)


class ExchangeAcceptMessage(NetworkMessage):
    protocolId = 5508

    def getMessageId(self):
        return 5508

    def initExchangeAcceptMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_ExchangeAcceptMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_ExchangeAcceptMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_ExchangeAcceptMessage(self, param1):
        pass


class ExchangeBidHouseBuyMessage(NetworkMessage):
    protocolId = 5804

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.uid = 0
        self.qty = 0
        self.price = 0

    def getMessageId(self):
        return 5804

    def initExchangeBidHouseBuyMessage(self, param1=0, param2=0, param3=0):
        self.uid = param1
        self.qty = param2
        self.price = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.uid = 0
        self.qty = 0
        self.price = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeBidHouseBuyMessage(param1)

    def serializeAs_ExchangeBidHouseBuyMessage(self, param1):
        if self.uid < 0:
            raise RuntimeError("Forbidden value (" + str(self.uid) + ") on element uid.")
        param1.write_var_int(self.uid)
        if self.qty < 0:
            raise RuntimeError("Forbidden value (" + str(self.qty) + ") on element qty.")
        param1.write_var_int(self.qty)
        if self.price < 0 or self.price > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.price) + ") on element price.")
        param1.write_var_long(self.price)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeBidHouseBuyMessage(param1)

    def deserializeAs_ExchangeBidHouseBuyMessage(self, param1):
        self._uidFunc(param1)
        self._qtyFunc(param1)
        self._priceFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeBidHouseBuyMessage(param1)

    def deserializeAsyncAs_ExchangeBidHouseBuyMessage(self, param1):
        param1.add_child(self._uidFunc)
        param1.add_child(self._qtyFunc)
        param1.add_child(self._priceFunc)

    def _uidFunc(self, param1):
        self.uid = param1.read_var_uh_int()
        if self.uid < 0:
            raise RuntimeError("Forbidden value (" + str(self.uid) + ") on element of ExchangeBidHouseBuyMessage.uid.")

    def _qtyFunc(self, param1):
        self.qty = param1.read_var_uh_int()
        if self.qty < 0:
            raise RuntimeError("Forbidden value (" + str(self.qty) + ") on element of ExchangeBidHouseBuyMessage.qty.")

    def _priceFunc(self, param1):
        self.price = param1.read_var_uh_long()
        if self.price < 0 or self.price > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.price) + ") on element of ExchangeBidHouseBuyMessage.price.")


class ExchangeBidHouseBuyResultMessage(NetworkMessage):
    protocolId = 6272

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.uid = 0
        self.bought = False

    def getMessageId(self):
        return 6272

    def initExchangeBidHouseBuyResultMessage(self, param1=0, param2=False):
        self.uid = param1
        self.bought = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.uid = 0
        self.bought = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeBidHouseBuyResultMessage(param1)

    def serializeAs_ExchangeBidHouseBuyResultMessage(self, param1):
        if self.uid < 0:
            raise RuntimeError("Forbidden value (" + str(self.uid) + ") on element uid.")
        param1.write_var_int(self.uid)
        param1.write_boolean(self.bought)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeBidHouseBuyResultMessage(param1)

    def deserializeAs_ExchangeBidHouseBuyResultMessage(self, param1):
        self._uidFunc(param1)
        self._boughtFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeBidHouseBuyResultMessage(param1)

    def deserializeAsyncAs_ExchangeBidHouseBuyResultMessage(self, param1):
        param1.add_child(self._uidFunc)
        param1.add_child(self._boughtFunc)

    def _uidFunc(self, param1):
        self.uid = param1.read_var_uh_int()
        if self.uid < 0:
            raise RuntimeError("Forbidden value (" + str(self.uid) + ") on element of ExchangeBidHouseBuyResultMessage.uid.")

    def _boughtFunc(self, param1):
        self.bought = param1.read_boolean()


class ExchangeBidHouseGenericItemAddedMessage(NetworkMessage):
    protocolId = 5947

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objGenericId = 0

    def getMessageId(self):
        return 5947

    def initExchangeBidHouseGenericItemAddedMessage(self, param1=0):
        self.objGenericId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.objGenericId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeBidHouseGenericItemAddedMessage(param1)

    def serializeAs_ExchangeBidHouseGenericItemAddedMessage(self, param1):
        if self.objGenericId < 0:
            raise RuntimeError("Forbidden value (" + str(self.objGenericId) + ") on element objGenericId.")
        param1.write_var_short(self.objGenericId)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeBidHouseGenericItemAddedMessage(param1)

    def deserializeAs_ExchangeBidHouseGenericItemAddedMessage(self, param1):
        self._objGenericIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeBidHouseGenericItemAddedMessage(param1)

    def deserializeAsyncAs_ExchangeBidHouseGenericItemAddedMessage(self, param1):
        param1.add_child(self._objGenericIdFunc)

    def _objGenericIdFunc(self, param1):
        self.objGenericId = param1.read_var_uh_short()
        if self.objGenericId < 0:
            raise RuntimeError("Forbidden value (" + str(self.objGenericId) + ") on element of ExchangeBidHouseGenericItemAddedMessage.objGenericId.")


class ExchangeBidHouseGenericItemRemovedMessage(NetworkMessage):
    protocolId = 5948

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objGenericId = 0

    def getMessageId(self):
        return 5948

    def initExchangeBidHouseGenericItemRemovedMessage(self, param1=0):
        self.objGenericId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.objGenericId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeBidHouseGenericItemRemovedMessage(param1)

    def serializeAs_ExchangeBidHouseGenericItemRemovedMessage(self, param1):
        if self.objGenericId < 0:
            raise RuntimeError("Forbidden value (" + str(self.objGenericId) + ") on element objGenericId.")
        param1.write_var_short(self.objGenericId)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeBidHouseGenericItemRemovedMessage(param1)

    def deserializeAs_ExchangeBidHouseGenericItemRemovedMessage(self, param1):
        self._objGenericIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeBidHouseGenericItemRemovedMessage(param1)

    def deserializeAsyncAs_ExchangeBidHouseGenericItemRemovedMessage(self, param1):
        param1.add_child(self._objGenericIdFunc)

    def _objGenericIdFunc(self, param1):
        self.objGenericId = param1.read_var_uh_short()
        if self.objGenericId < 0:
            raise RuntimeError("Forbidden value (" + str(self.objGenericId) + ") on element of ExchangeBidHouseGenericItemRemovedMessage.objGenericId.")


class ExchangeBidHouseInListAddedMessage(NetworkMessage):
    protocolId = 5949

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.itemUID = 0
        self.objGenericId = 0
        self.effects = []
        self.prices = []
        self._effectstree = FuncTree()
        self._pricestree = FuncTree()

    def getMessageId(self):
        return 5949

    def initExchangeBidHouseInListAddedMessage(self, param1=0, param2=0, param3=[], param4=[]):
        self.itemUID = param1
        self.objGenericId = param2
        self.effects = param3
        self.prices = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.itemUID = 0
        self.objGenericId = 0
        self.effects = []
        self.prices = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeBidHouseInListAddedMessage(param1)

    def serializeAs_ExchangeBidHouseInListAddedMessage(self, param1):
        param1.write_int(self.itemUID)
        param1.write_int(self.objGenericId)
        param1.write_short(len(self.effects))
        _loc2_ = 0
        while _loc2_ < len(self.effects):
            param1.write_short(as_parent(self.effects[_loc2_], ObjectEffect).getTypeId())
            as_parent(self.effects[_loc2_], ObjectEffect).serialize(param1)
            _loc2_ += 1
        param1.write_short(len(self.prices))
        _loc3_ = 0
        while _loc3_ < len(self.prices):
            if self.prices[_loc3_] < 0 or self.prices[_loc3_] > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(self.prices[_loc3_]) + ") on element 4 (starting at 1) of prices.")
            param1.write_var_long(self.prices[_loc3_])
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeBidHouseInListAddedMessage(param1)

    def deserializeAs_ExchangeBidHouseInListAddedMessage(self, param1):
        _loc6_ = 0
        _loc7_ = None
        _loc8_ = None
        self._itemUIDFunc(param1)
        self._objGenericIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = param1.read_unsigned_short()
            _loc7_ = ProtocolTypeManager.get_instance(ObjectEffect,_loc6_)
            _loc7_.deserialize(param1)
            self.effects.append(_loc7_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc8_ = param1.read_var_uh_long()
            if _loc8_ < 0 or _loc8_ > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(_loc8_) + ") on elements of prices.")
            self.prices.append(_loc8_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeBidHouseInListAddedMessage(param1)

    def deserializeAsyncAs_ExchangeBidHouseInListAddedMessage(self, param1):
        param1.add_child(self._itemUIDFunc)
        param1.add_child(self._objGenericIdFunc)
        self._effectstree = param1.add_child(self._effectstreeFunc)
        self._pricestree = param1.add_child(self._pricestreeFunc)

    def _itemUIDFunc(self, param1):
        self.itemUID = param1.read_int()

    def _objGenericIdFunc(self, param1):
        self.objGenericId = param1.read_int()

    def _effectstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._effectstree.add_child(self._effectsFunc)
            _loc3_ += 1

    def _effectsFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(ObjectEffect,_loc2_)
        _loc3_.deserialize(param1)
        self.effects.append(_loc3_)

    def _pricestreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._pricestree.add_child(self._pricesFunc)
            _loc3_ += 1

    def _pricesFunc(self, param1):
        _loc2_ = param1.read_var_uh_long()
        if _loc2_ < 0 or _loc2_ > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of prices.")
        self.prices.append(_loc2_)


class ExchangeBidHouseInListRemovedMessage(NetworkMessage):
    protocolId = 5950

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.itemUID = 0

    def getMessageId(self):
        return 5950

    def initExchangeBidHouseInListRemovedMessage(self, param1=0):
        self.itemUID = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.itemUID = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeBidHouseInListRemovedMessage(param1)

    def serializeAs_ExchangeBidHouseInListRemovedMessage(self, param1):
        param1.write_int(self.itemUID)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeBidHouseInListRemovedMessage(param1)

    def deserializeAs_ExchangeBidHouseInListRemovedMessage(self, param1):
        self._itemUIDFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeBidHouseInListRemovedMessage(param1)

    def deserializeAsyncAs_ExchangeBidHouseInListRemovedMessage(self, param1):
        param1.add_child(self._itemUIDFunc)

    def _itemUIDFunc(self, param1):
        self.itemUID = param1.read_int()


class ExchangeBidHouseItemAddOkMessage(NetworkMessage):
    protocolId = 5945

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.itemInfo = ObjectItemToSellInBid()
        self._itemInfotree = FuncTree()

    def getMessageId(self):
        return 5945

    def initExchangeBidHouseItemAddOkMessage(self, param1=None):
        self.itemInfo = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.itemInfo = ObjectItemToSellInBid()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeBidHouseItemAddOkMessage(param1)

    def serializeAs_ExchangeBidHouseItemAddOkMessage(self, param1):
        self.itemInfo.serializeAs_ObjectItemToSellInBid(param1)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeBidHouseItemAddOkMessage(param1)

    def deserializeAs_ExchangeBidHouseItemAddOkMessage(self, param1):
        self.itemInfo = ObjectItemToSellInBid()
        self.itemInfo.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeBidHouseItemAddOkMessage(param1)

    def deserializeAsyncAs_ExchangeBidHouseItemAddOkMessage(self, param1):
        self._itemInfotree = param1.add_child(self._itemInfotreeFunc)

    def _itemInfotreeFunc(self, param1):
        self.itemInfo = ObjectItemToSellInBid()
        self.itemInfo.deserializeAsync(self._itemInfotree)


class ExchangeBidHouseItemRemoveOkMessage(NetworkMessage):
    protocolId = 5946

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.sellerId = 0

    def getMessageId(self):
        return 5946

    def initExchangeBidHouseItemRemoveOkMessage(self, param1=0):
        self.sellerId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.sellerId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeBidHouseItemRemoveOkMessage(param1)

    def serializeAs_ExchangeBidHouseItemRemoveOkMessage(self, param1):
        param1.write_int(self.sellerId)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeBidHouseItemRemoveOkMessage(param1)

    def deserializeAs_ExchangeBidHouseItemRemoveOkMessage(self, param1):
        self._sellerIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeBidHouseItemRemoveOkMessage(param1)

    def deserializeAsyncAs_ExchangeBidHouseItemRemoveOkMessage(self, param1):
        param1.add_child(self._sellerIdFunc)

    def _sellerIdFunc(self, param1):
        self.sellerId = param1.read_int()


class ExchangeBidHouseListMessage(NetworkMessage):
    protocolId = 5807

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.id = 0

    def getMessageId(self):
        return 5807

    def initExchangeBidHouseListMessage(self, param1=0):
        self.id = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.id = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeBidHouseListMessage(param1)

    def serializeAs_ExchangeBidHouseListMessage(self, param1):
        if self.id < 0:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element id.")
        param1.write_var_short(self.id)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeBidHouseListMessage(param1)

    def deserializeAs_ExchangeBidHouseListMessage(self, param1):
        self._idFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeBidHouseListMessage(param1)

    def deserializeAsyncAs_ExchangeBidHouseListMessage(self, param1):
        param1.add_child(self._idFunc)

    def _idFunc(self, param1):
        self.id = param1.read_var_uh_short()
        if self.id < 0:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element of ExchangeBidHouseListMessage.id.")


class ExchangeBidHousePriceMessage(NetworkMessage):
    protocolId = 5805

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.genId = 0

    def getMessageId(self):
        return 5805

    def initExchangeBidHousePriceMessage(self, param1=0):
        self.genId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.genId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeBidHousePriceMessage(param1)

    def serializeAs_ExchangeBidHousePriceMessage(self, param1):
        if self.genId < 0:
            raise RuntimeError("Forbidden value (" + str(self.genId) + ") on element genId.")
        param1.write_var_short(self.genId)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeBidHousePriceMessage(param1)

    def deserializeAs_ExchangeBidHousePriceMessage(self, param1):
        self._genIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeBidHousePriceMessage(param1)

    def deserializeAsyncAs_ExchangeBidHousePriceMessage(self, param1):
        param1.add_child(self._genIdFunc)

    def _genIdFunc(self, param1):
        self.genId = param1.read_var_uh_short()
        if self.genId < 0:
            raise RuntimeError("Forbidden value (" + str(self.genId) + ") on element of ExchangeBidHousePriceMessage.genId.")


class ExchangeBidHouseSearchMessage(NetworkMessage):
    protocolId = 5806

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.type = 0
        self.genId = 0

    def getMessageId(self):
        return 5806

    def initExchangeBidHouseSearchMessage(self, param1=0, param2=0):
        self.type = param1
        self.genId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.type = 0
        self.genId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeBidHouseSearchMessage(param1)

    def serializeAs_ExchangeBidHouseSearchMessage(self, param1):
        if self.type < 0:
            raise RuntimeError("Forbidden value (" + str(self.type) + ") on element type.")
        param1.write_var_int(self.type)
        if self.genId < 0:
            raise RuntimeError("Forbidden value (" + str(self.genId) + ") on element genId.")
        param1.write_var_short(self.genId)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeBidHouseSearchMessage(param1)

    def deserializeAs_ExchangeBidHouseSearchMessage(self, param1):
        self._typeFunc(param1)
        self._genIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeBidHouseSearchMessage(param1)

    def deserializeAsyncAs_ExchangeBidHouseSearchMessage(self, param1):
        param1.add_child(self._typeFunc)
        param1.add_child(self._genIdFunc)

    def _typeFunc(self, param1):
        self.type = param1.read_var_uh_int()
        if self.type < 0:
            raise RuntimeError("Forbidden value (" + str(self.type) + ") on element of ExchangeBidHouseSearchMessage.type.")

    def _genIdFunc(self, param1):
        self.genId = param1.read_var_uh_short()
        if self.genId < 0:
            raise RuntimeError("Forbidden value (" + str(self.genId) + ") on element of ExchangeBidHouseSearchMessage.genId.")


class ExchangeBidHouseTypeMessage(NetworkMessage):
    protocolId = 5803

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.type = 0

    def getMessageId(self):
        return 5803

    def initExchangeBidHouseTypeMessage(self, param1=0):
        self.type = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.type = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeBidHouseTypeMessage(param1)

    def serializeAs_ExchangeBidHouseTypeMessage(self, param1):
        if self.type < 0:
            raise RuntimeError("Forbidden value (" + str(self.type) + ") on element type.")
        param1.write_var_int(self.type)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeBidHouseTypeMessage(param1)

    def deserializeAs_ExchangeBidHouseTypeMessage(self, param1):
        self._typeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeBidHouseTypeMessage(param1)

    def deserializeAsyncAs_ExchangeBidHouseTypeMessage(self, param1):
        param1.add_child(self._typeFunc)

    def _typeFunc(self, param1):
        self.type = param1.read_var_uh_int()
        if self.type < 0:
            raise RuntimeError("Forbidden value (" + str(self.type) + ") on element of ExchangeBidHouseTypeMessage.type.")


class ExchangeBidHouseUnsoldItemsMessage(NetworkMessage):
    protocolId = 6612

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.items = []
        self._itemstree = FuncTree()

    def getMessageId(self):
        return 6612

    def initExchangeBidHouseUnsoldItemsMessage(self, param1=[]):
        self.items = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.items = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeBidHouseUnsoldItemsMessage(param1)

    def serializeAs_ExchangeBidHouseUnsoldItemsMessage(self, param1):
        param1.write_short(len(self.items))
        _loc2_ = 0
        while _loc2_ < len(self.items):
            as_parent(self.items[_loc2_], ObjectItemGenericQuantity).serializeAs_ObjectItemGenericQuantity(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeBidHouseUnsoldItemsMessage(param1)

    def deserializeAs_ExchangeBidHouseUnsoldItemsMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = ObjectItemGenericQuantity()
            _loc4_.deserialize(param1)
            self.items.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeBidHouseUnsoldItemsMessage(param1)

    def deserializeAsyncAs_ExchangeBidHouseUnsoldItemsMessage(self, param1):
        self._itemstree = param1.add_child(self._itemstreeFunc)

    def _itemstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._itemstree.add_child(self._itemsFunc)
            _loc3_ += 1

    def _itemsFunc(self, param1):
        _loc2_ = ObjectItemGenericQuantity()
        _loc2_.deserialize(param1)
        self.items.append(_loc2_)


class ExchangeBidPriceMessage(NetworkMessage):
    protocolId = 5755

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.genericId = 0
        self.averagePrice = 0

    def getMessageId(self):
        return 5755

    def initExchangeBidPriceMessage(self, param1=0, param2=0):
        self.genericId = param1
        self.averagePrice = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.genericId = 0
        self.averagePrice = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeBidPriceMessage(param1)

    def serializeAs_ExchangeBidPriceMessage(self, param1):
        if self.genericId < 0:
            raise RuntimeError("Forbidden value (" + str(self.genericId) + ") on element genericId.")
        param1.write_var_short(self.genericId)
        if self.averagePrice < -9007199254740990 or self.averagePrice > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.averagePrice) + ") on element averagePrice.")
        param1.write_var_long(self.averagePrice)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeBidPriceMessage(param1)

    def deserializeAs_ExchangeBidPriceMessage(self, param1):
        self._genericIdFunc(param1)
        self._averagePriceFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeBidPriceMessage(param1)

    def deserializeAsyncAs_ExchangeBidPriceMessage(self, param1):
        param1.add_child(self._genericIdFunc)
        param1.add_child(self._averagePriceFunc)

    def _genericIdFunc(self, param1):
        self.genericId = param1.read_var_uh_short()
        if self.genericId < 0:
            raise RuntimeError("Forbidden value (" + str(self.genericId) + ") on element of ExchangeBidPriceMessage.genericId.")

    def _averagePriceFunc(self, param1):
        self.averagePrice = param1.read_var_long()
        if self.averagePrice < -9007199254740990 or self.averagePrice > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.averagePrice) + ") on element of ExchangeBidPriceMessage.averagePrice.")


class ExchangeBidSearchOkMessage(NetworkMessage):
    protocolId = 5802

    def getMessageId(self):
        return 5802

    def initExchangeBidSearchOkMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_ExchangeBidSearchOkMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_ExchangeBidSearchOkMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_ExchangeBidSearchOkMessage(self, param1):
        pass


class ExchangeBuyMessage(NetworkMessage):
    protocolId = 5774

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectToBuyId = 0
        self.quantity = 0

    def getMessageId(self):
        return 5774

    def initExchangeBuyMessage(self, param1=0, param2=0):
        self.objectToBuyId = param1
        self.quantity = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.objectToBuyId = 0
        self.quantity = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeBuyMessage(param1)

    def serializeAs_ExchangeBuyMessage(self, param1):
        if self.objectToBuyId < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectToBuyId) + ") on element objectToBuyId.")
        param1.write_var_int(self.objectToBuyId)
        if self.quantity < 0:
            raise RuntimeError("Forbidden value (" + str(self.quantity) + ") on element quantity.")
        param1.write_var_int(self.quantity)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeBuyMessage(param1)

    def deserializeAs_ExchangeBuyMessage(self, param1):
        self._objectToBuyIdFunc(param1)
        self._quantityFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeBuyMessage(param1)

    def deserializeAsyncAs_ExchangeBuyMessage(self, param1):
        param1.add_child(self._objectToBuyIdFunc)
        param1.add_child(self._quantityFunc)

    def _objectToBuyIdFunc(self, param1):
        self.objectToBuyId = param1.read_var_uh_int()
        if self.objectToBuyId < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectToBuyId) + ") on element of ExchangeBuyMessage.objectToBuyId.")

    def _quantityFunc(self, param1):
        self.quantity = param1.read_var_uh_int()
        if self.quantity < 0:
            raise RuntimeError("Forbidden value (" + str(self.quantity) + ") on element of ExchangeBuyMessage.quantity.")


class ExchangeBuyOkMessage(NetworkMessage):
    protocolId = 5759

    def getMessageId(self):
        return 5759

    def initExchangeBuyOkMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_ExchangeBuyOkMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_ExchangeBuyOkMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_ExchangeBuyOkMessage(self, param1):
        pass


class ExchangeCraftCountModifiedMessage(NetworkMessage):
    protocolId = 6595

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.count = 0

    def getMessageId(self):
        return 6595

    def initExchangeCraftCountModifiedMessage(self, param1=0):
        self.count = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.count = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeCraftCountModifiedMessage(param1)

    def serializeAs_ExchangeCraftCountModifiedMessage(self, param1):
        param1.write_var_int(self.count)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeCraftCountModifiedMessage(param1)

    def deserializeAs_ExchangeCraftCountModifiedMessage(self, param1):
        self._countFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeCraftCountModifiedMessage(param1)

    def deserializeAsyncAs_ExchangeCraftCountModifiedMessage(self, param1):
        param1.add_child(self._countFunc)

    def _countFunc(self, param1):
        self.count = param1.read_var_int()


class ExchangeCraftCountRequestMessage(NetworkMessage):
    protocolId = 6597

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.count = 0

    def getMessageId(self):
        return 6597

    def initExchangeCraftCountRequestMessage(self, param1=0):
        self.count = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.count = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeCraftCountRequestMessage(param1)

    def serializeAs_ExchangeCraftCountRequestMessage(self, param1):
        param1.write_var_int(self.count)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeCraftCountRequestMessage(param1)

    def deserializeAs_ExchangeCraftCountRequestMessage(self, param1):
        self._countFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeCraftCountRequestMessage(param1)

    def deserializeAsyncAs_ExchangeCraftCountRequestMessage(self, param1):
        param1.add_child(self._countFunc)

    def _countFunc(self, param1):
        self.count = param1.read_var_int()


class ExchangeCrafterJobLevelupMessage(NetworkMessage):
    protocolId = 6598

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.crafterJobLevel = 0

    def getMessageId(self):
        return 6598

    def initExchangeCrafterJobLevelupMessage(self, param1=0):
        self.crafterJobLevel = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.crafterJobLevel = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeCrafterJobLevelupMessage(param1)

    def serializeAs_ExchangeCrafterJobLevelupMessage(self, param1):
        if self.crafterJobLevel < 0 or self.crafterJobLevel > 255:
            raise RuntimeError("Forbidden value (" + str(self.crafterJobLevel) + ") on element crafterJobLevel.")
        param1.write_byte(self.crafterJobLevel)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeCrafterJobLevelupMessage(param1)

    def deserializeAs_ExchangeCrafterJobLevelupMessage(self, param1):
        self._crafterJobLevelFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeCrafterJobLevelupMessage(param1)

    def deserializeAsyncAs_ExchangeCrafterJobLevelupMessage(self, param1):
        param1.add_child(self._crafterJobLevelFunc)

    def _crafterJobLevelFunc(self, param1):
        self.crafterJobLevel = param1.read_unsigned_byte()
        if self.crafterJobLevel < 0 or self.crafterJobLevel > 255:
            raise RuntimeError("Forbidden value (" + str(self.crafterJobLevel) + ") on element of ExchangeCrafterJobLevelupMessage.crafterJobLevel.")


class ExchangeCraftPaymentModificationRequestMessage(NetworkMessage):
    protocolId = 6579

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.quantity = 0

    def getMessageId(self):
        return 6579

    def initExchangeCraftPaymentModificationRequestMessage(self, param1=0):
        self.quantity = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.quantity = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeCraftPaymentModificationRequestMessage(param1)

    def serializeAs_ExchangeCraftPaymentModificationRequestMessage(self, param1):
        if self.quantity < 0 or self.quantity > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.quantity) + ") on element quantity.")
        param1.write_var_long(self.quantity)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeCraftPaymentModificationRequestMessage(param1)

    def deserializeAs_ExchangeCraftPaymentModificationRequestMessage(self, param1):
        self._quantityFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeCraftPaymentModificationRequestMessage(param1)

    def deserializeAsyncAs_ExchangeCraftPaymentModificationRequestMessage(self, param1):
        param1.add_child(self._quantityFunc)

    def _quantityFunc(self, param1):
        self.quantity = param1.read_var_uh_long()
        if self.quantity < 0 or self.quantity > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.quantity) + ") on element of ExchangeCraftPaymentModificationRequestMessage.quantity.")


class ExchangeCraftPaymentModifiedMessage(NetworkMessage):
    protocolId = 6578

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.goldSum = 0

    def getMessageId(self):
        return 6578

    def initExchangeCraftPaymentModifiedMessage(self, param1=0):
        self.goldSum = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.goldSum = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeCraftPaymentModifiedMessage(param1)

    def serializeAs_ExchangeCraftPaymentModifiedMessage(self, param1):
        if self.goldSum < 0 or self.goldSum > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.goldSum) + ") on element goldSum.")
        param1.write_var_long(self.goldSum)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeCraftPaymentModifiedMessage(param1)

    def deserializeAs_ExchangeCraftPaymentModifiedMessage(self, param1):
        self._goldSumFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeCraftPaymentModifiedMessage(param1)

    def deserializeAsyncAs_ExchangeCraftPaymentModifiedMessage(self, param1):
        param1.add_child(self._goldSumFunc)

    def _goldSumFunc(self, param1):
        self.goldSum = param1.read_var_uh_long()
        if self.goldSum < 0 or self.goldSum > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.goldSum) + ") on element of ExchangeCraftPaymentModifiedMessage.goldSum.")


class ExchangeCraftResultMessage(NetworkMessage):
    protocolId = 5790

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.craftResult = 0

    def getMessageId(self):
        return 5790

    def initExchangeCraftResultMessage(self, param1=0):
        self.craftResult = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.craftResult = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeCraftResultMessage(param1)

    def serializeAs_ExchangeCraftResultMessage(self, param1):
        param1.write_byte(self.craftResult)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeCraftResultMessage(param1)

    def deserializeAs_ExchangeCraftResultMessage(self, param1):
        self._craftResultFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeCraftResultMessage(param1)

    def deserializeAsyncAs_ExchangeCraftResultMessage(self, param1):
        param1.add_child(self._craftResultFunc)

    def _craftResultFunc(self, param1):
        self.craftResult = param1.read_byte()
        if self.craftResult < 0:
            raise RuntimeError("Forbidden value (" + str(self.craftResult) + ") on element of ExchangeCraftResultMessage.craftResult.")


class ExchangeErrorMessage(NetworkMessage):
    protocolId = 5513

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.errorType = 0

    def getMessageId(self):
        return 5513

    def initExchangeErrorMessage(self, param1=0):
        self.errorType = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.errorType = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeErrorMessage(param1)

    def serializeAs_ExchangeErrorMessage(self, param1):
        param1.write_byte(self.errorType)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeErrorMessage(param1)

    def deserializeAs_ExchangeErrorMessage(self, param1):
        self._errorTypeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeErrorMessage(param1)

    def deserializeAsyncAs_ExchangeErrorMessage(self, param1):
        param1.add_child(self._errorTypeFunc)

    def _errorTypeFunc(self, param1):
        self.errorType = param1.read_byte()


class ExchangeGuildTaxCollectorGetMessage(NetworkMessage):
    protocolId = 5762

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.collectorName = ""
        self.worldX = 0
        self.worldY = 0
        self.mapId = 0
        self.subAreaId = 0
        self.userName = ""
        self.callerId = 0
        self.callerName = ""
        self.experience = 0
        self.pods = 0
        self.objectsInfos = []
        self._objectsInfostree = FuncTree()

    def getMessageId(self):
        return 5762

    def initExchangeGuildTaxCollectorGetMessage(self, param1="", param2=0, param3=0, param4=0, param5=0, param6="", param7=0, param8="", param9=0, param10=0, param11=[]):
        self.collectorName = param1
        self.worldX = param2
        self.worldY = param3
        self.mapId = param4
        self.subAreaId = param5
        self.userName = param6
        self.callerId = param7
        self.callerName = param8
        self.experience = param9
        self.pods = param10
        self.objectsInfos = param11
        self._isInitialized = True
        return self

    def reset(self):
        self.collectorName = ""
        self.worldX = 0
        self.worldY = 0
        self.mapId = 0
        self.subAreaId = 0
        self.userName = ""
        self.callerId = 0
        self.callerName = ""
        self.experience = 0
        self.pods = 0
        self.objectsInfos = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeGuildTaxCollectorGetMessage(param1)

    def serializeAs_ExchangeGuildTaxCollectorGetMessage(self, param1):
        param1.write_utf(self.collectorName)
        if self.worldX < -255 or self.worldX > 255:
            raise RuntimeError("Forbidden value (" + str(self.worldX) + ") on element worldX.")
        param1.write_short(self.worldX)
        if self.worldY < -255 or self.worldY > 255:
            raise RuntimeError("Forbidden value (" + str(self.worldY) + ") on element worldY.")
        param1.write_short(self.worldY)
        param1.write_int(self.mapId)
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element subAreaId.")
        param1.write_var_short(self.subAreaId)
        param1.write_utf(self.userName)
        if self.callerId < 0 or self.callerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.callerId) + ") on element callerId.")
        param1.write_var_long(self.callerId)
        param1.write_utf(self.callerName)
        if self.experience < -9007199254740990 or self.experience > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.experience) + ") on element experience.")
        param1.write_double(self.experience)
        if self.pods < 0:
            raise RuntimeError("Forbidden value (" + str(self.pods) + ") on element pods.")
        param1.write_var_short(self.pods)
        param1.write_short(len(self.objectsInfos))
        _loc2_ = 0
        while _loc2_ < len(self.objectsInfos):
            as_parent(self.objectsInfos[_loc2_], ObjectItemGenericQuantity).serializeAs_ObjectItemGenericQuantity(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeGuildTaxCollectorGetMessage(param1)

    def deserializeAs_ExchangeGuildTaxCollectorGetMessage(self, param1):
        _loc4_ = None
        self._collectorNameFunc(param1)
        self._worldXFunc(param1)
        self._worldYFunc(param1)
        self._mapIdFunc(param1)
        self._subAreaIdFunc(param1)
        self._userNameFunc(param1)
        self._callerIdFunc(param1)
        self._callerNameFunc(param1)
        self._experienceFunc(param1)
        self._podsFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = ObjectItemGenericQuantity()
            _loc4_.deserialize(param1)
            self.objectsInfos.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeGuildTaxCollectorGetMessage(param1)

    def deserializeAsyncAs_ExchangeGuildTaxCollectorGetMessage(self, param1):
        param1.add_child(self._collectorNameFunc)
        param1.add_child(self._worldXFunc)
        param1.add_child(self._worldYFunc)
        param1.add_child(self._mapIdFunc)
        param1.add_child(self._subAreaIdFunc)
        param1.add_child(self._userNameFunc)
        param1.add_child(self._callerIdFunc)
        param1.add_child(self._callerNameFunc)
        param1.add_child(self._experienceFunc)
        param1.add_child(self._podsFunc)
        self._objectsInfostree = param1.add_child(self._objectsInfostreeFunc)

    def _collectorNameFunc(self, param1):
        self.collectorName = param1.read_utf()

    def _worldXFunc(self, param1):
        self.worldX = param1.read_short()
        if self.worldX < -255 or self.worldX > 255:
            raise RuntimeError("Forbidden value (" + str(self.worldX) + ") on element of ExchangeGuildTaxCollectorGetMessage.worldX.")

    def _worldYFunc(self, param1):
        self.worldY = param1.read_short()
        if self.worldY < -255 or self.worldY > 255:
            raise RuntimeError("Forbidden value (" + str(self.worldY) + ") on element of ExchangeGuildTaxCollectorGetMessage.worldY.")

    def _mapIdFunc(self, param1):
        self.mapId = param1.read_int()

    def _subAreaIdFunc(self, param1):
        self.subAreaId = param1.read_var_uh_short()
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element of ExchangeGuildTaxCollectorGetMessage.subAreaId.")

    def _userNameFunc(self, param1):
        self.userName = param1.read_utf()

    def _callerIdFunc(self, param1):
        self.callerId = param1.read_var_uh_long()
        if self.callerId < 0 or self.callerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.callerId) + ") on element of ExchangeGuildTaxCollectorGetMessage.callerId.")

    def _callerNameFunc(self, param1):
        self.callerName = param1.read_utf()

    def _experienceFunc(self, param1):
        self.experience = param1.read_double()
        if self.experience < -9007199254740990 or self.experience > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.experience) + ") on element of ExchangeGuildTaxCollectorGetMessage.experience.")

    def _podsFunc(self, param1):
        self.pods = param1.read_var_uh_short()
        if self.pods < 0:
            raise RuntimeError("Forbidden value (" + str(self.pods) + ") on element of ExchangeGuildTaxCollectorGetMessage.pods.")

    def _objectsInfostreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._objectsInfostree.add_child(self._objectsInfosFunc)
            _loc3_ += 1

    def _objectsInfosFunc(self, param1):
        _loc2_ = ObjectItemGenericQuantity()
        _loc2_.deserialize(param1)
        self.objectsInfos.append(_loc2_)


class ExchangeHandleMountsStableMessage(NetworkMessage):
    protocolId = 6562

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.actionType = 0
        self.ridesId = []
        self._ridesIdtree = FuncTree()

    def getMessageId(self):
        return 6562

    def initExchangeHandleMountsStableMessage(self, param1=0, param2=[]):
        self.actionType = param1
        self.ridesId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.actionType = 0
        self.ridesId = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeHandleMountsStableMessage(param1)

    def serializeAs_ExchangeHandleMountsStableMessage(self, param1):
        param1.write_byte(self.actionType)
        param1.write_short(len(self.ridesId))
        _loc2_ = 0
        while _loc2_ < len(self.ridesId):
            if self.ridesId[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.ridesId[_loc2_]) + ") on element 2 (starting at 1) of ridesId.")
            param1.write_var_int(self.ridesId[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeHandleMountsStableMessage(param1)

    def deserializeAs_ExchangeHandleMountsStableMessage(self, param1):
        _loc4_ = 0
        self._actionTypeFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_uh_int()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of ridesId.")
            self.ridesId.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeHandleMountsStableMessage(param1)

    def deserializeAsyncAs_ExchangeHandleMountsStableMessage(self, param1):
        param1.add_child(self._actionTypeFunc)
        self._ridesIdtree = param1.add_child(self._ridesIdtreeFunc)

    def _actionTypeFunc(self, param1):
        self.actionType = param1.read_byte()

    def _ridesIdtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._ridesIdtree.add_child(self._ridesIdFunc)
            _loc3_ += 1

    def _ridesIdFunc(self, param1):
        _loc2_ = param1.read_var_uh_int()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of ridesId.")
        self.ridesId.append(_loc2_)


class ExchangeIsReadyMessage(NetworkMessage):
    protocolId = 5509

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.id = 0
        self.ready = False

    def getMessageId(self):
        return 5509

    def initExchangeIsReadyMessage(self, param1=0, param2=False):
        self.id = param1
        self.ready = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.id = 0
        self.ready = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeIsReadyMessage(param1)

    def serializeAs_ExchangeIsReadyMessage(self, param1):
        if self.id < -9007199254740990 or self.id > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element id.")
        param1.write_double(self.id)
        param1.write_boolean(self.ready)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeIsReadyMessage(param1)

    def deserializeAs_ExchangeIsReadyMessage(self, param1):
        self._idFunc(param1)
        self._readyFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeIsReadyMessage(param1)

    def deserializeAsyncAs_ExchangeIsReadyMessage(self, param1):
        param1.add_child(self._idFunc)
        param1.add_child(self._readyFunc)

    def _idFunc(self, param1):
        self.id = param1.read_double()
        if self.id < -9007199254740990 or self.id > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element of ExchangeIsReadyMessage.id.")

    def _readyFunc(self, param1):
        self.ready = param1.read_boolean()


class ExchangeItemAutoCraftStopedMessage(NetworkMessage):
    protocolId = 5810

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reason = 0

    def getMessageId(self):
        return 5810

    def initExchangeItemAutoCraftStopedMessage(self, param1=0):
        self.reason = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.reason = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeItemAutoCraftStopedMessage(param1)

    def serializeAs_ExchangeItemAutoCraftStopedMessage(self, param1):
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeItemAutoCraftStopedMessage(param1)

    def deserializeAs_ExchangeItemAutoCraftStopedMessage(self, param1):
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeItemAutoCraftStopedMessage(param1)

    def deserializeAsyncAs_ExchangeItemAutoCraftStopedMessage(self, param1):
        param1.add_child(self._reasonFunc)

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()


class ExchangeMountFreeFromPaddockMessage(NetworkMessage):
    protocolId = 6055

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.name = ""
        self.worldX = 0
        self.worldY = 0
        self.liberator = ""

    def getMessageId(self):
        return 6055

    def initExchangeMountFreeFromPaddockMessage(self, param1="", param2=0, param3=0, param4=""):
        self.name = param1
        self.worldX = param2
        self.worldY = param3
        self.liberator = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.name = ""
        self.worldX = 0
        self.worldY = 0
        self.liberator = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeMountFreeFromPaddockMessage(param1)

    def serializeAs_ExchangeMountFreeFromPaddockMessage(self, param1):
        param1.write_utf(self.name)
        if self.worldX < -255 or self.worldX > 255:
            raise RuntimeError("Forbidden value (" + str(self.worldX) + ") on element worldX.")
        param1.write_short(self.worldX)
        if self.worldY < -255 or self.worldY > 255:
            raise RuntimeError("Forbidden value (" + str(self.worldY) + ") on element worldY.")
        param1.write_short(self.worldY)
        param1.write_utf(self.liberator)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeMountFreeFromPaddockMessage(param1)

    def deserializeAs_ExchangeMountFreeFromPaddockMessage(self, param1):
        self._nameFunc(param1)
        self._worldXFunc(param1)
        self._worldYFunc(param1)
        self._liberatorFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeMountFreeFromPaddockMessage(param1)

    def deserializeAsyncAs_ExchangeMountFreeFromPaddockMessage(self, param1):
        param1.add_child(self._nameFunc)
        param1.add_child(self._worldXFunc)
        param1.add_child(self._worldYFunc)
        param1.add_child(self._liberatorFunc)

    def _nameFunc(self, param1):
        self.name = param1.read_utf()

    def _worldXFunc(self, param1):
        self.worldX = param1.read_short()
        if self.worldX < -255 or self.worldX > 255:
            raise RuntimeError("Forbidden value (" + str(self.worldX) + ") on element of ExchangeMountFreeFromPaddockMessage.worldX.")

    def _worldYFunc(self, param1):
        self.worldY = param1.read_short()
        if self.worldY < -255 or self.worldY > 255:
            raise RuntimeError("Forbidden value (" + str(self.worldY) + ") on element of ExchangeMountFreeFromPaddockMessage.worldY.")

    def _liberatorFunc(self, param1):
        self.liberator = param1.read_utf()


class ExchangeMountsPaddockAddMessage(NetworkMessage):
    protocolId = 6561

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.mountDescription = []
        self._mountDescriptiontree = FuncTree()

    def getMessageId(self):
        return 6561

    def initExchangeMountsPaddockAddMessage(self, param1=[]):
        self.mountDescription = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.mountDescription = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeMountsPaddockAddMessage(param1)

    def serializeAs_ExchangeMountsPaddockAddMessage(self, param1):
        param1.write_short(len(self.mountDescription))
        _loc2_ = 0
        while _loc2_ < len(self.mountDescription):
            as_parent(self.mountDescription[_loc2_], MountClientData).serializeAs_MountClientData(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeMountsPaddockAddMessage(param1)

    def deserializeAs_ExchangeMountsPaddockAddMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = MountClientData()
            _loc4_.deserialize(param1)
            self.mountDescription.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeMountsPaddockAddMessage(param1)

    def deserializeAsyncAs_ExchangeMountsPaddockAddMessage(self, param1):
        self._mountDescriptiontree = param1.add_child(self._mountDescriptiontreeFunc)

    def _mountDescriptiontreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._mountDescriptiontree.add_child(self._mountDescriptionFunc)
            _loc3_ += 1

    def _mountDescriptionFunc(self, param1):
        _loc2_ = MountClientData()
        _loc2_.deserialize(param1)
        self.mountDescription.append(_loc2_)


class ExchangeMountsPaddockRemoveMessage(NetworkMessage):
    protocolId = 6559

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.mountsId = []
        self._mountsIdtree = FuncTree()

    def getMessageId(self):
        return 6559

    def initExchangeMountsPaddockRemoveMessage(self, param1=[]):
        self.mountsId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.mountsId = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeMountsPaddockRemoveMessage(param1)

    def serializeAs_ExchangeMountsPaddockRemoveMessage(self, param1):
        param1.write_short(len(self.mountsId))
        _loc2_ = 0
        while _loc2_ < len(self.mountsId):
            param1.write_var_int(self.mountsId[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeMountsPaddockRemoveMessage(param1)

    def deserializeAs_ExchangeMountsPaddockRemoveMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_int()
            self.mountsId.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeMountsPaddockRemoveMessage(param1)

    def deserializeAsyncAs_ExchangeMountsPaddockRemoveMessage(self, param1):
        self._mountsIdtree = param1.add_child(self._mountsIdtreeFunc)

    def _mountsIdtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._mountsIdtree.add_child(self._mountsIdFunc)
            _loc3_ += 1

    def _mountsIdFunc(self, param1):
        _loc2_ = param1.read_var_int()
        self.mountsId.append(_loc2_)


class ExchangeMountsStableAddMessage(NetworkMessage):
    protocolId = 6555

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.mountDescription = []
        self._mountDescriptiontree = FuncTree()

    def getMessageId(self):
        return 6555

    def initExchangeMountsStableAddMessage(self, param1=[]):
        self.mountDescription = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.mountDescription = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeMountsStableAddMessage(param1)

    def serializeAs_ExchangeMountsStableAddMessage(self, param1):
        param1.write_short(len(self.mountDescription))
        _loc2_ = 0
        while _loc2_ < len(self.mountDescription):
            as_parent(self.mountDescription[_loc2_], MountClientData).serializeAs_MountClientData(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeMountsStableAddMessage(param1)

    def deserializeAs_ExchangeMountsStableAddMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = MountClientData()
            _loc4_.deserialize(param1)
            self.mountDescription.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeMountsStableAddMessage(param1)

    def deserializeAsyncAs_ExchangeMountsStableAddMessage(self, param1):
        self._mountDescriptiontree = param1.add_child(self._mountDescriptiontreeFunc)

    def _mountDescriptiontreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._mountDescriptiontree.add_child(self._mountDescriptionFunc)
            _loc3_ += 1

    def _mountDescriptionFunc(self, param1):
        _loc2_ = MountClientData()
        _loc2_.deserialize(param1)
        self.mountDescription.append(_loc2_)


class ExchangeMountsStableRemoveMessage(NetworkMessage):
    protocolId = 6556

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.mountsId = []
        self._mountsIdtree = FuncTree()

    def getMessageId(self):
        return 6556

    def initExchangeMountsStableRemoveMessage(self, param1=[]):
        self.mountsId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.mountsId = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeMountsStableRemoveMessage(param1)

    def serializeAs_ExchangeMountsStableRemoveMessage(self, param1):
        param1.write_short(len(self.mountsId))
        _loc2_ = 0
        while _loc2_ < len(self.mountsId):
            param1.write_var_int(self.mountsId[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeMountsStableRemoveMessage(param1)

    def deserializeAs_ExchangeMountsStableRemoveMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_int()
            self.mountsId.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeMountsStableRemoveMessage(param1)

    def deserializeAsyncAs_ExchangeMountsStableRemoveMessage(self, param1):
        self._mountsIdtree = param1.add_child(self._mountsIdtreeFunc)

    def _mountsIdtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._mountsIdtree.add_child(self._mountsIdFunc)
            _loc3_ += 1

    def _mountsIdFunc(self, param1):
        _loc2_ = param1.read_var_int()
        self.mountsId.append(_loc2_)


class ExchangeMountStableErrorMessage(NetworkMessage):
    protocolId = 5981

    def getMessageId(self):
        return 5981

    def initExchangeMountStableErrorMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_ExchangeMountStableErrorMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_ExchangeMountStableErrorMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_ExchangeMountStableErrorMessage(self, param1):
        pass


class ExchangeMountsTakenFromPaddockMessage(NetworkMessage):
    protocolId = 6554

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.name = ""
        self.worldX = 0
        self.worldY = 0
        self.ownername = ""

    def getMessageId(self):
        return 6554

    def initExchangeMountsTakenFromPaddockMessage(self, param1="", param2=0, param3=0, param4=""):
        self.name = param1
        self.worldX = param2
        self.worldY = param3
        self.ownername = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.name = ""
        self.worldX = 0
        self.worldY = 0
        self.ownername = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeMountsTakenFromPaddockMessage(param1)

    def serializeAs_ExchangeMountsTakenFromPaddockMessage(self, param1):
        param1.write_utf(self.name)
        if self.worldX < -255 or self.worldX > 255:
            raise RuntimeError("Forbidden value (" + str(self.worldX) + ") on element worldX.")
        param1.write_short(self.worldX)
        if self.worldY < -255 or self.worldY > 255:
            raise RuntimeError("Forbidden value (" + str(self.worldY) + ") on element worldY.")
        param1.write_short(self.worldY)
        param1.write_utf(self.ownername)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeMountsTakenFromPaddockMessage(param1)

    def deserializeAs_ExchangeMountsTakenFromPaddockMessage(self, param1):
        self._nameFunc(param1)
        self._worldXFunc(param1)
        self._worldYFunc(param1)
        self._ownernameFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeMountsTakenFromPaddockMessage(param1)

    def deserializeAsyncAs_ExchangeMountsTakenFromPaddockMessage(self, param1):
        param1.add_child(self._nameFunc)
        param1.add_child(self._worldXFunc)
        param1.add_child(self._worldYFunc)
        param1.add_child(self._ownernameFunc)

    def _nameFunc(self, param1):
        self.name = param1.read_utf()

    def _worldXFunc(self, param1):
        self.worldX = param1.read_short()
        if self.worldX < -255 or self.worldX > 255:
            raise RuntimeError("Forbidden value (" + str(self.worldX) + ") on element of ExchangeMountsTakenFromPaddockMessage.worldX.")

    def _worldYFunc(self, param1):
        self.worldY = param1.read_short()
        if self.worldY < -255 or self.worldY > 255:
            raise RuntimeError("Forbidden value (" + str(self.worldY) + ") on element of ExchangeMountsTakenFromPaddockMessage.worldY.")

    def _ownernameFunc(self, param1):
        self.ownername = param1.read_utf()


class ExchangeMountSterilizeFromPaddockMessage(NetworkMessage):
    protocolId = 6056

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.name = ""
        self.worldX = 0
        self.worldY = 0
        self.sterilizator = ""

    def getMessageId(self):
        return 6056

    def initExchangeMountSterilizeFromPaddockMessage(self, param1="", param2=0, param3=0, param4=""):
        self.name = param1
        self.worldX = param2
        self.worldY = param3
        self.sterilizator = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.name = ""
        self.worldX = 0
        self.worldY = 0
        self.sterilizator = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeMountSterilizeFromPaddockMessage(param1)

    def serializeAs_ExchangeMountSterilizeFromPaddockMessage(self, param1):
        param1.write_utf(self.name)
        if self.worldX < -255 or self.worldX > 255:
            raise RuntimeError("Forbidden value (" + str(self.worldX) + ") on element worldX.")
        param1.write_short(self.worldX)
        if self.worldY < -255 or self.worldY > 255:
            raise RuntimeError("Forbidden value (" + str(self.worldY) + ") on element worldY.")
        param1.write_short(self.worldY)
        param1.write_utf(self.sterilizator)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeMountSterilizeFromPaddockMessage(param1)

    def deserializeAs_ExchangeMountSterilizeFromPaddockMessage(self, param1):
        self._nameFunc(param1)
        self._worldXFunc(param1)
        self._worldYFunc(param1)
        self._sterilizatorFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeMountSterilizeFromPaddockMessage(param1)

    def deserializeAsyncAs_ExchangeMountSterilizeFromPaddockMessage(self, param1):
        param1.add_child(self._nameFunc)
        param1.add_child(self._worldXFunc)
        param1.add_child(self._worldYFunc)
        param1.add_child(self._sterilizatorFunc)

    def _nameFunc(self, param1):
        self.name = param1.read_utf()

    def _worldXFunc(self, param1):
        self.worldX = param1.read_short()
        if self.worldX < -255 or self.worldX > 255:
            raise RuntimeError("Forbidden value (" + str(self.worldX) + ") on element of ExchangeMountSterilizeFromPaddockMessage.worldX.")

    def _worldYFunc(self, param1):
        self.worldY = param1.read_short()
        if self.worldY < -255 or self.worldY > 255:
            raise RuntimeError("Forbidden value (" + str(self.worldY) + ") on element of ExchangeMountSterilizeFromPaddockMessage.worldY.")

    def _sterilizatorFunc(self, param1):
        self.sterilizator = param1.read_utf()


class ExchangeObjectMessage(NetworkMessage):
    protocolId = 5515

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.remote = False

    def getMessageId(self):
        return 5515

    def initExchangeObjectMessage(self, param1=False):
        self.remote = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.remote = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeObjectMessage(param1)

    def serializeAs_ExchangeObjectMessage(self, param1):
        param1.write_boolean(self.remote)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeObjectMessage(param1)

    def deserializeAs_ExchangeObjectMessage(self, param1):
        self._remoteFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeObjectMessage(param1)

    def deserializeAsyncAs_ExchangeObjectMessage(self, param1):
        param1.add_child(self._remoteFunc)

    def _remoteFunc(self, param1):
        self.remote = param1.read_boolean()


class ExchangeObjectMoveKamaMessage(NetworkMessage):
    protocolId = 5520

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.quantity = 0

    def getMessageId(self):
        return 5520

    def initExchangeObjectMoveKamaMessage(self, param1=0):
        self.quantity = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.quantity = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeObjectMoveKamaMessage(param1)

    def serializeAs_ExchangeObjectMoveKamaMessage(self, param1):
        if self.quantity < -9007199254740990 or self.quantity > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.quantity) + ") on element quantity.")
        param1.write_var_long(self.quantity)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeObjectMoveKamaMessage(param1)

    def deserializeAs_ExchangeObjectMoveKamaMessage(self, param1):
        self._quantityFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeObjectMoveKamaMessage(param1)

    def deserializeAsyncAs_ExchangeObjectMoveKamaMessage(self, param1):
        param1.add_child(self._quantityFunc)

    def _quantityFunc(self, param1):
        self.quantity = param1.read_var_long()
        if self.quantity < -9007199254740990 or self.quantity > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.quantity) + ") on element of ExchangeObjectMoveKamaMessage.quantity.")


class ExchangeObjectMoveMessage(NetworkMessage):
    protocolId = 5518

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectUID = 0
        self.quantity = 0

    def getMessageId(self):
        return 5518

    def initExchangeObjectMoveMessage(self, param1=0, param2=0):
        self.objectUID = param1
        self.quantity = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.objectUID = 0
        self.quantity = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeObjectMoveMessage(param1)

    def serializeAs_ExchangeObjectMoveMessage(self, param1):
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element objectUID.")
        param1.write_var_int(self.objectUID)
        param1.write_var_int(self.quantity)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeObjectMoveMessage(param1)

    def deserializeAs_ExchangeObjectMoveMessage(self, param1):
        self._objectUIDFunc(param1)
        self._quantityFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeObjectMoveMessage(param1)

    def deserializeAsyncAs_ExchangeObjectMoveMessage(self, param1):
        param1.add_child(self._objectUIDFunc)
        param1.add_child(self._quantityFunc)

    def _objectUIDFunc(self, param1):
        self.objectUID = param1.read_var_uh_int()
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element of ExchangeObjectMoveMessage.objectUID.")

    def _quantityFunc(self, param1):
        self.quantity = param1.read_var_int()


class ExchangeObjectTransfertAllFromInvMessage(NetworkMessage):
    protocolId = 6184

    def getMessageId(self):
        return 6184

    def initExchangeObjectTransfertAllFromInvMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_ExchangeObjectTransfertAllFromInvMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_ExchangeObjectTransfertAllFromInvMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_ExchangeObjectTransfertAllFromInvMessage(self, param1):
        pass


class ExchangeObjectTransfertAllToInvMessage(NetworkMessage):
    protocolId = 6032

    def getMessageId(self):
        return 6032

    def initExchangeObjectTransfertAllToInvMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_ExchangeObjectTransfertAllToInvMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_ExchangeObjectTransfertAllToInvMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_ExchangeObjectTransfertAllToInvMessage(self, param1):
        pass


class ExchangeObjectTransfertExistingFromInvMessage(NetworkMessage):
    protocolId = 6325

    def getMessageId(self):
        return 6325

    def initExchangeObjectTransfertExistingFromInvMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_ExchangeObjectTransfertExistingFromInvMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_ExchangeObjectTransfertExistingFromInvMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_ExchangeObjectTransfertExistingFromInvMessage(self, param1):
        pass


class ExchangeObjectTransfertExistingToInvMessage(NetworkMessage):
    protocolId = 6326

    def getMessageId(self):
        return 6326

    def initExchangeObjectTransfertExistingToInvMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_ExchangeObjectTransfertExistingToInvMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_ExchangeObjectTransfertExistingToInvMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_ExchangeObjectTransfertExistingToInvMessage(self, param1):
        pass


class ExchangeObjectTransfertListFromInvMessage(NetworkMessage):
    protocolId = 6183

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.ids = []
        self._idstree = FuncTree()

    def getMessageId(self):
        return 6183

    def initExchangeObjectTransfertListFromInvMessage(self, param1=[]):
        self.ids = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.ids = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeObjectTransfertListFromInvMessage(param1)

    def serializeAs_ExchangeObjectTransfertListFromInvMessage(self, param1):
        param1.write_short(len(self.ids))
        _loc2_ = 0
        while _loc2_ < len(self.ids):
            if self.ids[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.ids[_loc2_]) + ") on element 1 (starting at 1) of ids.")
            param1.write_var_int(self.ids[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeObjectTransfertListFromInvMessage(param1)

    def deserializeAs_ExchangeObjectTransfertListFromInvMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_uh_int()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of ids.")
            self.ids.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeObjectTransfertListFromInvMessage(param1)

    def deserializeAsyncAs_ExchangeObjectTransfertListFromInvMessage(self, param1):
        self._idstree = param1.add_child(self._idstreeFunc)

    def _idstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._idstree.add_child(self._idsFunc)
            _loc3_ += 1

    def _idsFunc(self, param1):
        _loc2_ = param1.read_var_uh_int()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of ids.")
        self.ids.append(_loc2_)


class ExchangeObjectTransfertListToInvMessage(NetworkMessage):
    protocolId = 6039

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.ids = []
        self._idstree = FuncTree()

    def getMessageId(self):
        return 6039

    def initExchangeObjectTransfertListToInvMessage(self, param1=[]):
        self.ids = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.ids = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeObjectTransfertListToInvMessage(param1)

    def serializeAs_ExchangeObjectTransfertListToInvMessage(self, param1):
        param1.write_short(len(self.ids))
        _loc2_ = 0
        while _loc2_ < len(self.ids):
            if self.ids[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.ids[_loc2_]) + ") on element 1 (starting at 1) of ids.")
            param1.write_var_int(self.ids[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeObjectTransfertListToInvMessage(param1)

    def deserializeAs_ExchangeObjectTransfertListToInvMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_uh_int()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of ids.")
            self.ids.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeObjectTransfertListToInvMessage(param1)

    def deserializeAsyncAs_ExchangeObjectTransfertListToInvMessage(self, param1):
        self._idstree = param1.add_child(self._idstreeFunc)

    def _idstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._idstree.add_child(self._idsFunc)
            _loc3_ += 1

    def _idsFunc(self, param1):
        _loc2_ = param1.read_var_uh_int()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of ids.")
        self.ids.append(_loc2_)


class ExchangeObjectTransfertListWithQuantityToInvMessage(NetworkMessage):
    protocolId = 6470

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.ids = []
        self.qtys = []
        self._idstree = FuncTree()
        self._qtystree = FuncTree()

    def getMessageId(self):
        return 6470

    def initExchangeObjectTransfertListWithQuantityToInvMessage(self, param1=[], param2=[]):
        self.ids = param1
        self.qtys = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.ids = []
        self.qtys = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeObjectTransfertListWithQuantityToInvMessage(param1)

    def serializeAs_ExchangeObjectTransfertListWithQuantityToInvMessage(self, param1):
        param1.write_short(len(self.ids))
        _loc2_ = 0
        while _loc2_ < len(self.ids):
            if self.ids[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.ids[_loc2_]) + ") on element 1 (starting at 1) of ids.")
            param1.write_var_int(self.ids[_loc2_])
            _loc2_ += 1
        param1.write_short(len(self.qtys))
        _loc3_ = 0
        while _loc3_ < len(self.qtys):
            if self.qtys[_loc3_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.qtys[_loc3_]) + ") on element 2 (starting at 1) of qtys.")
            param1.write_var_int(self.qtys[_loc3_])
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeObjectTransfertListWithQuantityToInvMessage(param1)

    def deserializeAs_ExchangeObjectTransfertListWithQuantityToInvMessage(self, param1):
        _loc6_ = 0
        _loc7_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = param1.read_var_uh_int()
            if _loc6_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc6_) + ") on elements of ids.")
            self.ids.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = param1.read_var_uh_int()
            if _loc7_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc7_) + ") on elements of qtys.")
            self.qtys.append(_loc7_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeObjectTransfertListWithQuantityToInvMessage(param1)

    def deserializeAsyncAs_ExchangeObjectTransfertListWithQuantityToInvMessage(self, param1):
        self._idstree = param1.add_child(self._idstreeFunc)
        self._qtystree = param1.add_child(self._qtystreeFunc)

    def _idstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._idstree.add_child(self._idsFunc)
            _loc3_ += 1

    def _idsFunc(self, param1):
        _loc2_ = param1.read_var_uh_int()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of ids.")
        self.ids.append(_loc2_)

    def _qtystreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._qtystree.add_child(self._qtysFunc)
            _loc3_ += 1

    def _qtysFunc(self, param1):
        _loc2_ = param1.read_var_uh_int()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of qtys.")
        self.qtys.append(_loc2_)


class ExchangeObjectUseInWorkshopMessage(NetworkMessage):
    protocolId = 6004

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectUID = 0
        self.quantity = 0

    def getMessageId(self):
        return 6004

    def initExchangeObjectUseInWorkshopMessage(self, param1=0, param2=0):
        self.objectUID = param1
        self.quantity = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.objectUID = 0
        self.quantity = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeObjectUseInWorkshopMessage(param1)

    def serializeAs_ExchangeObjectUseInWorkshopMessage(self, param1):
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element objectUID.")
        param1.write_var_int(self.objectUID)
        param1.write_var_int(self.quantity)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeObjectUseInWorkshopMessage(param1)

    def deserializeAs_ExchangeObjectUseInWorkshopMessage(self, param1):
        self._objectUIDFunc(param1)
        self._quantityFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeObjectUseInWorkshopMessage(param1)

    def deserializeAsyncAs_ExchangeObjectUseInWorkshopMessage(self, param1):
        param1.add_child(self._objectUIDFunc)
        param1.add_child(self._quantityFunc)

    def _objectUIDFunc(self, param1):
        self.objectUID = param1.read_var_uh_int()
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element of ExchangeObjectUseInWorkshopMessage.objectUID.")

    def _quantityFunc(self, param1):
        self.quantity = param1.read_var_int()


class ExchangeOfflineSoldItemsMessage(NetworkMessage):
    protocolId = 6613

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.bidHouseItems = []
        self.merchantItems = []
        self._bidHouseItemstree = FuncTree()
        self._merchantItemstree = FuncTree()

    def getMessageId(self):
        return 6613

    def initExchangeOfflineSoldItemsMessage(self, param1=[], param2=[]):
        self.bidHouseItems = param1
        self.merchantItems = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.bidHouseItems = []
        self.merchantItems = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeOfflineSoldItemsMessage(param1)

    def serializeAs_ExchangeOfflineSoldItemsMessage(self, param1):
        param1.write_short(len(self.bidHouseItems))
        _loc2_ = 0
        while _loc2_ < len(self.bidHouseItems):
            as_parent(self.bidHouseItems[_loc2_], ObjectItemGenericQuantityPrice).serializeAs_ObjectItemGenericQuantityPrice(param1)
            _loc2_ += 1
        param1.write_short(len(self.merchantItems))
        _loc3_ = 0
        while _loc3_ < len(self.merchantItems):
            as_parent(self.merchantItems[_loc3_], ObjectItemGenericQuantityPrice).serializeAs_ObjectItemGenericQuantityPrice(param1)
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeOfflineSoldItemsMessage(param1)

    def deserializeAs_ExchangeOfflineSoldItemsMessage(self, param1):
        _loc6_ = None
        _loc7_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = ObjectItemGenericQuantityPrice()
            _loc6_.deserialize(param1)
            self.bidHouseItems.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = ObjectItemGenericQuantityPrice()
            _loc7_.deserialize(param1)
            self.merchantItems.append(_loc7_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeOfflineSoldItemsMessage(param1)

    def deserializeAsyncAs_ExchangeOfflineSoldItemsMessage(self, param1):
        self._bidHouseItemstree = param1.add_child(self._bidHouseItemstreeFunc)
        self._merchantItemstree = param1.add_child(self._merchantItemstreeFunc)

    def _bidHouseItemstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._bidHouseItemstree.add_child(self._bidHouseItemsFunc)
            _loc3_ += 1

    def _bidHouseItemsFunc(self, param1):
        _loc2_ = ObjectItemGenericQuantityPrice()
        _loc2_.deserialize(param1)
        self.bidHouseItems.append(_loc2_)

    def _merchantItemstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._merchantItemstree.add_child(self._merchantItemsFunc)
            _loc3_ += 1

    def _merchantItemsFunc(self, param1):
        _loc2_ = ObjectItemGenericQuantityPrice()
        _loc2_.deserialize(param1)
        self.merchantItems.append(_loc2_)


class ExchangeOkMultiCraftMessage(NetworkMessage):
    protocolId = 5768

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.initiatorId = 0
        self.otherId = 0
        self.role = 0

    def getMessageId(self):
        return 5768

    def initExchangeOkMultiCraftMessage(self, param1=0, param2=0, param3=0):
        self.initiatorId = param1
        self.otherId = param2
        self.role = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.initiatorId = 0
        self.otherId = 0
        self.role = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeOkMultiCraftMessage(param1)

    def serializeAs_ExchangeOkMultiCraftMessage(self, param1):
        if self.initiatorId < 0 or self.initiatorId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.initiatorId) + ") on element initiatorId.")
        param1.write_var_long(self.initiatorId)
        if self.otherId < 0 or self.otherId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.otherId) + ") on element otherId.")
        param1.write_var_long(self.otherId)
        param1.write_byte(self.role)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeOkMultiCraftMessage(param1)

    def deserializeAs_ExchangeOkMultiCraftMessage(self, param1):
        self._initiatorIdFunc(param1)
        self._otherIdFunc(param1)
        self._roleFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeOkMultiCraftMessage(param1)

    def deserializeAsyncAs_ExchangeOkMultiCraftMessage(self, param1):
        param1.add_child(self._initiatorIdFunc)
        param1.add_child(self._otherIdFunc)
        param1.add_child(self._roleFunc)

    def _initiatorIdFunc(self, param1):
        self.initiatorId = param1.read_var_uh_long()
        if self.initiatorId < 0 or self.initiatorId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.initiatorId) + ") on element of ExchangeOkMultiCraftMessage.initiatorId.")

    def _otherIdFunc(self, param1):
        self.otherId = param1.read_var_uh_long()
        if self.otherId < 0 or self.otherId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.otherId) + ") on element of ExchangeOkMultiCraftMessage.otherId.")

    def _roleFunc(self, param1):
        self.role = param1.read_byte()


class ExchangeOnHumanVendorRequestMessage(NetworkMessage):
    protocolId = 5772

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.humanVendorId = 0
        self.humanVendorCell = 0

    def getMessageId(self):
        return 5772

    def initExchangeOnHumanVendorRequestMessage(self, param1=0, param2=0):
        self.humanVendorId = param1
        self.humanVendorCell = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.humanVendorId = 0
        self.humanVendorCell = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeOnHumanVendorRequestMessage(param1)

    def serializeAs_ExchangeOnHumanVendorRequestMessage(self, param1):
        if self.humanVendorId < 0 or self.humanVendorId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.humanVendorId) + ") on element humanVendorId.")
        param1.write_var_long(self.humanVendorId)
        if self.humanVendorCell < 0 or self.humanVendorCell > 559:
            raise RuntimeError("Forbidden value (" + str(self.humanVendorCell) + ") on element humanVendorCell.")
        param1.write_var_short(self.humanVendorCell)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeOnHumanVendorRequestMessage(param1)

    def deserializeAs_ExchangeOnHumanVendorRequestMessage(self, param1):
        self._humanVendorIdFunc(param1)
        self._humanVendorCellFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeOnHumanVendorRequestMessage(param1)

    def deserializeAsyncAs_ExchangeOnHumanVendorRequestMessage(self, param1):
        param1.add_child(self._humanVendorIdFunc)
        param1.add_child(self._humanVendorCellFunc)

    def _humanVendorIdFunc(self, param1):
        self.humanVendorId = param1.read_var_uh_long()
        if self.humanVendorId < 0 or self.humanVendorId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.humanVendorId) + ") on element of ExchangeOnHumanVendorRequestMessage.humanVendorId.")

    def _humanVendorCellFunc(self, param1):
        self.humanVendorCell = param1.read_var_uh_short()
        if self.humanVendorCell < 0 or self.humanVendorCell > 559:
            raise RuntimeError("Forbidden value (" + str(self.humanVendorCell) + ") on element of ExchangeOnHumanVendorRequestMessage.humanVendorCell.")


class ExchangeReadyMessage(NetworkMessage):
    protocolId = 5511

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.ready = False
        self.step = 0

    def getMessageId(self):
        return 5511

    def initExchangeReadyMessage(self, param1=False, param2=0):
        self.ready = param1
        self.step = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.ready = False
        self.step = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeReadyMessage(param1)

    def serializeAs_ExchangeReadyMessage(self, param1):
        param1.write_boolean(self.ready)
        if self.step < 0:
            raise RuntimeError("Forbidden value (" + str(self.step) + ") on element step.")
        param1.write_var_short(self.step)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeReadyMessage(param1)

    def deserializeAs_ExchangeReadyMessage(self, param1):
        self._readyFunc(param1)
        self._stepFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeReadyMessage(param1)

    def deserializeAsyncAs_ExchangeReadyMessage(self, param1):
        param1.add_child(self._readyFunc)
        param1.add_child(self._stepFunc)

    def _readyFunc(self, param1):
        self.ready = param1.read_boolean()

    def _stepFunc(self, param1):
        self.step = param1.read_var_uh_short()
        if self.step < 0:
            raise RuntimeError("Forbidden value (" + str(self.step) + ") on element of ExchangeReadyMessage.step.")


class ExchangeReplayStopMessage(NetworkMessage):
    protocolId = 6001

    def getMessageId(self):
        return 6001

    def initExchangeReplayStopMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_ExchangeReplayStopMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_ExchangeReplayStopMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_ExchangeReplayStopMessage(self, param1):
        pass


class ExchangeReplyTaxVendorMessage(NetworkMessage):
    protocolId = 5787

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectValue = 0
        self.totalTaxValue = 0

    def getMessageId(self):
        return 5787

    def initExchangeReplyTaxVendorMessage(self, param1=0, param2=0):
        self.objectValue = param1
        self.totalTaxValue = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.objectValue = 0
        self.totalTaxValue = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeReplyTaxVendorMessage(param1)

    def serializeAs_ExchangeReplyTaxVendorMessage(self, param1):
        if self.objectValue < 0 or self.objectValue > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.objectValue) + ") on element objectValue.")
        param1.write_var_long(self.objectValue)
        if self.totalTaxValue < 0 or self.totalTaxValue > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.totalTaxValue) + ") on element totalTaxValue.")
        param1.write_var_long(self.totalTaxValue)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeReplyTaxVendorMessage(param1)

    def deserializeAs_ExchangeReplyTaxVendorMessage(self, param1):
        self._objectValueFunc(param1)
        self._totalTaxValueFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeReplyTaxVendorMessage(param1)

    def deserializeAsyncAs_ExchangeReplyTaxVendorMessage(self, param1):
        param1.add_child(self._objectValueFunc)
        param1.add_child(self._totalTaxValueFunc)

    def _objectValueFunc(self, param1):
        self.objectValue = param1.read_var_uh_long()
        if self.objectValue < 0 or self.objectValue > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.objectValue) + ") on element of ExchangeReplyTaxVendorMessage.objectValue.")

    def _totalTaxValueFunc(self, param1):
        self.totalTaxValue = param1.read_var_uh_long()
        if self.totalTaxValue < 0 or self.totalTaxValue > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.totalTaxValue) + ") on element of ExchangeReplyTaxVendorMessage.totalTaxValue.")


class ExchangeRequestedMessage(NetworkMessage):
    protocolId = 5522

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.exchangeType = 0

    def getMessageId(self):
        return 5522

    def initExchangeRequestedMessage(self, param1=0):
        self.exchangeType = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.exchangeType = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeRequestedMessage(param1)

    def serializeAs_ExchangeRequestedMessage(self, param1):
        param1.write_byte(self.exchangeType)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeRequestedMessage(param1)

    def deserializeAs_ExchangeRequestedMessage(self, param1):
        self._exchangeTypeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeRequestedMessage(param1)

    def deserializeAsyncAs_ExchangeRequestedMessage(self, param1):
        param1.add_child(self._exchangeTypeFunc)

    def _exchangeTypeFunc(self, param1):
        self.exchangeType = param1.read_byte()


class ExchangeRequestMessage(NetworkMessage):
    protocolId = 5505

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.exchangeType = 0

    def getMessageId(self):
        return 5505

    def initExchangeRequestMessage(self, param1=0):
        self.exchangeType = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.exchangeType = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeRequestMessage(param1)

    def serializeAs_ExchangeRequestMessage(self, param1):
        param1.write_byte(self.exchangeType)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeRequestMessage(param1)

    def deserializeAs_ExchangeRequestMessage(self, param1):
        self._exchangeTypeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeRequestMessage(param1)

    def deserializeAsyncAs_ExchangeRequestMessage(self, param1):
        param1.add_child(self._exchangeTypeFunc)

    def _exchangeTypeFunc(self, param1):
        self.exchangeType = param1.read_byte()


class ExchangeRequestOnMountStockMessage(NetworkMessage):
    protocolId = 5986

    def getMessageId(self):
        return 5986

    def initExchangeRequestOnMountStockMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_ExchangeRequestOnMountStockMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_ExchangeRequestOnMountStockMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_ExchangeRequestOnMountStockMessage(self, param1):
        pass


class ExchangeRequestOnShopStockMessage(NetworkMessage):
    protocolId = 5753

    def getMessageId(self):
        return 5753

    def initExchangeRequestOnShopStockMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_ExchangeRequestOnShopStockMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_ExchangeRequestOnShopStockMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_ExchangeRequestOnShopStockMessage(self, param1):
        pass


class ExchangeRequestOnTaxCollectorMessage(NetworkMessage):
    protocolId = 5779

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.taxCollectorId = 0

    def getMessageId(self):
        return 5779

    def initExchangeRequestOnTaxCollectorMessage(self, param1=0):
        self.taxCollectorId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.taxCollectorId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeRequestOnTaxCollectorMessage(param1)

    def serializeAs_ExchangeRequestOnTaxCollectorMessage(self, param1):
        param1.write_int(self.taxCollectorId)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeRequestOnTaxCollectorMessage(param1)

    def deserializeAs_ExchangeRequestOnTaxCollectorMessage(self, param1):
        self._taxCollectorIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeRequestOnTaxCollectorMessage(param1)

    def deserializeAsyncAs_ExchangeRequestOnTaxCollectorMessage(self, param1):
        param1.add_child(self._taxCollectorIdFunc)

    def _taxCollectorIdFunc(self, param1):
        self.taxCollectorId = param1.read_int()


class ExchangeSellMessage(NetworkMessage):
    protocolId = 5778

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectToSellId = 0
        self.quantity = 0

    def getMessageId(self):
        return 5778

    def initExchangeSellMessage(self, param1=0, param2=0):
        self.objectToSellId = param1
        self.quantity = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.objectToSellId = 0
        self.quantity = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeSellMessage(param1)

    def serializeAs_ExchangeSellMessage(self, param1):
        if self.objectToSellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectToSellId) + ") on element objectToSellId.")
        param1.write_var_int(self.objectToSellId)
        if self.quantity < 0:
            raise RuntimeError("Forbidden value (" + str(self.quantity) + ") on element quantity.")
        param1.write_var_int(self.quantity)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeSellMessage(param1)

    def deserializeAs_ExchangeSellMessage(self, param1):
        self._objectToSellIdFunc(param1)
        self._quantityFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeSellMessage(param1)

    def deserializeAsyncAs_ExchangeSellMessage(self, param1):
        param1.add_child(self._objectToSellIdFunc)
        param1.add_child(self._quantityFunc)

    def _objectToSellIdFunc(self, param1):
        self.objectToSellId = param1.read_var_uh_int()
        if self.objectToSellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectToSellId) + ") on element of ExchangeSellMessage.objectToSellId.")

    def _quantityFunc(self, param1):
        self.quantity = param1.read_var_uh_int()
        if self.quantity < 0:
            raise RuntimeError("Forbidden value (" + str(self.quantity) + ") on element of ExchangeSellMessage.quantity.")


class ExchangeSellOkMessage(NetworkMessage):
    protocolId = 5792

    def getMessageId(self):
        return 5792

    def initExchangeSellOkMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_ExchangeSellOkMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_ExchangeSellOkMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_ExchangeSellOkMessage(self, param1):
        pass


class ExchangeSetCraftRecipeMessage(NetworkMessage):
    protocolId = 6389

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectGID = 0

    def getMessageId(self):
        return 6389

    def initExchangeSetCraftRecipeMessage(self, param1=0):
        self.objectGID = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.objectGID = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeSetCraftRecipeMessage(param1)

    def serializeAs_ExchangeSetCraftRecipeMessage(self, param1):
        if self.objectGID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectGID) + ") on element objectGID.")
        param1.write_var_short(self.objectGID)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeSetCraftRecipeMessage(param1)

    def deserializeAs_ExchangeSetCraftRecipeMessage(self, param1):
        self._objectGIDFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeSetCraftRecipeMessage(param1)

    def deserializeAsyncAs_ExchangeSetCraftRecipeMessage(self, param1):
        param1.add_child(self._objectGIDFunc)

    def _objectGIDFunc(self, param1):
        self.objectGID = param1.read_var_uh_short()
        if self.objectGID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectGID) + ") on element of ExchangeSetCraftRecipeMessage.objectGID.")


class ExchangeShopStockMovementRemovedMessage(NetworkMessage):
    protocolId = 5907

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectId = 0

    def getMessageId(self):
        return 5907

    def initExchangeShopStockMovementRemovedMessage(self, param1=0):
        self.objectId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.objectId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeShopStockMovementRemovedMessage(param1)

    def serializeAs_ExchangeShopStockMovementRemovedMessage(self, param1):
        if self.objectId < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectId) + ") on element objectId.")
        param1.write_var_int(self.objectId)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeShopStockMovementRemovedMessage(param1)

    def deserializeAs_ExchangeShopStockMovementRemovedMessage(self, param1):
        self._objectIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeShopStockMovementRemovedMessage(param1)

    def deserializeAsyncAs_ExchangeShopStockMovementRemovedMessage(self, param1):
        param1.add_child(self._objectIdFunc)

    def _objectIdFunc(self, param1):
        self.objectId = param1.read_var_uh_int()
        if self.objectId < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectId) + ") on element of ExchangeShopStockMovementRemovedMessage.objectId.")


class ExchangeShopStockMovementUpdatedMessage(NetworkMessage):
    protocolId = 5909

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectInfo = ObjectItemToSell()
        self._objectInfotree = FuncTree()

    def getMessageId(self):
        return 5909

    def initExchangeShopStockMovementUpdatedMessage(self, param1=None):
        self.objectInfo = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.objectInfo = ObjectItemToSell()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeShopStockMovementUpdatedMessage(param1)

    def serializeAs_ExchangeShopStockMovementUpdatedMessage(self, param1):
        self.objectInfo.serializeAs_ObjectItemToSell(param1)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeShopStockMovementUpdatedMessage(param1)

    def deserializeAs_ExchangeShopStockMovementUpdatedMessage(self, param1):
        self.objectInfo = ObjectItemToSell()
        self.objectInfo.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeShopStockMovementUpdatedMessage(param1)

    def deserializeAsyncAs_ExchangeShopStockMovementUpdatedMessage(self, param1):
        self._objectInfotree = param1.add_child(self._objectInfotreeFunc)

    def _objectInfotreeFunc(self, param1):
        self.objectInfo = ObjectItemToSell()
        self.objectInfo.deserializeAsync(self._objectInfotree)


class ExchangeShopStockMultiMovementRemovedMessage(NetworkMessage):
    protocolId = 6037

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectIdList = []
        self._objectIdListtree = FuncTree()

    def getMessageId(self):
        return 6037

    def initExchangeShopStockMultiMovementRemovedMessage(self, param1=[]):
        self.objectIdList = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.objectIdList = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeShopStockMultiMovementRemovedMessage(param1)

    def serializeAs_ExchangeShopStockMultiMovementRemovedMessage(self, param1):
        param1.write_short(len(self.objectIdList))
        _loc2_ = 0
        while _loc2_ < len(self.objectIdList):
            if self.objectIdList[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.objectIdList[_loc2_]) + ") on element 1 (starting at 1) of objectIdList.")
            param1.write_var_int(self.objectIdList[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeShopStockMultiMovementRemovedMessage(param1)

    def deserializeAs_ExchangeShopStockMultiMovementRemovedMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_uh_int()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of objectIdList.")
            self.objectIdList.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeShopStockMultiMovementRemovedMessage(param1)

    def deserializeAsyncAs_ExchangeShopStockMultiMovementRemovedMessage(self, param1):
        self._objectIdListtree = param1.add_child(self._objectIdListtreeFunc)

    def _objectIdListtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._objectIdListtree.add_child(self._objectIdListFunc)
            _loc3_ += 1

    def _objectIdListFunc(self, param1):
        _loc2_ = param1.read_var_uh_int()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of objectIdList.")
        self.objectIdList.append(_loc2_)


class ExchangeShopStockMultiMovementUpdatedMessage(NetworkMessage):
    protocolId = 6038

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectInfoList = []
        self._objectInfoListtree = FuncTree()

    def getMessageId(self):
        return 6038

    def initExchangeShopStockMultiMovementUpdatedMessage(self, param1=[]):
        self.objectInfoList = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.objectInfoList = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeShopStockMultiMovementUpdatedMessage(param1)

    def serializeAs_ExchangeShopStockMultiMovementUpdatedMessage(self, param1):
        param1.write_short(len(self.objectInfoList))
        _loc2_ = 0
        while _loc2_ < len(self.objectInfoList):
            as_parent(self.objectInfoList[_loc2_], ObjectItemToSell).serializeAs_ObjectItemToSell(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeShopStockMultiMovementUpdatedMessage(param1)

    def deserializeAs_ExchangeShopStockMultiMovementUpdatedMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = ObjectItemToSell()
            _loc4_.deserialize(param1)
            self.objectInfoList.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeShopStockMultiMovementUpdatedMessage(param1)

    def deserializeAsyncAs_ExchangeShopStockMultiMovementUpdatedMessage(self, param1):
        self._objectInfoListtree = param1.add_child(self._objectInfoListtreeFunc)

    def _objectInfoListtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._objectInfoListtree.add_child(self._objectInfoListFunc)
            _loc3_ += 1

    def _objectInfoListFunc(self, param1):
        _loc2_ = ObjectItemToSell()
        _loc2_.deserialize(param1)
        self.objectInfoList.append(_loc2_)


class ExchangeShopStockStartedMessage(NetworkMessage):
    protocolId = 5910

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectsInfos = []
        self._objectsInfostree = FuncTree()

    def getMessageId(self):
        return 5910

    def initExchangeShopStockStartedMessage(self, param1=[]):
        self.objectsInfos = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.objectsInfos = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeShopStockStartedMessage(param1)

    def serializeAs_ExchangeShopStockStartedMessage(self, param1):
        param1.write_short(len(self.objectsInfos))
        _loc2_ = 0
        while _loc2_ < len(self.objectsInfos):
            as_parent(self.objectsInfos[_loc2_], ObjectItemToSell).serializeAs_ObjectItemToSell(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeShopStockStartedMessage(param1)

    def deserializeAs_ExchangeShopStockStartedMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = ObjectItemToSell()
            _loc4_.deserialize(param1)
            self.objectsInfos.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeShopStockStartedMessage(param1)

    def deserializeAsyncAs_ExchangeShopStockStartedMessage(self, param1):
        self._objectsInfostree = param1.add_child(self._objectsInfostreeFunc)

    def _objectsInfostreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._objectsInfostree.add_child(self._objectsInfosFunc)
            _loc3_ += 1

    def _objectsInfosFunc(self, param1):
        _loc2_ = ObjectItemToSell()
        _loc2_.deserialize(param1)
        self.objectsInfos.append(_loc2_)


class ExchangeShowVendorTaxMessage(NetworkMessage):
    protocolId = 5783

    def getMessageId(self):
        return 5783

    def initExchangeShowVendorTaxMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_ExchangeShowVendorTaxMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_ExchangeShowVendorTaxMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_ExchangeShowVendorTaxMessage(self, param1):
        pass


class ExchangeStartAsVendorMessage(NetworkMessage):
    protocolId = 5775

    def getMessageId(self):
        return 5775

    def initExchangeStartAsVendorMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_ExchangeStartAsVendorMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_ExchangeStartAsVendorMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_ExchangeStartAsVendorMessage(self, param1):
        pass


class ExchangeStartedBidBuyerMessage(NetworkMessage):
    protocolId = 5904

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.buyerDescriptor = SellerBuyerDescriptor()
        self._buyerDescriptortree = FuncTree()

    def getMessageId(self):
        return 5904

    def initExchangeStartedBidBuyerMessage(self, param1=None):
        self.buyerDescriptor = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.buyerDescriptor = SellerBuyerDescriptor()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeStartedBidBuyerMessage(param1)

    def serializeAs_ExchangeStartedBidBuyerMessage(self, param1):
        self.buyerDescriptor.serializeAs_SellerBuyerDescriptor(param1)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeStartedBidBuyerMessage(param1)

    def deserializeAs_ExchangeStartedBidBuyerMessage(self, param1):
        self.buyerDescriptor = SellerBuyerDescriptor()
        self.buyerDescriptor.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeStartedBidBuyerMessage(param1)

    def deserializeAsyncAs_ExchangeStartedBidBuyerMessage(self, param1):
        self._buyerDescriptortree = param1.add_child(self._buyerDescriptortreeFunc)

    def _buyerDescriptortreeFunc(self, param1):
        self.buyerDescriptor = SellerBuyerDescriptor()
        self.buyerDescriptor.deserializeAsync(self._buyerDescriptortree)


class ExchangeStartedBidSellerMessage(NetworkMessage):
    protocolId = 5905

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.sellerDescriptor = SellerBuyerDescriptor()
        self.objectsInfos = []
        self._sellerDescriptortree = FuncTree()
        self._objectsInfostree = FuncTree()

    def getMessageId(self):
        return 5905

    def initExchangeStartedBidSellerMessage(self, param1=None, param2=[]):
        self.sellerDescriptor = param1
        self.objectsInfos = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.sellerDescriptor = SellerBuyerDescriptor()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeStartedBidSellerMessage(param1)

    def serializeAs_ExchangeStartedBidSellerMessage(self, param1):
        self.sellerDescriptor.serializeAs_SellerBuyerDescriptor(param1)
        param1.write_short(len(self.objectsInfos))
        _loc2_ = 0
        while _loc2_ < len(self.objectsInfos):
            as_parent(self.objectsInfos[_loc2_], ObjectItemToSellInBid).serializeAs_ObjectItemToSellInBid(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeStartedBidSellerMessage(param1)

    def deserializeAs_ExchangeStartedBidSellerMessage(self, param1):
        _loc4_ = None
        self.sellerDescriptor = SellerBuyerDescriptor()
        self.sellerDescriptor.deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = ObjectItemToSellInBid()
            _loc4_.deserialize(param1)
            self.objectsInfos.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeStartedBidSellerMessage(param1)

    def deserializeAsyncAs_ExchangeStartedBidSellerMessage(self, param1):
        self._sellerDescriptortree = param1.add_child(self._sellerDescriptortreeFunc)
        self._objectsInfostree = param1.add_child(self._objectsInfostreeFunc)

    def _sellerDescriptortreeFunc(self, param1):
        self.sellerDescriptor = SellerBuyerDescriptor()
        self.sellerDescriptor.deserializeAsync(self._sellerDescriptortree)

    def _objectsInfostreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._objectsInfostree.add_child(self._objectsInfosFunc)
            _loc3_ += 1

    def _objectsInfosFunc(self, param1):
        _loc2_ = ObjectItemToSellInBid()
        _loc2_.deserialize(param1)
        self.objectsInfos.append(_loc2_)


class ExchangeStartedMessage(NetworkMessage):
    protocolId = 5512

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.exchangeType = 0

    def getMessageId(self):
        return 5512

    def initExchangeStartedMessage(self, param1=0):
        self.exchangeType = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.exchangeType = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeStartedMessage(param1)

    def serializeAs_ExchangeStartedMessage(self, param1):
        param1.write_byte(self.exchangeType)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeStartedMessage(param1)

    def deserializeAs_ExchangeStartedMessage(self, param1):
        self._exchangeTypeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeStartedMessage(param1)

    def deserializeAsyncAs_ExchangeStartedMessage(self, param1):
        param1.add_child(self._exchangeTypeFunc)

    def _exchangeTypeFunc(self, param1):
        self.exchangeType = param1.read_byte()


class ExchangeStartedMountStockMessage(NetworkMessage):
    protocolId = 5984

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectsInfos = []
        self._objectsInfostree = FuncTree()

    def getMessageId(self):
        return 5984

    def initExchangeStartedMountStockMessage(self, param1=[]):
        self.objectsInfos = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.objectsInfos = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeStartedMountStockMessage(param1)

    def serializeAs_ExchangeStartedMountStockMessage(self, param1):
        param1.write_short(len(self.objectsInfos))
        _loc2_ = 0
        while _loc2_ < len(self.objectsInfos):
            as_parent(self.objectsInfos[_loc2_], ObjectItem).serializeAs_ObjectItem(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeStartedMountStockMessage(param1)

    def deserializeAs_ExchangeStartedMountStockMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = ObjectItem()
            _loc4_.deserialize(param1)
            self.objectsInfos.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeStartedMountStockMessage(param1)

    def deserializeAsyncAs_ExchangeStartedMountStockMessage(self, param1):
        self._objectsInfostree = param1.add_child(self._objectsInfostreeFunc)

    def _objectsInfostreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._objectsInfostree.add_child(self._objectsInfosFunc)
            _loc3_ += 1

    def _objectsInfosFunc(self, param1):
        _loc2_ = ObjectItem()
        _loc2_.deserialize(param1)
        self.objectsInfos.append(_loc2_)


class ExchangeStartedTaxCollectorShopMessage(NetworkMessage):
    protocolId = 6664

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objects = []
        self.kamas = 0
        self._objectstree = FuncTree()

    def getMessageId(self):
        return 6664

    def initExchangeStartedTaxCollectorShopMessage(self, param1=[], param2=0):
        self.objects = param1
        self.kamas = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.objects = []
        self.kamas = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeStartedTaxCollectorShopMessage(param1)

    def serializeAs_ExchangeStartedTaxCollectorShopMessage(self, param1):
        param1.write_short(len(self.objects))
        _loc2_ = 0
        while _loc2_ < len(self.objects):
            as_parent(self.objects[_loc2_], ObjectItem).serializeAs_ObjectItem(param1)
            _loc2_ += 1
        if self.kamas < 0 or self.kamas > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.kamas) + ") on element kamas.")
        param1.write_var_long(self.kamas)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeStartedTaxCollectorShopMessage(param1)

    def deserializeAs_ExchangeStartedTaxCollectorShopMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = ObjectItem()
            _loc4_.deserialize(param1)
            self.objects.append(_loc4_)
            _loc3_ += 1
        self._kamasFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeStartedTaxCollectorShopMessage(param1)

    def deserializeAsyncAs_ExchangeStartedTaxCollectorShopMessage(self, param1):
        self._objectstree = param1.add_child(self._objectstreeFunc)
        param1.add_child(self._kamasFunc)

    def _objectstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._objectstree.add_child(self._objectsFunc)
            _loc3_ += 1

    def _objectsFunc(self, param1):
        _loc2_ = ObjectItem()
        _loc2_.deserialize(param1)
        self.objects.append(_loc2_)

    def _kamasFunc(self, param1):
        self.kamas = param1.read_var_uh_long()
        if self.kamas < 0 or self.kamas > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.kamas) + ") on element of ExchangeStartedTaxCollectorShopMessage.kamas.")


class ExchangeStartOkCraftMessage(NetworkMessage):
    protocolId = 5813

    def getMessageId(self):
        return 5813

    def initExchangeStartOkCraftMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_ExchangeStartOkCraftMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_ExchangeStartOkCraftMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_ExchangeStartOkCraftMessage(self, param1):
        pass


class ExchangeStartOkHumanVendorMessage(NetworkMessage):
    protocolId = 5767

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.sellerId = 0
        self.objectsInfos = []
        self._objectsInfostree = FuncTree()

    def getMessageId(self):
        return 5767

    def initExchangeStartOkHumanVendorMessage(self, param1=0, param2=[]):
        self.sellerId = param1
        self.objectsInfos = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.sellerId = 0
        self.objectsInfos = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeStartOkHumanVendorMessage(param1)

    def serializeAs_ExchangeStartOkHumanVendorMessage(self, param1):
        if self.sellerId < -9007199254740990 or self.sellerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.sellerId) + ") on element sellerId.")
        param1.write_double(self.sellerId)
        param1.write_short(len(self.objectsInfos))
        _loc2_ = 0
        while _loc2_ < len(self.objectsInfos):
            as_parent(self.objectsInfos[_loc2_], ObjectItemToSellInHumanVendorShop).serializeAs_ObjectItemToSellInHumanVendorShop(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeStartOkHumanVendorMessage(param1)

    def deserializeAs_ExchangeStartOkHumanVendorMessage(self, param1):
        _loc4_ = None
        self._sellerIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = ObjectItemToSellInHumanVendorShop()
            _loc4_.deserialize(param1)
            self.objectsInfos.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeStartOkHumanVendorMessage(param1)

    def deserializeAsyncAs_ExchangeStartOkHumanVendorMessage(self, param1):
        param1.add_child(self._sellerIdFunc)
        self._objectsInfostree = param1.add_child(self._objectsInfostreeFunc)

    def _sellerIdFunc(self, param1):
        self.sellerId = param1.read_double()
        if self.sellerId < -9007199254740990 or self.sellerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.sellerId) + ") on element of ExchangeStartOkHumanVendorMessage.sellerId.")

    def _objectsInfostreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._objectsInfostree.add_child(self._objectsInfosFunc)
            _loc3_ += 1

    def _objectsInfosFunc(self, param1):
        _loc2_ = ObjectItemToSellInHumanVendorShop()
        _loc2_.deserialize(param1)
        self.objectsInfos.append(_loc2_)


class ExchangeStartOkJobIndexMessage(NetworkMessage):
    protocolId = 5819

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.jobs = []
        self._jobstree = FuncTree()

    def getMessageId(self):
        return 5819

    def initExchangeStartOkJobIndexMessage(self, param1=[]):
        self.jobs = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.jobs = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeStartOkJobIndexMessage(param1)

    def serializeAs_ExchangeStartOkJobIndexMessage(self, param1):
        param1.write_short(len(self.jobs))
        _loc2_ = 0
        while _loc2_ < len(self.jobs):
            if self.jobs[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.jobs[_loc2_]) + ") on element 1 (starting at 1) of jobs.")
            param1.write_var_int(self.jobs[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeStartOkJobIndexMessage(param1)

    def deserializeAs_ExchangeStartOkJobIndexMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_uh_int()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of jobs.")
            self.jobs.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeStartOkJobIndexMessage(param1)

    def deserializeAsyncAs_ExchangeStartOkJobIndexMessage(self, param1):
        self._jobstree = param1.add_child(self._jobstreeFunc)

    def _jobstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._jobstree.add_child(self._jobsFunc)
            _loc3_ += 1

    def _jobsFunc(self, param1):
        _loc2_ = param1.read_var_uh_int()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of jobs.")
        self.jobs.append(_loc2_)


class ExchangeStartOkMountWithOutPaddockMessage(NetworkMessage):
    protocolId = 5991

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.stabledMountsDescription = []
        self._stabledMountsDescriptiontree = FuncTree()

    def getMessageId(self):
        return 5991

    def initExchangeStartOkMountWithOutPaddockMessage(self, param1=[]):
        self.stabledMountsDescription = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.stabledMountsDescription = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeStartOkMountWithOutPaddockMessage(param1)

    def serializeAs_ExchangeStartOkMountWithOutPaddockMessage(self, param1):
        param1.write_short(len(self.stabledMountsDescription))
        _loc2_ = 0
        while _loc2_ < len(self.stabledMountsDescription):
            as_parent(self.stabledMountsDescription[_loc2_], MountClientData).serializeAs_MountClientData(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeStartOkMountWithOutPaddockMessage(param1)

    def deserializeAs_ExchangeStartOkMountWithOutPaddockMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = MountClientData()
            _loc4_.deserialize(param1)
            self.stabledMountsDescription.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeStartOkMountWithOutPaddockMessage(param1)

    def deserializeAsyncAs_ExchangeStartOkMountWithOutPaddockMessage(self, param1):
        self._stabledMountsDescriptiontree = param1.add_child(self._stabledMountsDescriptiontreeFunc)

    def _stabledMountsDescriptiontreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._stabledMountsDescriptiontree.add_child(self._stabledMountsDescriptionFunc)
            _loc3_ += 1

    def _stabledMountsDescriptionFunc(self, param1):
        _loc2_ = MountClientData()
        _loc2_.deserialize(param1)
        self.stabledMountsDescription.append(_loc2_)


class ExchangeStartOkMulticraftCrafterMessage(NetworkMessage):
    protocolId = 5818

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.skillId = 0

    def getMessageId(self):
        return 5818

    def initExchangeStartOkMulticraftCrafterMessage(self, param1=0):
        self.skillId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.skillId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeStartOkMulticraftCrafterMessage(param1)

    def serializeAs_ExchangeStartOkMulticraftCrafterMessage(self, param1):
        if self.skillId < 0:
            raise RuntimeError("Forbidden value (" + str(self.skillId) + ") on element skillId.")
        param1.write_var_int(self.skillId)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeStartOkMulticraftCrafterMessage(param1)

    def deserializeAs_ExchangeStartOkMulticraftCrafterMessage(self, param1):
        self._skillIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeStartOkMulticraftCrafterMessage(param1)

    def deserializeAsyncAs_ExchangeStartOkMulticraftCrafterMessage(self, param1):
        param1.add_child(self._skillIdFunc)

    def _skillIdFunc(self, param1):
        self.skillId = param1.read_var_uh_int()
        if self.skillId < 0:
            raise RuntimeError("Forbidden value (" + str(self.skillId) + ") on element of ExchangeStartOkMulticraftCrafterMessage.skillId.")


class ExchangeStartOkMulticraftCustomerMessage(NetworkMessage):
    protocolId = 5817

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.skillId = 0
        self.crafterJobLevel = 0

    def getMessageId(self):
        return 5817

    def initExchangeStartOkMulticraftCustomerMessage(self, param1=0, param2=0):
        self.skillId = param1
        self.crafterJobLevel = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.skillId = 0
        self.crafterJobLevel = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeStartOkMulticraftCustomerMessage(param1)

    def serializeAs_ExchangeStartOkMulticraftCustomerMessage(self, param1):
        if self.skillId < 0:
            raise RuntimeError("Forbidden value (" + str(self.skillId) + ") on element skillId.")
        param1.write_var_int(self.skillId)
        if self.crafterJobLevel < 0 or self.crafterJobLevel > 255:
            raise RuntimeError("Forbidden value (" + str(self.crafterJobLevel) + ") on element crafterJobLevel.")
        param1.write_byte(self.crafterJobLevel)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeStartOkMulticraftCustomerMessage(param1)

    def deserializeAs_ExchangeStartOkMulticraftCustomerMessage(self, param1):
        self._skillIdFunc(param1)
        self._crafterJobLevelFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeStartOkMulticraftCustomerMessage(param1)

    def deserializeAsyncAs_ExchangeStartOkMulticraftCustomerMessage(self, param1):
        param1.add_child(self._skillIdFunc)
        param1.add_child(self._crafterJobLevelFunc)

    def _skillIdFunc(self, param1):
        self.skillId = param1.read_var_uh_int()
        if self.skillId < 0:
            raise RuntimeError("Forbidden value (" + str(self.skillId) + ") on element of ExchangeStartOkMulticraftCustomerMessage.skillId.")

    def _crafterJobLevelFunc(self, param1):
        self.crafterJobLevel = param1.read_unsigned_byte()
        if self.crafterJobLevel < 0 or self.crafterJobLevel > 255:
            raise RuntimeError("Forbidden value (" + str(self.crafterJobLevel) + ") on element of ExchangeStartOkMulticraftCustomerMessage.crafterJobLevel.")


class ExchangeStartOkNpcShopMessage(NetworkMessage):
    protocolId = 5761

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.npcSellerId = 0
        self.tokenId = 0
        self.objectsInfos = []
        self._objectsInfostree = FuncTree()

    def getMessageId(self):
        return 5761

    def initExchangeStartOkNpcShopMessage(self, param1=0, param2=0, param3=[]):
        self.npcSellerId = param1
        self.tokenId = param2
        self.objectsInfos = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.npcSellerId = 0
        self.tokenId = 0
        self.objectsInfos = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeStartOkNpcShopMessage(param1)

    def serializeAs_ExchangeStartOkNpcShopMessage(self, param1):
        if self.npcSellerId < -9007199254740990 or self.npcSellerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.npcSellerId) + ") on element npcSellerId.")
        param1.write_double(self.npcSellerId)
        if self.tokenId < 0:
            raise RuntimeError("Forbidden value (" + str(self.tokenId) + ") on element tokenId.")
        param1.write_var_short(self.tokenId)
        param1.write_short(len(self.objectsInfos))
        _loc2_ = 0
        while _loc2_ < len(self.objectsInfos):
            as_parent(self.objectsInfos[_loc2_], ObjectItemToSellInNpcShop).serializeAs_ObjectItemToSellInNpcShop(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeStartOkNpcShopMessage(param1)

    def deserializeAs_ExchangeStartOkNpcShopMessage(self, param1):
        _loc4_ = None
        self._npcSellerIdFunc(param1)
        self._tokenIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = ObjectItemToSellInNpcShop()
            _loc4_.deserialize(param1)
            self.objectsInfos.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeStartOkNpcShopMessage(param1)

    def deserializeAsyncAs_ExchangeStartOkNpcShopMessage(self, param1):
        param1.add_child(self._npcSellerIdFunc)
        param1.add_child(self._tokenIdFunc)
        self._objectsInfostree = param1.add_child(self._objectsInfostreeFunc)

    def _npcSellerIdFunc(self, param1):
        self.npcSellerId = param1.read_double()
        if self.npcSellerId < -9007199254740990 or self.npcSellerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.npcSellerId) + ") on element of ExchangeStartOkNpcShopMessage.npcSellerId.")

    def _tokenIdFunc(self, param1):
        self.tokenId = param1.read_var_uh_short()
        if self.tokenId < 0:
            raise RuntimeError("Forbidden value (" + str(self.tokenId) + ") on element of ExchangeStartOkNpcShopMessage.tokenId.")

    def _objectsInfostreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._objectsInfostree.add_child(self._objectsInfosFunc)
            _loc3_ += 1

    def _objectsInfosFunc(self, param1):
        _loc2_ = ObjectItemToSellInNpcShop()
        _loc2_.deserialize(param1)
        self.objectsInfos.append(_loc2_)


class ExchangeStartOkNpcTradeMessage(NetworkMessage):
    protocolId = 5785

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.npcId = 0

    def getMessageId(self):
        return 5785

    def initExchangeStartOkNpcTradeMessage(self, param1=0):
        self.npcId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.npcId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeStartOkNpcTradeMessage(param1)

    def serializeAs_ExchangeStartOkNpcTradeMessage(self, param1):
        if self.npcId < -9007199254740990 or self.npcId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.npcId) + ") on element npcId.")
        param1.write_double(self.npcId)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeStartOkNpcTradeMessage(param1)

    def deserializeAs_ExchangeStartOkNpcTradeMessage(self, param1):
        self._npcIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeStartOkNpcTradeMessage(param1)

    def deserializeAsyncAs_ExchangeStartOkNpcTradeMessage(self, param1):
        param1.add_child(self._npcIdFunc)

    def _npcIdFunc(self, param1):
        self.npcId = param1.read_double()
        if self.npcId < -9007199254740990 or self.npcId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.npcId) + ") on element of ExchangeStartOkNpcTradeMessage.npcId.")


class ExchangeStartOkRecycleTradeMessage(NetworkMessage):
    protocolId = 6600

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.percentToPrism = 0
        self.percentToPlayer = 0

    def getMessageId(self):
        return 6600

    def initExchangeStartOkRecycleTradeMessage(self, param1=0, param2=0):
        self.percentToPrism = param1
        self.percentToPlayer = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.percentToPrism = 0
        self.percentToPlayer = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeStartOkRecycleTradeMessage(param1)

    def serializeAs_ExchangeStartOkRecycleTradeMessage(self, param1):
        if self.percentToPrism < 0:
            raise RuntimeError("Forbidden value (" + str(self.percentToPrism) + ") on element percentToPrism.")
        param1.write_short(self.percentToPrism)
        if self.percentToPlayer < 0:
            raise RuntimeError("Forbidden value (" + str(self.percentToPlayer) + ") on element percentToPlayer.")
        param1.write_short(self.percentToPlayer)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeStartOkRecycleTradeMessage(param1)

    def deserializeAs_ExchangeStartOkRecycleTradeMessage(self, param1):
        self._percentToPrismFunc(param1)
        self._percentToPlayerFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeStartOkRecycleTradeMessage(param1)

    def deserializeAsyncAs_ExchangeStartOkRecycleTradeMessage(self, param1):
        param1.add_child(self._percentToPrismFunc)
        param1.add_child(self._percentToPlayerFunc)

    def _percentToPrismFunc(self, param1):
        self.percentToPrism = param1.read_short()
        if self.percentToPrism < 0:
            raise RuntimeError("Forbidden value (" + str(self.percentToPrism) + ") on element of ExchangeStartOkRecycleTradeMessage.percentToPrism.")

    def _percentToPlayerFunc(self, param1):
        self.percentToPlayer = param1.read_short()
        if self.percentToPlayer < 0:
            raise RuntimeError("Forbidden value (" + str(self.percentToPlayer) + ") on element of ExchangeStartOkRecycleTradeMessage.percentToPlayer.")


class ExchangeStartOkRunesTradeMessage(NetworkMessage):
    protocolId = 6567

    def getMessageId(self):
        return 6567

    def initExchangeStartOkRunesTradeMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_ExchangeStartOkRunesTradeMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_ExchangeStartOkRunesTradeMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_ExchangeStartOkRunesTradeMessage(self, param1):
        pass


class ExchangeStoppedMessage(NetworkMessage):
    protocolId = 6589

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.id = 0

    def getMessageId(self):
        return 6589

    def initExchangeStoppedMessage(self, param1=0):
        self.id = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.id = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeStoppedMessage(param1)

    def serializeAs_ExchangeStoppedMessage(self, param1):
        if self.id < 0 or self.id > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element id.")
        param1.write_var_long(self.id)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeStoppedMessage(param1)

    def deserializeAs_ExchangeStoppedMessage(self, param1):
        self._idFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeStoppedMessage(param1)

    def deserializeAsyncAs_ExchangeStoppedMessage(self, param1):
        param1.add_child(self._idFunc)

    def _idFunc(self, param1):
        self.id = param1.read_var_uh_long()
        if self.id < 0 or self.id > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element of ExchangeStoppedMessage.id.")


class ExchangeTypesExchangerDescriptionForUserMessage(NetworkMessage):
    protocolId = 5765

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.typeDescription = []
        self._typeDescriptiontree = FuncTree()

    def getMessageId(self):
        return 5765

    def initExchangeTypesExchangerDescriptionForUserMessage(self, param1=[]):
        self.typeDescription = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.typeDescription = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeTypesExchangerDescriptionForUserMessage(param1)

    def serializeAs_ExchangeTypesExchangerDescriptionForUserMessage(self, param1):
        param1.write_short(len(self.typeDescription))
        _loc2_ = 0
        while _loc2_ < len(self.typeDescription):
            if self.typeDescription[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.typeDescription[_loc2_]) + ") on element 1 (starting at 1) of typeDescription.")
            param1.write_var_int(self.typeDescription[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeTypesExchangerDescriptionForUserMessage(param1)

    def deserializeAs_ExchangeTypesExchangerDescriptionForUserMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_uh_int()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of typeDescription.")
            self.typeDescription.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeTypesExchangerDescriptionForUserMessage(param1)

    def deserializeAsyncAs_ExchangeTypesExchangerDescriptionForUserMessage(self, param1):
        self._typeDescriptiontree = param1.add_child(self._typeDescriptiontreeFunc)

    def _typeDescriptiontreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._typeDescriptiontree.add_child(self._typeDescriptionFunc)
            _loc3_ += 1

    def _typeDescriptionFunc(self, param1):
        _loc2_ = param1.read_var_uh_int()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of typeDescription.")
        self.typeDescription.append(_loc2_)


class ExchangeTypesItemsExchangerDescriptionForUserMessage(NetworkMessage):
    protocolId = 5752

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.itemTypeDescriptions = []
        self._itemTypeDescriptionstree = FuncTree()

    def getMessageId(self):
        return 5752

    def initExchangeTypesItemsExchangerDescriptionForUserMessage(self, param1=[]):
        self.itemTypeDescriptions = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.itemTypeDescriptions = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeTypesItemsExchangerDescriptionForUserMessage(param1)

    def serializeAs_ExchangeTypesItemsExchangerDescriptionForUserMessage(self, param1):
        param1.write_short(len(self.itemTypeDescriptions))
        _loc2_ = 0
        while _loc2_ < len(self.itemTypeDescriptions):
            as_parent(self.itemTypeDescriptions[_loc2_], BidExchangerObjectInfo).serializeAs_BidExchangerObjectInfo(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeTypesItemsExchangerDescriptionForUserMessage(param1)

    def deserializeAs_ExchangeTypesItemsExchangerDescriptionForUserMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = BidExchangerObjectInfo()
            _loc4_.deserialize(param1)
            self.itemTypeDescriptions.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeTypesItemsExchangerDescriptionForUserMessage(param1)

    def deserializeAsyncAs_ExchangeTypesItemsExchangerDescriptionForUserMessage(self, param1):
        self._itemTypeDescriptionstree = param1.add_child(self._itemTypeDescriptionstreeFunc)

    def _itemTypeDescriptionstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._itemTypeDescriptionstree.add_child(self._itemTypeDescriptionsFunc)
            _loc3_ += 1

    def _itemTypeDescriptionsFunc(self, param1):
        _loc2_ = BidExchangerObjectInfo()
        _loc2_.deserialize(param1)
        self.itemTypeDescriptions.append(_loc2_)


class ExchangeWaitingResultMessage(NetworkMessage):
    protocolId = 5786

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.bwait = False

    def getMessageId(self):
        return 5786

    def initExchangeWaitingResultMessage(self, param1=False):
        self.bwait = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.bwait = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeWaitingResultMessage(param1)

    def serializeAs_ExchangeWaitingResultMessage(self, param1):
        param1.write_boolean(self.bwait)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeWaitingResultMessage(param1)

    def deserializeAs_ExchangeWaitingResultMessage(self, param1):
        self._bwaitFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeWaitingResultMessage(param1)

    def deserializeAsyncAs_ExchangeWaitingResultMessage(self, param1):
        param1.add_child(self._bwaitFunc)

    def _bwaitFunc(self, param1):
        self.bwait = param1.read_boolean()


class ExchangeWeightMessage(NetworkMessage):
    protocolId = 5793

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.currentWeight = 0
        self.maxWeight = 0

    def getMessageId(self):
        return 5793

    def initExchangeWeightMessage(self, param1=0, param2=0):
        self.currentWeight = param1
        self.maxWeight = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.currentWeight = 0
        self.maxWeight = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeWeightMessage(param1)

    def serializeAs_ExchangeWeightMessage(self, param1):
        if self.currentWeight < 0:
            raise RuntimeError("Forbidden value (" + str(self.currentWeight) + ") on element currentWeight.")
        param1.write_var_int(self.currentWeight)
        if self.maxWeight < 0:
            raise RuntimeError("Forbidden value (" + str(self.maxWeight) + ") on element maxWeight.")
        param1.write_var_int(self.maxWeight)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeWeightMessage(param1)

    def deserializeAs_ExchangeWeightMessage(self, param1):
        self._currentWeightFunc(param1)
        self._maxWeightFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeWeightMessage(param1)

    def deserializeAsyncAs_ExchangeWeightMessage(self, param1):
        param1.add_child(self._currentWeightFunc)
        param1.add_child(self._maxWeightFunc)

    def _currentWeightFunc(self, param1):
        self.currentWeight = param1.read_var_uh_int()
        if self.currentWeight < 0:
            raise RuntimeError("Forbidden value (" + str(self.currentWeight) + ") on element of ExchangeWeightMessage.currentWeight.")

    def _maxWeightFunc(self, param1):
        self.maxWeight = param1.read_var_uh_int()
        if self.maxWeight < 0:
            raise RuntimeError("Forbidden value (" + str(self.maxWeight) + ") on element of ExchangeWeightMessage.maxWeight.")


class ItemNoMoreAvailableMessage(NetworkMessage):
    protocolId = 5769

    def getMessageId(self):
        return 5769

    def initItemNoMoreAvailableMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_ItemNoMoreAvailableMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_ItemNoMoreAvailableMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_ItemNoMoreAvailableMessage(self, param1):
        pass


class JobBookSubscribeRequestMessage(NetworkMessage):
    protocolId = 6592

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.jobIds = []
        self._jobIdstree = FuncTree()

    def getMessageId(self):
        return 6592

    def initJobBookSubscribeRequestMessage(self, param1=[]):
        self.jobIds = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.jobIds = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_JobBookSubscribeRequestMessage(param1)

    def serializeAs_JobBookSubscribeRequestMessage(self, param1):
        param1.write_short(len(self.jobIds))
        _loc2_ = 0
        while _loc2_ < len(self.jobIds):
            if self.jobIds[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.jobIds[_loc2_]) + ") on element 1 (starting at 1) of jobIds.")
            param1.write_byte(self.jobIds[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_JobBookSubscribeRequestMessage(param1)

    def deserializeAs_JobBookSubscribeRequestMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_byte()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of jobIds.")
            self.jobIds.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_JobBookSubscribeRequestMessage(param1)

    def deserializeAsyncAs_JobBookSubscribeRequestMessage(self, param1):
        self._jobIdstree = param1.add_child(self._jobIdstreeFunc)

    def _jobIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._jobIdstree.add_child(self._jobIdsFunc)
            _loc3_ += 1

    def _jobIdsFunc(self, param1):
        _loc2_ = param1.read_byte()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of jobIds.")
        self.jobIds.append(_loc2_)


class RecycleResultMessage(NetworkMessage):
    protocolId = 6601

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.nuggetsForPrism = 0
        self.nuggetsForPlayer = 0

    def getMessageId(self):
        return 6601

    def initRecycleResultMessage(self, param1=0, param2=0):
        self.nuggetsForPrism = param1
        self.nuggetsForPlayer = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.nuggetsForPrism = 0
        self.nuggetsForPlayer = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_RecycleResultMessage(param1)

    def serializeAs_RecycleResultMessage(self, param1):
        if self.nuggetsForPrism < 0:
            raise RuntimeError("Forbidden value (" + str(self.nuggetsForPrism) + ") on element nuggetsForPrism.")
        param1.write_var_int(self.nuggetsForPrism)
        if self.nuggetsForPlayer < 0:
            raise RuntimeError("Forbidden value (" + str(self.nuggetsForPlayer) + ") on element nuggetsForPlayer.")
        param1.write_var_int(self.nuggetsForPlayer)

    def deserialize(self, param1):
        self.deserializeAs_RecycleResultMessage(param1)

    def deserializeAs_RecycleResultMessage(self, param1):
        self._nuggetsForPrismFunc(param1)
        self._nuggetsForPlayerFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_RecycleResultMessage(param1)

    def deserializeAsyncAs_RecycleResultMessage(self, param1):
        param1.add_child(self._nuggetsForPrismFunc)
        param1.add_child(self._nuggetsForPlayerFunc)

    def _nuggetsForPrismFunc(self, param1):
        self.nuggetsForPrism = param1.read_var_uh_int()
        if self.nuggetsForPrism < 0:
            raise RuntimeError("Forbidden value (" + str(self.nuggetsForPrism) + ") on element of RecycleResultMessage.nuggetsForPrism.")

    def _nuggetsForPlayerFunc(self, param1):
        self.nuggetsForPlayer = param1.read_var_uh_int()
        if self.nuggetsForPlayer < 0:
            raise RuntimeError("Forbidden value (" + str(self.nuggetsForPlayer) + ") on element of RecycleResultMessage.nuggetsForPlayer.")


class UpdateMountBoostMessage(NetworkMessage):
    protocolId = 6179

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.rideId = 0
        self.boostToUpdateList = []
        self._boostToUpdateListtree = FuncTree()

    def getMessageId(self):
        return 6179

    def initUpdateMountBoostMessage(self, param1=0, param2=[]):
        self.rideId = param1
        self.boostToUpdateList = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.rideId = 0
        self.boostToUpdateList = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_UpdateMountBoostMessage(param1)

    def serializeAs_UpdateMountBoostMessage(self, param1):
        param1.write_var_int(self.rideId)
        param1.write_short(len(self.boostToUpdateList))
        _loc2_ = 0
        while _loc2_ < len(self.boostToUpdateList):
            param1.write_short(as_parent(self.boostToUpdateList[_loc2_], UpdateMountBoost).getTypeId())
            as_parent(self.boostToUpdateList[_loc2_], UpdateMountBoost).serialize(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_UpdateMountBoostMessage(param1)

    def deserializeAs_UpdateMountBoostMessage(self, param1):
        _loc4_ = 0
        _loc5_ = None
        self._rideIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_unsigned_short()
            _loc5_ = ProtocolTypeManager.get_instance(UpdateMountBoost,_loc4_)
            _loc5_.deserialize(param1)
            self.boostToUpdateList.append(_loc5_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_UpdateMountBoostMessage(param1)

    def deserializeAsyncAs_UpdateMountBoostMessage(self, param1):
        param1.add_child(self._rideIdFunc)
        self._boostToUpdateListtree = param1.add_child(self._boostToUpdateListtreeFunc)

    def _rideIdFunc(self, param1):
        self.rideId = param1.read_var_int()

    def _boostToUpdateListtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._boostToUpdateListtree.add_child(self._boostToUpdateListFunc)
            _loc3_ += 1

    def _boostToUpdateListFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(UpdateMountBoost,_loc2_)
        _loc3_.deserialize(param1)
        self.boostToUpdateList.append(_loc3_)


class ExchangeMultiCraftCrafterCanUseHisRessourcesMessage(NetworkMessage):
    protocolId = 6020

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.allowed = False

    def getMessageId(self):
        return 6020

    def initExchangeMultiCraftCrafterCanUseHisRessourcesMessage(self, param1=False):
        self.allowed = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.allowed = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeMultiCraftCrafterCanUseHisRessourcesMessage(param1)

    def serializeAs_ExchangeMultiCraftCrafterCanUseHisRessourcesMessage(self, param1):
        param1.write_boolean(self.allowed)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeMultiCraftCrafterCanUseHisRessourcesMessage(param1)

    def deserializeAs_ExchangeMultiCraftCrafterCanUseHisRessourcesMessage(self, param1):
        self._allowedFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeMultiCraftCrafterCanUseHisRessourcesMessage(param1)

    def deserializeAsyncAs_ExchangeMultiCraftCrafterCanUseHisRessourcesMessage(self, param1):
        param1.add_child(self._allowedFunc)

    def _allowedFunc(self, param1):
        self.allowed = param1.read_boolean()


class ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage(NetworkMessage):
    protocolId = 6021

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.allow = False

    def getMessageId(self):
        return 6021

    def initExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage(self, param1=False):
        self.allow = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.allow = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage(param1)

    def serializeAs_ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage(self, param1):
        param1.write_boolean(self.allow)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage(param1)

    def deserializeAs_ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage(self, param1):
        self._allowFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage(param1)

    def deserializeAsyncAs_ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage(self, param1):
        param1.add_child(self._allowFunc)

    def _allowFunc(self, param1):
        self.allow = param1.read_boolean()


class GoldAddedMessage(NetworkMessage):
    protocolId = 6030

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.gold = GoldItem()
        self._goldtree = FuncTree()

    def getMessageId(self):
        return 6030

    def initGoldAddedMessage(self, param1=None):
        self.gold = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.gold = GoldItem()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GoldAddedMessage(param1)

    def serializeAs_GoldAddedMessage(self, param1):
        self.gold.serializeAs_GoldItem(param1)

    def deserialize(self, param1):
        self.deserializeAs_GoldAddedMessage(param1)

    def deserializeAs_GoldAddedMessage(self, param1):
        self.gold = GoldItem()
        self.gold.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GoldAddedMessage(param1)

    def deserializeAsyncAs_GoldAddedMessage(self, param1):
        self._goldtree = param1.add_child(self._goldtreeFunc)

    def _goldtreeFunc(self, param1):
        self.gold = GoldItem()
        self.gold.deserializeAsync(self._goldtree)


class InventoryContentMessage(NetworkMessage):
    protocolId = 3016

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objects = []
        self.kamas = 0
        self._objectstree = FuncTree()

    def getMessageId(self):
        return 3016

    def initInventoryContentMessage(self, param1=[], param2=0):
        self.objects = param1
        self.kamas = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.objects = []
        self.kamas = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_InventoryContentMessage(param1)

    def serializeAs_InventoryContentMessage(self, param1):
        param1.write_short(len(self.objects))
        _loc2_ = 0
        while _loc2_ < len(self.objects):
            as_parent(self.objects[_loc2_], ObjectItem).serializeAs_ObjectItem(param1)
            _loc2_ += 1
        if self.kamas < 0 or self.kamas > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.kamas) + ") on element kamas.")
        param1.write_var_long(self.kamas)

    def deserialize(self, param1):
        self.deserializeAs_InventoryContentMessage(param1)

    def deserializeAs_InventoryContentMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = ObjectItem()
            _loc4_.deserialize(param1)
            self.objects.append(_loc4_)
            _loc3_ += 1
        self._kamasFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_InventoryContentMessage(param1)

    def deserializeAsyncAs_InventoryContentMessage(self, param1):
        self._objectstree = param1.add_child(self._objectstreeFunc)
        param1.add_child(self._kamasFunc)

    def _objectstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._objectstree.add_child(self._objectsFunc)
            _loc3_ += 1

    def _objectsFunc(self, param1):
        _loc2_ = ObjectItem()
        _loc2_.deserialize(param1)
        self.objects.append(_loc2_)

    def _kamasFunc(self, param1):
        self.kamas = param1.read_var_uh_long()
        if self.kamas < 0 or self.kamas > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.kamas) + ") on element of InventoryContentMessage.kamas.")


class InventoryWeightMessage(NetworkMessage):
    protocolId = 3009

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.weight = 0
        self.weightMax = 0

    def getMessageId(self):
        return 3009

    def initInventoryWeightMessage(self, param1=0, param2=0):
        self.weight = param1
        self.weightMax = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.weight = 0
        self.weightMax = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_InventoryWeightMessage(param1)

    def serializeAs_InventoryWeightMessage(self, param1):
        if self.weight < 0:
            raise RuntimeError("Forbidden value (" + str(self.weight) + ") on element weight.")
        param1.write_var_int(self.weight)
        if self.weightMax < 0:
            raise RuntimeError("Forbidden value (" + str(self.weightMax) + ") on element weightMax.")
        param1.write_var_int(self.weightMax)

    def deserialize(self, param1):
        self.deserializeAs_InventoryWeightMessage(param1)

    def deserializeAs_InventoryWeightMessage(self, param1):
        self._weightFunc(param1)
        self._weightMaxFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_InventoryWeightMessage(param1)

    def deserializeAsyncAs_InventoryWeightMessage(self, param1):
        param1.add_child(self._weightFunc)
        param1.add_child(self._weightMaxFunc)

    def _weightFunc(self, param1):
        self.weight = param1.read_var_uh_int()
        if self.weight < 0:
            raise RuntimeError("Forbidden value (" + str(self.weight) + ") on element of InventoryWeightMessage.weight.")

    def _weightMaxFunc(self, param1):
        self.weightMax = param1.read_var_uh_int()
        if self.weightMax < 0:
            raise RuntimeError("Forbidden value (" + str(self.weightMax) + ") on element of InventoryWeightMessage.weightMax.")


class LivingObjectChangeSkinRequestMessage(NetworkMessage):
    protocolId = 5725

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.livingUID = 0
        self.livingPosition = 0
        self.skinId = 0

    def getMessageId(self):
        return 5725

    def initLivingObjectChangeSkinRequestMessage(self, param1=0, param2=0, param3=0):
        self.livingUID = param1
        self.livingPosition = param2
        self.skinId = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.livingUID = 0
        self.livingPosition = 0
        self.skinId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_LivingObjectChangeSkinRequestMessage(param1)

    def serializeAs_LivingObjectChangeSkinRequestMessage(self, param1):
        if self.livingUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.livingUID) + ") on element livingUID.")
        param1.write_var_int(self.livingUID)
        if self.livingPosition < 0 or self.livingPosition > 255:
            raise RuntimeError("Forbidden value (" + str(self.livingPosition) + ") on element livingPosition.")
        param1.write_byte(self.livingPosition)
        if self.skinId < 0:
            raise RuntimeError("Forbidden value (" + str(self.skinId) + ") on element skinId.")
        param1.write_var_int(self.skinId)

    def deserialize(self, param1):
        self.deserializeAs_LivingObjectChangeSkinRequestMessage(param1)

    def deserializeAs_LivingObjectChangeSkinRequestMessage(self, param1):
        self._livingUIDFunc(param1)
        self._livingPositionFunc(param1)
        self._skinIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_LivingObjectChangeSkinRequestMessage(param1)

    def deserializeAsyncAs_LivingObjectChangeSkinRequestMessage(self, param1):
        param1.add_child(self._livingUIDFunc)
        param1.add_child(self._livingPositionFunc)
        param1.add_child(self._skinIdFunc)

    def _livingUIDFunc(self, param1):
        self.livingUID = param1.read_var_uh_int()
        if self.livingUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.livingUID) + ") on element of LivingObjectChangeSkinRequestMessage.livingUID.")

    def _livingPositionFunc(self, param1):
        self.livingPosition = param1.read_unsigned_byte()
        if self.livingPosition < 0 or self.livingPosition > 255:
            raise RuntimeError("Forbidden value (" + str(self.livingPosition) + ") on element of LivingObjectChangeSkinRequestMessage.livingPosition.")

    def _skinIdFunc(self, param1):
        self.skinId = param1.read_var_uh_int()
        if self.skinId < 0:
            raise RuntimeError("Forbidden value (" + str(self.skinId) + ") on element of LivingObjectChangeSkinRequestMessage.skinId.")


class LivingObjectDissociateMessage(NetworkMessage):
    protocolId = 5723

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.livingUID = 0
        self.livingPosition = 0

    def getMessageId(self):
        return 5723

    def initLivingObjectDissociateMessage(self, param1=0, param2=0):
        self.livingUID = param1
        self.livingPosition = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.livingUID = 0
        self.livingPosition = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_LivingObjectDissociateMessage(param1)

    def serializeAs_LivingObjectDissociateMessage(self, param1):
        if self.livingUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.livingUID) + ") on element livingUID.")
        param1.write_var_int(self.livingUID)
        if self.livingPosition < 0 or self.livingPosition > 255:
            raise RuntimeError("Forbidden value (" + str(self.livingPosition) + ") on element livingPosition.")
        param1.write_byte(self.livingPosition)

    def deserialize(self, param1):
        self.deserializeAs_LivingObjectDissociateMessage(param1)

    def deserializeAs_LivingObjectDissociateMessage(self, param1):
        self._livingUIDFunc(param1)
        self._livingPositionFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_LivingObjectDissociateMessage(param1)

    def deserializeAsyncAs_LivingObjectDissociateMessage(self, param1):
        param1.add_child(self._livingUIDFunc)
        param1.add_child(self._livingPositionFunc)

    def _livingUIDFunc(self, param1):
        self.livingUID = param1.read_var_uh_int()
        if self.livingUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.livingUID) + ") on element of LivingObjectDissociateMessage.livingUID.")

    def _livingPositionFunc(self, param1):
        self.livingPosition = param1.read_unsigned_byte()
        if self.livingPosition < 0 or self.livingPosition > 255:
            raise RuntimeError("Forbidden value (" + str(self.livingPosition) + ") on element of LivingObjectDissociateMessage.livingPosition.")


class LivingObjectMessageMessage(NetworkMessage):
    protocolId = 6065

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.msgId = 0
        self.timeStamp = 0
        self.owner = ""
        self.objectGenericId = 0

    def getMessageId(self):
        return 6065

    def initLivingObjectMessageMessage(self, param1=0, param2=0, param3="", param4=0):
        self.msgId = param1
        self.timeStamp = param2
        self.owner = param3
        self.objectGenericId = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.msgId = 0
        self.timeStamp = 0
        self.owner = ""
        self.objectGenericId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_LivingObjectMessageMessage(param1)

    def serializeAs_LivingObjectMessageMessage(self, param1):
        if self.msgId < 0:
            raise RuntimeError("Forbidden value (" + str(self.msgId) + ") on element msgId.")
        param1.write_var_short(self.msgId)
        if self.timeStamp < 0:
            raise RuntimeError("Forbidden value (" + str(self.timeStamp) + ") on element timeStamp.")
        param1.write_int(self.timeStamp)
        param1.write_utf(self.owner)
        if self.objectGenericId < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectGenericId) + ") on element objectGenericId.")
        param1.write_var_short(self.objectGenericId)

    def deserialize(self, param1):
        self.deserializeAs_LivingObjectMessageMessage(param1)

    def deserializeAs_LivingObjectMessageMessage(self, param1):
        self._msgIdFunc(param1)
        self._timeStampFunc(param1)
        self._ownerFunc(param1)
        self._objectGenericIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_LivingObjectMessageMessage(param1)

    def deserializeAsyncAs_LivingObjectMessageMessage(self, param1):
        param1.add_child(self._msgIdFunc)
        param1.add_child(self._timeStampFunc)
        param1.add_child(self._ownerFunc)
        param1.add_child(self._objectGenericIdFunc)

    def _msgIdFunc(self, param1):
        self.msgId = param1.read_var_uh_short()
        if self.msgId < 0:
            raise RuntimeError("Forbidden value (" + str(self.msgId) + ") on element of LivingObjectMessageMessage.msgId.")

    def _timeStampFunc(self, param1):
        self.timeStamp = param1.read_int()
        if self.timeStamp < 0:
            raise RuntimeError("Forbidden value (" + str(self.timeStamp) + ") on element of LivingObjectMessageMessage.timeStamp.")

    def _ownerFunc(self, param1):
        self.owner = param1.read_utf()

    def _objectGenericIdFunc(self, param1):
        self.objectGenericId = param1.read_var_uh_short()
        if self.objectGenericId < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectGenericId) + ") on element of LivingObjectMessageMessage.objectGenericId.")


class LivingObjectMessageRequestMessage(NetworkMessage):
    protocolId = 6066

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.msgId = 0
        self.parameters = []
        self.livingObject = 0
        self._parameterstree = FuncTree()

    def getMessageId(self):
        return 6066

    def initLivingObjectMessageRequestMessage(self, param1=0, param2=[], param3=0):
        self.msgId = param1
        self.parameters = param2
        self.livingObject = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.msgId = 0
        self.parameters = []
        self.livingObject = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_LivingObjectMessageRequestMessage(param1)

    def serializeAs_LivingObjectMessageRequestMessage(self, param1):
        if self.msgId < 0:
            raise RuntimeError("Forbidden value (" + str(self.msgId) + ") on element msgId.")
        param1.write_var_short(self.msgId)
        param1.write_short(len(self.parameters))
        _loc2_ = 0
        while _loc2_ < len(self.parameters):
            param1.write_utf(self.parameters[_loc2_])
            _loc2_ += 1
        if self.livingObject < 0:
            raise RuntimeError("Forbidden value (" + str(self.livingObject) + ") on element livingObject.")
        param1.write_var_int(self.livingObject)

    def deserialize(self, param1):
        self.deserializeAs_LivingObjectMessageRequestMessage(param1)

    def deserializeAs_LivingObjectMessageRequestMessage(self, param1):
        _loc4_ = None
        self._msgIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_utf()
            self.parameters.append(_loc4_)
            _loc3_ += 1
        self._livingObjectFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_LivingObjectMessageRequestMessage(param1)

    def deserializeAsyncAs_LivingObjectMessageRequestMessage(self, param1):
        param1.add_child(self._msgIdFunc)
        self._parameterstree = param1.add_child(self._parameterstreeFunc)
        param1.add_child(self._livingObjectFunc)

    def _msgIdFunc(self, param1):
        self.msgId = param1.read_var_uh_short()
        if self.msgId < 0:
            raise RuntimeError("Forbidden value (" + str(self.msgId) + ") on element of LivingObjectMessageRequestMessage.msgId.")

    def _parameterstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._parameterstree.add_child(self._parametersFunc)
            _loc3_ += 1

    def _parametersFunc(self, param1):
        _loc2_ = param1.read_utf()
        self.parameters.append(_loc2_)

    def _livingObjectFunc(self, param1):
        self.livingObject = param1.read_var_uh_int()
        if self.livingObject < 0:
            raise RuntimeError("Forbidden value (" + str(self.livingObject) + ") on element of LivingObjectMessageRequestMessage.livingObject.")


class MimicryObjectEraseRequestMessage(NetworkMessage):
    protocolId = 6457

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.hostUID = 0
        self.hostPos = 0

    def getMessageId(self):
        return 6457

    def initMimicryObjectEraseRequestMessage(self, param1=0, param2=0):
        self.hostUID = param1
        self.hostPos = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.hostUID = 0
        self.hostPos = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MimicryObjectEraseRequestMessage(param1)

    def serializeAs_MimicryObjectEraseRequestMessage(self, param1):
        if self.hostUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.hostUID) + ") on element hostUID.")
        param1.write_var_int(self.hostUID)
        if self.hostPos < 0 or self.hostPos > 255:
            raise RuntimeError("Forbidden value (" + str(self.hostPos) + ") on element hostPos.")
        param1.write_byte(self.hostPos)

    def deserialize(self, param1):
        self.deserializeAs_MimicryObjectEraseRequestMessage(param1)

    def deserializeAs_MimicryObjectEraseRequestMessage(self, param1):
        self._hostUIDFunc(param1)
        self._hostPosFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MimicryObjectEraseRequestMessage(param1)

    def deserializeAsyncAs_MimicryObjectEraseRequestMessage(self, param1):
        param1.add_child(self._hostUIDFunc)
        param1.add_child(self._hostPosFunc)

    def _hostUIDFunc(self, param1):
        self.hostUID = param1.read_var_uh_int()
        if self.hostUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.hostUID) + ") on element of MimicryObjectEraseRequestMessage.hostUID.")

    def _hostPosFunc(self, param1):
        self.hostPos = param1.read_unsigned_byte()
        if self.hostPos < 0 or self.hostPos > 255:
            raise RuntimeError("Forbidden value (" + str(self.hostPos) + ") on element of MimicryObjectEraseRequestMessage.hostPos.")


class MimicryObjectPreviewMessage(NetworkMessage):
    protocolId = 6458

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.result = ObjectItem()
        self._resulttree = FuncTree()

    def getMessageId(self):
        return 6458

    def initMimicryObjectPreviewMessage(self, param1=None):
        self.result = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.result = ObjectItem()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MimicryObjectPreviewMessage(param1)

    def serializeAs_MimicryObjectPreviewMessage(self, param1):
        self.result.serializeAs_ObjectItem(param1)

    def deserialize(self, param1):
        self.deserializeAs_MimicryObjectPreviewMessage(param1)

    def deserializeAs_MimicryObjectPreviewMessage(self, param1):
        self.result = ObjectItem()
        self.result.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MimicryObjectPreviewMessage(param1)

    def deserializeAsyncAs_MimicryObjectPreviewMessage(self, param1):
        self._resulttree = param1.add_child(self._resulttreeFunc)

    def _resulttreeFunc(self, param1):
        self.result = ObjectItem()
        self.result.deserializeAsync(self._resulttree)


class ObjectAddedMessage(NetworkMessage):
    protocolId = 3025

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.object = ObjectItem()
        self._objecttree = FuncTree()

    def getMessageId(self):
        return 3025

    def initObjectAddedMessage(self, param1=None):
        self.object = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.object = ObjectItem()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObjectAddedMessage(param1)

    def serializeAs_ObjectAddedMessage(self, param1):
        self.object.serializeAs_ObjectItem(param1)

    def deserialize(self, param1):
        self.deserializeAs_ObjectAddedMessage(param1)

    def deserializeAs_ObjectAddedMessage(self, param1):
        self.object = ObjectItem()
        self.object.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObjectAddedMessage(param1)

    def deserializeAsyncAs_ObjectAddedMessage(self, param1):
        self._objecttree = param1.add_child(self._objecttreeFunc)

    def _objecttreeFunc(self, param1):
        self.object = ObjectItem()
        self.object.deserializeAsync(self._objecttree)


class ObjectDeletedMessage(NetworkMessage):
    protocolId = 3024

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectUID = 0

    def getMessageId(self):
        return 3024

    def initObjectDeletedMessage(self, param1=0):
        self.objectUID = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.objectUID = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObjectDeletedMessage(param1)

    def serializeAs_ObjectDeletedMessage(self, param1):
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element objectUID.")
        param1.write_var_int(self.objectUID)

    def deserialize(self, param1):
        self.deserializeAs_ObjectDeletedMessage(param1)

    def deserializeAs_ObjectDeletedMessage(self, param1):
        self._objectUIDFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObjectDeletedMessage(param1)

    def deserializeAsyncAs_ObjectDeletedMessage(self, param1):
        param1.add_child(self._objectUIDFunc)

    def _objectUIDFunc(self, param1):
        self.objectUID = param1.read_var_uh_int()
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element of ObjectDeletedMessage.objectUID.")


class ObjectDeleteMessage(NetworkMessage):
    protocolId = 3022

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectUID = 0
        self.quantity = 0

    def getMessageId(self):
        return 3022

    def initObjectDeleteMessage(self, param1=0, param2=0):
        self.objectUID = param1
        self.quantity = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.objectUID = 0
        self.quantity = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObjectDeleteMessage(param1)

    def serializeAs_ObjectDeleteMessage(self, param1):
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element objectUID.")
        param1.write_var_int(self.objectUID)
        if self.quantity < 0:
            raise RuntimeError("Forbidden value (" + str(self.quantity) + ") on element quantity.")
        param1.write_var_int(self.quantity)

    def deserialize(self, param1):
        self.deserializeAs_ObjectDeleteMessage(param1)

    def deserializeAs_ObjectDeleteMessage(self, param1):
        self._objectUIDFunc(param1)
        self._quantityFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObjectDeleteMessage(param1)

    def deserializeAsyncAs_ObjectDeleteMessage(self, param1):
        param1.add_child(self._objectUIDFunc)
        param1.add_child(self._quantityFunc)

    def _objectUIDFunc(self, param1):
        self.objectUID = param1.read_var_uh_int()
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element of ObjectDeleteMessage.objectUID.")

    def _quantityFunc(self, param1):
        self.quantity = param1.read_var_uh_int()
        if self.quantity < 0:
            raise RuntimeError("Forbidden value (" + str(self.quantity) + ") on element of ObjectDeleteMessage.quantity.")


class ObjectDropMessage(NetworkMessage):
    protocolId = 3005

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectUID = 0
        self.quantity = 0

    def getMessageId(self):
        return 3005

    def initObjectDropMessage(self, param1=0, param2=0):
        self.objectUID = param1
        self.quantity = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.objectUID = 0
        self.quantity = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObjectDropMessage(param1)

    def serializeAs_ObjectDropMessage(self, param1):
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element objectUID.")
        param1.write_var_int(self.objectUID)
        if self.quantity < 0:
            raise RuntimeError("Forbidden value (" + str(self.quantity) + ") on element quantity.")
        param1.write_var_int(self.quantity)

    def deserialize(self, param1):
        self.deserializeAs_ObjectDropMessage(param1)

    def deserializeAs_ObjectDropMessage(self, param1):
        self._objectUIDFunc(param1)
        self._quantityFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObjectDropMessage(param1)

    def deserializeAsyncAs_ObjectDropMessage(self, param1):
        param1.add_child(self._objectUIDFunc)
        param1.add_child(self._quantityFunc)

    def _objectUIDFunc(self, param1):
        self.objectUID = param1.read_var_uh_int()
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element of ObjectDropMessage.objectUID.")

    def _quantityFunc(self, param1):
        self.quantity = param1.read_var_uh_int()
        if self.quantity < 0:
            raise RuntimeError("Forbidden value (" + str(self.quantity) + ") on element of ObjectDropMessage.quantity.")


class ObjectErrorMessage(NetworkMessage):
    protocolId = 3004

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reason = 0

    def getMessageId(self):
        return 3004

    def initObjectErrorMessage(self, param1=0):
        self.reason = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.reason = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObjectErrorMessage(param1)

    def serializeAs_ObjectErrorMessage(self, param1):
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_ObjectErrorMessage(param1)

    def deserializeAs_ObjectErrorMessage(self, param1):
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObjectErrorMessage(param1)

    def deserializeAsyncAs_ObjectErrorMessage(self, param1):
        param1.add_child(self._reasonFunc)

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()


class ObjectFeedMessage(NetworkMessage):
    protocolId = 6290

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectUID = 0
        self.foodUID = 0
        self.foodQuantity = 0

    def getMessageId(self):
        return 6290

    def initObjectFeedMessage(self, param1=0, param2=0, param3=0):
        self.objectUID = param1
        self.foodUID = param2
        self.foodQuantity = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.objectUID = 0
        self.foodUID = 0
        self.foodQuantity = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObjectFeedMessage(param1)

    def serializeAs_ObjectFeedMessage(self, param1):
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element objectUID.")
        param1.write_var_int(self.objectUID)
        if self.foodUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.foodUID) + ") on element foodUID.")
        param1.write_var_int(self.foodUID)
        if self.foodQuantity < 0:
            raise RuntimeError("Forbidden value (" + str(self.foodQuantity) + ") on element foodQuantity.")
        param1.write_var_int(self.foodQuantity)

    def deserialize(self, param1):
        self.deserializeAs_ObjectFeedMessage(param1)

    def deserializeAs_ObjectFeedMessage(self, param1):
        self._objectUIDFunc(param1)
        self._foodUIDFunc(param1)
        self._foodQuantityFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObjectFeedMessage(param1)

    def deserializeAsyncAs_ObjectFeedMessage(self, param1):
        param1.add_child(self._objectUIDFunc)
        param1.add_child(self._foodUIDFunc)
        param1.add_child(self._foodQuantityFunc)

    def _objectUIDFunc(self, param1):
        self.objectUID = param1.read_var_uh_int()
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element of ObjectFeedMessage.objectUID.")

    def _foodUIDFunc(self, param1):
        self.foodUID = param1.read_var_uh_int()
        if self.foodUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.foodUID) + ") on element of ObjectFeedMessage.foodUID.")

    def _foodQuantityFunc(self, param1):
        self.foodQuantity = param1.read_var_uh_int()
        if self.foodQuantity < 0:
            raise RuntimeError("Forbidden value (" + str(self.foodQuantity) + ") on element of ObjectFeedMessage.foodQuantity.")


class ObjectJobAddedMessage(NetworkMessage):
    protocolId = 6014

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.jobId = 0

    def getMessageId(self):
        return 6014

    def initObjectJobAddedMessage(self, param1=0):
        self.jobId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.jobId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObjectJobAddedMessage(param1)

    def serializeAs_ObjectJobAddedMessage(self, param1):
        if self.jobId < 0:
            raise RuntimeError("Forbidden value (" + str(self.jobId) + ") on element jobId.")
        param1.write_byte(self.jobId)

    def deserialize(self, param1):
        self.deserializeAs_ObjectJobAddedMessage(param1)

    def deserializeAs_ObjectJobAddedMessage(self, param1):
        self._jobIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObjectJobAddedMessage(param1)

    def deserializeAsyncAs_ObjectJobAddedMessage(self, param1):
        param1.add_child(self._jobIdFunc)

    def _jobIdFunc(self, param1):
        self.jobId = param1.read_byte()
        if self.jobId < 0:
            raise RuntimeError("Forbidden value (" + str(self.jobId) + ") on element of ObjectJobAddedMessage.jobId.")


class ObjectModifiedMessage(NetworkMessage):
    protocolId = 3029

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.object = ObjectItem()
        self._objecttree = FuncTree()

    def getMessageId(self):
        return 3029

    def initObjectModifiedMessage(self, param1=None):
        self.object = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.object = ObjectItem()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObjectModifiedMessage(param1)

    def serializeAs_ObjectModifiedMessage(self, param1):
        self.object.serializeAs_ObjectItem(param1)

    def deserialize(self, param1):
        self.deserializeAs_ObjectModifiedMessage(param1)

    def deserializeAs_ObjectModifiedMessage(self, param1):
        self.object = ObjectItem()
        self.object.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObjectModifiedMessage(param1)

    def deserializeAsyncAs_ObjectModifiedMessage(self, param1):
        self._objecttree = param1.add_child(self._objecttreeFunc)

    def _objecttreeFunc(self, param1):
        self.object = ObjectItem()
        self.object.deserializeAsync(self._objecttree)


class ObjectMovementMessage(NetworkMessage):
    protocolId = 3010

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectUID = 0
        self.position = 63

    def getMessageId(self):
        return 3010

    def initObjectMovementMessage(self, param1=0, param2=63):
        self.objectUID = param1
        self.position = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.objectUID = 0
        self.position = 63
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObjectMovementMessage(param1)

    def serializeAs_ObjectMovementMessage(self, param1):
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element objectUID.")
        param1.write_var_int(self.objectUID)
        param1.write_byte(self.position)

    def deserialize(self, param1):
        self.deserializeAs_ObjectMovementMessage(param1)

    def deserializeAs_ObjectMovementMessage(self, param1):
        self._objectUIDFunc(param1)
        self._positionFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObjectMovementMessage(param1)

    def deserializeAsyncAs_ObjectMovementMessage(self, param1):
        param1.add_child(self._objectUIDFunc)
        param1.add_child(self._positionFunc)

    def _objectUIDFunc(self, param1):
        self.objectUID = param1.read_var_uh_int()
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element of ObjectMovementMessage.objectUID.")

    def _positionFunc(self, param1):
        self.position = param1.read_unsigned_byte()
        if self.position < 0 or self.position > 255:
            raise RuntimeError("Forbidden value (" + str(self.position) + ") on element of ObjectMovementMessage.position.")


class ObjectQuantityMessage(NetworkMessage):
    protocolId = 3023

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectUID = 0
        self.quantity = 0

    def getMessageId(self):
        return 3023

    def initObjectQuantityMessage(self, param1=0, param2=0):
        self.objectUID = param1
        self.quantity = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.objectUID = 0
        self.quantity = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObjectQuantityMessage(param1)

    def serializeAs_ObjectQuantityMessage(self, param1):
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element objectUID.")
        param1.write_var_int(self.objectUID)
        if self.quantity < 0:
            raise RuntimeError("Forbidden value (" + str(self.quantity) + ") on element quantity.")
        param1.write_var_int(self.quantity)

    def deserialize(self, param1):
        self.deserializeAs_ObjectQuantityMessage(param1)

    def deserializeAs_ObjectQuantityMessage(self, param1):
        self._objectUIDFunc(param1)
        self._quantityFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObjectQuantityMessage(param1)

    def deserializeAsyncAs_ObjectQuantityMessage(self, param1):
        param1.add_child(self._objectUIDFunc)
        param1.add_child(self._quantityFunc)

    def _objectUIDFunc(self, param1):
        self.objectUID = param1.read_var_uh_int()
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element of ObjectQuantityMessage.objectUID.")

    def _quantityFunc(self, param1):
        self.quantity = param1.read_var_uh_int()
        if self.quantity < 0:
            raise RuntimeError("Forbidden value (" + str(self.quantity) + ") on element of ObjectQuantityMessage.quantity.")


class ObjectsAddedMessage(NetworkMessage):
    protocolId = 6033

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.object = []
        self._objecttree = FuncTree()

    def getMessageId(self):
        return 6033

    def initObjectsAddedMessage(self, param1=[]):
        self.object = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.object = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObjectsAddedMessage(param1)

    def serializeAs_ObjectsAddedMessage(self, param1):
        param1.write_short(len(self.object))
        _loc2_ = 0
        while _loc2_ < len(self.object):
            as_parent(self.object[_loc2_], ObjectItem).serializeAs_ObjectItem(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ObjectsAddedMessage(param1)

    def deserializeAs_ObjectsAddedMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = ObjectItem()
            _loc4_.deserialize(param1)
            self.object.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObjectsAddedMessage(param1)

    def deserializeAsyncAs_ObjectsAddedMessage(self, param1):
        self._objecttree = param1.add_child(self._objecttreeFunc)

    def _objecttreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._objecttree.add_child(self._objectFunc)
            _loc3_ += 1

    def _objectFunc(self, param1):
        _loc2_ = ObjectItem()
        _loc2_.deserialize(param1)
        self.object.append(_loc2_)


class ObjectsDeletedMessage(NetworkMessage):
    protocolId = 6034

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectUID = []
        self._objectUIDtree = FuncTree()

    def getMessageId(self):
        return 6034

    def initObjectsDeletedMessage(self, param1=[]):
        self.objectUID = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.objectUID = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObjectsDeletedMessage(param1)

    def serializeAs_ObjectsDeletedMessage(self, param1):
        param1.write_short(len(self.objectUID))
        _loc2_ = 0
        while _loc2_ < len(self.objectUID):
            if self.objectUID[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.objectUID[_loc2_]) + ") on element 1 (starting at 1) of objectUID.")
            param1.write_var_int(self.objectUID[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ObjectsDeletedMessage(param1)

    def deserializeAs_ObjectsDeletedMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_uh_int()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of objectUID.")
            self.objectUID.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObjectsDeletedMessage(param1)

    def deserializeAsyncAs_ObjectsDeletedMessage(self, param1):
        self._objectUIDtree = param1.add_child(self._objectUIDtreeFunc)

    def _objectUIDtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._objectUIDtree.add_child(self._objectUIDFunc)
            _loc3_ += 1

    def _objectUIDFunc(self, param1):
        _loc2_ = param1.read_var_uh_int()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of objectUID.")
        self.objectUID.append(_loc2_)


class ObjectSetPositionMessage(NetworkMessage):
    protocolId = 3021

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectUID = 0
        self.position = 63
        self.quantity = 0

    def getMessageId(self):
        return 3021

    def initObjectSetPositionMessage(self, param1=0, param2=63, param3=0):
        self.objectUID = param1
        self.position = param2
        self.quantity = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.objectUID = 0
        self.position = 63
        self.quantity = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObjectSetPositionMessage(param1)

    def serializeAs_ObjectSetPositionMessage(self, param1):
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element objectUID.")
        param1.write_var_int(self.objectUID)
        param1.write_byte(self.position)
        if self.quantity < 0:
            raise RuntimeError("Forbidden value (" + str(self.quantity) + ") on element quantity.")
        param1.write_var_int(self.quantity)

    def deserialize(self, param1):
        self.deserializeAs_ObjectSetPositionMessage(param1)

    def deserializeAs_ObjectSetPositionMessage(self, param1):
        self._objectUIDFunc(param1)
        self._positionFunc(param1)
        self._quantityFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObjectSetPositionMessage(param1)

    def deserializeAsyncAs_ObjectSetPositionMessage(self, param1):
        param1.add_child(self._objectUIDFunc)
        param1.add_child(self._positionFunc)
        param1.add_child(self._quantityFunc)

    def _objectUIDFunc(self, param1):
        self.objectUID = param1.read_var_uh_int()
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element of ObjectSetPositionMessage.objectUID.")

    def _positionFunc(self, param1):
        self.position = param1.read_unsigned_byte()
        if self.position < 0 or self.position > 255:
            raise RuntimeError("Forbidden value (" + str(self.position) + ") on element of ObjectSetPositionMessage.position.")

    def _quantityFunc(self, param1):
        self.quantity = param1.read_var_uh_int()
        if self.quantity < 0:
            raise RuntimeError("Forbidden value (" + str(self.quantity) + ") on element of ObjectSetPositionMessage.quantity.")


class ObjectsQuantityMessage(NetworkMessage):
    protocolId = 6206

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectsUIDAndQty = []
        self._objectsUIDAndQtytree = FuncTree()

    def getMessageId(self):
        return 6206

    def initObjectsQuantityMessage(self, param1=[]):
        self.objectsUIDAndQty = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.objectsUIDAndQty = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObjectsQuantityMessage(param1)

    def serializeAs_ObjectsQuantityMessage(self, param1):
        param1.write_short(len(self.objectsUIDAndQty))
        _loc2_ = 0
        while _loc2_ < len(self.objectsUIDAndQty):
            as_parent(self.objectsUIDAndQty[_loc2_], ObjectItemQuantity).serializeAs_ObjectItemQuantity(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ObjectsQuantityMessage(param1)

    def deserializeAs_ObjectsQuantityMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = ObjectItemQuantity()
            _loc4_.deserialize(param1)
            self.objectsUIDAndQty.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObjectsQuantityMessage(param1)

    def deserializeAsyncAs_ObjectsQuantityMessage(self, param1):
        self._objectsUIDAndQtytree = param1.add_child(self._objectsUIDAndQtytreeFunc)

    def _objectsUIDAndQtytreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._objectsUIDAndQtytree.add_child(self._objectsUIDAndQtyFunc)
            _loc3_ += 1

    def _objectsUIDAndQtyFunc(self, param1):
        _loc2_ = ObjectItemQuantity()
        _loc2_.deserialize(param1)
        self.objectsUIDAndQty.append(_loc2_)


class ObjectUseMessage(NetworkMessage):
    protocolId = 3019

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectUID = 0

    def getMessageId(self):
        return 3019

    def initObjectUseMessage(self, param1=0):
        self.objectUID = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.objectUID = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObjectUseMessage(param1)

    def serializeAs_ObjectUseMessage(self, param1):
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element objectUID.")
        param1.write_var_int(self.objectUID)

    def deserialize(self, param1):
        self.deserializeAs_ObjectUseMessage(param1)

    def deserializeAs_ObjectUseMessage(self, param1):
        self._objectUIDFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObjectUseMessage(param1)

    def deserializeAsyncAs_ObjectUseMessage(self, param1):
        param1.add_child(self._objectUIDFunc)

    def _objectUIDFunc(self, param1):
        self.objectUID = param1.read_var_uh_int()
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element of ObjectUseMessage.objectUID.")


class ObtainedItemMessage(NetworkMessage):
    protocolId = 6519

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.genericId = 0
        self.baseQuantity = 0

    def getMessageId(self):
        return 6519

    def initObtainedItemMessage(self, param1=0, param2=0):
        self.genericId = param1
        self.baseQuantity = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.genericId = 0
        self.baseQuantity = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObtainedItemMessage(param1)

    def serializeAs_ObtainedItemMessage(self, param1):
        if self.genericId < 0:
            raise RuntimeError("Forbidden value (" + str(self.genericId) + ") on element genericId.")
        param1.write_var_short(self.genericId)
        if self.baseQuantity < 0:
            raise RuntimeError("Forbidden value (" + str(self.baseQuantity) + ") on element baseQuantity.")
        param1.write_var_int(self.baseQuantity)

    def deserialize(self, param1):
        self.deserializeAs_ObtainedItemMessage(param1)

    def deserializeAs_ObtainedItemMessage(self, param1):
        self._genericIdFunc(param1)
        self._baseQuantityFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObtainedItemMessage(param1)

    def deserializeAsyncAs_ObtainedItemMessage(self, param1):
        param1.add_child(self._genericIdFunc)
        param1.add_child(self._baseQuantityFunc)

    def _genericIdFunc(self, param1):
        self.genericId = param1.read_var_uh_short()
        if self.genericId < 0:
            raise RuntimeError("Forbidden value (" + str(self.genericId) + ") on element of ObtainedItemMessage.genericId.")

    def _baseQuantityFunc(self, param1):
        self.baseQuantity = param1.read_var_uh_int()
        if self.baseQuantity < 0:
            raise RuntimeError("Forbidden value (" + str(self.baseQuantity) + ") on element of ObtainedItemMessage.baseQuantity.")


class SetUpdateMessage(NetworkMessage):
    protocolId = 5503

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.setId = 0
        self.setObjects = []
        self.setEffects = []
        self._setObjectstree = FuncTree()
        self._setEffectstree = FuncTree()

    def getMessageId(self):
        return 5503

    def initSetUpdateMessage(self, param1=0, param2=[], param3=[]):
        self.setId = param1
        self.setObjects = param2
        self.setEffects = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.setId = 0
        self.setObjects = []
        self.setEffects = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SetUpdateMessage(param1)

    def serializeAs_SetUpdateMessage(self, param1):
        if self.setId < 0:
            raise RuntimeError("Forbidden value (" + str(self.setId) + ") on element setId.")
        param1.write_var_short(self.setId)
        param1.write_short(len(self.setObjects))
        _loc2_ = 0
        while _loc2_ < len(self.setObjects):
            if self.setObjects[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.setObjects[_loc2_]) + ") on element 2 (starting at 1) of setObjects.")
            param1.write_var_short(self.setObjects[_loc2_])
            _loc2_ += 1
        param1.write_short(len(self.setEffects))
        _loc3_ = 0
        while _loc3_ < len(self.setEffects):
            param1.write_short(as_parent(self.setEffects[_loc3_], ObjectEffect).getTypeId())
            as_parent(self.setEffects[_loc3_], ObjectEffect).serialize(param1)
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_SetUpdateMessage(param1)

    def deserializeAs_SetUpdateMessage(self, param1):
        _loc6_ = 0
        _loc7_ = 0
        _loc8_ = None
        self._setIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = param1.read_var_uh_short()
            if _loc6_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc6_) + ") on elements of setObjects.")
            self.setObjects.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = param1.read_unsigned_short()
            _loc8_ = ProtocolTypeManager.get_instance(ObjectEffect,_loc7_)
            _loc8_.deserialize(param1)
            self.setEffects.append(_loc8_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SetUpdateMessage(param1)

    def deserializeAsyncAs_SetUpdateMessage(self, param1):
        param1.add_child(self._setIdFunc)
        self._setObjectstree = param1.add_child(self._setObjectstreeFunc)
        self._setEffectstree = param1.add_child(self._setEffectstreeFunc)

    def _setIdFunc(self, param1):
        self.setId = param1.read_var_uh_short()
        if self.setId < 0:
            raise RuntimeError("Forbidden value (" + str(self.setId) + ") on element of SetUpdateMessage.setId.")

    def _setObjectstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._setObjectstree.add_child(self._setObjectsFunc)
            _loc3_ += 1

    def _setObjectsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of setObjects.")
        self.setObjects.append(_loc2_)

    def _setEffectstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._setEffectstree.add_child(self._setEffectsFunc)
            _loc3_ += 1

    def _setEffectsFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(ObjectEffect,_loc2_)
        _loc3_.deserialize(param1)
        self.setEffects.append(_loc3_)


class SymbioticObjectAssociatedMessage(NetworkMessage):
    protocolId = 6527

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.hostUID = 0

    def getMessageId(self):
        return 6527

    def initSymbioticObjectAssociatedMessage(self, param1=0):
        self.hostUID = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.hostUID = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SymbioticObjectAssociatedMessage(param1)

    def serializeAs_SymbioticObjectAssociatedMessage(self, param1):
        if self.hostUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.hostUID) + ") on element hostUID.")
        param1.write_var_int(self.hostUID)

    def deserialize(self, param1):
        self.deserializeAs_SymbioticObjectAssociatedMessage(param1)

    def deserializeAs_SymbioticObjectAssociatedMessage(self, param1):
        self._hostUIDFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SymbioticObjectAssociatedMessage(param1)

    def deserializeAsyncAs_SymbioticObjectAssociatedMessage(self, param1):
        param1.add_child(self._hostUIDFunc)

    def _hostUIDFunc(self, param1):
        self.hostUID = param1.read_var_uh_int()
        if self.hostUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.hostUID) + ") on element of SymbioticObjectAssociatedMessage.hostUID.")


class SymbioticObjectAssociateRequestMessage(NetworkMessage):
    protocolId = 6522

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.symbioteUID = 0
        self.symbiotePos = 0
        self.hostUID = 0
        self.hostPos = 0

    def getMessageId(self):
        return 6522

    def initSymbioticObjectAssociateRequestMessage(self, param1=0, param2=0, param3=0, param4=0):
        self.symbioteUID = param1
        self.symbiotePos = param2
        self.hostUID = param3
        self.hostPos = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.symbioteUID = 0
        self.symbiotePos = 0
        self.hostUID = 0
        self.hostPos = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SymbioticObjectAssociateRequestMessage(param1)

    def serializeAs_SymbioticObjectAssociateRequestMessage(self, param1):
        if self.symbioteUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.symbioteUID) + ") on element symbioteUID.")
        param1.write_var_int(self.symbioteUID)
        if self.symbiotePos < 0 or self.symbiotePos > 255:
            raise RuntimeError("Forbidden value (" + str(self.symbiotePos) + ") on element symbiotePos.")
        param1.write_byte(self.symbiotePos)
        if self.hostUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.hostUID) + ") on element hostUID.")
        param1.write_var_int(self.hostUID)
        if self.hostPos < 0 or self.hostPos > 255:
            raise RuntimeError("Forbidden value (" + str(self.hostPos) + ") on element hostPos.")
        param1.write_byte(self.hostPos)

    def deserialize(self, param1):
        self.deserializeAs_SymbioticObjectAssociateRequestMessage(param1)

    def deserializeAs_SymbioticObjectAssociateRequestMessage(self, param1):
        self._symbioteUIDFunc(param1)
        self._symbiotePosFunc(param1)
        self._hostUIDFunc(param1)
        self._hostPosFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SymbioticObjectAssociateRequestMessage(param1)

    def deserializeAsyncAs_SymbioticObjectAssociateRequestMessage(self, param1):
        param1.add_child(self._symbioteUIDFunc)
        param1.add_child(self._symbiotePosFunc)
        param1.add_child(self._hostUIDFunc)
        param1.add_child(self._hostPosFunc)

    def _symbioteUIDFunc(self, param1):
        self.symbioteUID = param1.read_var_uh_int()
        if self.symbioteUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.symbioteUID) + ") on element of SymbioticObjectAssociateRequestMessage.symbioteUID.")

    def _symbiotePosFunc(self, param1):
        self.symbiotePos = param1.read_unsigned_byte()
        if self.symbiotePos < 0 or self.symbiotePos > 255:
            raise RuntimeError("Forbidden value (" + str(self.symbiotePos) + ") on element of SymbioticObjectAssociateRequestMessage.symbiotePos.")

    def _hostUIDFunc(self, param1):
        self.hostUID = param1.read_var_uh_int()
        if self.hostUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.hostUID) + ") on element of SymbioticObjectAssociateRequestMessage.hostUID.")

    def _hostPosFunc(self, param1):
        self.hostPos = param1.read_unsigned_byte()
        if self.hostPos < 0 or self.hostPos > 255:
            raise RuntimeError("Forbidden value (" + str(self.hostPos) + ") on element of SymbioticObjectAssociateRequestMessage.hostPos.")


class WrapperObjectDissociateRequestMessage(NetworkMessage):
    protocolId = 6524

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.hostUID = 0
        self.hostPos = 0

    def getMessageId(self):
        return 6524

    def initWrapperObjectDissociateRequestMessage(self, param1=0, param2=0):
        self.hostUID = param1
        self.hostPos = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.hostUID = 0
        self.hostPos = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_WrapperObjectDissociateRequestMessage(param1)

    def serializeAs_WrapperObjectDissociateRequestMessage(self, param1):
        if self.hostUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.hostUID) + ") on element hostUID.")
        param1.write_var_int(self.hostUID)
        if self.hostPos < 0 or self.hostPos > 255:
            raise RuntimeError("Forbidden value (" + str(self.hostPos) + ") on element hostPos.")
        param1.write_byte(self.hostPos)

    def deserialize(self, param1):
        self.deserializeAs_WrapperObjectDissociateRequestMessage(param1)

    def deserializeAs_WrapperObjectDissociateRequestMessage(self, param1):
        self._hostUIDFunc(param1)
        self._hostPosFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_WrapperObjectDissociateRequestMessage(param1)

    def deserializeAsyncAs_WrapperObjectDissociateRequestMessage(self, param1):
        param1.add_child(self._hostUIDFunc)
        param1.add_child(self._hostPosFunc)

    def _hostUIDFunc(self, param1):
        self.hostUID = param1.read_var_uh_int()
        if self.hostUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.hostUID) + ") on element of WrapperObjectDissociateRequestMessage.hostUID.")

    def _hostPosFunc(self, param1):
        self.hostPos = param1.read_unsigned_byte()
        if self.hostPos < 0 or self.hostPos > 255:
            raise RuntimeError("Forbidden value (" + str(self.hostPos) + ") on element of WrapperObjectDissociateRequestMessage.hostPos.")


class IdolsPresetDeleteResultMessage(NetworkMessage):
    protocolId = 6605

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.presetId = 0
        self.code = 2

    def getMessageId(self):
        return 6605

    def initIdolsPresetDeleteResultMessage(self, param1=0, param2=2):
        self.presetId = param1
        self.code = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.presetId = 0
        self.code = 2
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IdolsPresetDeleteResultMessage(param1)

    def serializeAs_IdolsPresetDeleteResultMessage(self, param1):
        if self.presetId < 0:
            raise RuntimeError("Forbidden value (" + str(self.presetId) + ") on element presetId.")
        param1.write_byte(self.presetId)
        param1.write_byte(self.code)

    def deserialize(self, param1):
        self.deserializeAs_IdolsPresetDeleteResultMessage(param1)

    def deserializeAs_IdolsPresetDeleteResultMessage(self, param1):
        self._presetIdFunc(param1)
        self._codeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IdolsPresetDeleteResultMessage(param1)

    def deserializeAsyncAs_IdolsPresetDeleteResultMessage(self, param1):
        param1.add_child(self._presetIdFunc)
        param1.add_child(self._codeFunc)

    def _presetIdFunc(self, param1):
        self.presetId = param1.read_byte()
        if self.presetId < 0:
            raise RuntimeError("Forbidden value (" + str(self.presetId) + ") on element of IdolsPresetDeleteResultMessage.presetId.")

    def _codeFunc(self, param1):
        self.code = param1.read_byte()
        if self.code < 0:
            raise RuntimeError("Forbidden value (" + str(self.code) + ") on element of IdolsPresetDeleteResultMessage.code.")


class IdolsPresetUpdateMessage(NetworkMessage):
    protocolId = 6606

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.idolsPreset = IdolsPreset()
        self._idolsPresettree = FuncTree()

    def getMessageId(self):
        return 6606

    def initIdolsPresetUpdateMessage(self, param1=None):
        self.idolsPreset = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.idolsPreset = IdolsPreset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IdolsPresetUpdateMessage(param1)

    def serializeAs_IdolsPresetUpdateMessage(self, param1):
        self.idolsPreset.serializeAs_IdolsPreset(param1)

    def deserialize(self, param1):
        self.deserializeAs_IdolsPresetUpdateMessage(param1)

    def deserializeAs_IdolsPresetUpdateMessage(self, param1):
        self.idolsPreset = IdolsPreset()
        self.idolsPreset.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IdolsPresetUpdateMessage(param1)

    def deserializeAsyncAs_IdolsPresetUpdateMessage(self, param1):
        self._idolsPresettree = param1.add_child(self._idolsPresettreeFunc)

    def _idolsPresettreeFunc(self, param1):
        self.idolsPreset = IdolsPreset()
        self.idolsPreset.deserializeAsync(self._idolsPresettree)


class IdolsPresetUseMessage(NetworkMessage):
    protocolId = 6615

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.presetId = 0
        self.party = False

    def getMessageId(self):
        return 6615

    def initIdolsPresetUseMessage(self, param1=0, param2=False):
        self.presetId = param1
        self.party = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.presetId = 0
        self.party = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IdolsPresetUseMessage(param1)

    def serializeAs_IdolsPresetUseMessage(self, param1):
        if self.presetId < 0:
            raise RuntimeError("Forbidden value (" + str(self.presetId) + ") on element presetId.")
        param1.write_byte(self.presetId)
        param1.write_boolean(self.party)

    def deserialize(self, param1):
        self.deserializeAs_IdolsPresetUseMessage(param1)

    def deserializeAs_IdolsPresetUseMessage(self, param1):
        self._presetIdFunc(param1)
        self._partyFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IdolsPresetUseMessage(param1)

    def deserializeAsyncAs_IdolsPresetUseMessage(self, param1):
        param1.add_child(self._presetIdFunc)
        param1.add_child(self._partyFunc)

    def _presetIdFunc(self, param1):
        self.presetId = param1.read_byte()
        if self.presetId < 0:
            raise RuntimeError("Forbidden value (" + str(self.presetId) + ") on element of IdolsPresetUseMessage.presetId.")

    def _partyFunc(self, param1):
        self.party = param1.read_boolean()


class IdolsPresetUseResultMessage(NetworkMessage):
    protocolId = 6614

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.presetId = 0
        self.code = 3
        self.missingIdols = []
        self._missingIdolstree = FuncTree()

    def getMessageId(self):
        return 6614

    def initIdolsPresetUseResultMessage(self, param1=0, param2=3, param3=[]):
        self.presetId = param1
        self.code = param2
        self.missingIdols = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.presetId = 0
        self.code = 3
        self.missingIdols = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IdolsPresetUseResultMessage(param1)

    def serializeAs_IdolsPresetUseResultMessage(self, param1):
        if self.presetId < 0:
            raise RuntimeError("Forbidden value (" + str(self.presetId) + ") on element presetId.")
        param1.write_byte(self.presetId)
        param1.write_byte(self.code)
        param1.write_short(len(self.missingIdols))
        _loc2_ = 0
        while _loc2_ < len(self.missingIdols):
            if self.missingIdols[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.missingIdols[_loc2_]) + ") on element 3 (starting at 1) of missingIdols.")
            param1.write_var_short(self.missingIdols[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_IdolsPresetUseResultMessage(param1)

    def deserializeAs_IdolsPresetUseResultMessage(self, param1):
        _loc4_ = 0
        self._presetIdFunc(param1)
        self._codeFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_uh_short()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of missingIdols.")
            self.missingIdols.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IdolsPresetUseResultMessage(param1)

    def deserializeAsyncAs_IdolsPresetUseResultMessage(self, param1):
        param1.add_child(self._presetIdFunc)
        param1.add_child(self._codeFunc)
        self._missingIdolstree = param1.add_child(self._missingIdolstreeFunc)

    def _presetIdFunc(self, param1):
        self.presetId = param1.read_byte()
        if self.presetId < 0:
            raise RuntimeError("Forbidden value (" + str(self.presetId) + ") on element of IdolsPresetUseResultMessage.presetId.")

    def _codeFunc(self, param1):
        self.code = param1.read_byte()
        if self.code < 0:
            raise RuntimeError("Forbidden value (" + str(self.code) + ") on element of IdolsPresetUseResultMessage.code.")

    def _missingIdolstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._missingIdolstree.add_child(self._missingIdolsFunc)
            _loc3_ += 1

    def _missingIdolsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of missingIdols.")
        self.missingIdols.append(_loc2_)


class InventoryPresetDeleteResultMessage(NetworkMessage):
    protocolId = 6173

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.presetId = 0
        self.code = 2

    def getMessageId(self):
        return 6173

    def initInventoryPresetDeleteResultMessage(self, param1=0, param2=2):
        self.presetId = param1
        self.code = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.presetId = 0
        self.code = 2
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_InventoryPresetDeleteResultMessage(param1)

    def serializeAs_InventoryPresetDeleteResultMessage(self, param1):
        if self.presetId < 0:
            raise RuntimeError("Forbidden value (" + str(self.presetId) + ") on element presetId.")
        param1.write_byte(self.presetId)
        param1.write_byte(self.code)

    def deserialize(self, param1):
        self.deserializeAs_InventoryPresetDeleteResultMessage(param1)

    def deserializeAs_InventoryPresetDeleteResultMessage(self, param1):
        self._presetIdFunc(param1)
        self._codeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_InventoryPresetDeleteResultMessage(param1)

    def deserializeAsyncAs_InventoryPresetDeleteResultMessage(self, param1):
        param1.add_child(self._presetIdFunc)
        param1.add_child(self._codeFunc)

    def _presetIdFunc(self, param1):
        self.presetId = param1.read_byte()
        if self.presetId < 0:
            raise RuntimeError("Forbidden value (" + str(self.presetId) + ") on element of InventoryPresetDeleteResultMessage.presetId.")

    def _codeFunc(self, param1):
        self.code = param1.read_byte()
        if self.code < 0:
            raise RuntimeError("Forbidden value (" + str(self.code) + ") on element of InventoryPresetDeleteResultMessage.code.")


class InventoryPresetItemUpdateErrorMessage(NetworkMessage):
    protocolId = 6211

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.code = 1

    def getMessageId(self):
        return 6211

    def initInventoryPresetItemUpdateErrorMessage(self, param1=1):
        self.code = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.code = 1
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_InventoryPresetItemUpdateErrorMessage(param1)

    def serializeAs_InventoryPresetItemUpdateErrorMessage(self, param1):
        param1.write_byte(self.code)

    def deserialize(self, param1):
        self.deserializeAs_InventoryPresetItemUpdateErrorMessage(param1)

    def deserializeAs_InventoryPresetItemUpdateErrorMessage(self, param1):
        self._codeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_InventoryPresetItemUpdateErrorMessage(param1)

    def deserializeAsyncAs_InventoryPresetItemUpdateErrorMessage(self, param1):
        param1.add_child(self._codeFunc)

    def _codeFunc(self, param1):
        self.code = param1.read_byte()
        if self.code < 0:
            raise RuntimeError("Forbidden value (" + str(self.code) + ") on element of InventoryPresetItemUpdateErrorMessage.code.")


class InventoryPresetItemUpdateMessage(NetworkMessage):
    protocolId = 6168

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.presetId = 0
        self.presetItem = PresetItem()
        self._presetItemtree = FuncTree()

    def getMessageId(self):
        return 6168

    def initInventoryPresetItemUpdateMessage(self, param1=0, param2=None):
        self.presetId = param1
        self.presetItem = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.presetId = 0
        self.presetItem = PresetItem()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_InventoryPresetItemUpdateMessage(param1)

    def serializeAs_InventoryPresetItemUpdateMessage(self, param1):
        if self.presetId < 0:
            raise RuntimeError("Forbidden value (" + str(self.presetId) + ") on element presetId.")
        param1.write_byte(self.presetId)
        self.presetItem.serializeAs_PresetItem(param1)

    def deserialize(self, param1):
        self.deserializeAs_InventoryPresetItemUpdateMessage(param1)

    def deserializeAs_InventoryPresetItemUpdateMessage(self, param1):
        self._presetIdFunc(param1)
        self.presetItem = PresetItem()
        self.presetItem.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_InventoryPresetItemUpdateMessage(param1)

    def deserializeAsyncAs_InventoryPresetItemUpdateMessage(self, param1):
        param1.add_child(self._presetIdFunc)
        self._presetItemtree = param1.add_child(self._presetItemtreeFunc)

    def _presetIdFunc(self, param1):
        self.presetId = param1.read_byte()
        if self.presetId < 0:
            raise RuntimeError("Forbidden value (" + str(self.presetId) + ") on element of InventoryPresetItemUpdateMessage.presetId.")

    def _presetItemtreeFunc(self, param1):
        self.presetItem = PresetItem()
        self.presetItem.deserializeAsync(self._presetItemtree)


class InventoryPresetItemUpdateRequestMessage(NetworkMessage):
    protocolId = 6210

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.presetId = 0
        self.position = 63
        self.objUid = 0

    def getMessageId(self):
        return 6210

    def initInventoryPresetItemUpdateRequestMessage(self, param1=0, param2=63, param3=0):
        self.presetId = param1
        self.position = param2
        self.objUid = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.presetId = 0
        self.position = 63
        self.objUid = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_InventoryPresetItemUpdateRequestMessage(param1)

    def serializeAs_InventoryPresetItemUpdateRequestMessage(self, param1):
        if self.presetId < 0:
            raise RuntimeError("Forbidden value (" + str(self.presetId) + ") on element presetId.")
        param1.write_byte(self.presetId)
        param1.write_byte(self.position)
        if self.objUid < 0:
            raise RuntimeError("Forbidden value (" + str(self.objUid) + ") on element objUid.")
        param1.write_var_int(self.objUid)

    def deserialize(self, param1):
        self.deserializeAs_InventoryPresetItemUpdateRequestMessage(param1)

    def deserializeAs_InventoryPresetItemUpdateRequestMessage(self, param1):
        self._presetIdFunc(param1)
        self._positionFunc(param1)
        self._objUidFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_InventoryPresetItemUpdateRequestMessage(param1)

    def deserializeAsyncAs_InventoryPresetItemUpdateRequestMessage(self, param1):
        param1.add_child(self._presetIdFunc)
        param1.add_child(self._positionFunc)
        param1.add_child(self._objUidFunc)

    def _presetIdFunc(self, param1):
        self.presetId = param1.read_byte()
        if self.presetId < 0:
            raise RuntimeError("Forbidden value (" + str(self.presetId) + ") on element of InventoryPresetItemUpdateRequestMessage.presetId.")

    def _positionFunc(self, param1):
        self.position = param1.read_unsigned_byte()
        if self.position < 0 or self.position > 255:
            raise RuntimeError("Forbidden value (" + str(self.position) + ") on element of InventoryPresetItemUpdateRequestMessage.position.")

    def _objUidFunc(self, param1):
        self.objUid = param1.read_var_uh_int()
        if self.objUid < 0:
            raise RuntimeError("Forbidden value (" + str(self.objUid) + ") on element of InventoryPresetItemUpdateRequestMessage.objUid.")


class InventoryPresetUpdateMessage(NetworkMessage):
    protocolId = 6171

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.preset = Preset()
        self._presettree = FuncTree()

    def getMessageId(self):
        return 6171

    def initInventoryPresetUpdateMessage(self, param1=None):
        self.preset = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.preset = Preset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_InventoryPresetUpdateMessage(param1)

    def serializeAs_InventoryPresetUpdateMessage(self, param1):
        self.preset.serializeAs_Preset(param1)

    def deserialize(self, param1):
        self.deserializeAs_InventoryPresetUpdateMessage(param1)

    def deserializeAs_InventoryPresetUpdateMessage(self, param1):
        self.preset = Preset()
        self.preset.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_InventoryPresetUpdateMessage(param1)

    def deserializeAsyncAs_InventoryPresetUpdateMessage(self, param1):
        self._presettree = param1.add_child(self._presettreeFunc)

    def _presettreeFunc(self, param1):
        self.preset = Preset()
        self.preset.deserializeAsync(self._presettree)


class InventoryPresetUseMessage(NetworkMessage):
    protocolId = 6167

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.presetId = 0

    def getMessageId(self):
        return 6167

    def initInventoryPresetUseMessage(self, param1=0):
        self.presetId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.presetId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_InventoryPresetUseMessage(param1)

    def serializeAs_InventoryPresetUseMessage(self, param1):
        if self.presetId < 0:
            raise RuntimeError("Forbidden value (" + str(self.presetId) + ") on element presetId.")
        param1.write_byte(self.presetId)

    def deserialize(self, param1):
        self.deserializeAs_InventoryPresetUseMessage(param1)

    def deserializeAs_InventoryPresetUseMessage(self, param1):
        self._presetIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_InventoryPresetUseMessage(param1)

    def deserializeAsyncAs_InventoryPresetUseMessage(self, param1):
        param1.add_child(self._presetIdFunc)

    def _presetIdFunc(self, param1):
        self.presetId = param1.read_byte()
        if self.presetId < 0:
            raise RuntimeError("Forbidden value (" + str(self.presetId) + ") on element of InventoryPresetUseMessage.presetId.")


class InventoryPresetUseResultMessage(NetworkMessage):
    protocolId = 6163

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.presetId = 0
        self.code = 3
        self.unlinkedPosition = []
        self._unlinkedPositiontree = FuncTree()

    def getMessageId(self):
        return 6163

    def initInventoryPresetUseResultMessage(self, param1=0, param2=3, param3=[]):
        self.presetId = param1
        self.code = param2
        self.unlinkedPosition = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.presetId = 0
        self.code = 3
        self.unlinkedPosition = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_InventoryPresetUseResultMessage(param1)

    def serializeAs_InventoryPresetUseResultMessage(self, param1):
        if self.presetId < 0:
            raise RuntimeError("Forbidden value (" + str(self.presetId) + ") on element presetId.")
        param1.write_byte(self.presetId)
        param1.write_byte(self.code)
        param1.write_short(len(self.unlinkedPosition))
        _loc2_ = 0
        while _loc2_ < len(self.unlinkedPosition):
            param1.write_byte(self.unlinkedPosition[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_InventoryPresetUseResultMessage(param1)

    def deserializeAs_InventoryPresetUseResultMessage(self, param1):
        _loc4_ = 0
        self._presetIdFunc(param1)
        self._codeFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_unsigned_byte()
            if _loc4_ < 0 or _loc4_ > 255:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of unlinkedPosition.")
            self.unlinkedPosition.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_InventoryPresetUseResultMessage(param1)

    def deserializeAsyncAs_InventoryPresetUseResultMessage(self, param1):
        param1.add_child(self._presetIdFunc)
        param1.add_child(self._codeFunc)
        self._unlinkedPositiontree = param1.add_child(self._unlinkedPositiontreeFunc)

    def _presetIdFunc(self, param1):
        self.presetId = param1.read_byte()
        if self.presetId < 0:
            raise RuntimeError("Forbidden value (" + str(self.presetId) + ") on element of InventoryPresetUseResultMessage.presetId.")

    def _codeFunc(self, param1):
        self.code = param1.read_byte()
        if self.code < 0:
            raise RuntimeError("Forbidden value (" + str(self.code) + ") on element of InventoryPresetUseResultMessage.code.")

    def _unlinkedPositiontreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._unlinkedPositiontree.add_child(self._unlinkedPositionFunc)
            _loc3_ += 1

    def _unlinkedPositionFunc(self, param1):
        _loc2_ = param1.read_unsigned_byte()
        if _loc2_ < 0 or _loc2_ > 255:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of unlinkedPosition.")
        self.unlinkedPosition.append(_loc2_)


class SpellListMessage(NetworkMessage):
    protocolId = 1200

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.spellPrevisualization = False
        self.spells = []
        self._spellstree = FuncTree()

    def getMessageId(self):
        return 1200

    def initSpellListMessage(self, param1=False, param2=[]):
        self.spellPrevisualization = param1
        self.spells = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.spellPrevisualization = False
        self.spells = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SpellListMessage(param1)

    def serializeAs_SpellListMessage(self, param1):
        param1.write_boolean(self.spellPrevisualization)
        param1.write_short(len(self.spells))
        _loc2_ = 0
        while _loc2_ < len(self.spells):
            as_parent(self.spells[_loc2_], SpellItem).serializeAs_SpellItem(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_SpellListMessage(param1)

    def deserializeAs_SpellListMessage(self, param1):
        _loc4_ = None
        self._spellPrevisualizationFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = SpellItem()
            _loc4_.deserialize(param1)
            self.spells.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SpellListMessage(param1)

    def deserializeAsyncAs_SpellListMessage(self, param1):
        param1.add_child(self._spellPrevisualizationFunc)
        self._spellstree = param1.add_child(self._spellstreeFunc)

    def _spellPrevisualizationFunc(self, param1):
        self.spellPrevisualization = param1.read_boolean()

    def _spellstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._spellstree.add_child(self._spellsFunc)
            _loc3_ += 1

    def _spellsFunc(self, param1):
        _loc2_ = SpellItem()
        _loc2_.deserialize(param1)
        self.spells.append(_loc2_)


class StorageKamasUpdateMessage(NetworkMessage):
    protocolId = 5645

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.kamasTotal = 0

    def getMessageId(self):
        return 5645

    def initStorageKamasUpdateMessage(self, param1=0):
        self.kamasTotal = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.kamasTotal = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_StorageKamasUpdateMessage(param1)

    def serializeAs_StorageKamasUpdateMessage(self, param1):
        if self.kamasTotal < 0 or self.kamasTotal > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.kamasTotal) + ") on element kamasTotal.")
        param1.write_var_long(self.kamasTotal)

    def deserialize(self, param1):
        self.deserializeAs_StorageKamasUpdateMessage(param1)

    def deserializeAs_StorageKamasUpdateMessage(self, param1):
        self._kamasTotalFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_StorageKamasUpdateMessage(param1)

    def deserializeAsyncAs_StorageKamasUpdateMessage(self, param1):
        param1.add_child(self._kamasTotalFunc)

    def _kamasTotalFunc(self, param1):
        self.kamasTotal = param1.read_var_uh_long()
        if self.kamasTotal < 0 or self.kamasTotal > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.kamasTotal) + ") on element of StorageKamasUpdateMessage.kamasTotal.")


class StorageObjectRemoveMessage(NetworkMessage):
    protocolId = 5648

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectUID = 0

    def getMessageId(self):
        return 5648

    def initStorageObjectRemoveMessage(self, param1=0):
        self.objectUID = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.objectUID = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_StorageObjectRemoveMessage(param1)

    def serializeAs_StorageObjectRemoveMessage(self, param1):
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element objectUID.")
        param1.write_var_int(self.objectUID)

    def deserialize(self, param1):
        self.deserializeAs_StorageObjectRemoveMessage(param1)

    def deserializeAs_StorageObjectRemoveMessage(self, param1):
        self._objectUIDFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_StorageObjectRemoveMessage(param1)

    def deserializeAsyncAs_StorageObjectRemoveMessage(self, param1):
        param1.add_child(self._objectUIDFunc)

    def _objectUIDFunc(self, param1):
        self.objectUID = param1.read_var_uh_int()
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element of StorageObjectRemoveMessage.objectUID.")


class StorageObjectsRemoveMessage(NetworkMessage):
    protocolId = 6035

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectUIDList = []
        self._objectUIDListtree = FuncTree()

    def getMessageId(self):
        return 6035

    def initStorageObjectsRemoveMessage(self, param1=[]):
        self.objectUIDList = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.objectUIDList = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_StorageObjectsRemoveMessage(param1)

    def serializeAs_StorageObjectsRemoveMessage(self, param1):
        param1.write_short(len(self.objectUIDList))
        _loc2_ = 0
        while _loc2_ < len(self.objectUIDList):
            if self.objectUIDList[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.objectUIDList[_loc2_]) + ") on element 1 (starting at 1) of objectUIDList.")
            param1.write_var_int(self.objectUIDList[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_StorageObjectsRemoveMessage(param1)

    def deserializeAs_StorageObjectsRemoveMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_uh_int()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of objectUIDList.")
            self.objectUIDList.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_StorageObjectsRemoveMessage(param1)

    def deserializeAsyncAs_StorageObjectsRemoveMessage(self, param1):
        self._objectUIDListtree = param1.add_child(self._objectUIDListtreeFunc)

    def _objectUIDListtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._objectUIDListtree.add_child(self._objectUIDListFunc)
            _loc3_ += 1

    def _objectUIDListFunc(self, param1):
        _loc2_ = param1.read_var_uh_int()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of objectUIDList.")
        self.objectUIDList.append(_loc2_)


class StorageObjectsUpdateMessage(NetworkMessage):
    protocolId = 6036

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectList = []
        self._objectListtree = FuncTree()

    def getMessageId(self):
        return 6036

    def initStorageObjectsUpdateMessage(self, param1=[]):
        self.objectList = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.objectList = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_StorageObjectsUpdateMessage(param1)

    def serializeAs_StorageObjectsUpdateMessage(self, param1):
        param1.write_short(len(self.objectList))
        _loc2_ = 0
        while _loc2_ < len(self.objectList):
            as_parent(self.objectList[_loc2_], ObjectItem).serializeAs_ObjectItem(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_StorageObjectsUpdateMessage(param1)

    def deserializeAs_StorageObjectsUpdateMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = ObjectItem()
            _loc4_.deserialize(param1)
            self.objectList.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_StorageObjectsUpdateMessage(param1)

    def deserializeAsyncAs_StorageObjectsUpdateMessage(self, param1):
        self._objectListtree = param1.add_child(self._objectListtreeFunc)

    def _objectListtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._objectListtree.add_child(self._objectListFunc)
            _loc3_ += 1

    def _objectListFunc(self, param1):
        _loc2_ = ObjectItem()
        _loc2_.deserialize(param1)
        self.objectList.append(_loc2_)


class StorageObjectUpdateMessage(NetworkMessage):
    protocolId = 5647

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.object = ObjectItem()
        self._objecttree = FuncTree()

    def getMessageId(self):
        return 5647

    def initStorageObjectUpdateMessage(self, param1=None):
        self.object = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.object = ObjectItem()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_StorageObjectUpdateMessage(param1)

    def serializeAs_StorageObjectUpdateMessage(self, param1):
        self.object.serializeAs_ObjectItem(param1)

    def deserialize(self, param1):
        self.deserializeAs_StorageObjectUpdateMessage(param1)

    def deserializeAs_StorageObjectUpdateMessage(self, param1):
        self.object = ObjectItem()
        self.object.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_StorageObjectUpdateMessage(param1)

    def deserializeAsyncAs_StorageObjectUpdateMessage(self, param1):
        self._objecttree = param1.add_child(self._objecttreeFunc)

    def _objecttreeFunc(self, param1):
        self.object = ObjectItem()
        self.object.deserializeAsync(self._objecttree)


class AccessoryPreviewErrorMessage(NetworkMessage):
    protocolId = 6521

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.error = 0

    def getMessageId(self):
        return 6521

    def initAccessoryPreviewErrorMessage(self, param1=0):
        self.error = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.error = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AccessoryPreviewErrorMessage(param1)

    def serializeAs_AccessoryPreviewErrorMessage(self, param1):
        param1.write_byte(self.error)

    def deserialize(self, param1):
        self.deserializeAs_AccessoryPreviewErrorMessage(param1)

    def deserializeAs_AccessoryPreviewErrorMessage(self, param1):
        self._errorFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AccessoryPreviewErrorMessage(param1)

    def deserializeAsyncAs_AccessoryPreviewErrorMessage(self, param1):
        param1.add_child(self._errorFunc)

    def _errorFunc(self, param1):
        self.error = param1.read_byte()
        if self.error < 0:
            raise RuntimeError("Forbidden value (" + str(self.error) + ") on element of AccessoryPreviewErrorMessage.error.")


class AccessoryPreviewMessage(NetworkMessage):
    protocolId = 6517

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.look = EntityLook()
        self._looktree = FuncTree()

    def getMessageId(self):
        return 6517

    def initAccessoryPreviewMessage(self, param1=None):
        self.look = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.look = EntityLook()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AccessoryPreviewMessage(param1)

    def serializeAs_AccessoryPreviewMessage(self, param1):
        self.look.serializeAs_EntityLook(param1)

    def deserialize(self, param1):
        self.deserializeAs_AccessoryPreviewMessage(param1)

    def deserializeAs_AccessoryPreviewMessage(self, param1):
        self.look = EntityLook()
        self.look.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AccessoryPreviewMessage(param1)

    def deserializeAsyncAs_AccessoryPreviewMessage(self, param1):
        self._looktree = param1.add_child(self._looktreeFunc)

    def _looktreeFunc(self, param1):
        self.look = EntityLook()
        self.look.deserializeAsync(self._looktree)


class AccessoryPreviewRequestMessage(NetworkMessage):
    protocolId = 6518

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.genericId = []
        self._genericIdtree = FuncTree()

    def getMessageId(self):
        return 6518

    def initAccessoryPreviewRequestMessage(self, param1=[]):
        self.genericId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.genericId = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AccessoryPreviewRequestMessage(param1)

    def serializeAs_AccessoryPreviewRequestMessage(self, param1):
        param1.write_short(len(self.genericId))
        _loc2_ = 0
        while _loc2_ < len(self.genericId):
            if self.genericId[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.genericId[_loc2_]) + ") on element 1 (starting at 1) of genericId.")
            param1.write_var_short(self.genericId[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_AccessoryPreviewRequestMessage(param1)

    def deserializeAs_AccessoryPreviewRequestMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_uh_short()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of genericId.")
            self.genericId.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AccessoryPreviewRequestMessage(param1)

    def deserializeAsyncAs_AccessoryPreviewRequestMessage(self, param1):
        self._genericIdtree = param1.add_child(self._genericIdtreeFunc)

    def _genericIdtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._genericIdtree.add_child(self._genericIdFunc)
            _loc3_ += 1

    def _genericIdFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of genericId.")
        self.genericId.append(_loc2_)


class PopupWarningMessage(NetworkMessage):
    protocolId = 6134

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.lockDuration = 0
        self.author = ""
        self.content = ""

    def getMessageId(self):
        return 6134

    def initPopupWarningMessage(self, param1=0, param2="", param3=""):
        self.lockDuration = param1
        self.author = param2
        self.content = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.lockDuration = 0
        self.author = ""
        self.content = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PopupWarningMessage(param1)

    def serializeAs_PopupWarningMessage(self, param1):
        if self.lockDuration < 0 or self.lockDuration > 255:
            raise RuntimeError("Forbidden value (" + str(self.lockDuration) + ") on element lockDuration.")
        param1.write_byte(self.lockDuration)
        param1.write_utf(self.author)
        param1.write_utf(self.content)

    def deserialize(self, param1):
        self.deserializeAs_PopupWarningMessage(param1)

    def deserializeAs_PopupWarningMessage(self, param1):
        self._lockDurationFunc(param1)
        self._authorFunc(param1)
        self._contentFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PopupWarningMessage(param1)

    def deserializeAsyncAs_PopupWarningMessage(self, param1):
        param1.add_child(self._lockDurationFunc)
        param1.add_child(self._authorFunc)
        param1.add_child(self._contentFunc)

    def _lockDurationFunc(self, param1):
        self.lockDuration = param1.read_unsigned_byte()
        if self.lockDuration < 0 or self.lockDuration > 255:
            raise RuntimeError("Forbidden value (" + str(self.lockDuration) + ") on element of PopupWarningMessage.lockDuration.")

    def _authorFunc(self, param1):
        self.author = param1.read_utf()

    def _contentFunc(self, param1):
        self.content = param1.read_utf()


class AreaFightModificatorUpdateMessage(NetworkMessage):
    protocolId = 6493

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.spellPairId = 0

    def getMessageId(self):
        return 6493

    def initAreaFightModificatorUpdateMessage(self, param1=0):
        self.spellPairId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.spellPairId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AreaFightModificatorUpdateMessage(param1)

    def serializeAs_AreaFightModificatorUpdateMessage(self, param1):
        param1.write_int(self.spellPairId)

    def deserialize(self, param1):
        self.deserializeAs_AreaFightModificatorUpdateMessage(param1)

    def deserializeAs_AreaFightModificatorUpdateMessage(self, param1):
        self._spellPairIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AreaFightModificatorUpdateMessage(param1)

    def deserializeAsyncAs_AreaFightModificatorUpdateMessage(self, param1):
        param1.add_child(self._spellPairIdFunc)

    def _spellPairIdFunc(self, param1):
        self.spellPairId = param1.read_int()


class PrismAttackRequestMessage(NetworkMessage):
    protocolId = 6042

    def getMessageId(self):
        return 6042

    def initPrismAttackRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_PrismAttackRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_PrismAttackRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_PrismAttackRequestMessage(self, param1):
        pass


class PrismFightAddedMessage(NetworkMessage):
    protocolId = 6452

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fight = PrismFightersInformation()
        self._fighttree = FuncTree()

    def getMessageId(self):
        return 6452

    def initPrismFightAddedMessage(self, param1=None):
        self.fight = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.fight = PrismFightersInformation()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PrismFightAddedMessage(param1)

    def serializeAs_PrismFightAddedMessage(self, param1):
        self.fight.serializeAs_PrismFightersInformation(param1)

    def deserialize(self, param1):
        self.deserializeAs_PrismFightAddedMessage(param1)

    def deserializeAs_PrismFightAddedMessage(self, param1):
        self.fight = PrismFightersInformation()
        self.fight.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PrismFightAddedMessage(param1)

    def deserializeAsyncAs_PrismFightAddedMessage(self, param1):
        self._fighttree = param1.add_child(self._fighttreeFunc)

    def _fighttreeFunc(self, param1):
        self.fight = PrismFightersInformation()
        self.fight.deserializeAsync(self._fighttree)


class PrismFightAttackerAddMessage(NetworkMessage):
    protocolId = 5893

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.subAreaId = 0
        self.fightId = 0
        self.attacker = CharacterMinimalPlusLookInformations()
        self._attackertree = FuncTree()

    def getMessageId(self):
        return 5893

    def initPrismFightAttackerAddMessage(self, param1=0, param2=0, param3=None):
        self.subAreaId = param1
        self.fightId = param2
        self.attacker = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.subAreaId = 0
        self.fightId = 0
        self.attacker = CharacterMinimalPlusLookInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PrismFightAttackerAddMessage(param1)

    def serializeAs_PrismFightAttackerAddMessage(self, param1):
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element subAreaId.")
        param1.write_var_short(self.subAreaId)
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element fightId.")
        param1.write_var_short(self.fightId)
        param1.write_short(self.attacker.getTypeId())
        self.attacker.serialize(param1)

    def deserialize(self, param1):
        self.deserializeAs_PrismFightAttackerAddMessage(param1)

    def deserializeAs_PrismFightAttackerAddMessage(self, param1):
        self._subAreaIdFunc(param1)
        self._fightIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        self.attacker = ProtocolTypeManager.get_instance(CharacterMinimalPlusLookInformations,_loc2_)
        self.attacker.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PrismFightAttackerAddMessage(param1)

    def deserializeAsyncAs_PrismFightAttackerAddMessage(self, param1):
        param1.add_child(self._subAreaIdFunc)
        param1.add_child(self._fightIdFunc)
        self._attackertree = param1.add_child(self._attackertreeFunc)

    def _subAreaIdFunc(self, param1):
        self.subAreaId = param1.read_var_uh_short()
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element of PrismFightAttackerAddMessage.subAreaId.")

    def _fightIdFunc(self, param1):
        self.fightId = param1.read_var_uh_short()
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element of PrismFightAttackerAddMessage.fightId.")

    def _attackertreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.attacker = ProtocolTypeManager.get_instance(CharacterMinimalPlusLookInformations,_loc2_)
        self.attacker.deserializeAsync(self._attackertree)


class PrismFightAttackerRemoveMessage(NetworkMessage):
    protocolId = 5897

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.subAreaId = 0
        self.fightId = 0
        self.fighterToRemoveId = 0

    def getMessageId(self):
        return 5897

    def initPrismFightAttackerRemoveMessage(self, param1=0, param2=0, param3=0):
        self.subAreaId = param1
        self.fightId = param2
        self.fighterToRemoveId = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.subAreaId = 0
        self.fightId = 0
        self.fighterToRemoveId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PrismFightAttackerRemoveMessage(param1)

    def serializeAs_PrismFightAttackerRemoveMessage(self, param1):
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element subAreaId.")
        param1.write_var_short(self.subAreaId)
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element fightId.")
        param1.write_var_short(self.fightId)
        if self.fighterToRemoveId < 0 or self.fighterToRemoveId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.fighterToRemoveId) + ") on element fighterToRemoveId.")
        param1.write_var_long(self.fighterToRemoveId)

    def deserialize(self, param1):
        self.deserializeAs_PrismFightAttackerRemoveMessage(param1)

    def deserializeAs_PrismFightAttackerRemoveMessage(self, param1):
        self._subAreaIdFunc(param1)
        self._fightIdFunc(param1)
        self._fighterToRemoveIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PrismFightAttackerRemoveMessage(param1)

    def deserializeAsyncAs_PrismFightAttackerRemoveMessage(self, param1):
        param1.add_child(self._subAreaIdFunc)
        param1.add_child(self._fightIdFunc)
        param1.add_child(self._fighterToRemoveIdFunc)

    def _subAreaIdFunc(self, param1):
        self.subAreaId = param1.read_var_uh_short()
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element of PrismFightAttackerRemoveMessage.subAreaId.")

    def _fightIdFunc(self, param1):
        self.fightId = param1.read_var_uh_short()
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element of PrismFightAttackerRemoveMessage.fightId.")

    def _fighterToRemoveIdFunc(self, param1):
        self.fighterToRemoveId = param1.read_var_uh_long()
        if self.fighterToRemoveId < 0 or self.fighterToRemoveId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.fighterToRemoveId) + ") on element of PrismFightAttackerRemoveMessage.fighterToRemoveId.")


class PrismFightDefenderAddMessage(NetworkMessage):
    protocolId = 5895

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.subAreaId = 0
        self.fightId = 0
        self.defender = CharacterMinimalPlusLookInformations()
        self._defendertree = FuncTree()

    def getMessageId(self):
        return 5895

    def initPrismFightDefenderAddMessage(self, param1=0, param2=0, param3=None):
        self.subAreaId = param1
        self.fightId = param2
        self.defender = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.subAreaId = 0
        self.fightId = 0
        self.defender = CharacterMinimalPlusLookInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PrismFightDefenderAddMessage(param1)

    def serializeAs_PrismFightDefenderAddMessage(self, param1):
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element subAreaId.")
        param1.write_var_short(self.subAreaId)
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element fightId.")
        param1.write_var_short(self.fightId)
        param1.write_short(self.defender.getTypeId())
        self.defender.serialize(param1)

    def deserialize(self, param1):
        self.deserializeAs_PrismFightDefenderAddMessage(param1)

    def deserializeAs_PrismFightDefenderAddMessage(self, param1):
        self._subAreaIdFunc(param1)
        self._fightIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        self.defender = ProtocolTypeManager.get_instance(CharacterMinimalPlusLookInformations,_loc2_)
        self.defender.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PrismFightDefenderAddMessage(param1)

    def deserializeAsyncAs_PrismFightDefenderAddMessage(self, param1):
        param1.add_child(self._subAreaIdFunc)
        param1.add_child(self._fightIdFunc)
        self._defendertree = param1.add_child(self._defendertreeFunc)

    def _subAreaIdFunc(self, param1):
        self.subAreaId = param1.read_var_uh_short()
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element of PrismFightDefenderAddMessage.subAreaId.")

    def _fightIdFunc(self, param1):
        self.fightId = param1.read_var_uh_short()
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element of PrismFightDefenderAddMessage.fightId.")

    def _defendertreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.defender = ProtocolTypeManager.get_instance(CharacterMinimalPlusLookInformations,_loc2_)
        self.defender.deserializeAsync(self._defendertree)


class PrismFightDefenderLeaveMessage(NetworkMessage):
    protocolId = 5892

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.subAreaId = 0
        self.fightId = 0
        self.fighterToRemoveId = 0

    def getMessageId(self):
        return 5892

    def initPrismFightDefenderLeaveMessage(self, param1=0, param2=0, param3=0):
        self.subAreaId = param1
        self.fightId = param2
        self.fighterToRemoveId = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.subAreaId = 0
        self.fightId = 0
        self.fighterToRemoveId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PrismFightDefenderLeaveMessage(param1)

    def serializeAs_PrismFightDefenderLeaveMessage(self, param1):
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element subAreaId.")
        param1.write_var_short(self.subAreaId)
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element fightId.")
        param1.write_var_short(self.fightId)
        if self.fighterToRemoveId < 0 or self.fighterToRemoveId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.fighterToRemoveId) + ") on element fighterToRemoveId.")
        param1.write_var_long(self.fighterToRemoveId)

    def deserialize(self, param1):
        self.deserializeAs_PrismFightDefenderLeaveMessage(param1)

    def deserializeAs_PrismFightDefenderLeaveMessage(self, param1):
        self._subAreaIdFunc(param1)
        self._fightIdFunc(param1)
        self._fighterToRemoveIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PrismFightDefenderLeaveMessage(param1)

    def deserializeAsyncAs_PrismFightDefenderLeaveMessage(self, param1):
        param1.add_child(self._subAreaIdFunc)
        param1.add_child(self._fightIdFunc)
        param1.add_child(self._fighterToRemoveIdFunc)

    def _subAreaIdFunc(self, param1):
        self.subAreaId = param1.read_var_uh_short()
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element of PrismFightDefenderLeaveMessage.subAreaId.")

    def _fightIdFunc(self, param1):
        self.fightId = param1.read_var_uh_short()
        if self.fightId < 0:
            raise RuntimeError("Forbidden value (" + str(self.fightId) + ") on element of PrismFightDefenderLeaveMessage.fightId.")

    def _fighterToRemoveIdFunc(self, param1):
        self.fighterToRemoveId = param1.read_var_uh_long()
        if self.fighterToRemoveId < 0 or self.fighterToRemoveId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.fighterToRemoveId) + ") on element of PrismFightDefenderLeaveMessage.fighterToRemoveId.")


class PrismFightJoinLeaveRequestMessage(NetworkMessage):
    protocolId = 5843

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.subAreaId = 0
        self.join = False

    def getMessageId(self):
        return 5843

    def initPrismFightJoinLeaveRequestMessage(self, param1=0, param2=False):
        self.subAreaId = param1
        self.join = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.subAreaId = 0
        self.join = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PrismFightJoinLeaveRequestMessage(param1)

    def serializeAs_PrismFightJoinLeaveRequestMessage(self, param1):
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element subAreaId.")
        param1.write_var_short(self.subAreaId)
        param1.write_boolean(self.join)

    def deserialize(self, param1):
        self.deserializeAs_PrismFightJoinLeaveRequestMessage(param1)

    def deserializeAs_PrismFightJoinLeaveRequestMessage(self, param1):
        self._subAreaIdFunc(param1)
        self._joinFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PrismFightJoinLeaveRequestMessage(param1)

    def deserializeAsyncAs_PrismFightJoinLeaveRequestMessage(self, param1):
        param1.add_child(self._subAreaIdFunc)
        param1.add_child(self._joinFunc)

    def _subAreaIdFunc(self, param1):
        self.subAreaId = param1.read_var_uh_short()
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element of PrismFightJoinLeaveRequestMessage.subAreaId.")

    def _joinFunc(self, param1):
        self.join = param1.read_boolean()


class PrismFightRemovedMessage(NetworkMessage):
    protocolId = 6453

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.subAreaId = 0

    def getMessageId(self):
        return 6453

    def initPrismFightRemovedMessage(self, param1=0):
        self.subAreaId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.subAreaId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PrismFightRemovedMessage(param1)

    def serializeAs_PrismFightRemovedMessage(self, param1):
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element subAreaId.")
        param1.write_var_short(self.subAreaId)

    def deserialize(self, param1):
        self.deserializeAs_PrismFightRemovedMessage(param1)

    def deserializeAs_PrismFightRemovedMessage(self, param1):
        self._subAreaIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PrismFightRemovedMessage(param1)

    def deserializeAsyncAs_PrismFightRemovedMessage(self, param1):
        param1.add_child(self._subAreaIdFunc)

    def _subAreaIdFunc(self, param1):
        self.subAreaId = param1.read_var_uh_short()
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element of PrismFightRemovedMessage.subAreaId.")


class PrismFightStateUpdateMessage(NetworkMessage):
    protocolId = 6040

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.state = 0

    def getMessageId(self):
        return 6040

    def initPrismFightStateUpdateMessage(self, param1=0):
        self.state = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.state = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PrismFightStateUpdateMessage(param1)

    def serializeAs_PrismFightStateUpdateMessage(self, param1):
        if self.state < 0:
            raise RuntimeError("Forbidden value (" + str(self.state) + ") on element state.")
        param1.write_byte(self.state)

    def deserialize(self, param1):
        self.deserializeAs_PrismFightStateUpdateMessage(param1)

    def deserializeAs_PrismFightStateUpdateMessage(self, param1):
        self._stateFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PrismFightStateUpdateMessage(param1)

    def deserializeAsyncAs_PrismFightStateUpdateMessage(self, param1):
        param1.add_child(self._stateFunc)

    def _stateFunc(self, param1):
        self.state = param1.read_byte()
        if self.state < 0:
            raise RuntimeError("Forbidden value (" + str(self.state) + ") on element of PrismFightStateUpdateMessage.state.")


class PrismFightSwapRequestMessage(NetworkMessage):
    protocolId = 5901

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.subAreaId = 0
        self.targetId = 0

    def getMessageId(self):
        return 5901

    def initPrismFightSwapRequestMessage(self, param1=0, param2=0):
        self.subAreaId = param1
        self.targetId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.subAreaId = 0
        self.targetId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PrismFightSwapRequestMessage(param1)

    def serializeAs_PrismFightSwapRequestMessage(self, param1):
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element subAreaId.")
        param1.write_var_short(self.subAreaId)
        if self.targetId < 0 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_var_long(self.targetId)

    def deserialize(self, param1):
        self.deserializeAs_PrismFightSwapRequestMessage(param1)

    def deserializeAs_PrismFightSwapRequestMessage(self, param1):
        self._subAreaIdFunc(param1)
        self._targetIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PrismFightSwapRequestMessage(param1)

    def deserializeAsyncAs_PrismFightSwapRequestMessage(self, param1):
        param1.add_child(self._subAreaIdFunc)
        param1.add_child(self._targetIdFunc)

    def _subAreaIdFunc(self, param1):
        self.subAreaId = param1.read_var_uh_short()
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element of PrismFightSwapRequestMessage.subAreaId.")

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_var_uh_long()
        if self.targetId < 0 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of PrismFightSwapRequestMessage.targetId.")


class PrismInfoCloseMessage(NetworkMessage):
    protocolId = 5853

    def getMessageId(self):
        return 5853

    def initPrismInfoCloseMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_PrismInfoCloseMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_PrismInfoCloseMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_PrismInfoCloseMessage(self, param1):
        pass


class PrismInfoInValidMessage(NetworkMessage):
    protocolId = 5859

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reason = 0

    def getMessageId(self):
        return 5859

    def initPrismInfoInValidMessage(self, param1=0):
        self.reason = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.reason = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PrismInfoInValidMessage(param1)

    def serializeAs_PrismInfoInValidMessage(self, param1):
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_PrismInfoInValidMessage(param1)

    def deserializeAs_PrismInfoInValidMessage(self, param1):
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PrismInfoInValidMessage(param1)

    def deserializeAsyncAs_PrismInfoInValidMessage(self, param1):
        param1.add_child(self._reasonFunc)

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()
        if self.reason < 0:
            raise RuntimeError("Forbidden value (" + str(self.reason) + ") on element of PrismInfoInValidMessage.reason.")


class PrismInfoJoinLeaveRequestMessage(NetworkMessage):
    protocolId = 5844

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.join = False

    def getMessageId(self):
        return 5844

    def initPrismInfoJoinLeaveRequestMessage(self, param1=False):
        self.join = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.join = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PrismInfoJoinLeaveRequestMessage(param1)

    def serializeAs_PrismInfoJoinLeaveRequestMessage(self, param1):
        param1.write_boolean(self.join)

    def deserialize(self, param1):
        self.deserializeAs_PrismInfoJoinLeaveRequestMessage(param1)

    def deserializeAs_PrismInfoJoinLeaveRequestMessage(self, param1):
        self._joinFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PrismInfoJoinLeaveRequestMessage(param1)

    def deserializeAsyncAs_PrismInfoJoinLeaveRequestMessage(self, param1):
        param1.add_child(self._joinFunc)

    def _joinFunc(self, param1):
        self.join = param1.read_boolean()


class PrismModuleExchangeRequestMessage(NetworkMessage):
    protocolId = 6531

    def getMessageId(self):
        return 6531

    def initPrismModuleExchangeRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_PrismModuleExchangeRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_PrismModuleExchangeRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_PrismModuleExchangeRequestMessage(self, param1):
        pass


class PrismSetSabotagedRefusedMessage(NetworkMessage):
    protocolId = 6466

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.subAreaId = 0
        self.reason = 0

    def getMessageId(self):
        return 6466

    def initPrismSetSabotagedRefusedMessage(self, param1=0, param2=0):
        self.subAreaId = param1
        self.reason = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.subAreaId = 0
        self.reason = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PrismSetSabotagedRefusedMessage(param1)

    def serializeAs_PrismSetSabotagedRefusedMessage(self, param1):
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element subAreaId.")
        param1.write_var_short(self.subAreaId)
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_PrismSetSabotagedRefusedMessage(param1)

    def deserializeAs_PrismSetSabotagedRefusedMessage(self, param1):
        self._subAreaIdFunc(param1)
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PrismSetSabotagedRefusedMessage(param1)

    def deserializeAsyncAs_PrismSetSabotagedRefusedMessage(self, param1):
        param1.add_child(self._subAreaIdFunc)
        param1.add_child(self._reasonFunc)

    def _subAreaIdFunc(self, param1):
        self.subAreaId = param1.read_var_uh_short()
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element of PrismSetSabotagedRefusedMessage.subAreaId.")

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()


class PrismSetSabotagedRequestMessage(NetworkMessage):
    protocolId = 6468

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.subAreaId = 0

    def getMessageId(self):
        return 6468

    def initPrismSetSabotagedRequestMessage(self, param1=0):
        self.subAreaId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.subAreaId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PrismSetSabotagedRequestMessage(param1)

    def serializeAs_PrismSetSabotagedRequestMessage(self, param1):
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element subAreaId.")
        param1.write_var_short(self.subAreaId)

    def deserialize(self, param1):
        self.deserializeAs_PrismSetSabotagedRequestMessage(param1)

    def deserializeAs_PrismSetSabotagedRequestMessage(self, param1):
        self._subAreaIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PrismSetSabotagedRequestMessage(param1)

    def deserializeAsyncAs_PrismSetSabotagedRequestMessage(self, param1):
        param1.add_child(self._subAreaIdFunc)

    def _subAreaIdFunc(self, param1):
        self.subAreaId = param1.read_var_uh_short()
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element of PrismSetSabotagedRequestMessage.subAreaId.")


class PrismSettingsErrorMessage(NetworkMessage):
    protocolId = 6442

    def getMessageId(self):
        return 6442

    def initPrismSettingsErrorMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_PrismSettingsErrorMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_PrismSettingsErrorMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_PrismSettingsErrorMessage(self, param1):
        pass


class PrismSettingsRequestMessage(NetworkMessage):
    protocolId = 6437

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.subAreaId = 0
        self.startDefenseTime = 0

    def getMessageId(self):
        return 6437

    def initPrismSettingsRequestMessage(self, param1=0, param2=0):
        self.subAreaId = param1
        self.startDefenseTime = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.subAreaId = 0
        self.startDefenseTime = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PrismSettingsRequestMessage(param1)

    def serializeAs_PrismSettingsRequestMessage(self, param1):
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element subAreaId.")
        param1.write_var_short(self.subAreaId)
        if self.startDefenseTime < 0:
            raise RuntimeError("Forbidden value (" + str(self.startDefenseTime) + ") on element startDefenseTime.")
        param1.write_byte(self.startDefenseTime)

    def deserialize(self, param1):
        self.deserializeAs_PrismSettingsRequestMessage(param1)

    def deserializeAs_PrismSettingsRequestMessage(self, param1):
        self._subAreaIdFunc(param1)
        self._startDefenseTimeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PrismSettingsRequestMessage(param1)

    def deserializeAsyncAs_PrismSettingsRequestMessage(self, param1):
        param1.add_child(self._subAreaIdFunc)
        param1.add_child(self._startDefenseTimeFunc)

    def _subAreaIdFunc(self, param1):
        self.subAreaId = param1.read_var_uh_short()
        if self.subAreaId < 0:
            raise RuntimeError("Forbidden value (" + str(self.subAreaId) + ") on element of PrismSettingsRequestMessage.subAreaId.")

    def _startDefenseTimeFunc(self, param1):
        self.startDefenseTime = param1.read_byte()
        if self.startDefenseTime < 0:
            raise RuntimeError("Forbidden value (" + str(self.startDefenseTime) + ") on element of PrismSettingsRequestMessage.startDefenseTime.")


class PrismsInfoValidMessage(NetworkMessage):
    protocolId = 6451

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.fights = []
        self._fightstree = FuncTree()

    def getMessageId(self):
        return 6451

    def initPrismsInfoValidMessage(self, param1=[]):
        self.fights = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.fights = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PrismsInfoValidMessage(param1)

    def serializeAs_PrismsInfoValidMessage(self, param1):
        param1.write_short(len(self.fights))
        _loc2_ = 0
        while _loc2_ < len(self.fights):
            as_parent(self.fights[_loc2_], PrismFightersInformation).serializeAs_PrismFightersInformation(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_PrismsInfoValidMessage(param1)

    def deserializeAs_PrismsInfoValidMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = PrismFightersInformation()
            _loc4_.deserialize(param1)
            self.fights.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PrismsInfoValidMessage(param1)

    def deserializeAsyncAs_PrismsInfoValidMessage(self, param1):
        self._fightstree = param1.add_child(self._fightstreeFunc)

    def _fightstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._fightstree.add_child(self._fightsFunc)
            _loc3_ += 1

    def _fightsFunc(self, param1):
        _loc2_ = PrismFightersInformation()
        _loc2_.deserialize(param1)
        self.fights.append(_loc2_)


class PrismsListMessage(NetworkMessage):
    protocolId = 6440

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.prisms = []
        self._prismstree = FuncTree()

    def getMessageId(self):
        return 6440

    def initPrismsListMessage(self, param1=[]):
        self.prisms = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.prisms = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PrismsListMessage(param1)

    def serializeAs_PrismsListMessage(self, param1):
        param1.write_short(len(self.prisms))
        _loc2_ = 0
        while _loc2_ < len(self.prisms):
            param1.write_short(as_parent(self.prisms[_loc2_], PrismSubareaEmptyInfo).getTypeId())
            as_parent(self.prisms[_loc2_], PrismSubareaEmptyInfo).serialize(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_PrismsListMessage(param1)

    def deserializeAs_PrismsListMessage(self, param1):
        _loc4_ = 0
        _loc5_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_unsigned_short()
            _loc5_ = ProtocolTypeManager.get_instance(PrismSubareaEmptyInfo,_loc4_)
            _loc5_.deserialize(param1)
            self.prisms.append(_loc5_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PrismsListMessage(param1)

    def deserializeAsyncAs_PrismsListMessage(self, param1):
        self._prismstree = param1.add_child(self._prismstreeFunc)

    def _prismstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._prismstree.add_child(self._prismsFunc)
            _loc3_ += 1

    def _prismsFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(PrismSubareaEmptyInfo,_loc2_)
        _loc3_.deserialize(param1)
        self.prisms.append(_loc3_)


class PrismsListRegisterMessage(NetworkMessage):
    protocolId = 6441

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.listen = 0

    def getMessageId(self):
        return 6441

    def initPrismsListRegisterMessage(self, param1=0):
        self.listen = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.listen = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PrismsListRegisterMessage(param1)

    def serializeAs_PrismsListRegisterMessage(self, param1):
        param1.write_byte(self.listen)

    def deserialize(self, param1):
        self.deserializeAs_PrismsListRegisterMessage(param1)

    def deserializeAs_PrismsListRegisterMessage(self, param1):
        self._listenFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PrismsListRegisterMessage(param1)

    def deserializeAsyncAs_PrismsListRegisterMessage(self, param1):
        param1.add_child(self._listenFunc)

    def _listenFunc(self, param1):
        self.listen = param1.read_byte()
        if self.listen < 0:
            raise RuntimeError("Forbidden value (" + str(self.listen) + ") on element of PrismsListRegisterMessage.listen.")


class PrismUseRequestMessage(NetworkMessage):
    protocolId = 6041

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.moduleToUse = 0

    def getMessageId(self):
        return 6041

    def initPrismUseRequestMessage(self, param1=0):
        self.moduleToUse = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.moduleToUse = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PrismUseRequestMessage(param1)

    def serializeAs_PrismUseRequestMessage(self, param1):
        param1.write_byte(self.moduleToUse)

    def deserialize(self, param1):
        self.deserializeAs_PrismUseRequestMessage(param1)

    def deserializeAs_PrismUseRequestMessage(self, param1):
        self._moduleToUseFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PrismUseRequestMessage(param1)

    def deserializeAsyncAs_PrismUseRequestMessage(self, param1):
        param1.add_child(self._moduleToUseFunc)

    def _moduleToUseFunc(self, param1):
        self.moduleToUse = param1.read_byte()
        if self.moduleToUse < 0:
            raise RuntimeError("Forbidden value (" + str(self.moduleToUse) + ") on element of PrismUseRequestMessage.moduleToUse.")


class AlignmentRankUpdateMessage(NetworkMessage):
    protocolId = 6058

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.alignmentRank = 0
        self.verbose = False

    def getMessageId(self):
        return 6058

    def initAlignmentRankUpdateMessage(self, param1=0, param2=False):
        self.alignmentRank = param1
        self.verbose = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.alignmentRank = 0
        self.verbose = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AlignmentRankUpdateMessage(param1)

    def serializeAs_AlignmentRankUpdateMessage(self, param1):
        if self.alignmentRank < 0:
            raise RuntimeError("Forbidden value (" + str(self.alignmentRank) + ") on element alignmentRank.")
        param1.write_byte(self.alignmentRank)
        param1.write_boolean(self.verbose)

    def deserialize(self, param1):
        self.deserializeAs_AlignmentRankUpdateMessage(param1)

    def deserializeAs_AlignmentRankUpdateMessage(self, param1):
        self._alignmentRankFunc(param1)
        self._verboseFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AlignmentRankUpdateMessage(param1)

    def deserializeAsyncAs_AlignmentRankUpdateMessage(self, param1):
        param1.add_child(self._alignmentRankFunc)
        param1.add_child(self._verboseFunc)

    def _alignmentRankFunc(self, param1):
        self.alignmentRank = param1.read_byte()
        if self.alignmentRank < 0:
            raise RuntimeError("Forbidden value (" + str(self.alignmentRank) + ") on element of AlignmentRankUpdateMessage.alignmentRank.")

    def _verboseFunc(self, param1):
        self.verbose = param1.read_boolean()


class SetEnableAVARequestMessage(NetworkMessage):
    protocolId = 6443

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.enable = False

    def getMessageId(self):
        return 6443

    def initSetEnableAVARequestMessage(self, param1=False):
        self.enable = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.enable = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SetEnableAVARequestMessage(param1)

    def serializeAs_SetEnableAVARequestMessage(self, param1):
        param1.write_boolean(self.enable)

    def deserialize(self, param1):
        self.deserializeAs_SetEnableAVARequestMessage(param1)

    def deserializeAs_SetEnableAVARequestMessage(self, param1):
        self._enableFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SetEnableAVARequestMessage(param1)

    def deserializeAsyncAs_SetEnableAVARequestMessage(self, param1):
        param1.add_child(self._enableFunc)

    def _enableFunc(self, param1):
        self.enable = param1.read_boolean()


class SetEnablePVPRequestMessage(NetworkMessage):
    protocolId = 1810

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.enable = False

    def getMessageId(self):
        return 1810

    def initSetEnablePVPRequestMessage(self, param1=False):
        self.enable = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.enable = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SetEnablePVPRequestMessage(param1)

    def serializeAs_SetEnablePVPRequestMessage(self, param1):
        param1.write_boolean(self.enable)

    def deserialize(self, param1):
        self.deserializeAs_SetEnablePVPRequestMessage(param1)

    def deserializeAs_SetEnablePVPRequestMessage(self, param1):
        self._enableFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SetEnablePVPRequestMessage(param1)

    def deserializeAsyncAs_SetEnablePVPRequestMessage(self, param1):
        param1.add_child(self._enableFunc)

    def _enableFunc(self, param1):
        self.enable = param1.read_boolean()


class UpdateMapPlayersAgressableStatusMessage(NetworkMessage):
    protocolId = 6454

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.playerIds = []
        self.enable = []
        self._playerIdstree = FuncTree()
        self._enabletree = FuncTree()

    def getMessageId(self):
        return 6454

    def initUpdateMapPlayersAgressableStatusMessage(self, param1=[], param2=[]):
        self.playerIds = param1
        self.enable = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.playerIds = []
        self.enable = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_UpdateMapPlayersAgressableStatusMessage(param1)

    def serializeAs_UpdateMapPlayersAgressableStatusMessage(self, param1):
        param1.write_short(len(self.playerIds))
        _loc2_ = 0
        while _loc2_ < len(self.playerIds):
            if self.playerIds[_loc2_] < 0 or self.playerIds[_loc2_] > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(self.playerIds[_loc2_]) + ") on element 1 (starting at 1) of playerIds.")
            param1.write_var_long(self.playerIds[_loc2_])
            _loc2_ += 1
        param1.write_short(len(self.enable))
        _loc3_ = 0
        while _loc3_ < len(self.enable):
            param1.write_byte(self.enable[_loc3_])
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_UpdateMapPlayersAgressableStatusMessage(param1)

    def deserializeAs_UpdateMapPlayersAgressableStatusMessage(self, param1):
        _loc6_ = None
        _loc7_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = param1.read_var_uh_long()
            if _loc6_ < 0 or _loc6_ > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(_loc6_) + ") on elements of playerIds.")
            self.playerIds.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = param1.read_byte()
            if _loc7_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc7_) + ") on elements of enable.")
            self.enable.append(_loc7_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_UpdateMapPlayersAgressableStatusMessage(param1)

    def deserializeAsyncAs_UpdateMapPlayersAgressableStatusMessage(self, param1):
        self._playerIdstree = param1.add_child(self._playerIdstreeFunc)
        self._enabletree = param1.add_child(self._enabletreeFunc)

    def _playerIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._playerIdstree.add_child(self._playerIdsFunc)
            _loc3_ += 1

    def _playerIdsFunc(self, param1):
        _loc2_ = param1.read_var_uh_long()
        if _loc2_ < 0 or _loc2_ > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of playerIds.")
        self.playerIds.append(_loc2_)

    def _enabletreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._enabletree.add_child(self._enableFunc)
            _loc3_ += 1

    def _enableFunc(self, param1):
        _loc2_ = param1.read_byte()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of enable.")
        self.enable.append(_loc2_)


class UpdateSelfAgressableStatusMessage(NetworkMessage):
    protocolId = 6456

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.status = 0
        self.probationTime = 0

    def getMessageId(self):
        return 6456

    def initUpdateSelfAgressableStatusMessage(self, param1=0, param2=0):
        self.status = param1
        self.probationTime = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.status = 0
        self.probationTime = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_UpdateSelfAgressableStatusMessage(param1)

    def serializeAs_UpdateSelfAgressableStatusMessage(self, param1):
        param1.write_byte(self.status)
        if self.probationTime < 0:
            raise RuntimeError("Forbidden value (" + str(self.probationTime) + ") on element probationTime.")
        param1.write_int(self.probationTime)

    def deserialize(self, param1):
        self.deserializeAs_UpdateSelfAgressableStatusMessage(param1)

    def deserializeAs_UpdateSelfAgressableStatusMessage(self, param1):
        self._statusFunc(param1)
        self._probationTimeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_UpdateSelfAgressableStatusMessage(param1)

    def deserializeAsyncAs_UpdateSelfAgressableStatusMessage(self, param1):
        param1.add_child(self._statusFunc)
        param1.add_child(self._probationTimeFunc)

    def _statusFunc(self, param1):
        self.status = param1.read_byte()
        if self.status < 0:
            raise RuntimeError("Forbidden value (" + str(self.status) + ") on element of UpdateSelfAgressableStatusMessage.status.")

    def _probationTimeFunc(self, param1):
        self.probationTime = param1.read_int()
        if self.probationTime < 0:
            raise RuntimeError("Forbidden value (" + str(self.probationTime) + ") on element of UpdateSelfAgressableStatusMessage.probationTime.")


class CharacterReportMessage(NetworkMessage):
    protocolId = 6079

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reportedId = 0
        self.reason = 0

    def getMessageId(self):
        return 6079

    def initCharacterReportMessage(self, param1=0, param2=0):
        self.reportedId = param1
        self.reason = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.reportedId = 0
        self.reason = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CharacterReportMessage(param1)

    def serializeAs_CharacterReportMessage(self, param1):
        if self.reportedId < 0 or self.reportedId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.reportedId) + ") on element reportedId.")
        param1.write_var_long(self.reportedId)
        if self.reason < 0:
            raise RuntimeError("Forbidden value (" + str(self.reason) + ") on element reason.")
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_CharacterReportMessage(param1)

    def deserializeAs_CharacterReportMessage(self, param1):
        self._reportedIdFunc(param1)
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CharacterReportMessage(param1)

    def deserializeAsyncAs_CharacterReportMessage(self, param1):
        param1.add_child(self._reportedIdFunc)
        param1.add_child(self._reasonFunc)

    def _reportedIdFunc(self, param1):
        self.reportedId = param1.read_var_uh_long()
        if self.reportedId < 0 or self.reportedId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.reportedId) + ") on element of CharacterReportMessage.reportedId.")

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()
        if self.reason < 0:
            raise RuntimeError("Forbidden value (" + str(self.reason) + ") on element of CharacterReportMessage.reason.")


class CinematicMessage(NetworkMessage):
    protocolId = 6053

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.cinematicId = 0

    def getMessageId(self):
        return 6053

    def initCinematicMessage(self, param1=0):
        self.cinematicId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.cinematicId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CinematicMessage(param1)

    def serializeAs_CinematicMessage(self, param1):
        if self.cinematicId < 0:
            raise RuntimeError("Forbidden value (" + str(self.cinematicId) + ") on element cinematicId.")
        param1.write_var_short(self.cinematicId)

    def deserialize(self, param1):
        self.deserializeAs_CinematicMessage(param1)

    def deserializeAs_CinematicMessage(self, param1):
        self._cinematicIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CinematicMessage(param1)

    def deserializeAsyncAs_CinematicMessage(self, param1):
        param1.add_child(self._cinematicIdFunc)

    def _cinematicIdFunc(self, param1):
        self.cinematicId = param1.read_var_uh_short()
        if self.cinematicId < 0:
            raise RuntimeError("Forbidden value (" + str(self.cinematicId) + ") on element of CinematicMessage.cinematicId.")


class URLOpenMessage(NetworkMessage):
    protocolId = 6266

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.urlId = 0

    def getMessageId(self):
        return 6266

    def initURLOpenMessage(self, param1=0):
        self.urlId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.urlId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_URLOpenMessage(param1)

    def serializeAs_URLOpenMessage(self, param1):
        if self.urlId < 0:
            raise RuntimeError("Forbidden value (" + str(self.urlId) + ") on element urlId.")
        param1.write_byte(self.urlId)

    def deserialize(self, param1):
        self.deserializeAs_URLOpenMessage(param1)

    def deserializeAs_URLOpenMessage(self, param1):
        self._urlIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_URLOpenMessage(param1)

    def deserializeAsyncAs_URLOpenMessage(self, param1):
        param1.add_child(self._urlIdFunc)

    def _urlIdFunc(self, param1):
        self.urlId = param1.read_byte()
        if self.urlId < 0:
            raise RuntimeError("Forbidden value (" + str(self.urlId) + ") on element of URLOpenMessage.urlId.")


class ShortcutBarAddErrorMessage(NetworkMessage):
    protocolId = 6227

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.error = 0

    def getMessageId(self):
        return 6227

    def initShortcutBarAddErrorMessage(self, param1=0):
        self.error = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.error = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ShortcutBarAddErrorMessage(param1)

    def serializeAs_ShortcutBarAddErrorMessage(self, param1):
        param1.write_byte(self.error)

    def deserialize(self, param1):
        self.deserializeAs_ShortcutBarAddErrorMessage(param1)

    def deserializeAs_ShortcutBarAddErrorMessage(self, param1):
        self._errorFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ShortcutBarAddErrorMessage(param1)

    def deserializeAsyncAs_ShortcutBarAddErrorMessage(self, param1):
        param1.add_child(self._errorFunc)

    def _errorFunc(self, param1):
        self.error = param1.read_byte()
        if self.error < 0:
            raise RuntimeError("Forbidden value (" + str(self.error) + ") on element of ShortcutBarAddErrorMessage.error.")


class ShortcutBarAddRequestMessage(NetworkMessage):
    protocolId = 6225

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.barType = 0
        self.shortcut = Shortcut()
        self._shortcuttree = FuncTree()

    def getMessageId(self):
        return 6225

    def initShortcutBarAddRequestMessage(self, param1=0, param2=None):
        self.barType = param1
        self.shortcut = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.barType = 0
        self.shortcut = Shortcut()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ShortcutBarAddRequestMessage(param1)

    def serializeAs_ShortcutBarAddRequestMessage(self, param1):
        param1.write_byte(self.barType)
        param1.write_short(self.shortcut.getTypeId())
        self.shortcut.serialize(param1)

    def deserialize(self, param1):
        self.deserializeAs_ShortcutBarAddRequestMessage(param1)

    def deserializeAs_ShortcutBarAddRequestMessage(self, param1):
        self._barTypeFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        self.shortcut = ProtocolTypeManager.get_instance(Shortcut,_loc2_)
        self.shortcut.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ShortcutBarAddRequestMessage(param1)

    def deserializeAsyncAs_ShortcutBarAddRequestMessage(self, param1):
        param1.add_child(self._barTypeFunc)
        self._shortcuttree = param1.add_child(self._shortcuttreeFunc)

    def _barTypeFunc(self, param1):
        self.barType = param1.read_byte()
        if self.barType < 0:
            raise RuntimeError("Forbidden value (" + str(self.barType) + ") on element of ShortcutBarAddRequestMessage.barType.")

    def _shortcuttreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.shortcut = ProtocolTypeManager.get_instance(Shortcut,_loc2_)
        self.shortcut.deserializeAsync(self._shortcuttree)


class ShortcutBarContentMessage(NetworkMessage):
    protocolId = 6231

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.barType = 0
        self.shortcuts = []
        self._shortcutstree = FuncTree()

    def getMessageId(self):
        return 6231

    def initShortcutBarContentMessage(self, param1=0, param2=[]):
        self.barType = param1
        self.shortcuts = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.barType = 0
        self.shortcuts = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ShortcutBarContentMessage(param1)

    def serializeAs_ShortcutBarContentMessage(self, param1):
        param1.write_byte(self.barType)
        param1.write_short(len(self.shortcuts))
        _loc2_ = 0
        while _loc2_ < len(self.shortcuts):
            param1.write_short(as_parent(self.shortcuts[_loc2_], Shortcut).getTypeId())
            as_parent(self.shortcuts[_loc2_], Shortcut).serialize(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ShortcutBarContentMessage(param1)

    def deserializeAs_ShortcutBarContentMessage(self, param1):
        _loc4_ = 0
        _loc5_ = None
        self._barTypeFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_unsigned_short()
            _loc5_ = ProtocolTypeManager.get_instance(Shortcut,_loc4_)
            _loc5_.deserialize(param1)
            self.shortcuts.append(_loc5_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ShortcutBarContentMessage(param1)

    def deserializeAsyncAs_ShortcutBarContentMessage(self, param1):
        param1.add_child(self._barTypeFunc)
        self._shortcutstree = param1.add_child(self._shortcutstreeFunc)

    def _barTypeFunc(self, param1):
        self.barType = param1.read_byte()
        if self.barType < 0:
            raise RuntimeError("Forbidden value (" + str(self.barType) + ") on element of ShortcutBarContentMessage.barType.")

    def _shortcutstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._shortcutstree.add_child(self._shortcutsFunc)
            _loc3_ += 1

    def _shortcutsFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(Shortcut,_loc2_)
        _loc3_.deserialize(param1)
        self.shortcuts.append(_loc3_)


class ShortcutBarRefreshMessage(NetworkMessage):
    protocolId = 6229

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.barType = 0
        self.shortcut = Shortcut()
        self._shortcuttree = FuncTree()

    def getMessageId(self):
        return 6229

    def initShortcutBarRefreshMessage(self, param1=0, param2=None):
        self.barType = param1
        self.shortcut = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.barType = 0
        self.shortcut = Shortcut()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ShortcutBarRefreshMessage(param1)

    def serializeAs_ShortcutBarRefreshMessage(self, param1):
        param1.write_byte(self.barType)
        param1.write_short(self.shortcut.getTypeId())
        self.shortcut.serialize(param1)

    def deserialize(self, param1):
        self.deserializeAs_ShortcutBarRefreshMessage(param1)

    def deserializeAs_ShortcutBarRefreshMessage(self, param1):
        self._barTypeFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        self.shortcut = ProtocolTypeManager.get_instance(Shortcut,_loc2_)
        self.shortcut.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ShortcutBarRefreshMessage(param1)

    def deserializeAsyncAs_ShortcutBarRefreshMessage(self, param1):
        param1.add_child(self._barTypeFunc)
        self._shortcuttree = param1.add_child(self._shortcuttreeFunc)

    def _barTypeFunc(self, param1):
        self.barType = param1.read_byte()
        if self.barType < 0:
            raise RuntimeError("Forbidden value (" + str(self.barType) + ") on element of ShortcutBarRefreshMessage.barType.")

    def _shortcuttreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.shortcut = ProtocolTypeManager.get_instance(Shortcut,_loc2_)
        self.shortcut.deserializeAsync(self._shortcuttree)


class ShortcutBarRemovedMessage(NetworkMessage):
    protocolId = 6224

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.barType = 0
        self.slot = 0

    def getMessageId(self):
        return 6224

    def initShortcutBarRemovedMessage(self, param1=0, param2=0):
        self.barType = param1
        self.slot = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.barType = 0
        self.slot = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ShortcutBarRemovedMessage(param1)

    def serializeAs_ShortcutBarRemovedMessage(self, param1):
        param1.write_byte(self.barType)
        if self.slot < 0 or self.slot > 99:
            raise RuntimeError("Forbidden value (" + str(self.slot) + ") on element slot.")
        param1.write_byte(self.slot)

    def deserialize(self, param1):
        self.deserializeAs_ShortcutBarRemovedMessage(param1)

    def deserializeAs_ShortcutBarRemovedMessage(self, param1):
        self._barTypeFunc(param1)
        self._slotFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ShortcutBarRemovedMessage(param1)

    def deserializeAsyncAs_ShortcutBarRemovedMessage(self, param1):
        param1.add_child(self._barTypeFunc)
        param1.add_child(self._slotFunc)

    def _barTypeFunc(self, param1):
        self.barType = param1.read_byte()
        if self.barType < 0:
            raise RuntimeError("Forbidden value (" + str(self.barType) + ") on element of ShortcutBarRemovedMessage.barType.")

    def _slotFunc(self, param1):
        self.slot = param1.read_byte()
        if self.slot < 0 or self.slot > 99:
            raise RuntimeError("Forbidden value (" + str(self.slot) + ") on element of ShortcutBarRemovedMessage.slot.")


class ShortcutBarRemoveErrorMessage(NetworkMessage):
    protocolId = 6222

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.error = 0

    def getMessageId(self):
        return 6222

    def initShortcutBarRemoveErrorMessage(self, param1=0):
        self.error = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.error = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ShortcutBarRemoveErrorMessage(param1)

    def serializeAs_ShortcutBarRemoveErrorMessage(self, param1):
        param1.write_byte(self.error)

    def deserialize(self, param1):
        self.deserializeAs_ShortcutBarRemoveErrorMessage(param1)

    def deserializeAs_ShortcutBarRemoveErrorMessage(self, param1):
        self._errorFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ShortcutBarRemoveErrorMessage(param1)

    def deserializeAsyncAs_ShortcutBarRemoveErrorMessage(self, param1):
        param1.add_child(self._errorFunc)

    def _errorFunc(self, param1):
        self.error = param1.read_byte()
        if self.error < 0:
            raise RuntimeError("Forbidden value (" + str(self.error) + ") on element of ShortcutBarRemoveErrorMessage.error.")


class ShortcutBarRemoveRequestMessage(NetworkMessage):
    protocolId = 6228

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.barType = 0
        self.slot = 0

    def getMessageId(self):
        return 6228

    def initShortcutBarRemoveRequestMessage(self, param1=0, param2=0):
        self.barType = param1
        self.slot = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.barType = 0
        self.slot = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ShortcutBarRemoveRequestMessage(param1)

    def serializeAs_ShortcutBarRemoveRequestMessage(self, param1):
        param1.write_byte(self.barType)
        if self.slot < 0 or self.slot > 99:
            raise RuntimeError("Forbidden value (" + str(self.slot) + ") on element slot.")
        param1.write_byte(self.slot)

    def deserialize(self, param1):
        self.deserializeAs_ShortcutBarRemoveRequestMessage(param1)

    def deserializeAs_ShortcutBarRemoveRequestMessage(self, param1):
        self._barTypeFunc(param1)
        self._slotFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ShortcutBarRemoveRequestMessage(param1)

    def deserializeAsyncAs_ShortcutBarRemoveRequestMessage(self, param1):
        param1.add_child(self._barTypeFunc)
        param1.add_child(self._slotFunc)

    def _barTypeFunc(self, param1):
        self.barType = param1.read_byte()
        if self.barType < 0:
            raise RuntimeError("Forbidden value (" + str(self.barType) + ") on element of ShortcutBarRemoveRequestMessage.barType.")

    def _slotFunc(self, param1):
        self.slot = param1.read_byte()
        if self.slot < 0 or self.slot > 99:
            raise RuntimeError("Forbidden value (" + str(self.slot) + ") on element of ShortcutBarRemoveRequestMessage.slot.")


class ShortcutBarReplacedMessage(NetworkMessage):
    protocolId = 6706

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.barType = 0
        self.shortcut = Shortcut()
        self._shortcuttree = FuncTree()

    def getMessageId(self):
        return 6706

    def initShortcutBarReplacedMessage(self, param1=0, param2=None):
        self.barType = param1
        self.shortcut = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.barType = 0
        self.shortcut = Shortcut()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ShortcutBarReplacedMessage(param1)

    def serializeAs_ShortcutBarReplacedMessage(self, param1):
        param1.write_byte(self.barType)
        param1.write_short(self.shortcut.getTypeId())
        self.shortcut.serialize(param1)

    def deserialize(self, param1):
        self.deserializeAs_ShortcutBarReplacedMessage(param1)

    def deserializeAs_ShortcutBarReplacedMessage(self, param1):
        self._barTypeFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        self.shortcut = ProtocolTypeManager.get_instance(Shortcut,_loc2_)
        self.shortcut.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ShortcutBarReplacedMessage(param1)

    def deserializeAsyncAs_ShortcutBarReplacedMessage(self, param1):
        param1.add_child(self._barTypeFunc)
        self._shortcuttree = param1.add_child(self._shortcuttreeFunc)

    def _barTypeFunc(self, param1):
        self.barType = param1.read_byte()
        if self.barType < 0:
            raise RuntimeError("Forbidden value (" + str(self.barType) + ") on element of ShortcutBarReplacedMessage.barType.")

    def _shortcuttreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.shortcut = ProtocolTypeManager.get_instance(Shortcut,_loc2_)
        self.shortcut.deserializeAsync(self._shortcuttree)


class ShortcutBarSwapErrorMessage(NetworkMessage):
    protocolId = 6226

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.error = 0

    def getMessageId(self):
        return 6226

    def initShortcutBarSwapErrorMessage(self, param1=0):
        self.error = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.error = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ShortcutBarSwapErrorMessage(param1)

    def serializeAs_ShortcutBarSwapErrorMessage(self, param1):
        param1.write_byte(self.error)

    def deserialize(self, param1):
        self.deserializeAs_ShortcutBarSwapErrorMessage(param1)

    def deserializeAs_ShortcutBarSwapErrorMessage(self, param1):
        self._errorFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ShortcutBarSwapErrorMessage(param1)

    def deserializeAsyncAs_ShortcutBarSwapErrorMessage(self, param1):
        param1.add_child(self._errorFunc)

    def _errorFunc(self, param1):
        self.error = param1.read_byte()
        if self.error < 0:
            raise RuntimeError("Forbidden value (" + str(self.error) + ") on element of ShortcutBarSwapErrorMessage.error.")


class ShortcutBarSwapRequestMessage(NetworkMessage):
    protocolId = 6230

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.barType = 0
        self.firstSlot = 0
        self.secondSlot = 0

    def getMessageId(self):
        return 6230

    def initShortcutBarSwapRequestMessage(self, param1=0, param2=0, param3=0):
        self.barType = param1
        self.firstSlot = param2
        self.secondSlot = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.barType = 0
        self.firstSlot = 0
        self.secondSlot = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ShortcutBarSwapRequestMessage(param1)

    def serializeAs_ShortcutBarSwapRequestMessage(self, param1):
        param1.write_byte(self.barType)
        if self.firstSlot < 0 or self.firstSlot > 99:
            raise RuntimeError("Forbidden value (" + str(self.firstSlot) + ") on element firstSlot.")
        param1.write_byte(self.firstSlot)
        if self.secondSlot < 0 or self.secondSlot > 99:
            raise RuntimeError("Forbidden value (" + str(self.secondSlot) + ") on element secondSlot.")
        param1.write_byte(self.secondSlot)

    def deserialize(self, param1):
        self.deserializeAs_ShortcutBarSwapRequestMessage(param1)

    def deserializeAs_ShortcutBarSwapRequestMessage(self, param1):
        self._barTypeFunc(param1)
        self._firstSlotFunc(param1)
        self._secondSlotFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ShortcutBarSwapRequestMessage(param1)

    def deserializeAsyncAs_ShortcutBarSwapRequestMessage(self, param1):
        param1.add_child(self._barTypeFunc)
        param1.add_child(self._firstSlotFunc)
        param1.add_child(self._secondSlotFunc)

    def _barTypeFunc(self, param1):
        self.barType = param1.read_byte()
        if self.barType < 0:
            raise RuntimeError("Forbidden value (" + str(self.barType) + ") on element of ShortcutBarSwapRequestMessage.barType.")

    def _firstSlotFunc(self, param1):
        self.firstSlot = param1.read_byte()
        if self.firstSlot < 0 or self.firstSlot > 99:
            raise RuntimeError("Forbidden value (" + str(self.firstSlot) + ") on element of ShortcutBarSwapRequestMessage.firstSlot.")

    def _secondSlotFunc(self, param1):
        self.secondSlot = param1.read_byte()
        if self.secondSlot < 0 or self.secondSlot > 99:
            raise RuntimeError("Forbidden value (" + str(self.secondSlot) + ") on element of ShortcutBarSwapRequestMessage.secondSlot.")


class ContactLookErrorMessage(NetworkMessage):
    protocolId = 6045

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.requestId = 0

    def getMessageId(self):
        return 6045

    def initContactLookErrorMessage(self, param1=0):
        self.requestId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.requestId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ContactLookErrorMessage(param1)

    def serializeAs_ContactLookErrorMessage(self, param1):
        if self.requestId < 0:
            raise RuntimeError("Forbidden value (" + str(self.requestId) + ") on element requestId.")
        param1.write_var_int(self.requestId)

    def deserialize(self, param1):
        self.deserializeAs_ContactLookErrorMessage(param1)

    def deserializeAs_ContactLookErrorMessage(self, param1):
        self._requestIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ContactLookErrorMessage(param1)

    def deserializeAsyncAs_ContactLookErrorMessage(self, param1):
        param1.add_child(self._requestIdFunc)

    def _requestIdFunc(self, param1):
        self.requestId = param1.read_var_uh_int()
        if self.requestId < 0:
            raise RuntimeError("Forbidden value (" + str(self.requestId) + ") on element of ContactLookErrorMessage.requestId.")


class ContactLookMessage(NetworkMessage):
    protocolId = 5934

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.requestId = 0
        self.playerName = ""
        self.playerId = 0
        self.look = EntityLook()
        self._looktree = FuncTree()

    def getMessageId(self):
        return 5934

    def initContactLookMessage(self, param1=0, param2="", param3=0, param4=None):
        self.requestId = param1
        self.playerName = param2
        self.playerId = param3
        self.look = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.requestId = 0
        self.playerName = ""
        self.playerId = 0
        self.look = EntityLook()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ContactLookMessage(param1)

    def serializeAs_ContactLookMessage(self, param1):
        if self.requestId < 0:
            raise RuntimeError("Forbidden value (" + str(self.requestId) + ") on element requestId.")
        param1.write_var_int(self.requestId)
        param1.write_utf(self.playerName)
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element playerId.")
        param1.write_var_long(self.playerId)
        self.look.serializeAs_EntityLook(param1)

    def deserialize(self, param1):
        self.deserializeAs_ContactLookMessage(param1)

    def deserializeAs_ContactLookMessage(self, param1):
        self._requestIdFunc(param1)
        self._playerNameFunc(param1)
        self._playerIdFunc(param1)
        self.look = EntityLook()
        self.look.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ContactLookMessage(param1)

    def deserializeAsyncAs_ContactLookMessage(self, param1):
        param1.add_child(self._requestIdFunc)
        param1.add_child(self._playerNameFunc)
        param1.add_child(self._playerIdFunc)
        self._looktree = param1.add_child(self._looktreeFunc)

    def _requestIdFunc(self, param1):
        self.requestId = param1.read_var_uh_int()
        if self.requestId < 0:
            raise RuntimeError("Forbidden value (" + str(self.requestId) + ") on element of ContactLookMessage.requestId.")

    def _playerNameFunc(self, param1):
        self.playerName = param1.read_utf()

    def _playerIdFunc(self, param1):
        self.playerId = param1.read_var_uh_long()
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element of ContactLookMessage.playerId.")

    def _looktreeFunc(self, param1):
        self.look = EntityLook()
        self.look.deserializeAsync(self._looktree)


class ContactLookRequestMessage(NetworkMessage):
    protocolId = 5932

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.requestId = 0
        self.contactType = 0

    def getMessageId(self):
        return 5932

    def initContactLookRequestMessage(self, param1=0, param2=0):
        self.requestId = param1
        self.contactType = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.requestId = 0
        self.contactType = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ContactLookRequestMessage(param1)

    def serializeAs_ContactLookRequestMessage(self, param1):
        if self.requestId < 0 or self.requestId > 255:
            raise RuntimeError("Forbidden value (" + str(self.requestId) + ") on element requestId.")
        param1.write_byte(self.requestId)
        param1.write_byte(self.contactType)

    def deserialize(self, param1):
        self.deserializeAs_ContactLookRequestMessage(param1)

    def deserializeAs_ContactLookRequestMessage(self, param1):
        self._requestIdFunc(param1)
        self._contactTypeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ContactLookRequestMessage(param1)

    def deserializeAsyncAs_ContactLookRequestMessage(self, param1):
        param1.add_child(self._requestIdFunc)
        param1.add_child(self._contactTypeFunc)

    def _requestIdFunc(self, param1):
        self.requestId = param1.read_unsigned_byte()
        if self.requestId < 0 or self.requestId > 255:
            raise RuntimeError("Forbidden value (" + str(self.requestId) + ") on element of ContactLookRequestMessage.requestId.")

    def _contactTypeFunc(self, param1):
        self.contactType = param1.read_byte()
        if self.contactType < 0:
            raise RuntimeError("Forbidden value (" + str(self.contactType) + ") on element of ContactLookRequestMessage.contactType.")


class SocialNoticeMessage(NetworkMessage):
    protocolId = 6688

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.content = ""
        self.timestamp = 0
        self.memberId = 0
        self.memberName = ""

    def getMessageId(self):
        return 6688

    def initSocialNoticeMessage(self, param1="", param2=0, param3=0, param4=""):
        self.content = param1
        self.timestamp = param2
        self.memberId = param3
        self.memberName = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.content = ""
        self.timestamp = 0
        self.memberId = 0
        self.memberName = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SocialNoticeMessage(param1)

    def serializeAs_SocialNoticeMessage(self, param1):
        param1.write_utf(self.content)
        if self.timestamp < 0:
            raise RuntimeError("Forbidden value (" + str(self.timestamp) + ") on element timestamp.")
        param1.write_int(self.timestamp)
        if self.memberId < 0 or self.memberId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.memberId) + ") on element memberId.")
        param1.write_var_long(self.memberId)
        param1.write_utf(self.memberName)

    def deserialize(self, param1):
        self.deserializeAs_SocialNoticeMessage(param1)

    def deserializeAs_SocialNoticeMessage(self, param1):
        self._contentFunc(param1)
        self._timestampFunc(param1)
        self._memberIdFunc(param1)
        self._memberNameFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SocialNoticeMessage(param1)

    def deserializeAsyncAs_SocialNoticeMessage(self, param1):
        param1.add_child(self._contentFunc)
        param1.add_child(self._timestampFunc)
        param1.add_child(self._memberIdFunc)
        param1.add_child(self._memberNameFunc)

    def _contentFunc(self, param1):
        self.content = param1.read_utf()

    def _timestampFunc(self, param1):
        self.timestamp = param1.read_int()
        if self.timestamp < 0:
            raise RuntimeError("Forbidden value (" + str(self.timestamp) + ") on element of SocialNoticeMessage.timestamp.")

    def _memberIdFunc(self, param1):
        self.memberId = param1.read_var_uh_long()
        if self.memberId < 0 or self.memberId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.memberId) + ") on element of SocialNoticeMessage.memberId.")

    def _memberNameFunc(self, param1):
        self.memberName = param1.read_utf()


class SocialNoticeSetErrorMessage(NetworkMessage):
    protocolId = 6684

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reason = 0

    def getMessageId(self):
        return 6684

    def initSocialNoticeSetErrorMessage(self, param1=0):
        self.reason = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.reason = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SocialNoticeSetErrorMessage(param1)

    def serializeAs_SocialNoticeSetErrorMessage(self, param1):
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_SocialNoticeSetErrorMessage(param1)

    def deserializeAs_SocialNoticeSetErrorMessage(self, param1):
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SocialNoticeSetErrorMessage(param1)

    def deserializeAsyncAs_SocialNoticeSetErrorMessage(self, param1):
        param1.add_child(self._reasonFunc)

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()
        if self.reason < 0:
            raise RuntimeError("Forbidden value (" + str(self.reason) + ") on element of SocialNoticeSetErrorMessage.reason.")


class SocialNoticeSetRequestMessage(NetworkMessage):
    protocolId = 6686

    def getMessageId(self):
        return 6686

    def initSocialNoticeSetRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_SocialNoticeSetRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_SocialNoticeSetRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_SocialNoticeSetRequestMessage(self, param1):
        pass


class StartupActionAddMessage(NetworkMessage):
    protocolId = 6538

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.newAction = StartupActionAddObject()
        self._newActiontree = FuncTree()

    def getMessageId(self):
        return 6538

    def initStartupActionAddMessage(self, param1=None):
        self.newAction = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.newAction = StartupActionAddObject()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_StartupActionAddMessage(param1)

    def serializeAs_StartupActionAddMessage(self, param1):
        self.newAction.serializeAs_StartupActionAddObject(param1)

    def deserialize(self, param1):
        self.deserializeAs_StartupActionAddMessage(param1)

    def deserializeAs_StartupActionAddMessage(self, param1):
        self.newAction = StartupActionAddObject()
        self.newAction.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_StartupActionAddMessage(param1)

    def deserializeAsyncAs_StartupActionAddMessage(self, param1):
        self._newActiontree = param1.add_child(self._newActiontreeFunc)

    def _newActiontreeFunc(self, param1):
        self.newAction = StartupActionAddObject()
        self.newAction.deserializeAsync(self._newActiontree)


class StartupActionFinishedMessage(NetworkMessage):
    protocolId = 1304

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.success = False
        self.actionId = 0
        self.automaticAction = False

    def getMessageId(self):
        return 1304

    def initStartupActionFinishedMessage(self, param1=False, param2=0, param3=False):
        self.success = param1
        self.actionId = param2
        self.automaticAction = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.success = False
        self.actionId = 0
        self.automaticAction = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_StartupActionFinishedMessage(param1)

    def serializeAs_StartupActionFinishedMessage(self, param1):
        _loc2_ = 0
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,0,self.success)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,1,self.automaticAction)
        param1.write_byte(_loc2_)
        if self.actionId < 0:
            raise RuntimeError("Forbidden value (" + str(self.actionId) + ") on element actionId.")
        param1.write_int(self.actionId)

    def deserialize(self, param1):
        self.deserializeAs_StartupActionFinishedMessage(param1)

    def deserializeAs_StartupActionFinishedMessage(self, param1):
        self.deserializeByteBoxes(param1)
        self._actionIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_StartupActionFinishedMessage(param1)

    def deserializeAsyncAs_StartupActionFinishedMessage(self, param1):
        param1.add_child(self.deserializeByteBoxes)
        param1.add_child(self._actionIdFunc)

    def deserializeByteBoxes(self, param1):
        _loc2_ = param1.read_byte()
        self.success = BooleanByteWrapper.get_flag(_loc2_,0)
        self.automaticAction = BooleanByteWrapper.get_flag(_loc2_,1)

    def _actionIdFunc(self, param1):
        self.actionId = param1.read_int()
        if self.actionId < 0:
            raise RuntimeError("Forbidden value (" + str(self.actionId) + ") on element of StartupActionFinishedMessage.actionId.")


class StartupActionsAllAttributionMessage(NetworkMessage):
    protocolId = 6537

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.characterId = 0

    def getMessageId(self):
        return 6537

    def initStartupActionsAllAttributionMessage(self, param1=0):
        self.characterId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.characterId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_StartupActionsAllAttributionMessage(param1)

    def serializeAs_StartupActionsAllAttributionMessage(self, param1):
        if self.characterId < 0 or self.characterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.characterId) + ") on element characterId.")
        param1.write_var_long(self.characterId)

    def deserialize(self, param1):
        self.deserializeAs_StartupActionsAllAttributionMessage(param1)

    def deserializeAs_StartupActionsAllAttributionMessage(self, param1):
        self._characterIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_StartupActionsAllAttributionMessage(param1)

    def deserializeAsyncAs_StartupActionsAllAttributionMessage(self, param1):
        param1.add_child(self._characterIdFunc)

    def _characterIdFunc(self, param1):
        self.characterId = param1.read_var_uh_long()
        if self.characterId < 0 or self.characterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.characterId) + ") on element of StartupActionsAllAttributionMessage.characterId.")


class StartupActionsExecuteMessage(NetworkMessage):
    protocolId = 1302

    def getMessageId(self):
        return 1302

    def initStartupActionsExecuteMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_StartupActionsExecuteMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_StartupActionsExecuteMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_StartupActionsExecuteMessage(self, param1):
        pass


class StartupActionsListMessage(NetworkMessage):
    protocolId = 1301

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.actions = []
        self._actionstree = FuncTree()

    def getMessageId(self):
        return 1301

    def initStartupActionsListMessage(self, param1=[]):
        self.actions = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.actions = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_StartupActionsListMessage(param1)

    def serializeAs_StartupActionsListMessage(self, param1):
        param1.write_short(len(self.actions))
        _loc2_ = 0
        while _loc2_ < len(self.actions):
            as_parent(self.actions[_loc2_], StartupActionAddObject).serializeAs_StartupActionAddObject(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_StartupActionsListMessage(param1)

    def deserializeAs_StartupActionsListMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = StartupActionAddObject()
            _loc4_.deserialize(param1)
            self.actions.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_StartupActionsListMessage(param1)

    def deserializeAsyncAs_StartupActionsListMessage(self, param1):
        self._actionstree = param1.add_child(self._actionstreeFunc)

    def _actionstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._actionstree.add_child(self._actionsFunc)
            _loc3_ += 1

    def _actionsFunc(self, param1):
        _loc2_ = StartupActionAddObject()
        _loc2_.deserialize(param1)
        self.actions.append(_loc2_)


class StartupActionsObjetAttributionMessage(NetworkMessage):
    protocolId = 1303

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.actionId = 0
        self.characterId = 0

    def getMessageId(self):
        return 1303

    def initStartupActionsObjetAttributionMessage(self, param1=0, param2=0):
        self.actionId = param1
        self.characterId = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.actionId = 0
        self.characterId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_StartupActionsObjetAttributionMessage(param1)

    def serializeAs_StartupActionsObjetAttributionMessage(self, param1):
        if self.actionId < 0:
            raise RuntimeError("Forbidden value (" + str(self.actionId) + ") on element actionId.")
        param1.write_int(self.actionId)
        if self.characterId < 0 or self.characterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.characterId) + ") on element characterId.")
        param1.write_var_long(self.characterId)

    def deserialize(self, param1):
        self.deserializeAs_StartupActionsObjetAttributionMessage(param1)

    def deserializeAs_StartupActionsObjetAttributionMessage(self, param1):
        self._actionIdFunc(param1)
        self._characterIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_StartupActionsObjetAttributionMessage(param1)

    def deserializeAsyncAs_StartupActionsObjetAttributionMessage(self, param1):
        param1.add_child(self._actionIdFunc)
        param1.add_child(self._characterIdFunc)

    def _actionIdFunc(self, param1):
        self.actionId = param1.read_int()
        if self.actionId < 0:
            raise RuntimeError("Forbidden value (" + str(self.actionId) + ") on element of StartupActionsObjetAttributionMessage.actionId.")

    def _characterIdFunc(self, param1):
        self.characterId = param1.read_var_uh_long()
        if self.characterId < 0 or self.characterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.characterId) + ") on element of StartupActionsObjetAttributionMessage.characterId.")


class SubscriptionLimitationMessage(NetworkMessage):
    protocolId = 5542

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reason = 0

    def getMessageId(self):
        return 5542

    def initSubscriptionLimitationMessage(self, param1=0):
        self.reason = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.reason = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SubscriptionLimitationMessage(param1)

    def serializeAs_SubscriptionLimitationMessage(self, param1):
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_SubscriptionLimitationMessage(param1)

    def deserializeAs_SubscriptionLimitationMessage(self, param1):
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SubscriptionLimitationMessage(param1)

    def deserializeAsyncAs_SubscriptionLimitationMessage(self, param1):
        param1.add_child(self._reasonFunc)

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()
        if self.reason < 0:
            raise RuntimeError("Forbidden value (" + str(self.reason) + ") on element of SubscriptionLimitationMessage.reason.")


class SubscriptionZoneMessage(NetworkMessage):
    protocolId = 5573

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.active = False

    def getMessageId(self):
        return 5573

    def initSubscriptionZoneMessage(self, param1=False):
        self.active = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.active = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SubscriptionZoneMessage(param1)

    def serializeAs_SubscriptionZoneMessage(self, param1):
        param1.write_boolean(self.active)

    def deserialize(self, param1):
        self.deserializeAs_SubscriptionZoneMessage(param1)

    def deserializeAs_SubscriptionZoneMessage(self, param1):
        self._activeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SubscriptionZoneMessage(param1)

    def deserializeAsyncAs_SubscriptionZoneMessage(self, param1):
        param1.add_child(self._activeFunc)

    def _activeFunc(self, param1):
        self.active = param1.read_boolean()


class OrnamentGainedMessage(NetworkMessage):
    protocolId = 6368

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.ornamentId = 0

    def getMessageId(self):
        return 6368

    def initOrnamentGainedMessage(self, param1=0):
        self.ornamentId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.ornamentId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_OrnamentGainedMessage(param1)

    def serializeAs_OrnamentGainedMessage(self, param1):
        if self.ornamentId < 0:
            raise RuntimeError("Forbidden value (" + str(self.ornamentId) + ") on element ornamentId.")
        param1.write_short(self.ornamentId)

    def deserialize(self, param1):
        self.deserializeAs_OrnamentGainedMessage(param1)

    def deserializeAs_OrnamentGainedMessage(self, param1):
        self._ornamentIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_OrnamentGainedMessage(param1)

    def deserializeAsyncAs_OrnamentGainedMessage(self, param1):
        param1.add_child(self._ornamentIdFunc)

    def _ornamentIdFunc(self, param1):
        self.ornamentId = param1.read_short()
        if self.ornamentId < 0:
            raise RuntimeError("Forbidden value (" + str(self.ornamentId) + ") on element of OrnamentGainedMessage.ornamentId.")


class OrnamentSelectedMessage(NetworkMessage):
    protocolId = 6369

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.ornamentId = 0

    def getMessageId(self):
        return 6369

    def initOrnamentSelectedMessage(self, param1=0):
        self.ornamentId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.ornamentId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_OrnamentSelectedMessage(param1)

    def serializeAs_OrnamentSelectedMessage(self, param1):
        if self.ornamentId < 0:
            raise RuntimeError("Forbidden value (" + str(self.ornamentId) + ") on element ornamentId.")
        param1.write_var_short(self.ornamentId)

    def deserialize(self, param1):
        self.deserializeAs_OrnamentSelectedMessage(param1)

    def deserializeAs_OrnamentSelectedMessage(self, param1):
        self._ornamentIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_OrnamentSelectedMessage(param1)

    def deserializeAsyncAs_OrnamentSelectedMessage(self, param1):
        param1.add_child(self._ornamentIdFunc)

    def _ornamentIdFunc(self, param1):
        self.ornamentId = param1.read_var_uh_short()
        if self.ornamentId < 0:
            raise RuntimeError("Forbidden value (" + str(self.ornamentId) + ") on element of OrnamentSelectedMessage.ornamentId.")


class OrnamentSelectErrorMessage(NetworkMessage):
    protocolId = 6370

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reason = 0

    def getMessageId(self):
        return 6370

    def initOrnamentSelectErrorMessage(self, param1=0):
        self.reason = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.reason = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_OrnamentSelectErrorMessage(param1)

    def serializeAs_OrnamentSelectErrorMessage(self, param1):
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_OrnamentSelectErrorMessage(param1)

    def deserializeAs_OrnamentSelectErrorMessage(self, param1):
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_OrnamentSelectErrorMessage(param1)

    def deserializeAsyncAs_OrnamentSelectErrorMessage(self, param1):
        param1.add_child(self._reasonFunc)

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()
        if self.reason < 0:
            raise RuntimeError("Forbidden value (" + str(self.reason) + ") on element of OrnamentSelectErrorMessage.reason.")


class OrnamentSelectRequestMessage(NetworkMessage):
    protocolId = 6374

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.ornamentId = 0

    def getMessageId(self):
        return 6374

    def initOrnamentSelectRequestMessage(self, param1=0):
        self.ornamentId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.ornamentId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_OrnamentSelectRequestMessage(param1)

    def serializeAs_OrnamentSelectRequestMessage(self, param1):
        if self.ornamentId < 0:
            raise RuntimeError("Forbidden value (" + str(self.ornamentId) + ") on element ornamentId.")
        param1.write_var_short(self.ornamentId)

    def deserialize(self, param1):
        self.deserializeAs_OrnamentSelectRequestMessage(param1)

    def deserializeAs_OrnamentSelectRequestMessage(self, param1):
        self._ornamentIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_OrnamentSelectRequestMessage(param1)

    def deserializeAsyncAs_OrnamentSelectRequestMessage(self, param1):
        param1.add_child(self._ornamentIdFunc)

    def _ornamentIdFunc(self, param1):
        self.ornamentId = param1.read_var_uh_short()
        if self.ornamentId < 0:
            raise RuntimeError("Forbidden value (" + str(self.ornamentId) + ") on element of OrnamentSelectRequestMessage.ornamentId.")


class TitleGainedMessage(NetworkMessage):
    protocolId = 6364

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.titleId = 0

    def getMessageId(self):
        return 6364

    def initTitleGainedMessage(self, param1=0):
        self.titleId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.titleId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TitleGainedMessage(param1)

    def serializeAs_TitleGainedMessage(self, param1):
        if self.titleId < 0:
            raise RuntimeError("Forbidden value (" + str(self.titleId) + ") on element titleId.")
        param1.write_var_short(self.titleId)

    def deserialize(self, param1):
        self.deserializeAs_TitleGainedMessage(param1)

    def deserializeAs_TitleGainedMessage(self, param1):
        self._titleIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TitleGainedMessage(param1)

    def deserializeAsyncAs_TitleGainedMessage(self, param1):
        param1.add_child(self._titleIdFunc)

    def _titleIdFunc(self, param1):
        self.titleId = param1.read_var_uh_short()
        if self.titleId < 0:
            raise RuntimeError("Forbidden value (" + str(self.titleId) + ") on element of TitleGainedMessage.titleId.")


class TitleLostMessage(NetworkMessage):
    protocolId = 6371

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.titleId = 0

    def getMessageId(self):
        return 6371

    def initTitleLostMessage(self, param1=0):
        self.titleId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.titleId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TitleLostMessage(param1)

    def serializeAs_TitleLostMessage(self, param1):
        if self.titleId < 0:
            raise RuntimeError("Forbidden value (" + str(self.titleId) + ") on element titleId.")
        param1.write_var_short(self.titleId)

    def deserialize(self, param1):
        self.deserializeAs_TitleLostMessage(param1)

    def deserializeAs_TitleLostMessage(self, param1):
        self._titleIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TitleLostMessage(param1)

    def deserializeAsyncAs_TitleLostMessage(self, param1):
        param1.add_child(self._titleIdFunc)

    def _titleIdFunc(self, param1):
        self.titleId = param1.read_var_uh_short()
        if self.titleId < 0:
            raise RuntimeError("Forbidden value (" + str(self.titleId) + ") on element of TitleLostMessage.titleId.")


class TitlesAndOrnamentsListMessage(NetworkMessage):
    protocolId = 6367

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.titles = []
        self.ornaments = []
        self.activeTitle = 0
        self.activeOrnament = 0
        self._titlestree = FuncTree()
        self._ornamentstree = FuncTree()

    def getMessageId(self):
        return 6367

    def initTitlesAndOrnamentsListMessage(self, param1=[], param2=[], param3=0, param4=0):
        self.titles = param1
        self.ornaments = param2
        self.activeTitle = param3
        self.activeOrnament = param4
        self._isInitialized = True
        return self

    def reset(self):
        self.titles = []
        self.ornaments = []
        self.activeTitle = 0
        self.activeOrnament = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TitlesAndOrnamentsListMessage(param1)

    def serializeAs_TitlesAndOrnamentsListMessage(self, param1):
        param1.write_short(len(self.titles))
        _loc2_ = 0
        while _loc2_ < len(self.titles):
            if self.titles[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.titles[_loc2_]) + ") on element 1 (starting at 1) of titles.")
            param1.write_var_short(self.titles[_loc2_])
            _loc2_ += 1
        param1.write_short(len(self.ornaments))
        _loc3_ = 0
        while _loc3_ < len(self.ornaments):
            if self.ornaments[_loc3_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.ornaments[_loc3_]) + ") on element 2 (starting at 1) of ornaments.")
            param1.write_var_short(self.ornaments[_loc3_])
            _loc3_ += 1
        if self.activeTitle < 0:
            raise RuntimeError("Forbidden value (" + str(self.activeTitle) + ") on element activeTitle.")
        param1.write_var_short(self.activeTitle)
        if self.activeOrnament < 0:
            raise RuntimeError("Forbidden value (" + str(self.activeOrnament) + ") on element activeOrnament.")
        param1.write_var_short(self.activeOrnament)

    def deserialize(self, param1):
        self.deserializeAs_TitlesAndOrnamentsListMessage(param1)

    def deserializeAs_TitlesAndOrnamentsListMessage(self, param1):
        _loc6_ = 0
        _loc7_ = 0
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = param1.read_var_uh_short()
            if _loc6_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc6_) + ") on elements of titles.")
            self.titles.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = param1.read_var_uh_short()
            if _loc7_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc7_) + ") on elements of ornaments.")
            self.ornaments.append(_loc7_)
            _loc5_ += 1
        self._activeTitleFunc(param1)
        self._activeOrnamentFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TitlesAndOrnamentsListMessage(param1)

    def deserializeAsyncAs_TitlesAndOrnamentsListMessage(self, param1):
        self._titlestree = param1.add_child(self._titlestreeFunc)
        self._ornamentstree = param1.add_child(self._ornamentstreeFunc)
        param1.add_child(self._activeTitleFunc)
        param1.add_child(self._activeOrnamentFunc)

    def _titlestreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._titlestree.add_child(self._titlesFunc)
            _loc3_ += 1

    def _titlesFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of titles.")
        self.titles.append(_loc2_)

    def _ornamentstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._ornamentstree.add_child(self._ornamentsFunc)
            _loc3_ += 1

    def _ornamentsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of ornaments.")
        self.ornaments.append(_loc2_)

    def _activeTitleFunc(self, param1):
        self.activeTitle = param1.read_var_uh_short()
        if self.activeTitle < 0:
            raise RuntimeError("Forbidden value (" + str(self.activeTitle) + ") on element of TitlesAndOrnamentsListMessage.activeTitle.")

    def _activeOrnamentFunc(self, param1):
        self.activeOrnament = param1.read_var_uh_short()
        if self.activeOrnament < 0:
            raise RuntimeError("Forbidden value (" + str(self.activeOrnament) + ") on element of TitlesAndOrnamentsListMessage.activeOrnament.")


class TitlesAndOrnamentsListRequestMessage(NetworkMessage):
    protocolId = 6363

    def getMessageId(self):
        return 6363

    def initTitlesAndOrnamentsListRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_TitlesAndOrnamentsListRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_TitlesAndOrnamentsListRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_TitlesAndOrnamentsListRequestMessage(self, param1):
        pass


class TitleSelectedMessage(NetworkMessage):
    protocolId = 6366

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.titleId = 0

    def getMessageId(self):
        return 6366

    def initTitleSelectedMessage(self, param1=0):
        self.titleId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.titleId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TitleSelectedMessage(param1)

    def serializeAs_TitleSelectedMessage(self, param1):
        if self.titleId < 0:
            raise RuntimeError("Forbidden value (" + str(self.titleId) + ") on element titleId.")
        param1.write_var_short(self.titleId)

    def deserialize(self, param1):
        self.deserializeAs_TitleSelectedMessage(param1)

    def deserializeAs_TitleSelectedMessage(self, param1):
        self._titleIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TitleSelectedMessage(param1)

    def deserializeAsyncAs_TitleSelectedMessage(self, param1):
        param1.add_child(self._titleIdFunc)

    def _titleIdFunc(self, param1):
        self.titleId = param1.read_var_uh_short()
        if self.titleId < 0:
            raise RuntimeError("Forbidden value (" + str(self.titleId) + ") on element of TitleSelectedMessage.titleId.")


class TitleSelectErrorMessage(NetworkMessage):
    protocolId = 6373

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reason = 0

    def getMessageId(self):
        return 6373

    def initTitleSelectErrorMessage(self, param1=0):
        self.reason = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.reason = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TitleSelectErrorMessage(param1)

    def serializeAs_TitleSelectErrorMessage(self, param1):
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_TitleSelectErrorMessage(param1)

    def deserializeAs_TitleSelectErrorMessage(self, param1):
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TitleSelectErrorMessage(param1)

    def deserializeAsyncAs_TitleSelectErrorMessage(self, param1):
        param1.add_child(self._reasonFunc)

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()
        if self.reason < 0:
            raise RuntimeError("Forbidden value (" + str(self.reason) + ") on element of TitleSelectErrorMessage.reason.")


class TitleSelectRequestMessage(NetworkMessage):
    protocolId = 6365

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.titleId = 0

    def getMessageId(self):
        return 6365

    def initTitleSelectRequestMessage(self, param1=0):
        self.titleId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.titleId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TitleSelectRequestMessage(param1)

    def serializeAs_TitleSelectRequestMessage(self, param1):
        if self.titleId < 0:
            raise RuntimeError("Forbidden value (" + str(self.titleId) + ") on element titleId.")
        param1.write_var_short(self.titleId)

    def deserialize(self, param1):
        self.deserializeAs_TitleSelectRequestMessage(param1)

    def deserializeAs_TitleSelectRequestMessage(self, param1):
        self._titleIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TitleSelectRequestMessage(param1)

    def deserializeAsyncAs_TitleSelectRequestMessage(self, param1):
        param1.add_child(self._titleIdFunc)

    def _titleIdFunc(self, param1):
        self.titleId = param1.read_var_uh_short()
        if self.titleId < 0:
            raise RuntimeError("Forbidden value (" + str(self.titleId) + ") on element of TitleSelectRequestMessage.titleId.")


class ClientUIOpenedMessage(NetworkMessage):
    protocolId = 6459

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.type = 0

    def getMessageId(self):
        return 6459

    def initClientUIOpenedMessage(self, param1=0):
        self.type = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.type = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ClientUIOpenedMessage(param1)

    def serializeAs_ClientUIOpenedMessage(self, param1):
        param1.write_byte(self.type)

    def deserialize(self, param1):
        self.deserializeAs_ClientUIOpenedMessage(param1)

    def deserializeAs_ClientUIOpenedMessage(self, param1):
        self._typeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ClientUIOpenedMessage(param1)

    def deserializeAsyncAs_ClientUIOpenedMessage(self, param1):
        param1.add_child(self._typeFunc)

    def _typeFunc(self, param1):
        self.type = param1.read_byte()
        if self.type < 0:
            raise RuntimeError("Forbidden value (" + str(self.type) + ") on element of ClientUIOpenedMessage.type.")


class ProtocolRequired(NetworkMessage):
    protocolId = 1

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.requiredVersion = 0
        self.currentVersion = 0

    def getMessageId(self):
        return 1

    def initProtocolRequired(self, param1=0, param2=0):
        self.requiredVersion = param1
        self.currentVersion = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.requiredVersion = 0
        self.currentVersion = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ProtocolRequired(param1)

    def serializeAs_ProtocolRequired(self, param1):
        if self.requiredVersion < 0:
            raise RuntimeError("Forbidden value (" + str(self.requiredVersion) + ") on element requiredVersion.")
        param1.write_int(self.requiredVersion)
        if self.currentVersion < 0:
            raise RuntimeError("Forbidden value (" + str(self.currentVersion) + ") on element currentVersion.")
        param1.write_int(self.currentVersion)

    def deserialize(self, param1):
        self.deserializeAs_ProtocolRequired(param1)

    def deserializeAs_ProtocolRequired(self, param1):
        self._requiredVersionFunc(param1)
        self._currentVersionFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ProtocolRequired(param1)

    def deserializeAsyncAs_ProtocolRequired(self, param1):
        param1.add_child(self._requiredVersionFunc)
        param1.add_child(self._currentVersionFunc)

    def _requiredVersionFunc(self, param1):
        self.requiredVersion = param1.read_int()
        if self.requiredVersion < 0:
            raise RuntimeError("Forbidden value (" + str(self.requiredVersion) + ") on element of ProtocolRequired.requiredVersion.")

    def _currentVersionFunc(self, param1):
        self.currentVersion = param1.read_int()
        if self.currentVersion < 0:
            raise RuntimeError("Forbidden value (" + str(self.currentVersion) + ") on element of ProtocolRequired.currentVersion.")


class LoginQueueStatusMessage(NetworkMessage):
    protocolId = 10

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.position = 0
        self.total = 0

    def getMessageId(self):
        return 10

    def initLoginQueueStatusMessage(self, param1=0, param2=0):
        self.position = param1
        self.total = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.position = 0
        self.total = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_LoginQueueStatusMessage(param1)

    def serializeAs_LoginQueueStatusMessage(self, param1):
        if self.position < 0 or self.position > 65535:
            raise RuntimeError("Forbidden value (" + str(self.position) + ") on element position.")
        param1.write_short(self.position)
        if self.total < 0 or self.total > 65535:
            raise RuntimeError("Forbidden value (" + str(self.total) + ") on element total.")
        param1.write_short(self.total)

    def deserialize(self, param1):
        self.deserializeAs_LoginQueueStatusMessage(param1)

    def deserializeAs_LoginQueueStatusMessage(self, param1):
        self._positionFunc(param1)
        self._totalFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_LoginQueueStatusMessage(param1)

    def deserializeAsyncAs_LoginQueueStatusMessage(self, param1):
        param1.add_child(self._positionFunc)
        param1.add_child(self._totalFunc)

    def _positionFunc(self, param1):
        self.position = param1.read_unsigned_short()
        if self.position < 0 or self.position > 65535:
            raise RuntimeError("Forbidden value (" + str(self.position) + ") on element of LoginQueueStatusMessage.position.")

    def _totalFunc(self, param1):
        self.total = param1.read_unsigned_short()
        if self.total < 0 or self.total > 65535:
            raise RuntimeError("Forbidden value (" + str(self.total) + ") on element of LoginQueueStatusMessage.total.")


class QueueStatusMessage(NetworkMessage):
    protocolId = 6100

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.position = 0
        self.total = 0

    def getMessageId(self):
        return 6100

    def initQueueStatusMessage(self, param1=0, param2=0):
        self.position = param1
        self.total = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.position = 0
        self.total = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_QueueStatusMessage(param1)

    def serializeAs_QueueStatusMessage(self, param1):
        if self.position < 0 or self.position > 65535:
            raise RuntimeError("Forbidden value (" + str(self.position) + ") on element position.")
        param1.write_short(self.position)
        if self.total < 0 or self.total > 65535:
            raise RuntimeError("Forbidden value (" + str(self.total) + ") on element total.")
        param1.write_short(self.total)

    def deserialize(self, param1):
        self.deserializeAs_QueueStatusMessage(param1)

    def deserializeAs_QueueStatusMessage(self, param1):
        self._positionFunc(param1)
        self._totalFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_QueueStatusMessage(param1)

    def deserializeAsyncAs_QueueStatusMessage(self, param1):
        param1.add_child(self._positionFunc)
        param1.add_child(self._totalFunc)

    def _positionFunc(self, param1):
        self.position = param1.read_unsigned_short()
        if self.position < 0 or self.position > 65535:
            raise RuntimeError("Forbidden value (" + str(self.position) + ") on element of QueueStatusMessage.position.")

    def _totalFunc(self, param1):
        self.total = param1.read_unsigned_short()
        if self.total < 0 or self.total > 65535:
            raise RuntimeError("Forbidden value (" + str(self.total) + ") on element of QueueStatusMessage.total.")


class TrustStatusMessage(NetworkMessage):
    protocolId = 6267

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.trusted = False
        self.certified = False

    def getMessageId(self):
        return 6267

    def initTrustStatusMessage(self, param1=False, param2=False):
        self.trusted = param1
        self.certified = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.trusted = False
        self.certified = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TrustStatusMessage(param1)

    def serializeAs_TrustStatusMessage(self, param1):
        _loc2_ = 0
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,0,self.trusted)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,1,self.certified)
        param1.write_byte(_loc2_)

    def deserialize(self, param1):
        self.deserializeAs_TrustStatusMessage(param1)

    def deserializeAs_TrustStatusMessage(self, param1):
        self.deserializeByteBoxes(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TrustStatusMessage(param1)

    def deserializeAsyncAs_TrustStatusMessage(self, param1):
        param1.add_child(self.deserializeByteBoxes)

    def deserializeByteBoxes(self, param1):
        _loc2_ = param1.read_byte()
        self.trusted = BooleanByteWrapper.get_flag(_loc2_,0)
        self.certified = BooleanByteWrapper.get_flag(_loc2_,1)


class CheckFileMessage(NetworkMessage):
    protocolId = 6156

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.filenameHash = ""
        self.type = 0
        self.value = ""

    def getMessageId(self):
        return 6156

    def initCheckFileMessage(self, param1="", param2=0, param3=""):
        self.filenameHash = param1
        self.type = param2
        self.value = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.filenameHash = ""
        self.type = 0
        self.value = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CheckFileMessage(param1)

    def serializeAs_CheckFileMessage(self, param1):
        param1.write_utf(self.filenameHash)
        param1.write_byte(self.type)
        param1.write_utf(self.value)

    def deserialize(self, param1):
        self.deserializeAs_CheckFileMessage(param1)

    def deserializeAs_CheckFileMessage(self, param1):
        self._filenameHashFunc(param1)
        self._typeFunc(param1)
        self._valueFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CheckFileMessage(param1)

    def deserializeAsyncAs_CheckFileMessage(self, param1):
        param1.add_child(self._filenameHashFunc)
        param1.add_child(self._typeFunc)
        param1.add_child(self._valueFunc)

    def _filenameHashFunc(self, param1):
        self.filenameHash = param1.read_utf()

    def _typeFunc(self, param1):
        self.type = param1.read_byte()
        if self.type < 0:
            raise RuntimeError("Forbidden value (" + str(self.type) + ") on element of CheckFileMessage.type.")

    def _valueFunc(self, param1):
        self.value = param1.read_utf()


class CheckFileRequestMessage(NetworkMessage):
    protocolId = 6154

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.filename = ""
        self.type = 0

    def getMessageId(self):
        return 6154

    def initCheckFileRequestMessage(self, param1="", param2=0):
        self.filename = param1
        self.type = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.filename = ""
        self.type = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CheckFileRequestMessage(param1)

    def serializeAs_CheckFileRequestMessage(self, param1):
        param1.write_utf(self.filename)
        param1.write_byte(self.type)

    def deserialize(self, param1):
        self.deserializeAs_CheckFileRequestMessage(param1)

    def deserializeAs_CheckFileRequestMessage(self, param1):
        self._filenameFunc(param1)
        self._typeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CheckFileRequestMessage(param1)

    def deserializeAsyncAs_CheckFileRequestMessage(self, param1):
        param1.add_child(self._filenameFunc)
        param1.add_child(self._typeFunc)

    def _filenameFunc(self, param1):
        self.filename = param1.read_utf()

    def _typeFunc(self, param1):
        self.type = param1.read_byte()
        if self.type < 0:
            raise RuntimeError("Forbidden value (" + str(self.type) + ") on element of CheckFileRequestMessage.type.")


class CheckIntegrityMessage(NetworkMessage):
    protocolId = 6372

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.data = []
        self._datatree = FuncTree()

    def getMessageId(self):
        return 6372

    def initCheckIntegrityMessage(self, param1=[]):
        self.data = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.data = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CheckIntegrityMessage(param1)

    def serializeAs_CheckIntegrityMessage(self, param1):
        param1.write_var_int(len(self.data))
        _loc2_ = 0
        while _loc2_ < len(self.data):
            param1.write_byte(self.data[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_CheckIntegrityMessage(param1)

    def deserializeAs_CheckIntegrityMessage(self, param1):
        _loc4_ = 0
        _loc2_ = param1.read_var_int()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_byte()
            self.data.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CheckIntegrityMessage(param1)

    def deserializeAsyncAs_CheckIntegrityMessage(self, param1):
        self._datatree = param1.add_child(self._datatreeFunc)

    def _datatreeFunc(self, param1):
        _loc2_ = param1.read_var_int()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._datatree.add_child(self._dataFunc)
            _loc3_ += 1

    def _dataFunc(self, param1):
        _loc2_ = param1.read_byte()
        self.data.append(_loc2_)


class ClientKeyMessage(NetworkMessage):
    protocolId = 5607

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.key = ""

    def getMessageId(self):
        return 5607

    def initClientKeyMessage(self, param1=""):
        self.key = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.key = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        if HASH_FUNCTION != None:
            HASH_FUNCTION(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ClientKeyMessage(param1)

    def serializeAs_ClientKeyMessage(self, param1):
        param1.write_utf(self.key)

    def deserialize(self, param1):
        self.deserializeAs_ClientKeyMessage(param1)

    def deserializeAs_ClientKeyMessage(self, param1):
        self._keyFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ClientKeyMessage(param1)

    def deserializeAsyncAs_ClientKeyMessage(self, param1):
        param1.add_child(self._keyFunc)

    def _keyFunc(self, param1):
        self.key = param1.read_utf()


class RawDataMessage(NetworkMessage):
    protocolId = 6253

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.content = ByteArray()

    def getMessageId(self):
        return 6253

    def initRawDataMessage(self, param1=None):
        self.content = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.content = ByteArray()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_RawDataMessage(param1)

    def serializeAs_RawDataMessage(self, param1):
        param1.write_var_int(len(self.content))
        _loc2_ = 0
        while _loc2_ < len(self.content):
            param1.write_byte(self.content[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_RawDataMessage(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_RawDataMessage(param1)

    def deserializeAs_RawDataMessage(self, param1):
        _loc2_ = param1.read_var_int()
        param1.read_bytes(self.content,0,_loc2_)

    def deserializeAsyncAs_RawDataMessage(self, param1):
        param1.add_child(self.deserializeAs_RawDataMessage)


class SystemMessageDisplayMessage(NetworkMessage):
    protocolId = 189

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.hangUp = False
        self.msgId = 0
        self.parameters = []
        self._parameterstree = FuncTree()

    def getMessageId(self):
        return 189

    def initSystemMessageDisplayMessage(self, param1=False, param2=0, param3=[]):
        self.hangUp = param1
        self.msgId = param2
        self.parameters = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.hangUp = False
        self.msgId = 0
        self.parameters = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SystemMessageDisplayMessage(param1)

    def serializeAs_SystemMessageDisplayMessage(self, param1):
        param1.write_boolean(self.hangUp)
        if self.msgId < 0:
            raise RuntimeError("Forbidden value (" + str(self.msgId) + ") on element msgId.")
        param1.write_var_short(self.msgId)
        param1.write_short(len(self.parameters))
        _loc2_ = 0
        while _loc2_ < len(self.parameters):
            param1.write_utf(self.parameters[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_SystemMessageDisplayMessage(param1)

    def deserializeAs_SystemMessageDisplayMessage(self, param1):
        _loc4_ = None
        self._hangUpFunc(param1)
        self._msgIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_utf()
            self.parameters.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SystemMessageDisplayMessage(param1)

    def deserializeAsyncAs_SystemMessageDisplayMessage(self, param1):
        param1.add_child(self._hangUpFunc)
        param1.add_child(self._msgIdFunc)
        self._parameterstree = param1.add_child(self._parameterstreeFunc)

    def _hangUpFunc(self, param1):
        self.hangUp = param1.read_boolean()

    def _msgIdFunc(self, param1):
        self.msgId = param1.read_var_uh_short()
        if self.msgId < 0:
            raise RuntimeError("Forbidden value (" + str(self.msgId) + ") on element of SystemMessageDisplayMessage.msgId.")

    def _parameterstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._parameterstree.add_child(self._parametersFunc)
            _loc3_ += 1

    def _parametersFunc(self, param1):
        _loc2_ = param1.read_utf()
        self.parameters.append(_loc2_)


class SubscriptionUpdateMessage(NetworkMessage):
    protocolId = 6616

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.timestamp = 0

    def getMessageId(self):
        return 6616

    def initSubscriptionUpdateMessage(self, param1=0):
        self.timestamp = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.timestamp = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SubscriptionUpdateMessage(param1)

    def serializeAs_SubscriptionUpdateMessage(self, param1):
        if self.timestamp < -9007199254740990 or self.timestamp > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.timestamp) + ") on element timestamp.")
        param1.write_double(self.timestamp)

    def deserialize(self, param1):
        self.deserializeAs_SubscriptionUpdateMessage(param1)

    def deserializeAs_SubscriptionUpdateMessage(self, param1):
        self._timestampFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SubscriptionUpdateMessage(param1)

    def deserializeAsyncAs_SubscriptionUpdateMessage(self, param1):
        param1.add_child(self._timestampFunc)

    def _timestampFunc(self, param1):
        self.timestamp = param1.read_double()
        if self.timestamp < -9007199254740990 or self.timestamp > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.timestamp) + ") on element of SubscriptionUpdateMessage.timestamp.")


class DownloadCurrentSpeedMessage(NetworkMessage):
    protocolId = 1511

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.downloadSpeed = 0

    def getMessageId(self):
        return 1511

    def initDownloadCurrentSpeedMessage(self, param1=0):
        self.downloadSpeed = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.downloadSpeed = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DownloadCurrentSpeedMessage(param1)

    def serializeAs_DownloadCurrentSpeedMessage(self, param1):
        if self.downloadSpeed < 1 or self.downloadSpeed > 10:
            raise RuntimeError("Forbidden value (" + str(self.downloadSpeed) + ") on element downloadSpeed.")
        param1.write_byte(self.downloadSpeed)

    def deserialize(self, param1):
        self.deserializeAs_DownloadCurrentSpeedMessage(param1)

    def deserializeAs_DownloadCurrentSpeedMessage(self, param1):
        self._downloadSpeedFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DownloadCurrentSpeedMessage(param1)

    def deserializeAsyncAs_DownloadCurrentSpeedMessage(self, param1):
        param1.add_child(self._downloadSpeedFunc)

    def _downloadSpeedFunc(self, param1):
        self.downloadSpeed = param1.read_byte()
        if self.downloadSpeed < 1 or self.downloadSpeed > 10:
            raise RuntimeError("Forbidden value (" + str(self.downloadSpeed) + ") on element of DownloadCurrentSpeedMessage.downloadSpeed.")


class DownloadErrorMessage(NetworkMessage):
    protocolId = 1513

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.errorId = 0
        self.message = ""
        self.helpUrl = ""

    def getMessageId(self):
        return 1513

    def initDownloadErrorMessage(self, param1=0, param2="", param3=""):
        self.errorId = param1
        self.message = param2
        self.helpUrl = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.errorId = 0
        self.message = ""
        self.helpUrl = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DownloadErrorMessage(param1)

    def serializeAs_DownloadErrorMessage(self, param1):
        param1.write_byte(self.errorId)
        param1.write_utf(self.message)
        param1.write_utf(self.helpUrl)

    def deserialize(self, param1):
        self.deserializeAs_DownloadErrorMessage(param1)

    def deserializeAs_DownloadErrorMessage(self, param1):
        self._errorIdFunc(param1)
        self._messageFunc(param1)
        self._helpUrlFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DownloadErrorMessage(param1)

    def deserializeAsyncAs_DownloadErrorMessage(self, param1):
        param1.add_child(self._errorIdFunc)
        param1.add_child(self._messageFunc)
        param1.add_child(self._helpUrlFunc)

    def _errorIdFunc(self, param1):
        self.errorId = param1.read_byte()
        if self.errorId < 0:
            raise RuntimeError("Forbidden value (" + str(self.errorId) + ") on element of DownloadErrorMessage.errorId.")

    def _messageFunc(self, param1):
        self.message = param1.read_utf()

    def _helpUrlFunc(self, param1):
        self.helpUrl = param1.read_utf()


class DownloadGetCurrentSpeedRequestMessage(NetworkMessage):
    protocolId = 1510

    def getMessageId(self):
        return 1510

    def initDownloadGetCurrentSpeedRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_DownloadGetCurrentSpeedRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_DownloadGetCurrentSpeedRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_DownloadGetCurrentSpeedRequestMessage(self, param1):
        pass


class DownloadPartMessage(NetworkMessage):
    protocolId = 1503

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.id = ""

    def getMessageId(self):
        return 1503

    def initDownloadPartMessage(self, param1=""):
        self.id = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.id = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DownloadPartMessage(param1)

    def serializeAs_DownloadPartMessage(self, param1):
        param1.write_utf(self.id)

    def deserialize(self, param1):
        self.deserializeAs_DownloadPartMessage(param1)

    def deserializeAs_DownloadPartMessage(self, param1):
        self._idFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DownloadPartMessage(param1)

    def deserializeAsyncAs_DownloadPartMessage(self, param1):
        param1.add_child(self._idFunc)

    def _idFunc(self, param1):
        self.id = param1.read_utf()


class DownloadSetSpeedRequestMessage(NetworkMessage):
    protocolId = 1512

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.downloadSpeed = 0

    def getMessageId(self):
        return 1512

    def initDownloadSetSpeedRequestMessage(self, param1=0):
        self.downloadSpeed = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.downloadSpeed = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_DownloadSetSpeedRequestMessage(param1)

    def serializeAs_DownloadSetSpeedRequestMessage(self, param1):
        if self.downloadSpeed < 1 or self.downloadSpeed > 10:
            raise RuntimeError("Forbidden value (" + str(self.downloadSpeed) + ") on element downloadSpeed.")
        param1.write_byte(self.downloadSpeed)

    def deserialize(self, param1):
        self.deserializeAs_DownloadSetSpeedRequestMessage(param1)

    def deserializeAs_DownloadSetSpeedRequestMessage(self, param1):
        self._downloadSpeedFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_DownloadSetSpeedRequestMessage(param1)

    def deserializeAsyncAs_DownloadSetSpeedRequestMessage(self, param1):
        param1.add_child(self._downloadSpeedFunc)

    def _downloadSpeedFunc(self, param1):
        self.downloadSpeed = param1.read_byte()
        if self.downloadSpeed < 1 or self.downloadSpeed > 10:
            raise RuntimeError("Forbidden value (" + str(self.downloadSpeed) + ") on element of DownloadSetSpeedRequestMessage.downloadSpeed.")


class GetPartInfoMessage(NetworkMessage):
    protocolId = 1506

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.id = ""

    def getMessageId(self):
        return 1506

    def initGetPartInfoMessage(self, param1=""):
        self.id = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.id = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GetPartInfoMessage(param1)

    def serializeAs_GetPartInfoMessage(self, param1):
        param1.write_utf(self.id)

    def deserialize(self, param1):
        self.deserializeAs_GetPartInfoMessage(param1)

    def deserializeAs_GetPartInfoMessage(self, param1):
        self._idFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GetPartInfoMessage(param1)

    def deserializeAsyncAs_GetPartInfoMessage(self, param1):
        param1.add_child(self._idFunc)

    def _idFunc(self, param1):
        self.id = param1.read_utf()


class GetPartsListMessage(NetworkMessage):
    protocolId = 1501

    def getMessageId(self):
        return 1501

    def initGetPartsListMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_GetPartsListMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_GetPartsListMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_GetPartsListMessage(self, param1):
        pass


class PartInfoMessage(NetworkMessage):
    protocolId = 1508

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.part = ContentPart()
        self.installationPercent = 0
        self._parttree = FuncTree()

    def getMessageId(self):
        return 1508

    def initPartInfoMessage(self, param1=None, param2=0):
        self.part = param1
        self.installationPercent = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.part = ContentPart()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartInfoMessage(param1)

    def serializeAs_PartInfoMessage(self, param1):
        self.part.serializeAs_ContentPart(param1)
        param1.write_float(self.installationPercent)

    def deserialize(self, param1):
        self.deserializeAs_PartInfoMessage(param1)

    def deserializeAs_PartInfoMessage(self, param1):
        self.part = ContentPart()
        self.part.deserialize(param1)
        self._installationPercentFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartInfoMessage(param1)

    def deserializeAsyncAs_PartInfoMessage(self, param1):
        self._parttree = param1.add_child(self._parttreeFunc)
        param1.add_child(self._installationPercentFunc)

    def _parttreeFunc(self, param1):
        self.part = ContentPart()
        self.part.deserializeAsync(self._parttree)

    def _installationPercentFunc(self, param1):
        self.installationPercent = param1.read_float()


class PartsListMessage(NetworkMessage):
    protocolId = 1502

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.parts = []
        self._partstree = FuncTree()

    def getMessageId(self):
        return 1502

    def initPartsListMessage(self, param1=[]):
        self.parts = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.parts = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartsListMessage(param1)

    def serializeAs_PartsListMessage(self, param1):
        param1.write_short(len(self.parts))
        _loc2_ = 0
        while _loc2_ < len(self.parts):
            as_parent(self.parts[_loc2_], ContentPart).serializeAs_ContentPart(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_PartsListMessage(param1)

    def deserializeAs_PartsListMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = ContentPart()
            _loc4_.deserialize(param1)
            self.parts.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartsListMessage(param1)

    def deserializeAsyncAs_PartsListMessage(self, param1):
        self._partstree = param1.add_child(self._partstreeFunc)

    def _partstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._partstree.add_child(self._partsFunc)
            _loc3_ += 1

    def _partsFunc(self, param1):
        _loc2_ = ContentPart()
        _loc2_.deserialize(param1)
        self.parts.append(_loc2_)


class MailStatusMessage(NetworkMessage):
    protocolId = 6275

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.unread = 0
        self.total = 0

    def getMessageId(self):
        return 6275

    def initMailStatusMessage(self, param1=0, param2=0):
        self.unread = param1
        self.total = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.unread = 0
        self.total = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MailStatusMessage(param1)

    def serializeAs_MailStatusMessage(self, param1):
        if self.unread < 0:
            raise RuntimeError("Forbidden value (" + str(self.unread) + ") on element unread.")
        param1.write_var_short(self.unread)
        if self.total < 0:
            raise RuntimeError("Forbidden value (" + str(self.total) + ") on element total.")
        param1.write_var_short(self.total)

    def deserialize(self, param1):
        self.deserializeAs_MailStatusMessage(param1)

    def deserializeAs_MailStatusMessage(self, param1):
        self._unreadFunc(param1)
        self._totalFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MailStatusMessage(param1)

    def deserializeAsyncAs_MailStatusMessage(self, param1):
        param1.add_child(self._unreadFunc)
        param1.add_child(self._totalFunc)

    def _unreadFunc(self, param1):
        self.unread = param1.read_var_uh_short()
        if self.unread < 0:
            raise RuntimeError("Forbidden value (" + str(self.unread) + ") on element of MailStatusMessage.unread.")

    def _totalFunc(self, param1):
        self.total = param1.read_var_uh_short()
        if self.total < 0:
            raise RuntimeError("Forbidden value (" + str(self.total) + ") on element of MailStatusMessage.total.")


class HaapiApiKeyMessage(NetworkMessage):
    protocolId = 6649

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.returnType = 0
        self.keyType = 0
        self.token = ""

    def getMessageId(self):
        return 6649

    def initHaapiApiKeyMessage(self, param1=0, param2=0, param3=""):
        self.returnType = param1
        self.keyType = param2
        self.token = param3
        self._isInitialized = True
        return self

    def reset(self):
        self.returnType = 0
        self.keyType = 0
        self.token = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HaapiApiKeyMessage(param1)

    def serializeAs_HaapiApiKeyMessage(self, param1):
        param1.write_byte(self.returnType)
        param1.write_byte(self.keyType)
        param1.write_utf(self.token)

    def deserialize(self, param1):
        self.deserializeAs_HaapiApiKeyMessage(param1)

    def deserializeAs_HaapiApiKeyMessage(self, param1):
        self._returnTypeFunc(param1)
        self._keyTypeFunc(param1)
        self._tokenFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HaapiApiKeyMessage(param1)

    def deserializeAsyncAs_HaapiApiKeyMessage(self, param1):
        param1.add_child(self._returnTypeFunc)
        param1.add_child(self._keyTypeFunc)
        param1.add_child(self._tokenFunc)

    def _returnTypeFunc(self, param1):
        self.returnType = param1.read_byte()
        if self.returnType < 0:
            raise RuntimeError("Forbidden value (" + str(self.returnType) + ") on element of HaapiApiKeyMessage.returnType.")

    def _keyTypeFunc(self, param1):
        self.keyType = param1.read_byte()
        if self.keyType < 0:
            raise RuntimeError("Forbidden value (" + str(self.keyType) + ") on element of HaapiApiKeyMessage.keyType.")

    def _tokenFunc(self, param1):
        self.token = param1.read_utf()


class HaapiApiKeyRequestMessage(NetworkMessage):
    protocolId = 6648

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.keyType = 0

    def getMessageId(self):
        return 6648

    def initHaapiApiKeyRequestMessage(self, param1=0):
        self.keyType = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.keyType = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HaapiApiKeyRequestMessage(param1)

    def serializeAs_HaapiApiKeyRequestMessage(self, param1):
        param1.write_byte(self.keyType)

    def deserialize(self, param1):
        self.deserializeAs_HaapiApiKeyRequestMessage(param1)

    def deserializeAs_HaapiApiKeyRequestMessage(self, param1):
        self._keyTypeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HaapiApiKeyRequestMessage(param1)

    def deserializeAsyncAs_HaapiApiKeyRequestMessage(self, param1):
        param1.add_child(self._keyTypeFunc)

    def _keyTypeFunc(self, param1):
        self.keyType = param1.read_byte()
        if self.keyType < 0:
            raise RuntimeError("Forbidden value (" + str(self.keyType) + ") on element of HaapiApiKeyRequestMessage.keyType.")


class KrosmasterAuthTokenErrorMessage(NetworkMessage):
    protocolId = 6345

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reason = 0

    def getMessageId(self):
        return 6345

    def initKrosmasterAuthTokenErrorMessage(self, param1=0):
        self.reason = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.reason = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_KrosmasterAuthTokenErrorMessage(param1)

    def serializeAs_KrosmasterAuthTokenErrorMessage(self, param1):
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_KrosmasterAuthTokenErrorMessage(param1)

    def deserializeAs_KrosmasterAuthTokenErrorMessage(self, param1):
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_KrosmasterAuthTokenErrorMessage(param1)

    def deserializeAsyncAs_KrosmasterAuthTokenErrorMessage(self, param1):
        param1.add_child(self._reasonFunc)

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()
        if self.reason < 0:
            raise RuntimeError("Forbidden value (" + str(self.reason) + ") on element of KrosmasterAuthTokenErrorMessage.reason.")


class KrosmasterAuthTokenMessage(NetworkMessage):
    protocolId = 6351

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.token = ""

    def getMessageId(self):
        return 6351

    def initKrosmasterAuthTokenMessage(self, param1=""):
        self.token = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.token = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_KrosmasterAuthTokenMessage(param1)

    def serializeAs_KrosmasterAuthTokenMessage(self, param1):
        param1.write_utf(self.token)

    def deserialize(self, param1):
        self.deserializeAs_KrosmasterAuthTokenMessage(param1)

    def deserializeAs_KrosmasterAuthTokenMessage(self, param1):
        self._tokenFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_KrosmasterAuthTokenMessage(param1)

    def deserializeAsyncAs_KrosmasterAuthTokenMessage(self, param1):
        param1.add_child(self._tokenFunc)

    def _tokenFunc(self, param1):
        self.token = param1.read_utf()


class KrosmasterAuthTokenRequestMessage(NetworkMessage):
    protocolId = 6346

    def getMessageId(self):
        return 6346

    def initKrosmasterAuthTokenRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_KrosmasterAuthTokenRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_KrosmasterAuthTokenRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_KrosmasterAuthTokenRequestMessage(self, param1):
        pass


class KrosmasterInventoryErrorMessage(NetworkMessage):
    protocolId = 6343

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reason = 0

    def getMessageId(self):
        return 6343

    def initKrosmasterInventoryErrorMessage(self, param1=0):
        self.reason = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.reason = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_KrosmasterInventoryErrorMessage(param1)

    def serializeAs_KrosmasterInventoryErrorMessage(self, param1):
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_KrosmasterInventoryErrorMessage(param1)

    def deserializeAs_KrosmasterInventoryErrorMessage(self, param1):
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_KrosmasterInventoryErrorMessage(param1)

    def deserializeAsyncAs_KrosmasterInventoryErrorMessage(self, param1):
        param1.add_child(self._reasonFunc)

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()
        if self.reason < 0:
            raise RuntimeError("Forbidden value (" + str(self.reason) + ") on element of KrosmasterInventoryErrorMessage.reason.")


class KrosmasterInventoryMessage(NetworkMessage):
    protocolId = 6350

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.figures = []
        self._figurestree = FuncTree()

    def getMessageId(self):
        return 6350

    def initKrosmasterInventoryMessage(self, param1=[]):
        self.figures = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.figures = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_KrosmasterInventoryMessage(param1)

    def serializeAs_KrosmasterInventoryMessage(self, param1):
        param1.write_short(len(self.figures))
        _loc2_ = 0
        while _loc2_ < len(self.figures):
            as_parent(self.figures[_loc2_], KrosmasterFigure).serializeAs_KrosmasterFigure(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_KrosmasterInventoryMessage(param1)

    def deserializeAs_KrosmasterInventoryMessage(self, param1):
        _loc4_ = None
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = KrosmasterFigure()
            _loc4_.deserialize(param1)
            self.figures.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_KrosmasterInventoryMessage(param1)

    def deserializeAsyncAs_KrosmasterInventoryMessage(self, param1):
        self._figurestree = param1.add_child(self._figurestreeFunc)

    def _figurestreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._figurestree.add_child(self._figuresFunc)
            _loc3_ += 1

    def _figuresFunc(self, param1):
        _loc2_ = KrosmasterFigure()
        _loc2_.deserialize(param1)
        self.figures.append(_loc2_)


class KrosmasterInventoryRequestMessage(NetworkMessage):
    protocolId = 6344

    def getMessageId(self):
        return 6344

    def initKrosmasterInventoryRequestMessage(self):
        return self

    def reset(self):
        pass

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        pass

    def serializeAs_KrosmasterInventoryRequestMessage(self, param1):
        pass

    def deserialize(self, param1):
        pass

    def deserializeAs_KrosmasterInventoryRequestMessage(self, param1):
        pass

    def deserializeAsync(self, param1):
        pass

    def deserializeAsyncAs_KrosmasterInventoryRequestMessage(self, param1):
        pass


class KrosmasterPlayingStatusMessage(NetworkMessage):
    protocolId = 6347

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.playing = False

    def getMessageId(self):
        return 6347

    def initKrosmasterPlayingStatusMessage(self, param1=False):
        self.playing = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.playing = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_KrosmasterPlayingStatusMessage(param1)

    def serializeAs_KrosmasterPlayingStatusMessage(self, param1):
        param1.write_boolean(self.playing)

    def deserialize(self, param1):
        self.deserializeAs_KrosmasterPlayingStatusMessage(param1)

    def deserializeAs_KrosmasterPlayingStatusMessage(self, param1):
        self._playingFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_KrosmasterPlayingStatusMessage(param1)

    def deserializeAsyncAs_KrosmasterPlayingStatusMessage(self, param1):
        param1.add_child(self._playingFunc)

    def _playingFunc(self, param1):
        self.playing = param1.read_boolean()


class KrosmasterTransferMessage(NetworkMessage):
    protocolId = 6348

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.uid = ""
        self.failure = 0

    def getMessageId(self):
        return 6348

    def initKrosmasterTransferMessage(self, param1="", param2=0):
        self.uid = param1
        self.failure = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.uid = ""
        self.failure = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_KrosmasterTransferMessage(param1)

    def serializeAs_KrosmasterTransferMessage(self, param1):
        param1.write_utf(self.uid)
        param1.write_byte(self.failure)

    def deserialize(self, param1):
        self.deserializeAs_KrosmasterTransferMessage(param1)

    def deserializeAs_KrosmasterTransferMessage(self, param1):
        self._uidFunc(param1)
        self._failureFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_KrosmasterTransferMessage(param1)

    def deserializeAsyncAs_KrosmasterTransferMessage(self, param1):
        param1.add_child(self._uidFunc)
        param1.add_child(self._failureFunc)

    def _uidFunc(self, param1):
        self.uid = param1.read_utf()

    def _failureFunc(self, param1):
        self.failure = param1.read_byte()
        if self.failure < 0:
            raise RuntimeError("Forbidden value (" + str(self.failure) + ") on element of KrosmasterTransferMessage.failure.")


class KrosmasterTransferRequestMessage(NetworkMessage):
    protocolId = 6349

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.uid = ""

    def getMessageId(self):
        return 6349

    def initKrosmasterTransferRequestMessage(self, param1=""):
        self.uid = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.uid = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_KrosmasterTransferRequestMessage(param1)

    def serializeAs_KrosmasterTransferRequestMessage(self, param1):
        param1.write_utf(self.uid)

    def deserialize(self, param1):
        self.deserializeAs_KrosmasterTransferRequestMessage(param1)

    def deserializeAs_KrosmasterTransferRequestMessage(self, param1):
        self._uidFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_KrosmasterTransferRequestMessage(param1)

    def deserializeAsyncAs_KrosmasterTransferRequestMessage(self, param1):
        param1.add_child(self._uidFunc)

    def _uidFunc(self, param1):
        self.uid = param1.read_utf()


class AdminQuietCommandMessage(AdminCommandMessage):
    protocolId = 5662

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 5662

    def initAdminQuietCommandMessage(self, param1=""):
        super().initAdminCommandMessage(param1)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AdminQuietCommandMessage(param1)

    def serializeAs_AdminQuietCommandMessage(self, param1):
        super().serializeAs_AdminCommandMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_AdminQuietCommandMessage(param1)

    def deserializeAs_AdminQuietCommandMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AdminQuietCommandMessage(param1)

    def deserializeAsyncAs_AdminQuietCommandMessage(self, param1):
        super().deserializeAsync(param1)


class AggregateStatWithDataMessage(AggregateStatMessage):
    protocolId = 6662

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.datas = []
        self._datastree = FuncTree()

    def getMessageId(self):
        return 6662

    def initAggregateStatWithDataMessage(self, param1=0, param2=[]):
        super().initAggregateStatMessage(param1)
        self.datas = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.datas = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AggregateStatWithDataMessage(param1)

    def serializeAs_AggregateStatWithDataMessage(self, param1):
        super().serializeAs_AggregateStatMessage(param1)
        param1.write_short(len(self.datas))
        _loc2_ = 0
        while _loc2_ < len(self.datas):
            param1.write_short(as_parent(self.datas[_loc2_], StatisticData).getTypeId())
            as_parent(self.datas[_loc2_], StatisticData).serialize(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_AggregateStatWithDataMessage(param1)

    def deserializeAs_AggregateStatWithDataMessage(self, param1):
        _loc4_ = 0
        _loc5_ = None
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_unsigned_short()
            _loc5_ = ProtocolTypeManager.get_instance(StatisticData,_loc4_)
            _loc5_.deserialize(param1)
            self.datas.append(_loc5_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AggregateStatWithDataMessage(param1)

    def deserializeAsyncAs_AggregateStatWithDataMessage(self, param1):
        super().deserializeAsync(param1)
        self._datastree = param1.add_child(self._datastreeFunc)

    def _datastreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._datastree.add_child(self._datasFunc)
            _loc3_ += 1

    def _datasFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(StatisticData,_loc2_)
        _loc3_.deserialize(param1)
        self.datas.append(_loc3_)


class BasicStatWithDataMessage(BasicStatMessage):
    protocolId = 6573

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.datas = []
        self._datastree = FuncTree()

    def getMessageId(self):
        return 6573

    def initBasicStatWithDataMessage(self, param1=0, param2=0, param3=[]):
        super().initBasicStatMessage(param1,param2)
        self.datas = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.datas = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_BasicStatWithDataMessage(param1)

    def serializeAs_BasicStatWithDataMessage(self, param1):
        super().serializeAs_BasicStatMessage(param1)
        param1.write_short(len(self.datas))
        _loc2_ = 0
        while _loc2_ < len(self.datas):
            param1.write_short(as_parent(self.datas[_loc2_], StatisticData).getTypeId())
            as_parent(self.datas[_loc2_], StatisticData).serialize(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_BasicStatWithDataMessage(param1)

    def deserializeAs_BasicStatWithDataMessage(self, param1):
        _loc4_ = 0
        _loc5_ = None
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_unsigned_short()
            _loc5_ = ProtocolTypeManager.get_instance(StatisticData,_loc4_)
            _loc5_.deserialize(param1)
            self.datas.append(_loc5_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_BasicStatWithDataMessage(param1)

    def deserializeAsyncAs_BasicStatWithDataMessage(self, param1):
        super().deserializeAsync(param1)
        self._datastree = param1.add_child(self._datastreeFunc)

    def _datastreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._datastree.add_child(self._datasFunc)
            _loc3_ += 1

    def _datasFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(StatisticData,_loc2_)
        _loc3_.deserialize(param1)
        self.datas.append(_loc3_)


class IdentificationAccountForceMessage(IdentificationMessage):
    protocolId = 6119

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.forcedAccountLogin = ""

    def getMessageId(self):
        return 6119

    def initIdentificationAccountForceMessage(self, param1=None, param2="", param3=[], param4=0, param5=False, param6=False, param7=False, param8=0, param9=[], param10=""):
        super().initIdentificationMessage(param1,param2,param3,param4,param5,param6,param7,param8,param9)
        self.forcedAccountLogin = param10
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.forcedAccountLogin = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IdentificationAccountForceMessage(param1)

    def serializeAs_IdentificationAccountForceMessage(self, param1):
        super().serializeAs_IdentificationMessage(param1)
        param1.write_utf(self.forcedAccountLogin)

    def deserialize(self, param1):
        self.deserializeAs_IdentificationAccountForceMessage(param1)

    def deserializeAs_IdentificationAccountForceMessage(self, param1):
        super().deserialize(param1)
        self._forcedAccountLoginFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IdentificationAccountForceMessage(param1)

    def deserializeAsyncAs_IdentificationAccountForceMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._forcedAccountLoginFunc)

    def _forcedAccountLoginFunc(self, param1):
        self.forcedAccountLogin = param1.read_utf()


class IdentificationFailedBannedMessage(IdentificationFailedMessage):
    protocolId = 6174

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.banEndDate = 0

    def getMessageId(self):
        return 6174

    def initIdentificationFailedBannedMessage(self, param1=99, param2=0):
        super().initIdentificationFailedMessage(param1)
        self.banEndDate = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.banEndDate = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IdentificationFailedBannedMessage(param1)

    def serializeAs_IdentificationFailedBannedMessage(self, param1):
        super().serializeAs_IdentificationFailedMessage(param1)
        if self.banEndDate < 0 or self.banEndDate > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.banEndDate) + ") on element banEndDate.")
        param1.write_double(self.banEndDate)

    def deserialize(self, param1):
        self.deserializeAs_IdentificationFailedBannedMessage(param1)

    def deserializeAs_IdentificationFailedBannedMessage(self, param1):
        super().deserialize(param1)
        self._banEndDateFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IdentificationFailedBannedMessage(param1)

    def deserializeAsyncAs_IdentificationFailedBannedMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._banEndDateFunc)

    def _banEndDateFunc(self, param1):
        self.banEndDate = param1.read_double()
        if self.banEndDate < 0 or self.banEndDate > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.banEndDate) + ") on element of IdentificationFailedBannedMessage.banEndDate.")


class IdentificationFailedForBadVersionMessage(IdentificationFailedMessage):
    protocolId = 21

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.requiredVersion = Version()
        self._requiredVersiontree = FuncTree()

    def getMessageId(self):
        return 21

    def initIdentificationFailedForBadVersionMessage(self, param1=99, param2=None):
        super().initIdentificationFailedMessage(param1)
        self.requiredVersion = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.requiredVersion = Version()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IdentificationFailedForBadVersionMessage(param1)

    def serializeAs_IdentificationFailedForBadVersionMessage(self, param1):
        super().serializeAs_IdentificationFailedMessage(param1)
        self.requiredVersion.serializeAs_Version(param1)

    def deserialize(self, param1):
        self.deserializeAs_IdentificationFailedForBadVersionMessage(param1)

    def deserializeAs_IdentificationFailedForBadVersionMessage(self, param1):
        super().deserialize(param1)
        self.requiredVersion = Version()
        self.requiredVersion.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IdentificationFailedForBadVersionMessage(param1)

    def deserializeAsyncAs_IdentificationFailedForBadVersionMessage(self, param1):
        super().deserializeAsync(param1)
        self._requiredVersiontree = param1.add_child(self._requiredVersiontreeFunc)

    def _requiredVersiontreeFunc(self, param1):
        self.requiredVersion = Version()
        self.requiredVersion.deserializeAsync(self._requiredVersiontree)


class IdentificationSuccessWithLoginTokenMessage(IdentificationSuccessMessage):
    protocolId = 6209

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.loginToken = ""

    def getMessageId(self):
        return 6209

    def initIdentificationSuccessWithLoginTokenMessage(self, param1="", param2="", param3=0, param4=0, param5=False, param6="", param7=0, param8=0, param9=0, param10=False, param11=0, param12=""):
        super().initIdentificationSuccessMessage(param1,param2,param3,param4,param5,param6,param7,param8,param9,param10,param11)
        self.loginToken = param12
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.loginToken = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IdentificationSuccessWithLoginTokenMessage(param1)

    def serializeAs_IdentificationSuccessWithLoginTokenMessage(self, param1):
        super().serializeAs_IdentificationSuccessMessage(param1)
        param1.write_utf(self.loginToken)

    def deserialize(self, param1):
        self.deserializeAs_IdentificationSuccessWithLoginTokenMessage(param1)

    def deserializeAs_IdentificationSuccessWithLoginTokenMessage(self, param1):
        super().deserialize(param1)
        self._loginTokenFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IdentificationSuccessWithLoginTokenMessage(param1)

    def deserializeAsyncAs_IdentificationSuccessWithLoginTokenMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._loginTokenFunc)

    def _loginTokenFunc(self, param1):
        self.loginToken = param1.read_utf()


class SelectedServerDataExtendedMessage(SelectedServerDataMessage):
    protocolId = 6469

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.servers = []
        self._serverstree = FuncTree()

    def getMessageId(self):
        return 6469

    def initSelectedServerDataExtendedMessage(self, param1=0, param2="", param3=0, param4=False, param5=[], param6=[]):
        super().initSelectedServerDataMessage(param1,param2,param3,param4,param5)
        self.servers = param6
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.servers = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SelectedServerDataExtendedMessage(param1)

    def serializeAs_SelectedServerDataExtendedMessage(self, param1):
        super().serializeAs_SelectedServerDataMessage(param1)
        param1.write_short(len(self.servers))
        _loc2_ = 0
        while _loc2_ < len(self.servers):
            as_parent(self.servers[_loc2_], GameServerInformations).serializeAs_GameServerInformations(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_SelectedServerDataExtendedMessage(param1)

    def deserializeAs_SelectedServerDataExtendedMessage(self, param1):
        _loc4_ = None
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = GameServerInformations()
            _loc4_.deserialize(param1)
            self.servers.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SelectedServerDataExtendedMessage(param1)

    def deserializeAsyncAs_SelectedServerDataExtendedMessage(self, param1):
        super().deserializeAsync(param1)
        self._serverstree = param1.add_child(self._serverstreeFunc)

    def _serverstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._serverstree.add_child(self._serversFunc)
            _loc3_ += 1

    def _serversFunc(self, param1):
        _loc2_ = GameServerInformations()
        _loc2_.deserialize(param1)
        self.servers.append(_loc2_)


class AchievementFinishedInformationMessage(AchievementFinishedMessage):
    protocolId = 6381

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.name = ""
        self.playerId = 0

    def getMessageId(self):
        return 6381

    def initAchievementFinishedInformationMessage(self, param1=0, param2=0, param3="", param4=0):
        super().initAchievementFinishedMessage(param1,param2)
        self.name = param3
        self.playerId = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.name = ""
        self.playerId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AchievementFinishedInformationMessage(param1)

    def serializeAs_AchievementFinishedInformationMessage(self, param1):
        super().serializeAs_AchievementFinishedMessage(param1)
        param1.write_utf(self.name)
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element playerId.")
        param1.write_var_long(self.playerId)

    def deserialize(self, param1):
        self.deserializeAs_AchievementFinishedInformationMessage(param1)

    def deserializeAs_AchievementFinishedInformationMessage(self, param1):
        super().deserialize(param1)
        self._nameFunc(param1)
        self._playerIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AchievementFinishedInformationMessage(param1)

    def deserializeAsyncAs_AchievementFinishedInformationMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._nameFunc)
        param1.add_child(self._playerIdFunc)

    def _nameFunc(self, param1):
        self.name = param1.read_utf()

    def _playerIdFunc(self, param1):
        self.playerId = param1.read_var_uh_long()
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element of AchievementFinishedInformationMessage.playerId.")


class AbstractGameActionWithAckMessage(AbstractGameActionMessage):
    protocolId = 1001

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.waitAckId = 0

    def getMessageId(self):
        return 1001

    def initAbstractGameActionWithAckMessage(self, param1=0, param2=0, param3=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.waitAckId = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.waitAckId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AbstractGameActionWithAckMessage(param1)

    def serializeAs_AbstractGameActionWithAckMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        param1.write_short(self.waitAckId)

    def deserialize(self, param1):
        self.deserializeAs_AbstractGameActionWithAckMessage(param1)

    def deserializeAs_AbstractGameActionWithAckMessage(self, param1):
        super().deserialize(param1)
        self._waitAckIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AbstractGameActionWithAckMessage(param1)

    def deserializeAsyncAs_AbstractGameActionWithAckMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._waitAckIdFunc)

    def _waitAckIdFunc(self, param1):
        self.waitAckId = param1.read_short()


class AbstractGameActionFightTargetedAbilityMessage(AbstractGameActionMessage):
    protocolId = 6118

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0
        self.destinationCellId = 0
        self.critical = 1
        self.silentCast = False
        self.verboseCast = False

    def getMessageId(self):
        return 6118

    def initAbstractGameActionFightTargetedAbilityMessage(self, param1=0, param2=0, param3=0, param4=0, param5=1, param6=False, param7=False):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self.destinationCellId = param4
        self.critical = param5
        self.silentCast = param6
        self.verboseCast = param7
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self.destinationCellId = 0
        self.critical = 1
        self.silentCast = False
        self.verboseCast = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AbstractGameActionFightTargetedAbilityMessage(param1)

    def serializeAs_AbstractGameActionFightTargetedAbilityMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        _loc2_ = 0
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,0,self.silentCast)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,1,self.verboseCast)
        param1.write_byte(_loc2_)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)
        if self.destinationCellId < -1 or self.destinationCellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.destinationCellId) + ") on element destinationCellId.")
        param1.write_short(self.destinationCellId)
        param1.write_byte(self.critical)

    def deserialize(self, param1):
        self.deserializeAs_AbstractGameActionFightTargetedAbilityMessage(param1)

    def deserializeAs_AbstractGameActionFightTargetedAbilityMessage(self, param1):
        super().deserialize(param1)
        self.deserializeByteBoxes(param1)
        self._targetIdFunc(param1)
        self._destinationCellIdFunc(param1)
        self._criticalFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AbstractGameActionFightTargetedAbilityMessage(param1)

    def deserializeAsyncAs_AbstractGameActionFightTargetedAbilityMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self.deserializeByteBoxes)
        param1.add_child(self._targetIdFunc)
        param1.add_child(self._destinationCellIdFunc)
        param1.add_child(self._criticalFunc)

    def deserializeByteBoxes(self, param1):
        _loc2_ = param1.read_byte()
        self.silentCast = BooleanByteWrapper.get_flag(_loc2_,0)
        self.verboseCast = BooleanByteWrapper.get_flag(_loc2_,1)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of AbstractGameActionFightTargetedAbilityMessage.targetId.")

    def _destinationCellIdFunc(self, param1):
        self.destinationCellId = param1.read_short()
        if self.destinationCellId < -1 or self.destinationCellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.destinationCellId) + ") on element of AbstractGameActionFightTargetedAbilityMessage.destinationCellId.")

    def _criticalFunc(self, param1):
        self.critical = param1.read_byte()
        if self.critical < 0:
            raise RuntimeError("Forbidden value (" + str(self.critical) + ") on element of AbstractGameActionFightTargetedAbilityMessage.critical.")


class GameActionFightActivateGlyphTrapMessage(AbstractGameActionMessage):
    protocolId = 6545

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.markId = 0
        self.active = False

    def getMessageId(self):
        return 6545

    def initGameActionFightActivateGlyphTrapMessage(self, param1=0, param2=0, param3=0, param4=False):
        super().initAbstractGameActionMessage(param1,param2)
        self.markId = param3
        self.active = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.markId = 0
        self.active = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightActivateGlyphTrapMessage(param1)

    def serializeAs_GameActionFightActivateGlyphTrapMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        param1.write_short(self.markId)
        param1.write_boolean(self.active)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightActivateGlyphTrapMessage(param1)

    def deserializeAs_GameActionFightActivateGlyphTrapMessage(self, param1):
        super().deserialize(param1)
        self._markIdFunc(param1)
        self._activeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightActivateGlyphTrapMessage(param1)

    def deserializeAsyncAs_GameActionFightActivateGlyphTrapMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._markIdFunc)
        param1.add_child(self._activeFunc)

    def _markIdFunc(self, param1):
        self.markId = param1.read_short()

    def _activeFunc(self, param1):
        self.active = param1.read_boolean()


class GameActionFightCarryCharacterMessage(AbstractGameActionMessage):
    protocolId = 5830

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0
        self.cellId = 0

    def getMessageId(self):
        return 5830

    def initGameActionFightCarryCharacterMessage(self, param1=0, param2=0, param3=0, param4=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self.cellId = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self.cellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightCarryCharacterMessage(param1)

    def serializeAs_GameActionFightCarryCharacterMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)
        if self.cellId < -1 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element cellId.")
        param1.write_short(self.cellId)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightCarryCharacterMessage(param1)

    def deserializeAs_GameActionFightCarryCharacterMessage(self, param1):
        super().deserialize(param1)
        self._targetIdFunc(param1)
        self._cellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightCarryCharacterMessage(param1)

    def deserializeAsyncAs_GameActionFightCarryCharacterMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetIdFunc)
        param1.add_child(self._cellIdFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightCarryCharacterMessage.targetId.")

    def _cellIdFunc(self, param1):
        self.cellId = param1.read_short()
        if self.cellId < -1 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element of GameActionFightCarryCharacterMessage.cellId.")


class GameActionFightChangeLookMessage(AbstractGameActionMessage):
    protocolId = 5532

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0
        self.entityLook = EntityLook()
        self._entityLooktree = FuncTree()

    def getMessageId(self):
        return 5532

    def initGameActionFightChangeLookMessage(self, param1=0, param2=0, param3=0, param4=None):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self.entityLook = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self.entityLook = EntityLook()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightChangeLookMessage(param1)

    def serializeAs_GameActionFightChangeLookMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)
        self.entityLook.serializeAs_EntityLook(param1)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightChangeLookMessage(param1)

    def deserializeAs_GameActionFightChangeLookMessage(self, param1):
        super().deserialize(param1)
        self._targetIdFunc(param1)
        self.entityLook = EntityLook()
        self.entityLook.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightChangeLookMessage(param1)

    def deserializeAsyncAs_GameActionFightChangeLookMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetIdFunc)
        self._entityLooktree = param1.add_child(self._entityLooktreeFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightChangeLookMessage.targetId.")

    def _entityLooktreeFunc(self, param1):
        self.entityLook = EntityLook()
        self.entityLook.deserializeAsync(self._entityLooktree)


class GameActionFightDeathMessage(AbstractGameActionMessage):
    protocolId = 1099

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0

    def getMessageId(self):
        return 1099

    def initGameActionFightDeathMessage(self, param1=0, param2=0, param3=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightDeathMessage(param1)

    def serializeAs_GameActionFightDeathMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightDeathMessage(param1)

    def deserializeAs_GameActionFightDeathMessage(self, param1):
        super().deserialize(param1)
        self._targetIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightDeathMessage(param1)

    def deserializeAsyncAs_GameActionFightDeathMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetIdFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightDeathMessage.targetId.")


class GameActionFightDispellableEffectMessage(AbstractGameActionMessage):
    protocolId = 6070

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.effect = AbstractFightDispellableEffect()
        self._effecttree = FuncTree()

    def getMessageId(self):
        return 6070

    def initGameActionFightDispellableEffectMessage(self, param1=0, param2=0, param3=None):
        super().initAbstractGameActionMessage(param1,param2)
        self.effect = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.effect = AbstractFightDispellableEffect()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightDispellableEffectMessage(param1)

    def serializeAs_GameActionFightDispellableEffectMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        param1.write_short(self.effect.getTypeId())
        self.effect.serialize(param1)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightDispellableEffectMessage(param1)

    def deserializeAs_GameActionFightDispellableEffectMessage(self, param1):
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        self.effect = ProtocolTypeManager.get_instance(AbstractFightDispellableEffect,_loc2_)
        self.effect.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightDispellableEffectMessage(param1)

    def deserializeAsyncAs_GameActionFightDispellableEffectMessage(self, param1):
        super().deserializeAsync(param1)
        self._effecttree = param1.add_child(self._effecttreeFunc)

    def _effecttreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.effect = ProtocolTypeManager.get_instance(AbstractFightDispellableEffect,_loc2_)
        self.effect.deserializeAsync(self._effecttree)


class GameActionFightDispellMessage(AbstractGameActionMessage):
    protocolId = 5533

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0

    def getMessageId(self):
        return 5533

    def initGameActionFightDispellMessage(self, param1=0, param2=0, param3=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightDispellMessage(param1)

    def serializeAs_GameActionFightDispellMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightDispellMessage(param1)

    def deserializeAs_GameActionFightDispellMessage(self, param1):
        super().deserialize(param1)
        self._targetIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightDispellMessage(param1)

    def deserializeAsyncAs_GameActionFightDispellMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetIdFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightDispellMessage.targetId.")


class GameActionFightDodgePointLossMessage(AbstractGameActionMessage):
    protocolId = 5828

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0
        self.amount = 0

    def getMessageId(self):
        return 5828

    def initGameActionFightDodgePointLossMessage(self, param1=0, param2=0, param3=0, param4=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self.amount = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self.amount = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightDodgePointLossMessage(param1)

    def serializeAs_GameActionFightDodgePointLossMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)
        if self.amount < 0:
            raise RuntimeError("Forbidden value (" + str(self.amount) + ") on element amount.")
        param1.write_var_short(self.amount)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightDodgePointLossMessage(param1)

    def deserializeAs_GameActionFightDodgePointLossMessage(self, param1):
        super().deserialize(param1)
        self._targetIdFunc(param1)
        self._amountFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightDodgePointLossMessage(param1)

    def deserializeAsyncAs_GameActionFightDodgePointLossMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetIdFunc)
        param1.add_child(self._amountFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightDodgePointLossMessage.targetId.")

    def _amountFunc(self, param1):
        self.amount = param1.read_var_uh_short()
        if self.amount < 0:
            raise RuntimeError("Forbidden value (" + str(self.amount) + ") on element of GameActionFightDodgePointLossMessage.amount.")


class GameActionFightDropCharacterMessage(AbstractGameActionMessage):
    protocolId = 5826

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0
        self.cellId = 0

    def getMessageId(self):
        return 5826

    def initGameActionFightDropCharacterMessage(self, param1=0, param2=0, param3=0, param4=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self.cellId = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self.cellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightDropCharacterMessage(param1)

    def serializeAs_GameActionFightDropCharacterMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)
        if self.cellId < -1 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element cellId.")
        param1.write_short(self.cellId)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightDropCharacterMessage(param1)

    def deserializeAs_GameActionFightDropCharacterMessage(self, param1):
        super().deserialize(param1)
        self._targetIdFunc(param1)
        self._cellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightDropCharacterMessage(param1)

    def deserializeAsyncAs_GameActionFightDropCharacterMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetIdFunc)
        param1.add_child(self._cellIdFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightDropCharacterMessage.targetId.")

    def _cellIdFunc(self, param1):
        self.cellId = param1.read_short()
        if self.cellId < -1 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element of GameActionFightDropCharacterMessage.cellId.")


class GameActionFightExchangePositionsMessage(AbstractGameActionMessage):
    protocolId = 5527

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0
        self.casterCellId = 0
        self.targetCellId = 0

    def getMessageId(self):
        return 5527

    def initGameActionFightExchangePositionsMessage(self, param1=0, param2=0, param3=0, param4=0, param5=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self.casterCellId = param4
        self.targetCellId = param5
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self.casterCellId = 0
        self.targetCellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightExchangePositionsMessage(param1)

    def serializeAs_GameActionFightExchangePositionsMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)
        if self.casterCellId < -1 or self.casterCellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.casterCellId) + ") on element casterCellId.")
        param1.write_short(self.casterCellId)
        if self.targetCellId < -1 or self.targetCellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.targetCellId) + ") on element targetCellId.")
        param1.write_short(self.targetCellId)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightExchangePositionsMessage(param1)

    def deserializeAs_GameActionFightExchangePositionsMessage(self, param1):
        super().deserialize(param1)
        self._targetIdFunc(param1)
        self._casterCellIdFunc(param1)
        self._targetCellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightExchangePositionsMessage(param1)

    def deserializeAsyncAs_GameActionFightExchangePositionsMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetIdFunc)
        param1.add_child(self._casterCellIdFunc)
        param1.add_child(self._targetCellIdFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightExchangePositionsMessage.targetId.")

    def _casterCellIdFunc(self, param1):
        self.casterCellId = param1.read_short()
        if self.casterCellId < -1 or self.casterCellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.casterCellId) + ") on element of GameActionFightExchangePositionsMessage.casterCellId.")

    def _targetCellIdFunc(self, param1):
        self.targetCellId = param1.read_short()
        if self.targetCellId < -1 or self.targetCellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.targetCellId) + ") on element of GameActionFightExchangePositionsMessage.targetCellId.")


class GameActionFightInvisibilityMessage(AbstractGameActionMessage):
    protocolId = 5821

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0
        self.state = 0

    def getMessageId(self):
        return 5821

    def initGameActionFightInvisibilityMessage(self, param1=0, param2=0, param3=0, param4=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self.state = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self.state = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightInvisibilityMessage(param1)

    def serializeAs_GameActionFightInvisibilityMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)
        param1.write_byte(self.state)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightInvisibilityMessage(param1)

    def deserializeAs_GameActionFightInvisibilityMessage(self, param1):
        super().deserialize(param1)
        self._targetIdFunc(param1)
        self._stateFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightInvisibilityMessage(param1)

    def deserializeAsyncAs_GameActionFightInvisibilityMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetIdFunc)
        param1.add_child(self._stateFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightInvisibilityMessage.targetId.")

    def _stateFunc(self, param1):
        self.state = param1.read_byte()
        if self.state < 0:
            raise RuntimeError("Forbidden value (" + str(self.state) + ") on element of GameActionFightInvisibilityMessage.state.")


class GameActionFightInvisibleDetectedMessage(AbstractGameActionMessage):
    protocolId = 6320

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0
        self.cellId = 0

    def getMessageId(self):
        return 6320

    def initGameActionFightInvisibleDetectedMessage(self, param1=0, param2=0, param3=0, param4=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self.cellId = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self.cellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightInvisibleDetectedMessage(param1)

    def serializeAs_GameActionFightInvisibleDetectedMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)
        if self.cellId < -1 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element cellId.")
        param1.write_short(self.cellId)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightInvisibleDetectedMessage(param1)

    def deserializeAs_GameActionFightInvisibleDetectedMessage(self, param1):
        super().deserialize(param1)
        self._targetIdFunc(param1)
        self._cellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightInvisibleDetectedMessage(param1)

    def deserializeAsyncAs_GameActionFightInvisibleDetectedMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetIdFunc)
        param1.add_child(self._cellIdFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightInvisibleDetectedMessage.targetId.")

    def _cellIdFunc(self, param1):
        self.cellId = param1.read_short()
        if self.cellId < -1 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element of GameActionFightInvisibleDetectedMessage.cellId.")


class GameActionFightKillMessage(AbstractGameActionMessage):
    protocolId = 5571

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0

    def getMessageId(self):
        return 5571

    def initGameActionFightKillMessage(self, param1=0, param2=0, param3=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightKillMessage(param1)

    def serializeAs_GameActionFightKillMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightKillMessage(param1)

    def deserializeAs_GameActionFightKillMessage(self, param1):
        super().deserialize(param1)
        self._targetIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightKillMessage(param1)

    def deserializeAsyncAs_GameActionFightKillMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetIdFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightKillMessage.targetId.")


class GameActionFightLifePointsGainMessage(AbstractGameActionMessage):
    protocolId = 6311

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0
        self.delta = 0

    def getMessageId(self):
        return 6311

    def initGameActionFightLifePointsGainMessage(self, param1=0, param2=0, param3=0, param4=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self.delta = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self.delta = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightLifePointsGainMessage(param1)

    def serializeAs_GameActionFightLifePointsGainMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)
        if self.delta < 0:
            raise RuntimeError("Forbidden value (" + str(self.delta) + ") on element delta.")
        param1.write_var_int(self.delta)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightLifePointsGainMessage(param1)

    def deserializeAs_GameActionFightLifePointsGainMessage(self, param1):
        super().deserialize(param1)
        self._targetIdFunc(param1)
        self._deltaFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightLifePointsGainMessage(param1)

    def deserializeAsyncAs_GameActionFightLifePointsGainMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetIdFunc)
        param1.add_child(self._deltaFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightLifePointsGainMessage.targetId.")

    def _deltaFunc(self, param1):
        self.delta = param1.read_var_uh_int()
        if self.delta < 0:
            raise RuntimeError("Forbidden value (" + str(self.delta) + ") on element of GameActionFightLifePointsGainMessage.delta.")


class GameActionFightLifePointsLostMessage(AbstractGameActionMessage):
    protocolId = 6312

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0
        self.loss = 0
        self.permanentDamages = 0

    def getMessageId(self):
        return 6312

    def initGameActionFightLifePointsLostMessage(self, param1=0, param2=0, param3=0, param4=0, param5=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self.loss = param4
        self.permanentDamages = param5
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self.loss = 0
        self.permanentDamages = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightLifePointsLostMessage(param1)

    def serializeAs_GameActionFightLifePointsLostMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)
        if self.loss < 0:
            raise RuntimeError("Forbidden value (" + str(self.loss) + ") on element loss.")
        param1.write_var_int(self.loss)
        if self.permanentDamages < 0:
            raise RuntimeError("Forbidden value (" + str(self.permanentDamages) + ") on element permanentDamages.")
        param1.write_var_int(self.permanentDamages)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightLifePointsLostMessage(param1)

    def deserializeAs_GameActionFightLifePointsLostMessage(self, param1):
        super().deserialize(param1)
        self._targetIdFunc(param1)
        self._lossFunc(param1)
        self._permanentDamagesFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightLifePointsLostMessage(param1)

    def deserializeAsyncAs_GameActionFightLifePointsLostMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetIdFunc)
        param1.add_child(self._lossFunc)
        param1.add_child(self._permanentDamagesFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightLifePointsLostMessage.targetId.")

    def _lossFunc(self, param1):
        self.loss = param1.read_var_uh_int()
        if self.loss < 0:
            raise RuntimeError("Forbidden value (" + str(self.loss) + ") on element of GameActionFightLifePointsLostMessage.loss.")

    def _permanentDamagesFunc(self, param1):
        self.permanentDamages = param1.read_var_uh_int()
        if self.permanentDamages < 0:
            raise RuntimeError("Forbidden value (" + str(self.permanentDamages) + ") on element of GameActionFightLifePointsLostMessage.permanentDamages.")


class GameActionFightMarkCellsMessage(AbstractGameActionMessage):
    protocolId = 5540

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.mark = GameActionMark()
        self._marktree = FuncTree()

    def getMessageId(self):
        return 5540

    def initGameActionFightMarkCellsMessage(self, param1=0, param2=0, param3=None):
        super().initAbstractGameActionMessage(param1,param2)
        self.mark = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.mark = GameActionMark()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightMarkCellsMessage(param1)

    def serializeAs_GameActionFightMarkCellsMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        self.mark.serializeAs_GameActionMark(param1)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightMarkCellsMessage(param1)

    def deserializeAs_GameActionFightMarkCellsMessage(self, param1):
        super().deserialize(param1)
        self.mark = GameActionMark()
        self.mark.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightMarkCellsMessage(param1)

    def deserializeAsyncAs_GameActionFightMarkCellsMessage(self, param1):
        super().deserializeAsync(param1)
        self._marktree = param1.add_child(self._marktreeFunc)

    def _marktreeFunc(self, param1):
        self.mark = GameActionMark()
        self.mark.deserializeAsync(self._marktree)


class GameActionFightModifyEffectsDurationMessage(AbstractGameActionMessage):
    protocolId = 6304

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0
        self.delta = 0

    def getMessageId(self):
        return 6304

    def initGameActionFightModifyEffectsDurationMessage(self, param1=0, param2=0, param3=0, param4=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self.delta = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self.delta = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightModifyEffectsDurationMessage(param1)

    def serializeAs_GameActionFightModifyEffectsDurationMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)
        param1.write_short(self.delta)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightModifyEffectsDurationMessage(param1)

    def deserializeAs_GameActionFightModifyEffectsDurationMessage(self, param1):
        super().deserialize(param1)
        self._targetIdFunc(param1)
        self._deltaFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightModifyEffectsDurationMessage(param1)

    def deserializeAsyncAs_GameActionFightModifyEffectsDurationMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetIdFunc)
        param1.add_child(self._deltaFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightModifyEffectsDurationMessage.targetId.")

    def _deltaFunc(self, param1):
        self.delta = param1.read_short()


class GameActionFightPointsVariationMessage(AbstractGameActionMessage):
    protocolId = 1030

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0
        self.delta = 0

    def getMessageId(self):
        return 1030

    def initGameActionFightPointsVariationMessage(self, param1=0, param2=0, param3=0, param4=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self.delta = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self.delta = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightPointsVariationMessage(param1)

    def serializeAs_GameActionFightPointsVariationMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)
        param1.write_short(self.delta)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightPointsVariationMessage(param1)

    def deserializeAs_GameActionFightPointsVariationMessage(self, param1):
        super().deserialize(param1)
        self._targetIdFunc(param1)
        self._deltaFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightPointsVariationMessage(param1)

    def deserializeAsyncAs_GameActionFightPointsVariationMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetIdFunc)
        param1.add_child(self._deltaFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightPointsVariationMessage.targetId.")

    def _deltaFunc(self, param1):
        self.delta = param1.read_short()


class GameActionFightReduceDamagesMessage(AbstractGameActionMessage):
    protocolId = 5526

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0
        self.amount = 0

    def getMessageId(self):
        return 5526

    def initGameActionFightReduceDamagesMessage(self, param1=0, param2=0, param3=0, param4=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self.amount = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self.amount = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightReduceDamagesMessage(param1)

    def serializeAs_GameActionFightReduceDamagesMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)
        if self.amount < 0:
            raise RuntimeError("Forbidden value (" + str(self.amount) + ") on element amount.")
        param1.write_var_int(self.amount)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightReduceDamagesMessage(param1)

    def deserializeAs_GameActionFightReduceDamagesMessage(self, param1):
        super().deserialize(param1)
        self._targetIdFunc(param1)
        self._amountFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightReduceDamagesMessage(param1)

    def deserializeAsyncAs_GameActionFightReduceDamagesMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetIdFunc)
        param1.add_child(self._amountFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightReduceDamagesMessage.targetId.")

    def _amountFunc(self, param1):
        self.amount = param1.read_var_uh_int()
        if self.amount < 0:
            raise RuntimeError("Forbidden value (" + str(self.amount) + ") on element of GameActionFightReduceDamagesMessage.amount.")


class GameActionFightReflectDamagesMessage(AbstractGameActionMessage):
    protocolId = 5530

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0

    def getMessageId(self):
        return 5530

    def initGameActionFightReflectDamagesMessage(self, param1=0, param2=0, param3=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightReflectDamagesMessage(param1)

    def serializeAs_GameActionFightReflectDamagesMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightReflectDamagesMessage(param1)

    def deserializeAs_GameActionFightReflectDamagesMessage(self, param1):
        super().deserialize(param1)
        self._targetIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightReflectDamagesMessage(param1)

    def deserializeAsyncAs_GameActionFightReflectDamagesMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetIdFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightReflectDamagesMessage.targetId.")


class GameActionFightReflectSpellMessage(AbstractGameActionMessage):
    protocolId = 5531

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0

    def getMessageId(self):
        return 5531

    def initGameActionFightReflectSpellMessage(self, param1=0, param2=0, param3=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightReflectSpellMessage(param1)

    def serializeAs_GameActionFightReflectSpellMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightReflectSpellMessage(param1)

    def deserializeAs_GameActionFightReflectSpellMessage(self, param1):
        super().deserialize(param1)
        self._targetIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightReflectSpellMessage(param1)

    def deserializeAsyncAs_GameActionFightReflectSpellMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetIdFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightReflectSpellMessage.targetId.")


class GameActionFightSlideMessage(AbstractGameActionMessage):
    protocolId = 5525

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0
        self.startCellId = 0
        self.endCellId = 0

    def getMessageId(self):
        return 5525

    def initGameActionFightSlideMessage(self, param1=0, param2=0, param3=0, param4=0, param5=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self.startCellId = param4
        self.endCellId = param5
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self.startCellId = 0
        self.endCellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightSlideMessage(param1)

    def serializeAs_GameActionFightSlideMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)
        if self.startCellId < -1 or self.startCellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.startCellId) + ") on element startCellId.")
        param1.write_short(self.startCellId)
        if self.endCellId < -1 or self.endCellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.endCellId) + ") on element endCellId.")
        param1.write_short(self.endCellId)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightSlideMessage(param1)

    def deserializeAs_GameActionFightSlideMessage(self, param1):
        super().deserialize(param1)
        self._targetIdFunc(param1)
        self._startCellIdFunc(param1)
        self._endCellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightSlideMessage(param1)

    def deserializeAsyncAs_GameActionFightSlideMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetIdFunc)
        param1.add_child(self._startCellIdFunc)
        param1.add_child(self._endCellIdFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightSlideMessage.targetId.")

    def _startCellIdFunc(self, param1):
        self.startCellId = param1.read_short()
        if self.startCellId < -1 or self.startCellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.startCellId) + ") on element of GameActionFightSlideMessage.startCellId.")

    def _endCellIdFunc(self, param1):
        self.endCellId = param1.read_short()
        if self.endCellId < -1 or self.endCellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.endCellId) + ") on element of GameActionFightSlideMessage.endCellId.")


class GameActionFightSpellCooldownVariationMessage(AbstractGameActionMessage):
    protocolId = 6219

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0
        self.spellId = 0
        self.value = 0

    def getMessageId(self):
        return 6219

    def initGameActionFightSpellCooldownVariationMessage(self, param1=0, param2=0, param3=0, param4=0, param5=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self.spellId = param4
        self.value = param5
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self.spellId = 0
        self.value = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightSpellCooldownVariationMessage(param1)

    def serializeAs_GameActionFightSpellCooldownVariationMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)
        if self.spellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spellId) + ") on element spellId.")
        param1.write_var_short(self.spellId)
        param1.write_var_short(self.value)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightSpellCooldownVariationMessage(param1)

    def deserializeAs_GameActionFightSpellCooldownVariationMessage(self, param1):
        super().deserialize(param1)
        self._targetIdFunc(param1)
        self._spellIdFunc(param1)
        self._valueFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightSpellCooldownVariationMessage(param1)

    def deserializeAsyncAs_GameActionFightSpellCooldownVariationMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetIdFunc)
        param1.add_child(self._spellIdFunc)
        param1.add_child(self._valueFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightSpellCooldownVariationMessage.targetId.")

    def _spellIdFunc(self, param1):
        self.spellId = param1.read_var_uh_short()
        if self.spellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spellId) + ") on element of GameActionFightSpellCooldownVariationMessage.spellId.")

    def _valueFunc(self, param1):
        self.value = param1.read_var_short()


class GameActionFightSpellImmunityMessage(AbstractGameActionMessage):
    protocolId = 6221

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0
        self.spellId = 0

    def getMessageId(self):
        return 6221

    def initGameActionFightSpellImmunityMessage(self, param1=0, param2=0, param3=0, param4=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self.spellId = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self.spellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightSpellImmunityMessage(param1)

    def serializeAs_GameActionFightSpellImmunityMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)
        if self.spellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spellId) + ") on element spellId.")
        param1.write_var_short(self.spellId)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightSpellImmunityMessage(param1)

    def deserializeAs_GameActionFightSpellImmunityMessage(self, param1):
        super().deserialize(param1)
        self._targetIdFunc(param1)
        self._spellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightSpellImmunityMessage(param1)

    def deserializeAsyncAs_GameActionFightSpellImmunityMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetIdFunc)
        param1.add_child(self._spellIdFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightSpellImmunityMessage.targetId.")

    def _spellIdFunc(self, param1):
        self.spellId = param1.read_var_uh_short()
        if self.spellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spellId) + ") on element of GameActionFightSpellImmunityMessage.spellId.")


class GameActionFightStealKamaMessage(AbstractGameActionMessage):
    protocolId = 5535

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0
        self.amount = 0

    def getMessageId(self):
        return 5535

    def initGameActionFightStealKamaMessage(self, param1=0, param2=0, param3=0, param4=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self.amount = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self.amount = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightStealKamaMessage(param1)

    def serializeAs_GameActionFightStealKamaMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)
        if self.amount < 0 or self.amount > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.amount) + ") on element amount.")
        param1.write_var_long(self.amount)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightStealKamaMessage(param1)

    def deserializeAs_GameActionFightStealKamaMessage(self, param1):
        super().deserialize(param1)
        self._targetIdFunc(param1)
        self._amountFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightStealKamaMessage(param1)

    def deserializeAsyncAs_GameActionFightStealKamaMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetIdFunc)
        param1.add_child(self._amountFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightStealKamaMessage.targetId.")

    def _amountFunc(self, param1):
        self.amount = param1.read_var_uh_long()
        if self.amount < 0 or self.amount > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.amount) + ") on element of GameActionFightStealKamaMessage.amount.")


class GameActionFightSummonMessage(AbstractGameActionMessage):
    protocolId = 5825

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.summons = []
        self._summonstree = FuncTree()

    def getMessageId(self):
        return 5825

    def initGameActionFightSummonMessage(self, param1=0, param2=0, param3=[]):
        super().initAbstractGameActionMessage(param1,param2)
        self.summons = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.summons = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightSummonMessage(param1)

    def serializeAs_GameActionFightSummonMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        param1.write_short(len(self.summons))
        _loc2_ = 0
        while _loc2_ < len(self.summons):
            param1.write_short(as_parent(self.summons[_loc2_], GameFightFighterInformations).getTypeId())
            as_parent(self.summons[_loc2_], GameFightFighterInformations).serialize(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightSummonMessage(param1)

    def deserializeAs_GameActionFightSummonMessage(self, param1):
        _loc4_ = 0
        _loc5_ = None
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_unsigned_short()
            _loc5_ = ProtocolTypeManager.get_instance(GameFightFighterInformations,_loc4_)
            _loc5_.deserialize(param1)
            self.summons.append(_loc5_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightSummonMessage(param1)

    def deserializeAsyncAs_GameActionFightSummonMessage(self, param1):
        super().deserializeAsync(param1)
        self._summonstree = param1.add_child(self._summonstreeFunc)

    def _summonstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._summonstree.add_child(self._summonsFunc)
            _loc3_ += 1

    def _summonsFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(GameFightFighterInformations,_loc2_)
        _loc3_.deserialize(param1)
        self.summons.append(_loc3_)


class GameActionFightTackledMessage(AbstractGameActionMessage):
    protocolId = 1004

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.tacklersIds = []
        self._tacklersIdstree = FuncTree()

    def getMessageId(self):
        return 1004

    def initGameActionFightTackledMessage(self, param1=0, param2=0, param3=[]):
        super().initAbstractGameActionMessage(param1,param2)
        self.tacklersIds = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.tacklersIds = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightTackledMessage(param1)

    def serializeAs_GameActionFightTackledMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        param1.write_short(len(self.tacklersIds))
        _loc2_ = 0
        while _loc2_ < len(self.tacklersIds):
            if self.tacklersIds[_loc2_] < -9007199254740990 or self.tacklersIds[_loc2_] > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(self.tacklersIds[_loc2_]) + ") on element 1 (starting at 1) of tacklersIds.")
            param1.write_double(self.tacklersIds[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightTackledMessage(param1)

    def deserializeAs_GameActionFightTackledMessage(self, param1):
        _loc4_ = None
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_double()
            if _loc4_ < -9007199254740990 or _loc4_ > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of tacklersIds.")
            self.tacklersIds.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightTackledMessage(param1)

    def deserializeAsyncAs_GameActionFightTackledMessage(self, param1):
        super().deserializeAsync(param1)
        self._tacklersIdstree = param1.add_child(self._tacklersIdstreeFunc)

    def _tacklersIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._tacklersIdstree.add_child(self._tacklersIdsFunc)
            _loc3_ += 1

    def _tacklersIdsFunc(self, param1):
        _loc2_ = param1.read_double()
        if _loc2_ < -9007199254740990 or _loc2_ > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of tacklersIds.")
        self.tacklersIds.append(_loc2_)


class GameActionFightTeleportOnSameMapMessage(AbstractGameActionMessage):
    protocolId = 5528

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0
        self.cellId = 0

    def getMessageId(self):
        return 5528

    def initGameActionFightTeleportOnSameMapMessage(self, param1=0, param2=0, param3=0, param4=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self.cellId = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self.cellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightTeleportOnSameMapMessage(param1)

    def serializeAs_GameActionFightTeleportOnSameMapMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)
        if self.cellId < -1 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element cellId.")
        param1.write_short(self.cellId)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightTeleportOnSameMapMessage(param1)

    def deserializeAs_GameActionFightTeleportOnSameMapMessage(self, param1):
        super().deserialize(param1)
        self._targetIdFunc(param1)
        self._cellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightTeleportOnSameMapMessage(param1)

    def deserializeAsyncAs_GameActionFightTeleportOnSameMapMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetIdFunc)
        param1.add_child(self._cellIdFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightTeleportOnSameMapMessage.targetId.")

    def _cellIdFunc(self, param1):
        self.cellId = param1.read_short()
        if self.cellId < -1 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element of GameActionFightTeleportOnSameMapMessage.cellId.")


class GameActionFightThrowCharacterMessage(AbstractGameActionMessage):
    protocolId = 5829

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0
        self.cellId = 0

    def getMessageId(self):
        return 5829

    def initGameActionFightThrowCharacterMessage(self, param1=0, param2=0, param3=0, param4=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self.cellId = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self.cellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightThrowCharacterMessage(param1)

    def serializeAs_GameActionFightThrowCharacterMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)
        if self.cellId < -1 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element cellId.")
        param1.write_short(self.cellId)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightThrowCharacterMessage(param1)

    def deserializeAs_GameActionFightThrowCharacterMessage(self, param1):
        super().deserialize(param1)
        self._targetIdFunc(param1)
        self._cellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightThrowCharacterMessage(param1)

    def deserializeAsyncAs_GameActionFightThrowCharacterMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetIdFunc)
        param1.add_child(self._cellIdFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightThrowCharacterMessage.targetId.")

    def _cellIdFunc(self, param1):
        self.cellId = param1.read_short()
        if self.cellId < -1 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element of GameActionFightThrowCharacterMessage.cellId.")


class GameActionFightTriggerGlyphTrapMessage(AbstractGameActionMessage):
    protocolId = 5741

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.markId = 0
        self.triggeringCharacterId = 0
        self.triggeredSpellId = 0

    def getMessageId(self):
        return 5741

    def initGameActionFightTriggerGlyphTrapMessage(self, param1=0, param2=0, param3=0, param4=0, param5=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.markId = param3
        self.triggeringCharacterId = param4
        self.triggeredSpellId = param5
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.markId = 0
        self.triggeringCharacterId = 0
        self.triggeredSpellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightTriggerGlyphTrapMessage(param1)

    def serializeAs_GameActionFightTriggerGlyphTrapMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        param1.write_short(self.markId)
        if self.triggeringCharacterId < -9007199254740990 or self.triggeringCharacterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.triggeringCharacterId) + ") on element triggeringCharacterId.")
        param1.write_double(self.triggeringCharacterId)
        if self.triggeredSpellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.triggeredSpellId) + ") on element triggeredSpellId.")
        param1.write_var_short(self.triggeredSpellId)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightTriggerGlyphTrapMessage(param1)

    def deserializeAs_GameActionFightTriggerGlyphTrapMessage(self, param1):
        super().deserialize(param1)
        self._markIdFunc(param1)
        self._triggeringCharacterIdFunc(param1)
        self._triggeredSpellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightTriggerGlyphTrapMessage(param1)

    def deserializeAsyncAs_GameActionFightTriggerGlyphTrapMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._markIdFunc)
        param1.add_child(self._triggeringCharacterIdFunc)
        param1.add_child(self._triggeredSpellIdFunc)

    def _markIdFunc(self, param1):
        self.markId = param1.read_short()

    def _triggeringCharacterIdFunc(self, param1):
        self.triggeringCharacterId = param1.read_double()
        if self.triggeringCharacterId < -9007199254740990 or self.triggeringCharacterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.triggeringCharacterId) + ") on element of GameActionFightTriggerGlyphTrapMessage.triggeringCharacterId.")

    def _triggeredSpellIdFunc(self, param1):
        self.triggeredSpellId = param1.read_var_uh_short()
        if self.triggeredSpellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.triggeredSpellId) + ") on element of GameActionFightTriggerGlyphTrapMessage.triggeredSpellId.")


class GameActionFightUnmarkCellsMessage(AbstractGameActionMessage):
    protocolId = 5570

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.markId = 0

    def getMessageId(self):
        return 5570

    def initGameActionFightUnmarkCellsMessage(self, param1=0, param2=0, param3=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.markId = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.markId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightUnmarkCellsMessage(param1)

    def serializeAs_GameActionFightUnmarkCellsMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        param1.write_short(self.markId)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightUnmarkCellsMessage(param1)

    def deserializeAs_GameActionFightUnmarkCellsMessage(self, param1):
        super().deserialize(param1)
        self._markIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightUnmarkCellsMessage(param1)

    def deserializeAsyncAs_GameActionFightUnmarkCellsMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._markIdFunc)

    def _markIdFunc(self, param1):
        self.markId = param1.read_short()


class GameActionFightVanishMessage(AbstractGameActionMessage):
    protocolId = 6217

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.targetId = 0

    def getMessageId(self):
        return 6217

    def initGameActionFightVanishMessage(self, param1=0, param2=0, param3=0):
        super().initAbstractGameActionMessage(param1,param2)
        self.targetId = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.targetId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightVanishMessage(param1)

    def serializeAs_GameActionFightVanishMessage(self, param1):
        super().serializeAs_AbstractGameActionMessage(param1)
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element targetId.")
        param1.write_double(self.targetId)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightVanishMessage(param1)

    def deserializeAs_GameActionFightVanishMessage(self, param1):
        super().deserialize(param1)
        self._targetIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightVanishMessage(param1)

    def deserializeAsyncAs_GameActionFightVanishMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetIdFunc)

    def _targetIdFunc(self, param1):
        self.targetId = param1.read_double()
        if self.targetId < -9007199254740990 or self.targetId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.targetId) + ") on element of GameActionFightVanishMessage.targetId.")


class AllianceBulletinSetErrorMessage(SocialNoticeSetErrorMessage):
    protocolId = 6692

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6692

    def initAllianceBulletinSetErrorMessage(self, param1=0):
        super().initSocialNoticeSetErrorMessage(param1)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceBulletinSetErrorMessage(param1)

    def serializeAs_AllianceBulletinSetErrorMessage(self, param1):
        super().serializeAs_SocialNoticeSetErrorMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_AllianceBulletinSetErrorMessage(param1)

    def deserializeAs_AllianceBulletinSetErrorMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceBulletinSetErrorMessage(param1)

    def deserializeAsyncAs_AllianceBulletinSetErrorMessage(self, param1):
        super().deserializeAsync(param1)


class AllianceBulletinSetRequestMessage(SocialNoticeSetRequestMessage):
    protocolId = 6693

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.content = ""
        self.notifyMembers = False

    def getMessageId(self):
        return 6693

    def initAllianceBulletinSetRequestMessage(self, param1="", param2=False):
        self.content = param1
        self.notifyMembers = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.content = ""
        self.notifyMembers = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceBulletinSetRequestMessage(param1)

    def serializeAs_AllianceBulletinSetRequestMessage(self, param1):
        super().serializeAs_SocialNoticeSetRequestMessage(param1)
        param1.write_utf(self.content)
        param1.write_boolean(self.notifyMembers)

    def deserialize(self, param1):
        self.deserializeAs_AllianceBulletinSetRequestMessage(param1)

    def deserializeAs_AllianceBulletinSetRequestMessage(self, param1):
        super().deserialize(param1)
        self._contentFunc(param1)
        self._notifyMembersFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceBulletinSetRequestMessage(param1)

    def deserializeAsyncAs_AllianceBulletinSetRequestMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._contentFunc)
        param1.add_child(self._notifyMembersFunc)

    def _contentFunc(self, param1):
        self.content = param1.read_utf()

    def _notifyMembersFunc(self, param1):
        self.notifyMembers = param1.read_boolean()


class AllianceMembershipMessage(AllianceJoinedMessage):
    protocolId = 6390

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6390

    def initAllianceMembershipMessage(self, param1=None, param2=False, param3=0):
        super().initAllianceJoinedMessage(param1,param2,param3)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceMembershipMessage(param1)

    def serializeAs_AllianceMembershipMessage(self, param1):
        super().serializeAs_AllianceJoinedMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_AllianceMembershipMessage(param1)

    def deserializeAs_AllianceMembershipMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceMembershipMessage(param1)

    def deserializeAsyncAs_AllianceMembershipMessage(self, param1):
        super().deserializeAsync(param1)


class AllianceMotdMessage(SocialNoticeMessage):
    protocolId = 6685

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6685

    def initAllianceMotdMessage(self, param1="", param2=0, param3=0, param4=""):
        super().initSocialNoticeMessage(param1,param2,param3,param4)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceMotdMessage(param1)

    def serializeAs_AllianceMotdMessage(self, param1):
        super().serializeAs_SocialNoticeMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_AllianceMotdMessage(param1)

    def deserializeAs_AllianceMotdMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceMotdMessage(param1)

    def deserializeAsyncAs_AllianceMotdMessage(self, param1):
        super().deserializeAsync(param1)


class AllianceMotdSetErrorMessage(SocialNoticeSetErrorMessage):
    protocolId = 6683

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6683

    def initAllianceMotdSetErrorMessage(self, param1=0):
        super().initSocialNoticeSetErrorMessage(param1)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceMotdSetErrorMessage(param1)

    def serializeAs_AllianceMotdSetErrorMessage(self, param1):
        super().serializeAs_SocialNoticeSetErrorMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_AllianceMotdSetErrorMessage(param1)

    def deserializeAs_AllianceMotdSetErrorMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceMotdSetErrorMessage(param1)

    def deserializeAsyncAs_AllianceMotdSetErrorMessage(self, param1):
        super().deserializeAsync(param1)


class AllianceMotdSetRequestMessage(SocialNoticeSetRequestMessage):
    protocolId = 6687

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.content = ""

    def getMessageId(self):
        return 6687

    def initAllianceMotdSetRequestMessage(self, param1=""):
        self.content = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.content = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceMotdSetRequestMessage(param1)

    def serializeAs_AllianceMotdSetRequestMessage(self, param1):
        super().serializeAs_SocialNoticeSetRequestMessage(param1)
        param1.write_utf(self.content)

    def deserialize(self, param1):
        self.deserializeAs_AllianceMotdSetRequestMessage(param1)

    def deserializeAs_AllianceMotdSetRequestMessage(self, param1):
        super().deserialize(param1)
        self._contentFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceMotdSetRequestMessage(param1)

    def deserializeAsyncAs_AllianceMotdSetRequestMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._contentFunc)

    def _contentFunc(self, param1):
        self.content = param1.read_utf()


class AlliancePartialListMessage(AllianceListMessage):
    protocolId = 6427

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6427

    def initAlliancePartialListMessage(self, param1=[]):
        super().initAllianceListMessage(param1)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AlliancePartialListMessage(param1)

    def serializeAs_AlliancePartialListMessage(self, param1):
        super().serializeAs_AllianceListMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_AlliancePartialListMessage(param1)

    def deserializeAs_AlliancePartialListMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AlliancePartialListMessage(param1)

    def deserializeAsyncAs_AlliancePartialListMessage(self, param1):
        super().deserializeAsync(param1)


class CompassUpdatePartyMemberMessage(CompassUpdateMessage):
    protocolId = 5589

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.memberId = 0
        self.active = False

    def getMessageId(self):
        return 5589

    def initCompassUpdatePartyMemberMessage(self, param1=0, param2=None, param3=0, param4=False):
        super().initCompassUpdateMessage(param1,param2)
        self.memberId = param3
        self.active = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.memberId = 0
        self.active = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CompassUpdatePartyMemberMessage(param1)

    def serializeAs_CompassUpdatePartyMemberMessage(self, param1):
        super().serializeAs_CompassUpdateMessage(param1)
        if self.memberId < 0 or self.memberId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.memberId) + ") on element memberId.")
        param1.write_var_long(self.memberId)
        param1.write_boolean(self.active)

    def deserialize(self, param1):
        self.deserializeAs_CompassUpdatePartyMemberMessage(param1)

    def deserializeAs_CompassUpdatePartyMemberMessage(self, param1):
        super().deserialize(param1)
        self._memberIdFunc(param1)
        self._activeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CompassUpdatePartyMemberMessage(param1)

    def deserializeAsyncAs_CompassUpdatePartyMemberMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._memberIdFunc)
        param1.add_child(self._activeFunc)

    def _memberIdFunc(self, param1):
        self.memberId = param1.read_var_uh_long()
        if self.memberId < 0 or self.memberId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.memberId) + ") on element of CompassUpdatePartyMemberMessage.memberId.")

    def _activeFunc(self, param1):
        self.active = param1.read_boolean()


class CompassUpdatePvpSeekMessage(CompassUpdateMessage):
    protocolId = 6013

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.memberId = 0
        self.memberName = ""

    def getMessageId(self):
        return 6013

    def initCompassUpdatePvpSeekMessage(self, param1=0, param2=None, param3=0, param4=""):
        super().initCompassUpdateMessage(param1,param2)
        self.memberId = param3
        self.memberName = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.memberId = 0
        self.memberName = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CompassUpdatePvpSeekMessage(param1)

    def serializeAs_CompassUpdatePvpSeekMessage(self, param1):
        super().serializeAs_CompassUpdateMessage(param1)
        if self.memberId < 0 or self.memberId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.memberId) + ") on element memberId.")
        param1.write_var_long(self.memberId)
        param1.write_utf(self.memberName)

    def deserialize(self, param1):
        self.deserializeAs_CompassUpdatePvpSeekMessage(param1)

    def deserializeAs_CompassUpdatePvpSeekMessage(self, param1):
        super().deserialize(param1)
        self._memberIdFunc(param1)
        self._memberNameFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CompassUpdatePvpSeekMessage(param1)

    def deserializeAsyncAs_CompassUpdatePvpSeekMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._memberIdFunc)
        param1.add_child(self._memberNameFunc)

    def _memberIdFunc(self, param1):
        self.memberId = param1.read_var_uh_long()
        if self.memberId < 0 or self.memberId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.memberId) + ") on element of CompassUpdatePvpSeekMessage.memberId.")

    def _memberNameFunc(self, param1):
        self.memberName = param1.read_utf()


class CharacterFirstSelectionMessage(CharacterSelectionMessage):
    protocolId = 6084

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.doTutorial = False

    def getMessageId(self):
        return 6084

    def initCharacterFirstSelectionMessage(self, param1=0, param2=False):
        super().initCharacterSelectionMessage(param1)
        self.doTutorial = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.doTutorial = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CharacterFirstSelectionMessage(param1)

    def serializeAs_CharacterFirstSelectionMessage(self, param1):
        super().serializeAs_CharacterSelectionMessage(param1)
        param1.write_boolean(self.doTutorial)

    def deserialize(self, param1):
        self.deserializeAs_CharacterFirstSelectionMessage(param1)

    def deserializeAs_CharacterFirstSelectionMessage(self, param1):
        super().deserialize(param1)
        self._doTutorialFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CharacterFirstSelectionMessage(param1)

    def deserializeAsyncAs_CharacterFirstSelectionMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._doTutorialFunc)

    def _doTutorialFunc(self, param1):
        self.doTutorial = param1.read_boolean()


class CharacterReplayWithRemodelRequestMessage(CharacterReplayRequestMessage):
    protocolId = 6551

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.remodel = RemodelingInformation()
        self._remodeltree = FuncTree()

    def getMessageId(self):
        return 6551

    def initCharacterReplayWithRemodelRequestMessage(self, param1=0, param2=None):
        super().initCharacterReplayRequestMessage(param1)
        self.remodel = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.remodel = RemodelingInformation()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CharacterReplayWithRemodelRequestMessage(param1)

    def serializeAs_CharacterReplayWithRemodelRequestMessage(self, param1):
        super().serializeAs_CharacterReplayRequestMessage(param1)
        self.remodel.serializeAs_RemodelingInformation(param1)

    def deserialize(self, param1):
        self.deserializeAs_CharacterReplayWithRemodelRequestMessage(param1)

    def deserializeAs_CharacterReplayWithRemodelRequestMessage(self, param1):
        super().deserialize(param1)
        self.remodel = RemodelingInformation()
        self.remodel.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CharacterReplayWithRemodelRequestMessage(param1)

    def deserializeAsyncAs_CharacterReplayWithRemodelRequestMessage(self, param1):
        super().deserializeAsync(param1)
        self._remodeltree = param1.add_child(self._remodeltreeFunc)

    def _remodeltreeFunc(self, param1):
        self.remodel = RemodelingInformation()
        self.remodel.deserializeAsync(self._remodeltree)


class CharacterSelectionWithRemodelMessage(CharacterSelectionMessage):
    protocolId = 6549

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.remodel = RemodelingInformation()
        self._remodeltree = FuncTree()

    def getMessageId(self):
        return 6549

    def initCharacterSelectionWithRemodelMessage(self, param1=0, param2=None):
        super().initCharacterSelectionMessage(param1)
        self.remodel = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.remodel = RemodelingInformation()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CharacterSelectionWithRemodelMessage(param1)

    def serializeAs_CharacterSelectionWithRemodelMessage(self, param1):
        super().serializeAs_CharacterSelectionMessage(param1)
        self.remodel.serializeAs_RemodelingInformation(param1)

    def deserialize(self, param1):
        self.deserializeAs_CharacterSelectionWithRemodelMessage(param1)

    def deserializeAs_CharacterSelectionWithRemodelMessage(self, param1):
        super().deserialize(param1)
        self.remodel = RemodelingInformation()
        self.remodel.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CharacterSelectionWithRemodelMessage(param1)

    def deserializeAsyncAs_CharacterSelectionWithRemodelMessage(self, param1):
        super().deserializeAsync(param1)
        self._remodeltree = param1.add_child(self._remodeltreeFunc)

    def _remodeltreeFunc(self, param1):
        self.remodel = RemodelingInformation()
        self.remodel.deserializeAsync(self._remodeltree)


class CharactersListMessage(BasicCharactersListMessage):
    protocolId = 151

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.hasStartupActions = False

    def getMessageId(self):
        return 151

    def initCharactersListMessage(self, param1=[], param2=False):
        super().initBasicCharactersListMessage(param1)
        self.hasStartupActions = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.hasStartupActions = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CharactersListMessage(param1)

    def serializeAs_CharactersListMessage(self, param1):
        super().serializeAs_BasicCharactersListMessage(param1)
        param1.write_boolean(self.hasStartupActions)

    def deserialize(self, param1):
        self.deserializeAs_CharactersListMessage(param1)

    def deserializeAs_CharactersListMessage(self, param1):
        super().deserialize(param1)
        self._hasStartupActionsFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CharactersListMessage(param1)

    def deserializeAsyncAs_CharactersListMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._hasStartupActionsFunc)

    def _hasStartupActionsFunc(self, param1):
        self.hasStartupActions = param1.read_boolean()


class CharacterLevelUpInformationMessage(CharacterLevelUpMessage):
    protocolId = 6076

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.name = ""
        self.id = 0

    def getMessageId(self):
        return 6076

    def initCharacterLevelUpInformationMessage(self, param1=0, param2="", param3=0):
        super().initCharacterLevelUpMessage(param1)
        self.name = param2
        self.id = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.name = ""
        self.id = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CharacterLevelUpInformationMessage(param1)

    def serializeAs_CharacterLevelUpInformationMessage(self, param1):
        super().serializeAs_CharacterLevelUpMessage(param1)
        param1.write_utf(self.name)
        if self.id < 0 or self.id > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element id.")
        param1.write_var_long(self.id)

    def deserialize(self, param1):
        self.deserializeAs_CharacterLevelUpInformationMessage(param1)

    def deserializeAs_CharacterLevelUpInformationMessage(self, param1):
        super().deserialize(param1)
        self._nameFunc(param1)
        self._idFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CharacterLevelUpInformationMessage(param1)

    def deserializeAsyncAs_CharacterLevelUpInformationMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._nameFunc)
        param1.add_child(self._idFunc)

    def _nameFunc(self, param1):
        self.name = param1.read_utf()

    def _idFunc(self, param1):
        self.id = param1.read_var_uh_long()
        if self.id < 0 or self.id > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element of CharacterLevelUpInformationMessage.id.")


class LifePointsRegenEndMessage(UpdateLifePointsMessage):
    protocolId = 5686

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.lifePointsGained = 0

    def getMessageId(self):
        return 5686

    def initLifePointsRegenEndMessage(self, param1=0, param2=0, param3=0):
        super().initUpdateLifePointsMessage(param1,param2)
        self.lifePointsGained = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.lifePointsGained = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_LifePointsRegenEndMessage(param1)

    def serializeAs_LifePointsRegenEndMessage(self, param1):
        super().serializeAs_UpdateLifePointsMessage(param1)
        if self.lifePointsGained < 0:
            raise RuntimeError("Forbidden value (" + str(self.lifePointsGained) + ") on element lifePointsGained.")
        param1.write_var_int(self.lifePointsGained)

    def deserialize(self, param1):
        self.deserializeAs_LifePointsRegenEndMessage(param1)

    def deserializeAs_LifePointsRegenEndMessage(self, param1):
        super().deserialize(param1)
        self._lifePointsGainedFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_LifePointsRegenEndMessage(param1)

    def deserializeAsyncAs_LifePointsRegenEndMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._lifePointsGainedFunc)

    def _lifePointsGainedFunc(self, param1):
        self.lifePointsGained = param1.read_var_uh_int()
        if self.lifePointsGained < 0:
            raise RuntimeError("Forbidden value (" + str(self.lifePointsGained) + ") on element of LifePointsRegenEndMessage.lifePointsGained.")


class ChatClientMultiMessage(ChatAbstractClientMessage):
    protocolId = 861

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.channel = 0

    def getMessageId(self):
        return 861

    def initChatClientMultiMessage(self, param1="", param2=0):
        super().initChatAbstractClientMessage(param1)
        self.channel = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.channel = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        if HASH_FUNCTION != None:
            HASH_FUNCTION(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChatClientMultiMessage(param1)

    def serializeAs_ChatClientMultiMessage(self, param1):
        super().serializeAs_ChatAbstractClientMessage(param1)
        param1.write_byte(self.channel)

    def deserialize(self, param1):
        self.deserializeAs_ChatClientMultiMessage(param1)

    def deserializeAs_ChatClientMultiMessage(self, param1):
        super().deserialize(param1)
        self._channelFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChatClientMultiMessage(param1)

    def deserializeAsyncAs_ChatClientMultiMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._channelFunc)

    def _channelFunc(self, param1):
        self.channel = param1.read_byte()
        if self.channel < 0:
            raise RuntimeError("Forbidden value (" + str(self.channel) + ") on element of ChatClientMultiMessage.channel.")


class ChatClientPrivateMessage(ChatAbstractClientMessage):
    protocolId = 851

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.receiver = ""

    def getMessageId(self):
        return 851

    def initChatClientPrivateMessage(self, param1="", param2=""):
        super().initChatAbstractClientMessage(param1)
        self.receiver = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.receiver = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        if HASH_FUNCTION != None:
            HASH_FUNCTION(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChatClientPrivateMessage(param1)

    def serializeAs_ChatClientPrivateMessage(self, param1):
        super().serializeAs_ChatAbstractClientMessage(param1)
        param1.write_utf(self.receiver)

    def deserialize(self, param1):
        self.deserializeAs_ChatClientPrivateMessage(param1)

    def deserializeAs_ChatClientPrivateMessage(self, param1):
        super().deserialize(param1)
        self._receiverFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChatClientPrivateMessage(param1)

    def deserializeAsyncAs_ChatClientPrivateMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._receiverFunc)

    def _receiverFunc(self, param1):
        self.receiver = param1.read_utf()


class ChatServerCopyMessage(ChatAbstractServerMessage):
    protocolId = 882

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.receiverId = 0
        self.receiverName = ""

    def getMessageId(self):
        return 882

    def initChatServerCopyMessage(self, param1=0, param2="", param3=0, param4="", param5=0, param6=""):
        super().initChatAbstractServerMessage(param1,param2,param3,param4)
        self.receiverId = param5
        self.receiverName = param6
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.receiverId = 0
        self.receiverName = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChatServerCopyMessage(param1)

    def serializeAs_ChatServerCopyMessage(self, param1):
        super().serializeAs_ChatAbstractServerMessage(param1)
        if self.receiverId < 0 or self.receiverId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.receiverId) + ") on element receiverId.")
        param1.write_var_long(self.receiverId)
        param1.write_utf(self.receiverName)

    def deserialize(self, param1):
        self.deserializeAs_ChatServerCopyMessage(param1)

    def deserializeAs_ChatServerCopyMessage(self, param1):
        super().deserialize(param1)
        self._receiverIdFunc(param1)
        self._receiverNameFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChatServerCopyMessage(param1)

    def deserializeAsyncAs_ChatServerCopyMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._receiverIdFunc)
        param1.add_child(self._receiverNameFunc)

    def _receiverIdFunc(self, param1):
        self.receiverId = param1.read_var_uh_long()
        if self.receiverId < 0 or self.receiverId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.receiverId) + ") on element of ChatServerCopyMessage.receiverId.")

    def _receiverNameFunc(self, param1):
        self.receiverName = param1.read_utf()


class ChatServerMessage(ChatAbstractServerMessage):
    protocolId = 881

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.senderId = 0
        self.senderName = ""
        self.senderAccountId = 0

    def getMessageId(self):
        return 881

    def initChatServerMessage(self, param1=0, param2="", param3=0, param4="", param5=0, param6="", param7=0):
        super().initChatAbstractServerMessage(param1,param2,param3,param4)
        self.senderId = param5
        self.senderName = param6
        self.senderAccountId = param7
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.senderId = 0
        self.senderName = ""
        self.senderAccountId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChatServerMessage(param1)

    def serializeAs_ChatServerMessage(self, param1):
        super().serializeAs_ChatAbstractServerMessage(param1)
        if self.senderId < -9007199254740990 or self.senderId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.senderId) + ") on element senderId.")
        param1.write_double(self.senderId)
        param1.write_utf(self.senderName)
        if self.senderAccountId < 0:
            raise RuntimeError("Forbidden value (" + str(self.senderAccountId) + ") on element senderAccountId.")
        param1.write_int(self.senderAccountId)

    def deserialize(self, param1):
        self.deserializeAs_ChatServerMessage(param1)

    def deserializeAs_ChatServerMessage(self, param1):
        super().deserialize(param1)
        self._senderIdFunc(param1)
        self._senderNameFunc(param1)
        self._senderAccountIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChatServerMessage(param1)

    def deserializeAsyncAs_ChatServerMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._senderIdFunc)
        param1.add_child(self._senderNameFunc)
        param1.add_child(self._senderAccountIdFunc)

    def _senderIdFunc(self, param1):
        self.senderId = param1.read_double()
        if self.senderId < -9007199254740990 or self.senderId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.senderId) + ") on element of ChatServerMessage.senderId.")

    def _senderNameFunc(self, param1):
        self.senderName = param1.read_utf()

    def _senderAccountIdFunc(self, param1):
        self.senderAccountId = param1.read_int()
        if self.senderAccountId < 0:
            raise RuntimeError("Forbidden value (" + str(self.senderAccountId) + ") on element of ChatServerMessage.senderAccountId.")


class LocalizedChatSmileyMessage(ChatSmileyMessage):
    protocolId = 6185

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.cellId = 0

    def getMessageId(self):
        return 6185

    def initLocalizedChatSmileyMessage(self, param1=0, param2=0, param3=0, param4=0):
        super().initChatSmileyMessage(param1,param2,param3)
        self.cellId = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.cellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_LocalizedChatSmileyMessage(param1)

    def serializeAs_LocalizedChatSmileyMessage(self, param1):
        super().serializeAs_ChatSmileyMessage(param1)
        if self.cellId < 0 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element cellId.")
        param1.write_var_short(self.cellId)

    def deserialize(self, param1):
        self.deserializeAs_LocalizedChatSmileyMessage(param1)

    def deserializeAs_LocalizedChatSmileyMessage(self, param1):
        super().deserialize(param1)
        self._cellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_LocalizedChatSmileyMessage(param1)

    def deserializeAsyncAs_LocalizedChatSmileyMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._cellIdFunc)

    def _cellIdFunc(self, param1):
        self.cellId = param1.read_var_uh_short()
        if self.cellId < 0 or self.cellId > 559:
            raise RuntimeError("Forbidden value (" + str(self.cellId) + ") on element of LocalizedChatSmileyMessage.cellId.")


class GameCautiousMapMovementMessage(GameMapMovementMessage):
    protocolId = 6497

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6497

    def initGameCautiousMapMovementMessage(self, param1=[], param2=0, param3=0):
        super().initGameMapMovementMessage(param1,param2,param3)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameCautiousMapMovementMessage(param1)

    def serializeAs_GameCautiousMapMovementMessage(self, param1):
        super().serializeAs_GameMapMovementMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_GameCautiousMapMovementMessage(param1)

    def deserializeAs_GameCautiousMapMovementMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameCautiousMapMovementMessage(param1)

    def deserializeAsyncAs_GameCautiousMapMovementMessage(self, param1):
        super().deserializeAsync(param1)


class GameCautiousMapMovementRequestMessage(GameMapMovementRequestMessage):
    protocolId = 6496

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6496

    def initGameCautiousMapMovementRequestMessage(self, param1=[], param2=0):
        super().initGameMapMovementRequestMessage(param1,param2)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        if HASH_FUNCTION != None:
            HASH_FUNCTION(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameCautiousMapMovementRequestMessage(param1)

    def serializeAs_GameCautiousMapMovementRequestMessage(self, param1):
        super().serializeAs_GameMapMovementRequestMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_GameCautiousMapMovementRequestMessage(param1)

    def deserializeAs_GameCautiousMapMovementRequestMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameCautiousMapMovementRequestMessage(param1)

    def deserializeAsyncAs_GameCautiousMapMovementRequestMessage(self, param1):
        super().deserializeAsync(param1)


class GameContextRemoveElementWithEventMessage(GameContextRemoveElementMessage):
    protocolId = 6412

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.elementEventId = 0

    def getMessageId(self):
        return 6412

    def initGameContextRemoveElementWithEventMessage(self, param1=0, param2=0):
        super().initGameContextRemoveElementMessage(param1)
        self.elementEventId = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.elementEventId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameContextRemoveElementWithEventMessage(param1)

    def serializeAs_GameContextRemoveElementWithEventMessage(self, param1):
        super().serializeAs_GameContextRemoveElementMessage(param1)
        if self.elementEventId < 0:
            raise RuntimeError("Forbidden value (" + str(self.elementEventId) + ") on element elementEventId.")
        param1.write_byte(self.elementEventId)

    def deserialize(self, param1):
        self.deserializeAs_GameContextRemoveElementWithEventMessage(param1)

    def deserializeAs_GameContextRemoveElementWithEventMessage(self, param1):
        super().deserialize(param1)
        self._elementEventIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameContextRemoveElementWithEventMessage(param1)

    def deserializeAsyncAs_GameContextRemoveElementWithEventMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._elementEventIdFunc)

    def _elementEventIdFunc(self, param1):
        self.elementEventId = param1.read_byte()
        if self.elementEventId < 0:
            raise RuntimeError("Forbidden value (" + str(self.elementEventId) + ") on element of GameContextRemoveElementWithEventMessage.elementEventId.")


class GameContextRemoveMultipleElementsWithEventsMessage(GameContextRemoveMultipleElementsMessage):
    protocolId = 6416

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.elementEventIds = []
        self._elementEventIdstree = FuncTree()

    def getMessageId(self):
        return 6416

    def initGameContextRemoveMultipleElementsWithEventsMessage(self, param1=[], param2=[]):
        super().initGameContextRemoveMultipleElementsMessage(param1)
        self.elementEventIds = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.elementEventIds = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameContextRemoveMultipleElementsWithEventsMessage(param1)

    def serializeAs_GameContextRemoveMultipleElementsWithEventsMessage(self, param1):
        super().serializeAs_GameContextRemoveMultipleElementsMessage(param1)
        param1.write_short(len(self.elementEventIds))
        _loc2_ = 0
        while _loc2_ < len(self.elementEventIds):
            if self.elementEventIds[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.elementEventIds[_loc2_]) + ") on element 1 (starting at 1) of elementEventIds.")
            param1.write_byte(self.elementEventIds[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GameContextRemoveMultipleElementsWithEventsMessage(param1)

    def deserializeAs_GameContextRemoveMultipleElementsWithEventsMessage(self, param1):
        _loc4_ = 0
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_byte()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of elementEventIds.")
            self.elementEventIds.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameContextRemoveMultipleElementsWithEventsMessage(param1)

    def deserializeAsyncAs_GameContextRemoveMultipleElementsWithEventsMessage(self, param1):
        super().deserializeAsync(param1)
        self._elementEventIdstree = param1.add_child(self._elementEventIdstreeFunc)

    def _elementEventIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._elementEventIdstree.add_child(self._elementEventIdsFunc)
            _loc3_ += 1

    def _elementEventIdsFunc(self, param1):
        _loc2_ = param1.read_byte()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of elementEventIds.")
        self.elementEventIds.append(_loc2_)


class ShowCellSpectatorMessage(ShowCellMessage):
    protocolId = 6158

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.playerName = ""

    def getMessageId(self):
        return 6158

    def initShowCellSpectatorMessage(self, param1=0, param2=0, param3=""):
        super().initShowCellMessage(param1,param2)
        self.playerName = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.playerName = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ShowCellSpectatorMessage(param1)

    def serializeAs_ShowCellSpectatorMessage(self, param1):
        super().serializeAs_ShowCellMessage(param1)
        param1.write_utf(self.playerName)

    def deserialize(self, param1):
        self.deserializeAs_ShowCellSpectatorMessage(param1)

    def deserializeAs_ShowCellSpectatorMessage(self, param1):
        super().deserialize(param1)
        self._playerNameFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ShowCellSpectatorMessage(param1)

    def deserializeAsyncAs_ShowCellSpectatorMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._playerNameFunc)

    def _playerNameFunc(self, param1):
        self.playerName = param1.read_utf()


class GameFightPlacementSwapPositionsRequestMessage(GameFightPlacementPositionRequestMessage):
    protocolId = 6541

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.requestedId = 0

    def getMessageId(self):
        return 6541

    def initGameFightPlacementSwapPositionsRequestMessage(self, param1=0, param2=0):
        super().initGameFightPlacementPositionRequestMessage(param1)
        self.requestedId = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.requestedId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightPlacementSwapPositionsRequestMessage(param1)

    def serializeAs_GameFightPlacementSwapPositionsRequestMessage(self, param1):
        super().serializeAs_GameFightPlacementPositionRequestMessage(param1)
        if self.requestedId < -9007199254740990 or self.requestedId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.requestedId) + ") on element requestedId.")
        param1.write_double(self.requestedId)

    def deserialize(self, param1):
        self.deserializeAs_GameFightPlacementSwapPositionsRequestMessage(param1)

    def deserializeAs_GameFightPlacementSwapPositionsRequestMessage(self, param1):
        super().deserialize(param1)
        self._requestedIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightPlacementSwapPositionsRequestMessage(param1)

    def deserializeAsyncAs_GameFightPlacementSwapPositionsRequestMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._requestedIdFunc)

    def _requestedIdFunc(self, param1):
        self.requestedId = param1.read_double()
        if self.requestedId < -9007199254740990 or self.requestedId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.requestedId) + ") on element of GameFightPlacementSwapPositionsRequestMessage.requestedId.")


class GameFightResumeMessage(GameFightSpectateMessage):
    protocolId = 6067

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.spellCooldowns = []
        self.summonCount = 0
        self.bombCount = 0
        self._spellCooldownstree = FuncTree()

    def getMessageId(self):
        return 6067

    def initGameFightResumeMessage(self, param1=[], param2=[], param3=0, param4=0, param5=[], param6=[], param7=0, param8=0):
        super().initGameFightSpectateMessage(param1,param2,param3,param4,param5)
        self.spellCooldowns = param6
        self.summonCount = param7
        self.bombCount = param8
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.spellCooldowns = []
        self.summonCount = 0
        self.bombCount = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightResumeMessage(param1)

    def serializeAs_GameFightResumeMessage(self, param1):
        super().serializeAs_GameFightSpectateMessage(param1)
        param1.write_short(len(self.spellCooldowns))
        _loc2_ = 0
        while _loc2_ < len(self.spellCooldowns):
            as_parent(self.spellCooldowns[_loc2_], GameFightSpellCooldown).serializeAs_GameFightSpellCooldown(param1)
            _loc2_ += 1
        if self.summonCount < 0:
            raise RuntimeError("Forbidden value (" + str(self.summonCount) + ") on element summonCount.")
        param1.write_byte(self.summonCount)
        if self.bombCount < 0:
            raise RuntimeError("Forbidden value (" + str(self.bombCount) + ") on element bombCount.")
        param1.write_byte(self.bombCount)

    def deserialize(self, param1):
        self.deserializeAs_GameFightResumeMessage(param1)

    def deserializeAs_GameFightResumeMessage(self, param1):
        _loc4_ = None
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = GameFightSpellCooldown()
            _loc4_.deserialize(param1)
            self.spellCooldowns.append(_loc4_)
            _loc3_ += 1
        self._summonCountFunc(param1)
        self._bombCountFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightResumeMessage(param1)

    def deserializeAsyncAs_GameFightResumeMessage(self, param1):
        super().deserializeAsync(param1)
        self._spellCooldownstree = param1.add_child(self._spellCooldownstreeFunc)
        param1.add_child(self._summonCountFunc)
        param1.add_child(self._bombCountFunc)

    def _spellCooldownstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._spellCooldownstree.add_child(self._spellCooldownsFunc)
            _loc3_ += 1

    def _spellCooldownsFunc(self, param1):
        _loc2_ = GameFightSpellCooldown()
        _loc2_.deserialize(param1)
        self.spellCooldowns.append(_loc2_)

    def _summonCountFunc(self, param1):
        self.summonCount = param1.read_byte()
        if self.summonCount < 0:
            raise RuntimeError("Forbidden value (" + str(self.summonCount) + ") on element of GameFightResumeMessage.summonCount.")

    def _bombCountFunc(self, param1):
        self.bombCount = param1.read_byte()
        if self.bombCount < 0:
            raise RuntimeError("Forbidden value (" + str(self.bombCount) + ") on element of GameFightResumeMessage.bombCount.")


class GameFightSpectatorJoinMessage(GameFightJoinMessage):
    protocolId = 6504

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.namedPartyTeams = []
        self._namedPartyTeamstree = FuncTree()

    def getMessageId(self):
        return 6504

    def initGameFightSpectatorJoinMessage(self, param1=False, param2=False, param3=False, param4=False, param5=0, param6=0, param7=[]):
        super().initGameFightJoinMessage(param1,param2,param3,param4,param5,param6)
        self.namedPartyTeams = param7
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.namedPartyTeams = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightSpectatorJoinMessage(param1)

    def serializeAs_GameFightSpectatorJoinMessage(self, param1):
        super().serializeAs_GameFightJoinMessage(param1)
        param1.write_short(len(self.namedPartyTeams))
        _loc2_ = 0
        while _loc2_ < len(self.namedPartyTeams):
            as_parent(self.namedPartyTeams[_loc2_], NamedPartyTeam).serializeAs_NamedPartyTeam(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GameFightSpectatorJoinMessage(param1)

    def deserializeAs_GameFightSpectatorJoinMessage(self, param1):
        _loc4_ = None
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = NamedPartyTeam()
            _loc4_.deserialize(param1)
            self.namedPartyTeams.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightSpectatorJoinMessage(param1)

    def deserializeAsyncAs_GameFightSpectatorJoinMessage(self, param1):
        super().deserializeAsync(param1)
        self._namedPartyTeamstree = param1.add_child(self._namedPartyTeamstreeFunc)

    def _namedPartyTeamstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._namedPartyTeamstree.add_child(self._namedPartyTeamsFunc)
            _loc3_ += 1

    def _namedPartyTeamsFunc(self, param1):
        _loc2_ = NamedPartyTeam()
        _loc2_.deserialize(param1)
        self.namedPartyTeams.append(_loc2_)


class GameFightTurnResumeMessage(GameFightTurnStartMessage):
    protocolId = 6307

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.remainingTime = 0

    def getMessageId(self):
        return 6307

    def initGameFightTurnResumeMessage(self, param1=0, param2=0, param3=0):
        super().initGameFightTurnStartMessage(param1,param2)
        self.remainingTime = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.remainingTime = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightTurnResumeMessage(param1)

    def serializeAs_GameFightTurnResumeMessage(self, param1):
        super().serializeAs_GameFightTurnStartMessage(param1)
        if self.remainingTime < 0:
            raise RuntimeError("Forbidden value (" + str(self.remainingTime) + ") on element remainingTime.")
        param1.write_var_int(self.remainingTime)

    def deserialize(self, param1):
        self.deserializeAs_GameFightTurnResumeMessage(param1)

    def deserializeAs_GameFightTurnResumeMessage(self, param1):
        super().deserialize(param1)
        self._remainingTimeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightTurnResumeMessage(param1)

    def deserializeAsyncAs_GameFightTurnResumeMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._remainingTimeFunc)

    def _remainingTimeFunc(self, param1):
        self.remainingTime = param1.read_var_uh_int()
        if self.remainingTime < 0:
            raise RuntimeError("Forbidden value (" + str(self.remainingTime) + ") on element of GameFightTurnResumeMessage.remainingTime.")


class GameFightShowFighterRandomStaticPoseMessage(GameFightShowFighterMessage):
    protocolId = 6218

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6218

    def initGameFightShowFighterRandomStaticPoseMessage(self, param1=None):
        super().initGameFightShowFighterMessage(param1)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightShowFighterRandomStaticPoseMessage(param1)

    def serializeAs_GameFightShowFighterRandomStaticPoseMessage(self, param1):
        super().serializeAs_GameFightShowFighterMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_GameFightShowFighterRandomStaticPoseMessage(param1)

    def deserializeAs_GameFightShowFighterRandomStaticPoseMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightShowFighterRandomStaticPoseMessage(param1)

    def deserializeAsyncAs_GameFightShowFighterRandomStaticPoseMessage(self, param1):
        super().deserializeAsync(param1)


class GameRolePlayShowActorWithEventMessage(GameRolePlayShowActorMessage):
    protocolId = 6407

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.actorEventId = 0

    def getMessageId(self):
        return 6407

    def initGameRolePlayShowActorWithEventMessage(self, param1=None, param2=0):
        super().initGameRolePlayShowActorMessage(param1)
        self.actorEventId = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.actorEventId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayShowActorWithEventMessage(param1)

    def serializeAs_GameRolePlayShowActorWithEventMessage(self, param1):
        super().serializeAs_GameRolePlayShowActorMessage(param1)
        if self.actorEventId < 0:
            raise RuntimeError("Forbidden value (" + str(self.actorEventId) + ") on element actorEventId.")
        param1.write_byte(self.actorEventId)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayShowActorWithEventMessage(param1)

    def deserializeAs_GameRolePlayShowActorWithEventMessage(self, param1):
        super().deserialize(param1)
        self._actorEventIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayShowActorWithEventMessage(param1)

    def deserializeAsyncAs_GameRolePlayShowActorWithEventMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._actorEventIdFunc)

    def _actorEventIdFunc(self, param1):
        self.actorEventId = param1.read_byte()
        if self.actorEventId < 0:
            raise RuntimeError("Forbidden value (" + str(self.actorEventId) + ") on element of GameRolePlayShowActorWithEventMessage.actorEventId.")


class MapComplementaryInformationsDataInHavenBagMessage(MapComplementaryInformationsDataMessage):
    protocolId = 6622

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.ownerInformations = CharacterMinimalInformations()
        self.theme = 0
        self.roomId = 0
        self.maxRoomId = 0
        self._ownerInformationstree = FuncTree()

    def getMessageId(self):
        return 6622

    def initMapComplementaryInformationsDataInHavenBagMessage(self, param1=0, param2=0, param3=[], param4=[], param5=[], param6=[], param7=[], param8=[], param9=False, param10=None, param11=None, param12=0, param13=0, param14=0):
        super().initMapComplementaryInformationsDataMessage(param1,param2,param3,param4,param5,param6,param7,param8,param9,param10)
        self.ownerInformations = param11
        self.theme = param12
        self.roomId = param13
        self.maxRoomId = param14
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.ownerInformations = CharacterMinimalInformations()
        self.roomId = 0
        self.maxRoomId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MapComplementaryInformationsDataInHavenBagMessage(param1)

    def serializeAs_MapComplementaryInformationsDataInHavenBagMessage(self, param1):
        super().serializeAs_MapComplementaryInformationsDataMessage(param1)
        self.ownerInformations.serializeAs_CharacterMinimalInformations(param1)
        param1.write_byte(self.theme)
        if self.roomId < 0:
            raise RuntimeError("Forbidden value (" + str(self.roomId) + ") on element roomId.")
        param1.write_byte(self.roomId)
        if self.maxRoomId < 0:
            raise RuntimeError("Forbidden value (" + str(self.maxRoomId) + ") on element maxRoomId.")
        param1.write_byte(self.maxRoomId)

    def deserialize(self, param1):
        self.deserializeAs_MapComplementaryInformationsDataInHavenBagMessage(param1)

    def deserializeAs_MapComplementaryInformationsDataInHavenBagMessage(self, param1):
        super().deserialize(param1)
        self.ownerInformations = CharacterMinimalInformations()
        self.ownerInformations.deserialize(param1)
        self._themeFunc(param1)
        self._roomIdFunc(param1)
        self._maxRoomIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MapComplementaryInformationsDataInHavenBagMessage(param1)

    def deserializeAsyncAs_MapComplementaryInformationsDataInHavenBagMessage(self, param1):
        super().deserializeAsync(param1)
        self._ownerInformationstree = param1.add_child(self._ownerInformationstreeFunc)
        param1.add_child(self._themeFunc)
        param1.add_child(self._roomIdFunc)
        param1.add_child(self._maxRoomIdFunc)

    def _ownerInformationstreeFunc(self, param1):
        self.ownerInformations = CharacterMinimalInformations()
        self.ownerInformations.deserializeAsync(self._ownerInformationstree)

    def _themeFunc(self, param1):
        self.theme = param1.read_byte()

    def _roomIdFunc(self, param1):
        self.roomId = param1.read_byte()
        if self.roomId < 0:
            raise RuntimeError("Forbidden value (" + str(self.roomId) + ") on element of MapComplementaryInformationsDataInHavenBagMessage.roomId.")

    def _maxRoomIdFunc(self, param1):
        self.maxRoomId = param1.read_byte()
        if self.maxRoomId < 0:
            raise RuntimeError("Forbidden value (" + str(self.maxRoomId) + ") on element of MapComplementaryInformationsDataInHavenBagMessage.maxRoomId.")


class MapComplementaryInformationsDataInHouseMessage(MapComplementaryInformationsDataMessage):
    protocolId = 6130

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.currentHouse = HouseInformationsInside()
        self._currentHousetree = FuncTree()

    def getMessageId(self):
        return 6130

    def initMapComplementaryInformationsDataInHouseMessage(self, param1=0, param2=0, param3=[], param4=[], param5=[], param6=[], param7=[], param8=[], param9=False, param10=None, param11=None):
        super().initMapComplementaryInformationsDataMessage(param1,param2,param3,param4,param5,param6,param7,param8,param9,param10)
        self.currentHouse = param11
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.currentHouse = HouseInformationsInside()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MapComplementaryInformationsDataInHouseMessage(param1)

    def serializeAs_MapComplementaryInformationsDataInHouseMessage(self, param1):
        super().serializeAs_MapComplementaryInformationsDataMessage(param1)
        self.currentHouse.serializeAs_HouseInformationsInside(param1)

    def deserialize(self, param1):
        self.deserializeAs_MapComplementaryInformationsDataInHouseMessage(param1)

    def deserializeAs_MapComplementaryInformationsDataInHouseMessage(self, param1):
        super().deserialize(param1)
        self.currentHouse = HouseInformationsInside()
        self.currentHouse.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MapComplementaryInformationsDataInHouseMessage(param1)

    def deserializeAsyncAs_MapComplementaryInformationsDataInHouseMessage(self, param1):
        super().deserializeAsync(param1)
        self._currentHousetree = param1.add_child(self._currentHousetreeFunc)

    def _currentHousetreeFunc(self, param1):
        self.currentHouse = HouseInformationsInside()
        self.currentHouse.deserializeAsync(self._currentHousetree)


class MapComplementaryInformationsWithCoordsMessage(MapComplementaryInformationsDataMessage):
    protocolId = 6268

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.worldX = 0
        self.worldY = 0

    def getMessageId(self):
        return 6268

    def initMapComplementaryInformationsWithCoordsMessage(self, param1=0, param2=0, param3=[], param4=[], param5=[], param6=[], param7=[], param8=[], param9=False, param10=None, param11=0, param12=0):
        super().initMapComplementaryInformationsDataMessage(param1,param2,param3,param4,param5,param6,param7,param8,param9,param10)
        self.worldX = param11
        self.worldY = param12
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.worldX = 0
        self.worldY = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MapComplementaryInformationsWithCoordsMessage(param1)

    def serializeAs_MapComplementaryInformationsWithCoordsMessage(self, param1):
        super().serializeAs_MapComplementaryInformationsDataMessage(param1)
        if self.worldX < -255 or self.worldX > 255:
            raise RuntimeError("Forbidden value (" + str(self.worldX) + ") on element worldX.")
        param1.write_short(self.worldX)
        if self.worldY < -255 or self.worldY > 255:
            raise RuntimeError("Forbidden value (" + str(self.worldY) + ") on element worldY.")
        param1.write_short(self.worldY)

    def deserialize(self, param1):
        self.deserializeAs_MapComplementaryInformationsWithCoordsMessage(param1)

    def deserializeAs_MapComplementaryInformationsWithCoordsMessage(self, param1):
        super().deserialize(param1)
        self._worldXFunc(param1)
        self._worldYFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MapComplementaryInformationsWithCoordsMessage(param1)

    def deserializeAsyncAs_MapComplementaryInformationsWithCoordsMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._worldXFunc)
        param1.add_child(self._worldYFunc)

    def _worldXFunc(self, param1):
        self.worldX = param1.read_short()
        if self.worldX < -255 or self.worldX > 255:
            raise RuntimeError("Forbidden value (" + str(self.worldX) + ") on element of MapComplementaryInformationsWithCoordsMessage.worldX.")

    def _worldYFunc(self, param1):
        self.worldY = param1.read_short()
        if self.worldY < -255 or self.worldY > 255:
            raise RuntimeError("Forbidden value (" + str(self.worldY) + ") on element of MapComplementaryInformationsWithCoordsMessage.worldY.")


class MapRunningFightDetailsExtendedMessage(MapRunningFightDetailsMessage):
    protocolId = 6500

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.namedPartyTeams = []
        self._namedPartyTeamstree = FuncTree()

    def getMessageId(self):
        return 6500

    def initMapRunningFightDetailsExtendedMessage(self, param1=0, param2=[], param3=[], param4=[]):
        super().initMapRunningFightDetailsMessage(param1,param2,param3)
        self.namedPartyTeams = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.namedPartyTeams = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MapRunningFightDetailsExtendedMessage(param1)

    def serializeAs_MapRunningFightDetailsExtendedMessage(self, param1):
        super().serializeAs_MapRunningFightDetailsMessage(param1)
        param1.write_short(len(self.namedPartyTeams))
        _loc2_ = 0
        while _loc2_ < len(self.namedPartyTeams):
            as_parent(self.namedPartyTeams[_loc2_], NamedPartyTeam).serializeAs_NamedPartyTeam(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_MapRunningFightDetailsExtendedMessage(param1)

    def deserializeAs_MapRunningFightDetailsExtendedMessage(self, param1):
        _loc4_ = None
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = NamedPartyTeam()
            _loc4_.deserialize(param1)
            self.namedPartyTeams.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MapRunningFightDetailsExtendedMessage(param1)

    def deserializeAsyncAs_MapRunningFightDetailsExtendedMessage(self, param1):
        super().deserializeAsync(param1)
        self._namedPartyTeamstree = param1.add_child(self._namedPartyTeamstreeFunc)

    def _namedPartyTeamstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._namedPartyTeamstree.add_child(self._namedPartyTeamsFunc)
            _loc3_ += 1

    def _namedPartyTeamsFunc(self, param1):
        _loc2_ = NamedPartyTeam()
        _loc2_.deserialize(param1)
        self.namedPartyTeams.append(_loc2_)


class GameRolePlayDelayedObjectUseMessage(GameRolePlayDelayedActionMessage):
    protocolId = 6425

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectGID = 0

    def getMessageId(self):
        return 6425

    def initGameRolePlayDelayedObjectUseMessage(self, param1=0, param2=0, param3=0, param4=0):
        super().initGameRolePlayDelayedActionMessage(param1,param2,param3)
        self.objectGID = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.objectGID = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayDelayedObjectUseMessage(param1)

    def serializeAs_GameRolePlayDelayedObjectUseMessage(self, param1):
        super().serializeAs_GameRolePlayDelayedActionMessage(param1)
        if self.objectGID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectGID) + ") on element objectGID.")
        param1.write_var_short(self.objectGID)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayDelayedObjectUseMessage(param1)

    def deserializeAs_GameRolePlayDelayedObjectUseMessage(self, param1):
        super().deserialize(param1)
        self._objectGIDFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayDelayedObjectUseMessage(param1)

    def deserializeAsyncAs_GameRolePlayDelayedObjectUseMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._objectGIDFunc)

    def _objectGIDFunc(self, param1):
        self.objectGID = param1.read_var_uh_short()
        if self.objectGID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectGID) + ") on element of GameRolePlayDelayedObjectUseMessage.objectGID.")


class EmotePlayMassiveMessage(EmotePlayAbstractMessage):
    protocolId = 5691

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.actorIds = []
        self._actorIdstree = FuncTree()

    def getMessageId(self):
        return 5691

    def initEmotePlayMassiveMessage(self, param1=0, param2=0, param3=[]):
        super().initEmotePlayAbstractMessage(param1,param2)
        self.actorIds = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.actorIds = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_EmotePlayMassiveMessage(param1)

    def serializeAs_EmotePlayMassiveMessage(self, param1):
        super().serializeAs_EmotePlayAbstractMessage(param1)
        param1.write_short(len(self.actorIds))
        _loc2_ = 0
        while _loc2_ < len(self.actorIds):
            if self.actorIds[_loc2_] < -9007199254740990 or self.actorIds[_loc2_] > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(self.actorIds[_loc2_]) + ") on element 1 (starting at 1) of actorIds.")
            param1.write_double(self.actorIds[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_EmotePlayMassiveMessage(param1)

    def deserializeAs_EmotePlayMassiveMessage(self, param1):
        _loc4_ = None
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_double()
            if _loc4_ < -9007199254740990 or _loc4_ > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of actorIds.")
            self.actorIds.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_EmotePlayMassiveMessage(param1)

    def deserializeAsyncAs_EmotePlayMassiveMessage(self, param1):
        super().deserializeAsync(param1)
        self._actorIdstree = param1.add_child(self._actorIdstreeFunc)

    def _actorIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._actorIdstree.add_child(self._actorIdsFunc)
            _loc3_ += 1

    def _actorIdsFunc(self, param1):
        _loc2_ = param1.read_double()
        if _loc2_ < -9007199254740990 or _loc2_ > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of actorIds.")
        self.actorIds.append(_loc2_)


class EmotePlayMessage(EmotePlayAbstractMessage):
    protocolId = 5683

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.actorId = 0
        self.accountId = 0

    def getMessageId(self):
        return 5683

    def initEmotePlayMessage(self, param1=0, param2=0, param3=0, param4=0):
        super().initEmotePlayAbstractMessage(param1,param2)
        self.actorId = param3
        self.accountId = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.actorId = 0
        self.accountId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_EmotePlayMessage(param1)

    def serializeAs_EmotePlayMessage(self, param1):
        super().serializeAs_EmotePlayAbstractMessage(param1)
        if self.actorId < -9007199254740990 or self.actorId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.actorId) + ") on element actorId.")
        param1.write_double(self.actorId)
        if self.accountId < 0:
            raise RuntimeError("Forbidden value (" + str(self.accountId) + ") on element accountId.")
        param1.write_int(self.accountId)

    def deserialize(self, param1):
        self.deserializeAs_EmotePlayMessage(param1)

    def deserializeAs_EmotePlayMessage(self, param1):
        super().deserialize(param1)
        self._actorIdFunc(param1)
        self._accountIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_EmotePlayMessage(param1)

    def deserializeAsyncAs_EmotePlayMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._actorIdFunc)
        param1.add_child(self._accountIdFunc)

    def _actorIdFunc(self, param1):
        self.actorId = param1.read_double()
        if self.actorId < -9007199254740990 or self.actorId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.actorId) + ") on element of EmotePlayMessage.actorId.")

    def _accountIdFunc(self, param1):
        self.accountId = param1.read_int()
        if self.accountId < 0:
            raise RuntimeError("Forbidden value (" + str(self.accountId) + ") on element of EmotePlayMessage.accountId.")


class GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage(GameRolePlayArenaUpdatePlayerInfosMessage):
    protocolId = 6728

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.team = ArenaRankInfos()
        self.duel = ArenaRankInfos()
        self._teamtree = FuncTree()
        self._dueltree = FuncTree()

    def getMessageId(self):
        return 6728

    def initGameRolePlayArenaUpdatePlayerInfosAllQueuesMessage(self, param1=None, param2=None, param3=None):
        super().initGameRolePlayArenaUpdatePlayerInfosMessage(param1)
        self.team = param2
        self.duel = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.team = ArenaRankInfos()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage(param1)

    def serializeAs_GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage(self, param1):
        super().serializeAs_GameRolePlayArenaUpdatePlayerInfosMessage(param1)
        self.team.serializeAs_ArenaRankInfos(param1)
        self.duel.serializeAs_ArenaRankInfos(param1)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage(param1)

    def deserializeAs_GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage(self, param1):
        super().deserialize(param1)
        self.team = ArenaRankInfos()
        self.team.deserialize(param1)
        self.duel = ArenaRankInfos()
        self.duel.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage(param1)

    def deserializeAsyncAs_GameRolePlayArenaUpdatePlayerInfosAllQueuesMessage(self, param1):
        super().deserializeAsync(param1)
        self._teamtree = param1.add_child(self._teamtreeFunc)
        self._dueltree = param1.add_child(self._dueltreeFunc)

    def _teamtreeFunc(self, param1):
        self.team = ArenaRankInfos()
        self.team.deserializeAsync(self._teamtree)

    def _dueltreeFunc(self, param1):
        self.duel = ArenaRankInfos()
        self.duel.deserializeAsync(self._dueltree)


class GameRolePlayArenaUpdatePlayerInfosWithTeamMessage(GameRolePlayArenaUpdatePlayerInfosMessage):
    protocolId = 6640

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.team = ArenaRankInfos()
        self._teamtree = FuncTree()

    def getMessageId(self):
        return 6640

    def initGameRolePlayArenaUpdatePlayerInfosWithTeamMessage(self, param1=None, param2=None):
        super().initGameRolePlayArenaUpdatePlayerInfosMessage(param1)
        self.team = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.team = ArenaRankInfos()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameRolePlayArenaUpdatePlayerInfosWithTeamMessage(param1)

    def serializeAs_GameRolePlayArenaUpdatePlayerInfosWithTeamMessage(self, param1):
        super().serializeAs_GameRolePlayArenaUpdatePlayerInfosMessage(param1)
        self.team.serializeAs_ArenaRankInfos(param1)

    def deserialize(self, param1):
        self.deserializeAs_GameRolePlayArenaUpdatePlayerInfosWithTeamMessage(param1)

    def deserializeAs_GameRolePlayArenaUpdatePlayerInfosWithTeamMessage(self, param1):
        super().deserialize(param1)
        self.team = ArenaRankInfos()
        self.team.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameRolePlayArenaUpdatePlayerInfosWithTeamMessage(param1)

    def deserializeAsyncAs_GameRolePlayArenaUpdatePlayerInfosWithTeamMessage(self, param1):
        super().deserializeAsync(param1)
        self._teamtree = param1.add_child(self._teamtreeFunc)

    def _teamtreeFunc(self, param1):
        self.team = ArenaRankInfos()
        self.team.deserializeAsync(self._teamtree)


class HouseLockFromInsideRequestMessage(LockableChangeCodeMessage):
    protocolId = 5885

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 5885

    def initHouseLockFromInsideRequestMessage(self, param1=""):
        super().initLockableChangeCodeMessage(param1)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HouseLockFromInsideRequestMessage(param1)

    def serializeAs_HouseLockFromInsideRequestMessage(self, param1):
        super().serializeAs_LockableChangeCodeMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_HouseLockFromInsideRequestMessage(param1)

    def deserializeAs_HouseLockFromInsideRequestMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HouseLockFromInsideRequestMessage(param1)

    def deserializeAsyncAs_HouseLockFromInsideRequestMessage(self, param1):
        super().deserializeAsync(param1)


class HouseSellFromInsideRequestMessage(HouseSellRequestMessage):
    protocolId = 5884

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 5884

    def initHouseSellFromInsideRequestMessage(self, param1=0, param2=0, param3=False):
        super().initHouseSellRequestMessage(param1,param2,param3)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_HouseSellFromInsideRequestMessage(param1)

    def serializeAs_HouseSellFromInsideRequestMessage(self, param1):
        super().serializeAs_HouseSellRequestMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_HouseSellFromInsideRequestMessage(param1)

    def deserializeAs_HouseSellFromInsideRequestMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_HouseSellFromInsideRequestMessage(param1)

    def deserializeAsyncAs_HouseSellFromInsideRequestMessage(self, param1):
        super().deserializeAsync(param1)


class JobExperienceOtherPlayerUpdateMessage(JobExperienceUpdateMessage):
    protocolId = 6599

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.playerId = 0

    def getMessageId(self):
        return 6599

    def initJobExperienceOtherPlayerUpdateMessage(self, param1=None, param2=0):
        super().initJobExperienceUpdateMessage(param1)
        self.playerId = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.playerId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_JobExperienceOtherPlayerUpdateMessage(param1)

    def serializeAs_JobExperienceOtherPlayerUpdateMessage(self, param1):
        super().serializeAs_JobExperienceUpdateMessage(param1)
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element playerId.")
        param1.write_var_long(self.playerId)

    def deserialize(self, param1):
        self.deserializeAs_JobExperienceOtherPlayerUpdateMessage(param1)

    def deserializeAs_JobExperienceOtherPlayerUpdateMessage(self, param1):
        super().deserialize(param1)
        self._playerIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_JobExperienceOtherPlayerUpdateMessage(param1)

    def deserializeAsyncAs_JobExperienceOtherPlayerUpdateMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._playerIdFunc)

    def _playerIdFunc(self, param1):
        self.playerId = param1.read_var_uh_long()
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element of JobExperienceOtherPlayerUpdateMessage.playerId.")


class JobMultiCraftAvailableSkillsMessage(JobAllowMultiCraftRequestMessage):
    protocolId = 5747

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.playerId = 0
        self.skills = []
        self._skillstree = FuncTree()

    def getMessageId(self):
        return 5747

    def initJobMultiCraftAvailableSkillsMessage(self, param1=False, param2=0, param3=[]):
        super().initJobAllowMultiCraftRequestMessage(param1)
        self.playerId = param2
        self.skills = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.playerId = 0
        self.skills = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_JobMultiCraftAvailableSkillsMessage(param1)

    def serializeAs_JobMultiCraftAvailableSkillsMessage(self, param1):
        super().serializeAs_JobAllowMultiCraftRequestMessage(param1)
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element playerId.")
        param1.write_var_long(self.playerId)
        param1.write_short(len(self.skills))
        _loc2_ = 0
        while _loc2_ < len(self.skills):
            if self.skills[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.skills[_loc2_]) + ") on element 2 (starting at 1) of skills.")
            param1.write_var_short(self.skills[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_JobMultiCraftAvailableSkillsMessage(param1)

    def deserializeAs_JobMultiCraftAvailableSkillsMessage(self, param1):
        _loc4_ = 0
        super().deserialize(param1)
        self._playerIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_uh_short()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of skills.")
            self.skills.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_JobMultiCraftAvailableSkillsMessage(param1)

    def deserializeAsyncAs_JobMultiCraftAvailableSkillsMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._playerIdFunc)
        self._skillstree = param1.add_child(self._skillstreeFunc)

    def _playerIdFunc(self, param1):
        self.playerId = param1.read_var_uh_long()
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element of JobMultiCraftAvailableSkillsMessage.playerId.")

    def _skillstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._skillstree.add_child(self._skillsFunc)
            _loc3_ += 1

    def _skillsFunc(self, param1):
        _loc2_ = param1.read_var_uh_short()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of skills.")
        self.skills.append(_loc2_)


class LockableStateUpdateHouseDoorMessage(LockableStateUpdateAbstractMessage):
    protocolId = 5668

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.houseId = 0
        self.instanceId = 0
        self.secondHand = False

    def getMessageId(self):
        return 5668

    def initLockableStateUpdateHouseDoorMessage(self, param1=False, param2=0, param3=0, param4=False):
        super().initLockableStateUpdateAbstractMessage(param1)
        self.houseId = param2
        self.instanceId = param3
        self.secondHand = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.houseId = 0
        self.instanceId = 0
        self.secondHand = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_LockableStateUpdateHouseDoorMessage(param1)

    def serializeAs_LockableStateUpdateHouseDoorMessage(self, param1):
        super().serializeAs_LockableStateUpdateAbstractMessage(param1)
        if self.houseId < 0:
            raise RuntimeError("Forbidden value (" + str(self.houseId) + ") on element houseId.")
        param1.write_var_int(self.houseId)
        if self.instanceId < 0:
            raise RuntimeError("Forbidden value (" + str(self.instanceId) + ") on element instanceId.")
        param1.write_int(self.instanceId)
        param1.write_boolean(self.secondHand)

    def deserialize(self, param1):
        self.deserializeAs_LockableStateUpdateHouseDoorMessage(param1)

    def deserializeAs_LockableStateUpdateHouseDoorMessage(self, param1):
        super().deserialize(param1)
        self._houseIdFunc(param1)
        self._instanceIdFunc(param1)
        self._secondHandFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_LockableStateUpdateHouseDoorMessage(param1)

    def deserializeAsyncAs_LockableStateUpdateHouseDoorMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._houseIdFunc)
        param1.add_child(self._instanceIdFunc)
        param1.add_child(self._secondHandFunc)

    def _houseIdFunc(self, param1):
        self.houseId = param1.read_var_uh_int()
        if self.houseId < 0:
            raise RuntimeError("Forbidden value (" + str(self.houseId) + ") on element of LockableStateUpdateHouseDoorMessage.houseId.")

    def _instanceIdFunc(self, param1):
        self.instanceId = param1.read_int()
        if self.instanceId < 0:
            raise RuntimeError("Forbidden value (" + str(self.instanceId) + ") on element of LockableStateUpdateHouseDoorMessage.instanceId.")

    def _secondHandFunc(self, param1):
        self.secondHand = param1.read_boolean()


class LockableStateUpdateStorageMessage(LockableStateUpdateAbstractMessage):
    protocolId = 5669

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.mapId = 0
        self.elementId = 0

    def getMessageId(self):
        return 5669

    def initLockableStateUpdateStorageMessage(self, param1=False, param2=0, param3=0):
        super().initLockableStateUpdateAbstractMessage(param1)
        self.mapId = param2
        self.elementId = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.mapId = 0
        self.elementId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_LockableStateUpdateStorageMessage(param1)

    def serializeAs_LockableStateUpdateStorageMessage(self, param1):
        super().serializeAs_LockableStateUpdateAbstractMessage(param1)
        param1.write_int(self.mapId)
        if self.elementId < 0:
            raise RuntimeError("Forbidden value (" + str(self.elementId) + ") on element elementId.")
        param1.write_var_int(self.elementId)

    def deserialize(self, param1):
        self.deserializeAs_LockableStateUpdateStorageMessage(param1)

    def deserializeAs_LockableStateUpdateStorageMessage(self, param1):
        super().deserialize(param1)
        self._mapIdFunc(param1)
        self._elementIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_LockableStateUpdateStorageMessage(param1)

    def deserializeAsyncAs_LockableStateUpdateStorageMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._mapIdFunc)
        param1.add_child(self._elementIdFunc)

    def _mapIdFunc(self, param1):
        self.mapId = param1.read_int()

    def _elementIdFunc(self, param1):
        self.elementId = param1.read_var_uh_int()
        if self.elementId < 0:
            raise RuntimeError("Forbidden value (" + str(self.elementId) + ") on element of LockableStateUpdateStorageMessage.elementId.")


class TaxCollectorDialogQuestionExtendedMessage(TaxCollectorDialogQuestionBasicMessage):
    protocolId = 5615

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.maxPods = 0
        self.prospecting = 0
        self.wisdom = 0
        self.taxCollectorsCount = 0
        self.taxCollectorAttack = 0
        self.kamas = 0
        self.experience = 0
        self.pods = 0
        self.itemsValue = 0

    def getMessageId(self):
        return 5615

    def initTaxCollectorDialogQuestionExtendedMessage(self, param1=None, param2=0, param3=0, param4=0, param5=0, param6=0, param7=0, param8=0, param9=0, param10=0):
        super().initTaxCollectorDialogQuestionBasicMessage(param1)
        self.maxPods = param2
        self.prospecting = param3
        self.wisdom = param4
        self.taxCollectorsCount = param5
        self.taxCollectorAttack = param6
        self.kamas = param7
        self.experience = param8
        self.pods = param9
        self.itemsValue = param10
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.maxPods = 0
        self.prospecting = 0
        self.wisdom = 0
        self.taxCollectorsCount = 0
        self.taxCollectorAttack = 0
        self.kamas = 0
        self.experience = 0
        self.pods = 0
        self.itemsValue = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TaxCollectorDialogQuestionExtendedMessage(param1)

    def serializeAs_TaxCollectorDialogQuestionExtendedMessage(self, param1):
        super().serializeAs_TaxCollectorDialogQuestionBasicMessage(param1)
        if self.maxPods < 0:
            raise RuntimeError("Forbidden value (" + str(self.maxPods) + ") on element maxPods.")
        param1.write_var_short(self.maxPods)
        if self.prospecting < 0:
            raise RuntimeError("Forbidden value (" + str(self.prospecting) + ") on element prospecting.")
        param1.write_var_short(self.prospecting)
        if self.wisdom < 0:
            raise RuntimeError("Forbidden value (" + str(self.wisdom) + ") on element wisdom.")
        param1.write_var_short(self.wisdom)
        if self.taxCollectorsCount < 0:
            raise RuntimeError("Forbidden value (" + str(self.taxCollectorsCount) + ") on element taxCollectorsCount.")
        param1.write_byte(self.taxCollectorsCount)
        param1.write_int(self.taxCollectorAttack)
        if self.kamas < 0 or self.kamas > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.kamas) + ") on element kamas.")
        param1.write_var_long(self.kamas)
        if self.experience < 0 or self.experience > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.experience) + ") on element experience.")
        param1.write_var_long(self.experience)
        if self.pods < 0:
            raise RuntimeError("Forbidden value (" + str(self.pods) + ") on element pods.")
        param1.write_var_int(self.pods)
        if self.itemsValue < 0 or self.itemsValue > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.itemsValue) + ") on element itemsValue.")
        param1.write_var_long(self.itemsValue)

    def deserialize(self, param1):
        self.deserializeAs_TaxCollectorDialogQuestionExtendedMessage(param1)

    def deserializeAs_TaxCollectorDialogQuestionExtendedMessage(self, param1):
        super().deserialize(param1)
        self._maxPodsFunc(param1)
        self._prospectingFunc(param1)
        self._wisdomFunc(param1)
        self._taxCollectorsCountFunc(param1)
        self._taxCollectorAttackFunc(param1)
        self._kamasFunc(param1)
        self._experienceFunc(param1)
        self._podsFunc(param1)
        self._itemsValueFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TaxCollectorDialogQuestionExtendedMessage(param1)

    def deserializeAsyncAs_TaxCollectorDialogQuestionExtendedMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._maxPodsFunc)
        param1.add_child(self._prospectingFunc)
        param1.add_child(self._wisdomFunc)
        param1.add_child(self._taxCollectorsCountFunc)
        param1.add_child(self._taxCollectorAttackFunc)
        param1.add_child(self._kamasFunc)
        param1.add_child(self._experienceFunc)
        param1.add_child(self._podsFunc)
        param1.add_child(self._itemsValueFunc)

    def _maxPodsFunc(self, param1):
        self.maxPods = param1.read_var_uh_short()
        if self.maxPods < 0:
            raise RuntimeError("Forbidden value (" + str(self.maxPods) + ") on element of TaxCollectorDialogQuestionExtendedMessage.maxPods.")

    def _prospectingFunc(self, param1):
        self.prospecting = param1.read_var_uh_short()
        if self.prospecting < 0:
            raise RuntimeError("Forbidden value (" + str(self.prospecting) + ") on element of TaxCollectorDialogQuestionExtendedMessage.prospecting.")

    def _wisdomFunc(self, param1):
        self.wisdom = param1.read_var_uh_short()
        if self.wisdom < 0:
            raise RuntimeError("Forbidden value (" + str(self.wisdom) + ") on element of TaxCollectorDialogQuestionExtendedMessage.wisdom.")

    def _taxCollectorsCountFunc(self, param1):
        self.taxCollectorsCount = param1.read_byte()
        if self.taxCollectorsCount < 0:
            raise RuntimeError("Forbidden value (" + str(self.taxCollectorsCount) + ") on element of TaxCollectorDialogQuestionExtendedMessage.taxCollectorsCount.")

    def _taxCollectorAttackFunc(self, param1):
        self.taxCollectorAttack = param1.read_int()

    def _kamasFunc(self, param1):
        self.kamas = param1.read_var_uh_long()
        if self.kamas < 0 or self.kamas > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.kamas) + ") on element of TaxCollectorDialogQuestionExtendedMessage.kamas.")

    def _experienceFunc(self, param1):
        self.experience = param1.read_var_uh_long()
        if self.experience < 0 or self.experience > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.experience) + ") on element of TaxCollectorDialogQuestionExtendedMessage.experience.")

    def _podsFunc(self, param1):
        self.pods = param1.read_var_uh_int()
        if self.pods < 0:
            raise RuntimeError("Forbidden value (" + str(self.pods) + ") on element of TaxCollectorDialogQuestionExtendedMessage.pods.")

    def _itemsValueFunc(self, param1):
        self.itemsValue = param1.read_var_uh_long()
        if self.itemsValue < 0 or self.itemsValue > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.itemsValue) + ") on element of TaxCollectorDialogQuestionExtendedMessage.itemsValue.")


class AbstractPartyEventMessage(AbstractPartyMessage):
    protocolId = 6273

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6273

    def initAbstractPartyEventMessage(self, param1=0):
        super().initAbstractPartyMessage(param1)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AbstractPartyEventMessage(param1)

    def serializeAs_AbstractPartyEventMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_AbstractPartyEventMessage(param1)

    def deserializeAs_AbstractPartyEventMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AbstractPartyEventMessage(param1)

    def deserializeAsyncAs_AbstractPartyEventMessage(self, param1):
        super().deserializeAsync(param1)


class PartyAbdicateThroneMessage(AbstractPartyMessage):
    protocolId = 6080

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.playerId = 0

    def getMessageId(self):
        return 6080

    def initPartyAbdicateThroneMessage(self, param1=0, param2=0):
        super().initAbstractPartyMessage(param1)
        self.playerId = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.playerId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyAbdicateThroneMessage(param1)

    def serializeAs_PartyAbdicateThroneMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element playerId.")
        param1.write_var_long(self.playerId)

    def deserialize(self, param1):
        self.deserializeAs_PartyAbdicateThroneMessage(param1)

    def deserializeAs_PartyAbdicateThroneMessage(self, param1):
        super().deserialize(param1)
        self._playerIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyAbdicateThroneMessage(param1)

    def deserializeAsyncAs_PartyAbdicateThroneMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._playerIdFunc)

    def _playerIdFunc(self, param1):
        self.playerId = param1.read_var_uh_long()
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element of PartyAbdicateThroneMessage.playerId.")


class PartyAcceptInvitationMessage(AbstractPartyMessage):
    protocolId = 5580

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 5580

    def initPartyAcceptInvitationMessage(self, param1=0):
        super().initAbstractPartyMessage(param1)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyAcceptInvitationMessage(param1)

    def serializeAs_PartyAcceptInvitationMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_PartyAcceptInvitationMessage(param1)

    def deserializeAs_PartyAcceptInvitationMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyAcceptInvitationMessage(param1)

    def deserializeAsyncAs_PartyAcceptInvitationMessage(self, param1):
        super().deserializeAsync(param1)


class PartyCancelInvitationMessage(AbstractPartyMessage):
    protocolId = 6254

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.guestId = 0

    def getMessageId(self):
        return 6254

    def initPartyCancelInvitationMessage(self, param1=0, param2=0):
        super().initAbstractPartyMessage(param1)
        self.guestId = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.guestId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyCancelInvitationMessage(param1)

    def serializeAs_PartyCancelInvitationMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)
        if self.guestId < 0 or self.guestId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.guestId) + ") on element guestId.")
        param1.write_var_long(self.guestId)

    def deserialize(self, param1):
        self.deserializeAs_PartyCancelInvitationMessage(param1)

    def deserializeAs_PartyCancelInvitationMessage(self, param1):
        super().deserialize(param1)
        self._guestIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyCancelInvitationMessage(param1)

    def deserializeAsyncAs_PartyCancelInvitationMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._guestIdFunc)

    def _guestIdFunc(self, param1):
        self.guestId = param1.read_var_uh_long()
        if self.guestId < 0 or self.guestId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.guestId) + ") on element of PartyCancelInvitationMessage.guestId.")


class PartyCannotJoinErrorMessage(AbstractPartyMessage):
    protocolId = 5583

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reason = 0

    def getMessageId(self):
        return 5583

    def initPartyCannotJoinErrorMessage(self, param1=0, param2=0):
        super().initAbstractPartyMessage(param1)
        self.reason = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.reason = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyCannotJoinErrorMessage(param1)

    def serializeAs_PartyCannotJoinErrorMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)
        param1.write_byte(self.reason)

    def deserialize(self, param1):
        self.deserializeAs_PartyCannotJoinErrorMessage(param1)

    def deserializeAs_PartyCannotJoinErrorMessage(self, param1):
        super().deserialize(param1)
        self._reasonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyCannotJoinErrorMessage(param1)

    def deserializeAsyncAs_PartyCannotJoinErrorMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._reasonFunc)

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()
        if self.reason < 0:
            raise RuntimeError("Forbidden value (" + str(self.reason) + ") on element of PartyCannotJoinErrorMessage.reason.")


class PartyDeletedMessage(AbstractPartyMessage):
    protocolId = 6261

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6261

    def initPartyDeletedMessage(self, param1=0):
        super().initAbstractPartyMessage(param1)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyDeletedMessage(param1)

    def serializeAs_PartyDeletedMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_PartyDeletedMessage(param1)

    def deserializeAs_PartyDeletedMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyDeletedMessage(param1)

    def deserializeAsyncAs_PartyDeletedMessage(self, param1):
        super().deserializeAsync(param1)


class PartyFollowMemberRequestMessage(AbstractPartyMessage):
    protocolId = 5577

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.playerId = 0

    def getMessageId(self):
        return 5577

    def initPartyFollowMemberRequestMessage(self, param1=0, param2=0):
        super().initAbstractPartyMessage(param1)
        self.playerId = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.playerId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyFollowMemberRequestMessage(param1)

    def serializeAs_PartyFollowMemberRequestMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element playerId.")
        param1.write_var_long(self.playerId)

    def deserialize(self, param1):
        self.deserializeAs_PartyFollowMemberRequestMessage(param1)

    def deserializeAs_PartyFollowMemberRequestMessage(self, param1):
        super().deserialize(param1)
        self._playerIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyFollowMemberRequestMessage(param1)

    def deserializeAsyncAs_PartyFollowMemberRequestMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._playerIdFunc)

    def _playerIdFunc(self, param1):
        self.playerId = param1.read_var_uh_long()
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element of PartyFollowMemberRequestMessage.playerId.")


class PartyFollowStatusUpdateMessage(AbstractPartyMessage):
    protocolId = 5581

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.success = False
        self.isFollowed = False
        self.followedId = 0

    def getMessageId(self):
        return 5581

    def initPartyFollowStatusUpdateMessage(self, param1=0, param2=False, param3=False, param4=0):
        super().initAbstractPartyMessage(param1)
        self.success = param2
        self.isFollowed = param3
        self.followedId = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.success = False
        self.isFollowed = False
        self.followedId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyFollowStatusUpdateMessage(param1)

    def serializeAs_PartyFollowStatusUpdateMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)
        _loc2_ = 0
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,0,self.success)
        _loc2_ = BooleanByteWrapper.set_flag(_loc2_,1,self.isFollowed)
        param1.write_byte(_loc2_)
        if self.followedId < 0 or self.followedId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.followedId) + ") on element followedId.")
        param1.write_var_long(self.followedId)

    def deserialize(self, param1):
        self.deserializeAs_PartyFollowStatusUpdateMessage(param1)

    def deserializeAs_PartyFollowStatusUpdateMessage(self, param1):
        super().deserialize(param1)
        self.deserializeByteBoxes(param1)
        self._followedIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyFollowStatusUpdateMessage(param1)

    def deserializeAsyncAs_PartyFollowStatusUpdateMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self.deserializeByteBoxes)
        param1.add_child(self._followedIdFunc)

    def deserializeByteBoxes(self, param1):
        _loc2_ = param1.read_byte()
        self.success = BooleanByteWrapper.get_flag(_loc2_,0)
        self.isFollowed = BooleanByteWrapper.get_flag(_loc2_,1)

    def _followedIdFunc(self, param1):
        self.followedId = param1.read_var_uh_long()
        if self.followedId < 0 or self.followedId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.followedId) + ") on element of PartyFollowStatusUpdateMessage.followedId.")


class PartyInvitationArenaRequestMessage(PartyInvitationRequestMessage):
    protocolId = 6283

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6283

    def initPartyInvitationArenaRequestMessage(self, param1=""):
        super().initPartyInvitationRequestMessage(param1)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyInvitationArenaRequestMessage(param1)

    def serializeAs_PartyInvitationArenaRequestMessage(self, param1):
        super().serializeAs_PartyInvitationRequestMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_PartyInvitationArenaRequestMessage(param1)

    def deserializeAs_PartyInvitationArenaRequestMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyInvitationArenaRequestMessage(param1)

    def deserializeAsyncAs_PartyInvitationArenaRequestMessage(self, param1):
        super().deserializeAsync(param1)


class PartyInvitationCancelledForGuestMessage(AbstractPartyMessage):
    protocolId = 6256

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.cancelerId = 0

    def getMessageId(self):
        return 6256

    def initPartyInvitationCancelledForGuestMessage(self, param1=0, param2=0):
        super().initAbstractPartyMessage(param1)
        self.cancelerId = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.cancelerId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyInvitationCancelledForGuestMessage(param1)

    def serializeAs_PartyInvitationCancelledForGuestMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)
        if self.cancelerId < 0 or self.cancelerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.cancelerId) + ") on element cancelerId.")
        param1.write_var_long(self.cancelerId)

    def deserialize(self, param1):
        self.deserializeAs_PartyInvitationCancelledForGuestMessage(param1)

    def deserializeAs_PartyInvitationCancelledForGuestMessage(self, param1):
        super().deserialize(param1)
        self._cancelerIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyInvitationCancelledForGuestMessage(param1)

    def deserializeAsyncAs_PartyInvitationCancelledForGuestMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._cancelerIdFunc)

    def _cancelerIdFunc(self, param1):
        self.cancelerId = param1.read_var_uh_long()
        if self.cancelerId < 0 or self.cancelerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.cancelerId) + ") on element of PartyInvitationCancelledForGuestMessage.cancelerId.")


class PartyInvitationDetailsMessage(AbstractPartyMessage):
    protocolId = 6263

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.partyType = 0
        self.partyName = ""
        self.fromId = 0
        self.fromName = ""
        self.leaderId = 0
        self.members = []
        self.guests = []
        self._memberstree = FuncTree()
        self._gueststree = FuncTree()

    def getMessageId(self):
        return 6263

    def initPartyInvitationDetailsMessage(self, param1=0, param2=0, param3="", param4=0, param5="", param6=0, param7=[], param8=[]):
        super().initAbstractPartyMessage(param1)
        self.partyType = param2
        self.partyName = param3
        self.fromId = param4
        self.fromName = param5
        self.leaderId = param6
        self.members = param7
        self.guests = param8
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.partyType = 0
        self.partyName = ""
        self.fromId = 0
        self.fromName = ""
        self.leaderId = 0
        self.members = []
        self.guests = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyInvitationDetailsMessage(param1)

    def serializeAs_PartyInvitationDetailsMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)
        param1.write_byte(self.partyType)
        param1.write_utf(self.partyName)
        if self.fromId < 0 or self.fromId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.fromId) + ") on element fromId.")
        param1.write_var_long(self.fromId)
        param1.write_utf(self.fromName)
        if self.leaderId < 0 or self.leaderId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.leaderId) + ") on element leaderId.")
        param1.write_var_long(self.leaderId)
        param1.write_short(len(self.members))
        _loc2_ = 0
        while _loc2_ < len(self.members):
            as_parent(self.members[_loc2_], PartyInvitationMemberInformations).serializeAs_PartyInvitationMemberInformations(param1)
            _loc2_ += 1
        param1.write_short(len(self.guests))
        _loc3_ = 0
        while _loc3_ < len(self.guests):
            as_parent(self.guests[_loc3_], PartyGuestInformations).serializeAs_PartyGuestInformations(param1)
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_PartyInvitationDetailsMessage(param1)

    def deserializeAs_PartyInvitationDetailsMessage(self, param1):
        _loc6_ = None
        _loc7_ = None
        super().deserialize(param1)
        self._partyTypeFunc(param1)
        self._partyNameFunc(param1)
        self._fromIdFunc(param1)
        self._fromNameFunc(param1)
        self._leaderIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = PartyInvitationMemberInformations()
            _loc6_.deserialize(param1)
            self.members.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = PartyGuestInformations()
            _loc7_.deserialize(param1)
            self.guests.append(_loc7_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyInvitationDetailsMessage(param1)

    def deserializeAsyncAs_PartyInvitationDetailsMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._partyTypeFunc)
        param1.add_child(self._partyNameFunc)
        param1.add_child(self._fromIdFunc)
        param1.add_child(self._fromNameFunc)
        param1.add_child(self._leaderIdFunc)
        self._memberstree = param1.add_child(self._memberstreeFunc)
        self._gueststree = param1.add_child(self._gueststreeFunc)

    def _partyTypeFunc(self, param1):
        self.partyType = param1.read_byte()
        if self.partyType < 0:
            raise RuntimeError("Forbidden value (" + str(self.partyType) + ") on element of PartyInvitationDetailsMessage.partyType.")

    def _partyNameFunc(self, param1):
        self.partyName = param1.read_utf()

    def _fromIdFunc(self, param1):
        self.fromId = param1.read_var_uh_long()
        if self.fromId < 0 or self.fromId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.fromId) + ") on element of PartyInvitationDetailsMessage.fromId.")

    def _fromNameFunc(self, param1):
        self.fromName = param1.read_utf()

    def _leaderIdFunc(self, param1):
        self.leaderId = param1.read_var_uh_long()
        if self.leaderId < 0 or self.leaderId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.leaderId) + ") on element of PartyInvitationDetailsMessage.leaderId.")

    def _memberstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._memberstree.add_child(self._membersFunc)
            _loc3_ += 1

    def _membersFunc(self, param1):
        _loc2_ = PartyInvitationMemberInformations()
        _loc2_.deserialize(param1)
        self.members.append(_loc2_)

    def _gueststreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._gueststree.add_child(self._guestsFunc)
            _loc3_ += 1

    def _guestsFunc(self, param1):
        _loc2_ = PartyGuestInformations()
        _loc2_.deserialize(param1)
        self.guests.append(_loc2_)


class PartyInvitationDetailsRequestMessage(AbstractPartyMessage):
    protocolId = 6264

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6264

    def initPartyInvitationDetailsRequestMessage(self, param1=0):
        super().initAbstractPartyMessage(param1)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyInvitationDetailsRequestMessage(param1)

    def serializeAs_PartyInvitationDetailsRequestMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_PartyInvitationDetailsRequestMessage(param1)

    def deserializeAs_PartyInvitationDetailsRequestMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyInvitationDetailsRequestMessage(param1)

    def deserializeAsyncAs_PartyInvitationDetailsRequestMessage(self, param1):
        super().deserializeAsync(param1)


class PartyInvitationDungeonRequestMessage(PartyInvitationRequestMessage):
    protocolId = 6245

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dungeonId = 0

    def getMessageId(self):
        return 6245

    def initPartyInvitationDungeonRequestMessage(self, param1="", param2=0):
        super().initPartyInvitationRequestMessage(param1)
        self.dungeonId = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.dungeonId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyInvitationDungeonRequestMessage(param1)

    def serializeAs_PartyInvitationDungeonRequestMessage(self, param1):
        super().serializeAs_PartyInvitationRequestMessage(param1)
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element dungeonId.")
        param1.write_var_short(self.dungeonId)

    def deserialize(self, param1):
        self.deserializeAs_PartyInvitationDungeonRequestMessage(param1)

    def deserializeAs_PartyInvitationDungeonRequestMessage(self, param1):
        super().deserialize(param1)
        self._dungeonIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyInvitationDungeonRequestMessage(param1)

    def deserializeAsyncAs_PartyInvitationDungeonRequestMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._dungeonIdFunc)

    def _dungeonIdFunc(self, param1):
        self.dungeonId = param1.read_var_uh_short()
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element of PartyInvitationDungeonRequestMessage.dungeonId.")


class PartyInvitationMessage(AbstractPartyMessage):
    protocolId = 5586

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.partyType = 0
        self.partyName = ""
        self.maxParticipants = 0
        self.fromId = 0
        self.fromName = ""
        self.toId = 0

    def getMessageId(self):
        return 5586

    def initPartyInvitationMessage(self, param1=0, param2=0, param3="", param4=0, param5=0, param6="", param7=0):
        super().initAbstractPartyMessage(param1)
        self.partyType = param2
        self.partyName = param3
        self.maxParticipants = param4
        self.fromId = param5
        self.fromName = param6
        self.toId = param7
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.partyType = 0
        self.partyName = ""
        self.maxParticipants = 0
        self.fromId = 0
        self.fromName = ""
        self.toId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyInvitationMessage(param1)

    def serializeAs_PartyInvitationMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)
        param1.write_byte(self.partyType)
        param1.write_utf(self.partyName)
        if self.maxParticipants < 0:
            raise RuntimeError("Forbidden value (" + str(self.maxParticipants) + ") on element maxParticipants.")
        param1.write_byte(self.maxParticipants)
        if self.fromId < 0 or self.fromId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.fromId) + ") on element fromId.")
        param1.write_var_long(self.fromId)
        param1.write_utf(self.fromName)
        if self.toId < 0 or self.toId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.toId) + ") on element toId.")
        param1.write_var_long(self.toId)

    def deserialize(self, param1):
        self.deserializeAs_PartyInvitationMessage(param1)

    def deserializeAs_PartyInvitationMessage(self, param1):
        super().deserialize(param1)
        self._partyTypeFunc(param1)
        self._partyNameFunc(param1)
        self._maxParticipantsFunc(param1)
        self._fromIdFunc(param1)
        self._fromNameFunc(param1)
        self._toIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyInvitationMessage(param1)

    def deserializeAsyncAs_PartyInvitationMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._partyTypeFunc)
        param1.add_child(self._partyNameFunc)
        param1.add_child(self._maxParticipantsFunc)
        param1.add_child(self._fromIdFunc)
        param1.add_child(self._fromNameFunc)
        param1.add_child(self._toIdFunc)

    def _partyTypeFunc(self, param1):
        self.partyType = param1.read_byte()
        if self.partyType < 0:
            raise RuntimeError("Forbidden value (" + str(self.partyType) + ") on element of PartyInvitationMessage.partyType.")

    def _partyNameFunc(self, param1):
        self.partyName = param1.read_utf()

    def _maxParticipantsFunc(self, param1):
        self.maxParticipants = param1.read_byte()
        if self.maxParticipants < 0:
            raise RuntimeError("Forbidden value (" + str(self.maxParticipants) + ") on element of PartyInvitationMessage.maxParticipants.")

    def _fromIdFunc(self, param1):
        self.fromId = param1.read_var_uh_long()
        if self.fromId < 0 or self.fromId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.fromId) + ") on element of PartyInvitationMessage.fromId.")

    def _fromNameFunc(self, param1):
        self.fromName = param1.read_utf()

    def _toIdFunc(self, param1):
        self.toId = param1.read_var_uh_long()
        if self.toId < 0 or self.toId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.toId) + ") on element of PartyInvitationMessage.toId.")


class PartyJoinMessage(AbstractPartyMessage):
    protocolId = 5576

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.partyType = 0
        self.partyLeaderId = 0
        self.maxParticipants = 0
        self.members = []
        self.guests = []
        self.restricted = False
        self.partyName = ""
        self._memberstree = FuncTree()
        self._gueststree = FuncTree()

    def getMessageId(self):
        return 5576

    def initPartyJoinMessage(self, param1=0, param2=0, param3=0, param4=0, param5=[], param6=[], param7=False, param8=""):
        super().initAbstractPartyMessage(param1)
        self.partyType = param2
        self.partyLeaderId = param3
        self.maxParticipants = param4
        self.members = param5
        self.guests = param6
        self.restricted = param7
        self.partyName = param8
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.partyType = 0
        self.partyLeaderId = 0
        self.maxParticipants = 0
        self.members = []
        self.guests = []
        self.restricted = False
        self.partyName = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyJoinMessage(param1)

    def serializeAs_PartyJoinMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)
        param1.write_byte(self.partyType)
        if self.partyLeaderId < 0 or self.partyLeaderId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.partyLeaderId) + ") on element partyLeaderId.")
        param1.write_var_long(self.partyLeaderId)
        if self.maxParticipants < 0:
            raise RuntimeError("Forbidden value (" + str(self.maxParticipants) + ") on element maxParticipants.")
        param1.write_byte(self.maxParticipants)
        param1.write_short(len(self.members))
        _loc2_ = 0
        while _loc2_ < len(self.members):
            param1.write_short(as_parent(self.members[_loc2_], PartyMemberInformations).getTypeId())
            as_parent(self.members[_loc2_], PartyMemberInformations).serialize(param1)
            _loc2_ += 1
        param1.write_short(len(self.guests))
        _loc3_ = 0
        while _loc3_ < len(self.guests):
            as_parent(self.guests[_loc3_], PartyGuestInformations).serializeAs_PartyGuestInformations(param1)
            _loc3_ += 1
        param1.write_boolean(self.restricted)
        param1.write_utf(self.partyName)

    def deserialize(self, param1):
        self.deserializeAs_PartyJoinMessage(param1)

    def deserializeAs_PartyJoinMessage(self, param1):
        _loc6_ = 0
        _loc7_ = None
        _loc8_ = None
        super().deserialize(param1)
        self._partyTypeFunc(param1)
        self._partyLeaderIdFunc(param1)
        self._maxParticipantsFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = param1.read_unsigned_short()
            _loc7_ = ProtocolTypeManager.get_instance(PartyMemberInformations,_loc6_)
            _loc7_.deserialize(param1)
            self.members.append(_loc7_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc8_ = PartyGuestInformations()
            _loc8_.deserialize(param1)
            self.guests.append(_loc8_)
            _loc5_ += 1
        self._restrictedFunc(param1)
        self._partyNameFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyJoinMessage(param1)

    def deserializeAsyncAs_PartyJoinMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._partyTypeFunc)
        param1.add_child(self._partyLeaderIdFunc)
        param1.add_child(self._maxParticipantsFunc)
        self._memberstree = param1.add_child(self._memberstreeFunc)
        self._gueststree = param1.add_child(self._gueststreeFunc)
        param1.add_child(self._restrictedFunc)
        param1.add_child(self._partyNameFunc)

    def _partyTypeFunc(self, param1):
        self.partyType = param1.read_byte()
        if self.partyType < 0:
            raise RuntimeError("Forbidden value (" + str(self.partyType) + ") on element of PartyJoinMessage.partyType.")

    def _partyLeaderIdFunc(self, param1):
        self.partyLeaderId = param1.read_var_uh_long()
        if self.partyLeaderId < 0 or self.partyLeaderId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.partyLeaderId) + ") on element of PartyJoinMessage.partyLeaderId.")

    def _maxParticipantsFunc(self, param1):
        self.maxParticipants = param1.read_byte()
        if self.maxParticipants < 0:
            raise RuntimeError("Forbidden value (" + str(self.maxParticipants) + ") on element of PartyJoinMessage.maxParticipants.")

    def _memberstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._memberstree.add_child(self._membersFunc)
            _loc3_ += 1

    def _membersFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = ProtocolTypeManager.get_instance(PartyMemberInformations,_loc2_)
        _loc3_.deserialize(param1)
        self.members.append(_loc3_)

    def _gueststreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._gueststree.add_child(self._guestsFunc)
            _loc3_ += 1

    def _guestsFunc(self, param1):
        _loc2_ = PartyGuestInformations()
        _loc2_.deserialize(param1)
        self.guests.append(_loc2_)

    def _restrictedFunc(self, param1):
        self.restricted = param1.read_boolean()

    def _partyNameFunc(self, param1):
        self.partyName = param1.read_utf()


class PartyKickedByMessage(AbstractPartyMessage):
    protocolId = 5590

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.kickerId = 0

    def getMessageId(self):
        return 5590

    def initPartyKickedByMessage(self, param1=0, param2=0):
        super().initAbstractPartyMessage(param1)
        self.kickerId = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.kickerId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyKickedByMessage(param1)

    def serializeAs_PartyKickedByMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)
        if self.kickerId < 0 or self.kickerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.kickerId) + ") on element kickerId.")
        param1.write_var_long(self.kickerId)

    def deserialize(self, param1):
        self.deserializeAs_PartyKickedByMessage(param1)

    def deserializeAs_PartyKickedByMessage(self, param1):
        super().deserialize(param1)
        self._kickerIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyKickedByMessage(param1)

    def deserializeAsyncAs_PartyKickedByMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._kickerIdFunc)

    def _kickerIdFunc(self, param1):
        self.kickerId = param1.read_var_uh_long()
        if self.kickerId < 0 or self.kickerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.kickerId) + ") on element of PartyKickedByMessage.kickerId.")


class PartyKickRequestMessage(AbstractPartyMessage):
    protocolId = 5592

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.playerId = 0

    def getMessageId(self):
        return 5592

    def initPartyKickRequestMessage(self, param1=0, param2=0):
        super().initAbstractPartyMessage(param1)
        self.playerId = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.playerId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyKickRequestMessage(param1)

    def serializeAs_PartyKickRequestMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element playerId.")
        param1.write_var_long(self.playerId)

    def deserialize(self, param1):
        self.deserializeAs_PartyKickRequestMessage(param1)

    def deserializeAs_PartyKickRequestMessage(self, param1):
        super().deserialize(param1)
        self._playerIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyKickRequestMessage(param1)

    def deserializeAsyncAs_PartyKickRequestMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._playerIdFunc)

    def _playerIdFunc(self, param1):
        self.playerId = param1.read_var_uh_long()
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element of PartyKickRequestMessage.playerId.")


class PartyLeaveMessage(AbstractPartyMessage):
    protocolId = 5594

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 5594

    def initPartyLeaveMessage(self, param1=0):
        super().initAbstractPartyMessage(param1)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyLeaveMessage(param1)

    def serializeAs_PartyLeaveMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_PartyLeaveMessage(param1)

    def deserializeAs_PartyLeaveMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyLeaveMessage(param1)

    def deserializeAsyncAs_PartyLeaveMessage(self, param1):
        super().deserializeAsync(param1)


class PartyLeaveRequestMessage(AbstractPartyMessage):
    protocolId = 5593

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 5593

    def initPartyLeaveRequestMessage(self, param1=0):
        super().initAbstractPartyMessage(param1)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyLeaveRequestMessage(param1)

    def serializeAs_PartyLeaveRequestMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_PartyLeaveRequestMessage(param1)

    def deserializeAs_PartyLeaveRequestMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyLeaveRequestMessage(param1)

    def deserializeAsyncAs_PartyLeaveRequestMessage(self, param1):
        super().deserializeAsync(param1)


class PartyLocateMembersMessage(AbstractPartyMessage):
    protocolId = 5595

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.geopositions = []
        self._geopositionstree = FuncTree()

    def getMessageId(self):
        return 5595

    def initPartyLocateMembersMessage(self, param1=0, param2=[]):
        super().initAbstractPartyMessage(param1)
        self.geopositions = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.geopositions = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyLocateMembersMessage(param1)

    def serializeAs_PartyLocateMembersMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)
        param1.write_short(len(self.geopositions))
        _loc2_ = 0
        while _loc2_ < len(self.geopositions):
            as_parent(self.geopositions[_loc2_], PartyMemberGeoPosition).serializeAs_PartyMemberGeoPosition(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_PartyLocateMembersMessage(param1)

    def deserializeAs_PartyLocateMembersMessage(self, param1):
        _loc4_ = None
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = PartyMemberGeoPosition()
            _loc4_.deserialize(param1)
            self.geopositions.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyLocateMembersMessage(param1)

    def deserializeAsyncAs_PartyLocateMembersMessage(self, param1):
        super().deserializeAsync(param1)
        self._geopositionstree = param1.add_child(self._geopositionstreeFunc)

    def _geopositionstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._geopositionstree.add_child(self._geopositionsFunc)
            _loc3_ += 1

    def _geopositionsFunc(self, param1):
        _loc2_ = PartyMemberGeoPosition()
        _loc2_.deserialize(param1)
        self.geopositions.append(_loc2_)


class PartyLocateMembersRequestMessage(AbstractPartyMessage):
    protocolId = 5587

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 5587

    def initPartyLocateMembersRequestMessage(self, param1=0):
        super().initAbstractPartyMessage(param1)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyLocateMembersRequestMessage(param1)

    def serializeAs_PartyLocateMembersRequestMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_PartyLocateMembersRequestMessage(param1)

    def deserializeAs_PartyLocateMembersRequestMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyLocateMembersRequestMessage(param1)

    def deserializeAsyncAs_PartyLocateMembersRequestMessage(self, param1):
        super().deserializeAsync(param1)


class PartyLoyaltyStatusMessage(AbstractPartyMessage):
    protocolId = 6270

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.loyal = False

    def getMessageId(self):
        return 6270

    def initPartyLoyaltyStatusMessage(self, param1=0, param2=False):
        super().initAbstractPartyMessage(param1)
        self.loyal = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.loyal = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyLoyaltyStatusMessage(param1)

    def serializeAs_PartyLoyaltyStatusMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)
        param1.write_boolean(self.loyal)

    def deserialize(self, param1):
        self.deserializeAs_PartyLoyaltyStatusMessage(param1)

    def deserializeAs_PartyLoyaltyStatusMessage(self, param1):
        super().deserialize(param1)
        self._loyalFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyLoyaltyStatusMessage(param1)

    def deserializeAsyncAs_PartyLoyaltyStatusMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._loyalFunc)

    def _loyalFunc(self, param1):
        self.loyal = param1.read_boolean()


class PartyMemberInFightMessage(AbstractPartyMessage):
    protocolId = 6342

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.reason = 0
        self.memberId = 0
        self.memberAccountId = 0
        self.memberName = ""
        self.fightId = 0
        self.fightMap = MapCoordinatesExtended()
        self.timeBeforeFightStart = 0
        self._fightMaptree = FuncTree()

    def getMessageId(self):
        return 6342

    def initPartyMemberInFightMessage(self, param1=0, param2=0, param3=0, param4=0, param5="", param6=0, param7=None, param8=0):
        super().initAbstractPartyMessage(param1)
        self.reason = param2
        self.memberId = param3
        self.memberAccountId = param4
        self.memberName = param5
        self.fightId = param6
        self.fightMap = param7
        self.timeBeforeFightStart = param8
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.reason = 0
        self.memberId = 0
        self.memberAccountId = 0
        self.memberName = ""
        self.fightId = 0
        self.fightMap = MapCoordinatesExtended()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyMemberInFightMessage(param1)

    def serializeAs_PartyMemberInFightMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)
        param1.write_byte(self.reason)
        if self.memberId < 0 or self.memberId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.memberId) + ") on element memberId.")
        param1.write_var_long(self.memberId)
        if self.memberAccountId < 0:
            raise RuntimeError("Forbidden value (" + str(self.memberAccountId) + ") on element memberAccountId.")
        param1.write_int(self.memberAccountId)
        param1.write_utf(self.memberName)
        param1.write_int(self.fightId)
        self.fightMap.serializeAs_MapCoordinatesExtended(param1)
        param1.write_var_short(self.timeBeforeFightStart)

    def deserialize(self, param1):
        self.deserializeAs_PartyMemberInFightMessage(param1)

    def deserializeAs_PartyMemberInFightMessage(self, param1):
        super().deserialize(param1)
        self._reasonFunc(param1)
        self._memberIdFunc(param1)
        self._memberAccountIdFunc(param1)
        self._memberNameFunc(param1)
        self._fightIdFunc(param1)
        self.fightMap = MapCoordinatesExtended()
        self.fightMap.deserialize(param1)
        self._timeBeforeFightStartFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyMemberInFightMessage(param1)

    def deserializeAsyncAs_PartyMemberInFightMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._reasonFunc)
        param1.add_child(self._memberIdFunc)
        param1.add_child(self._memberAccountIdFunc)
        param1.add_child(self._memberNameFunc)
        param1.add_child(self._fightIdFunc)
        self._fightMaptree = param1.add_child(self._fightMaptreeFunc)
        param1.add_child(self._timeBeforeFightStartFunc)

    def _reasonFunc(self, param1):
        self.reason = param1.read_byte()
        if self.reason < 0:
            raise RuntimeError("Forbidden value (" + str(self.reason) + ") on element of PartyMemberInFightMessage.reason.")

    def _memberIdFunc(self, param1):
        self.memberId = param1.read_var_uh_long()
        if self.memberId < 0 or self.memberId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.memberId) + ") on element of PartyMemberInFightMessage.memberId.")

    def _memberAccountIdFunc(self, param1):
        self.memberAccountId = param1.read_int()
        if self.memberAccountId < 0:
            raise RuntimeError("Forbidden value (" + str(self.memberAccountId) + ") on element of PartyMemberInFightMessage.memberAccountId.")

    def _memberNameFunc(self, param1):
        self.memberName = param1.read_utf()

    def _fightIdFunc(self, param1):
        self.fightId = param1.read_int()

    def _fightMaptreeFunc(self, param1):
        self.fightMap = MapCoordinatesExtended()
        self.fightMap.deserializeAsync(self._fightMaptree)

    def _timeBeforeFightStartFunc(self, param1):
        self.timeBeforeFightStart = param1.read_var_short()


class PartyModifiableStatusMessage(AbstractPartyMessage):
    protocolId = 6277

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.enabled = False

    def getMessageId(self):
        return 6277

    def initPartyModifiableStatusMessage(self, param1=0, param2=False):
        super().initAbstractPartyMessage(param1)
        self.enabled = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.enabled = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyModifiableStatusMessage(param1)

    def serializeAs_PartyModifiableStatusMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)
        param1.write_boolean(self.enabled)

    def deserialize(self, param1):
        self.deserializeAs_PartyModifiableStatusMessage(param1)

    def deserializeAs_PartyModifiableStatusMessage(self, param1):
        super().deserialize(param1)
        self._enabledFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyModifiableStatusMessage(param1)

    def deserializeAsyncAs_PartyModifiableStatusMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._enabledFunc)

    def _enabledFunc(self, param1):
        self.enabled = param1.read_boolean()


class PartyNameSetErrorMessage(AbstractPartyMessage):
    protocolId = 6501

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.result = 0

    def getMessageId(self):
        return 6501

    def initPartyNameSetErrorMessage(self, param1=0, param2=0):
        super().initAbstractPartyMessage(param1)
        self.result = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.result = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyNameSetErrorMessage(param1)

    def serializeAs_PartyNameSetErrorMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)
        param1.write_byte(self.result)

    def deserialize(self, param1):
        self.deserializeAs_PartyNameSetErrorMessage(param1)

    def deserializeAs_PartyNameSetErrorMessage(self, param1):
        super().deserialize(param1)
        self._resultFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyNameSetErrorMessage(param1)

    def deserializeAsyncAs_PartyNameSetErrorMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._resultFunc)

    def _resultFunc(self, param1):
        self.result = param1.read_byte()
        if self.result < 0:
            raise RuntimeError("Forbidden value (" + str(self.result) + ") on element of PartyNameSetErrorMessage.result.")


class PartyNameSetRequestMessage(AbstractPartyMessage):
    protocolId = 6503

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.partyName = ""

    def getMessageId(self):
        return 6503

    def initPartyNameSetRequestMessage(self, param1=0, param2=""):
        super().initAbstractPartyMessage(param1)
        self.partyName = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.partyName = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyNameSetRequestMessage(param1)

    def serializeAs_PartyNameSetRequestMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)
        param1.write_utf(self.partyName)

    def deserialize(self, param1):
        self.deserializeAs_PartyNameSetRequestMessage(param1)

    def deserializeAs_PartyNameSetRequestMessage(self, param1):
        super().deserialize(param1)
        self._partyNameFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyNameSetRequestMessage(param1)

    def deserializeAsyncAs_PartyNameSetRequestMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._partyNameFunc)

    def _partyNameFunc(self, param1):
        self.partyName = param1.read_utf()


class PartyNameUpdateMessage(AbstractPartyMessage):
    protocolId = 6502

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.partyName = ""

    def getMessageId(self):
        return 6502

    def initPartyNameUpdateMessage(self, param1=0, param2=""):
        super().initAbstractPartyMessage(param1)
        self.partyName = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.partyName = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyNameUpdateMessage(param1)

    def serializeAs_PartyNameUpdateMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)
        param1.write_utf(self.partyName)

    def deserialize(self, param1):
        self.deserializeAs_PartyNameUpdateMessage(param1)

    def deserializeAs_PartyNameUpdateMessage(self, param1):
        super().deserialize(param1)
        self._partyNameFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyNameUpdateMessage(param1)

    def deserializeAsyncAs_PartyNameUpdateMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._partyNameFunc)

    def _partyNameFunc(self, param1):
        self.partyName = param1.read_utf()


class PartyPledgeLoyaltyRequestMessage(AbstractPartyMessage):
    protocolId = 6269

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.loyal = False

    def getMessageId(self):
        return 6269

    def initPartyPledgeLoyaltyRequestMessage(self, param1=0, param2=False):
        super().initAbstractPartyMessage(param1)
        self.loyal = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.loyal = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyPledgeLoyaltyRequestMessage(param1)

    def serializeAs_PartyPledgeLoyaltyRequestMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)
        param1.write_boolean(self.loyal)

    def deserialize(self, param1):
        self.deserializeAs_PartyPledgeLoyaltyRequestMessage(param1)

    def deserializeAs_PartyPledgeLoyaltyRequestMessage(self, param1):
        super().deserialize(param1)
        self._loyalFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyPledgeLoyaltyRequestMessage(param1)

    def deserializeAsyncAs_PartyPledgeLoyaltyRequestMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._loyalFunc)

    def _loyalFunc(self, param1):
        self.loyal = param1.read_boolean()


class PartyRefuseInvitationMessage(AbstractPartyMessage):
    protocolId = 5582

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 5582

    def initPartyRefuseInvitationMessage(self, param1=0):
        super().initAbstractPartyMessage(param1)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyRefuseInvitationMessage(param1)

    def serializeAs_PartyRefuseInvitationMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_PartyRefuseInvitationMessage(param1)

    def deserializeAs_PartyRefuseInvitationMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyRefuseInvitationMessage(param1)

    def deserializeAsyncAs_PartyRefuseInvitationMessage(self, param1):
        super().deserializeAsync(param1)


class PartyRestrictedMessage(AbstractPartyMessage):
    protocolId = 6175

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.restricted = False

    def getMessageId(self):
        return 6175

    def initPartyRestrictedMessage(self, param1=0, param2=False):
        super().initAbstractPartyMessage(param1)
        self.restricted = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.restricted = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyRestrictedMessage(param1)

    def serializeAs_PartyRestrictedMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)
        param1.write_boolean(self.restricted)

    def deserialize(self, param1):
        self.deserializeAs_PartyRestrictedMessage(param1)

    def deserializeAs_PartyRestrictedMessage(self, param1):
        super().deserialize(param1)
        self._restrictedFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyRestrictedMessage(param1)

    def deserializeAsyncAs_PartyRestrictedMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._restrictedFunc)

    def _restrictedFunc(self, param1):
        self.restricted = param1.read_boolean()


class PartyStopFollowRequestMessage(AbstractPartyMessage):
    protocolId = 5574

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.playerId = 0

    def getMessageId(self):
        return 5574

    def initPartyStopFollowRequestMessage(self, param1=0, param2=0):
        super().initAbstractPartyMessage(param1)
        self.playerId = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.playerId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyStopFollowRequestMessage(param1)

    def serializeAs_PartyStopFollowRequestMessage(self, param1):
        super().serializeAs_AbstractPartyMessage(param1)
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element playerId.")
        param1.write_var_long(self.playerId)

    def deserialize(self, param1):
        self.deserializeAs_PartyStopFollowRequestMessage(param1)

    def deserializeAs_PartyStopFollowRequestMessage(self, param1):
        super().deserialize(param1)
        self._playerIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyStopFollowRequestMessage(param1)

    def deserializeAsyncAs_PartyStopFollowRequestMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._playerIdFunc)

    def _playerIdFunc(self, param1):
        self.playerId = param1.read_var_uh_long()
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element of PartyStopFollowRequestMessage.playerId.")


class TreasureHuntDigRequestAnswerFailedMessage(TreasureHuntDigRequestAnswerMessage):
    protocolId = 6509

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.wrongFlagCount = 0

    def getMessageId(self):
        return 6509

    def initTreasureHuntDigRequestAnswerFailedMessage(self, param1=0, param2=0, param3=0):
        super().initTreasureHuntDigRequestAnswerMessage(param1,param2)
        self.wrongFlagCount = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.wrongFlagCount = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TreasureHuntDigRequestAnswerFailedMessage(param1)

    def serializeAs_TreasureHuntDigRequestAnswerFailedMessage(self, param1):
        super().serializeAs_TreasureHuntDigRequestAnswerMessage(param1)
        if self.wrongFlagCount < 0:
            raise RuntimeError("Forbidden value (" + str(self.wrongFlagCount) + ") on element wrongFlagCount.")
        param1.write_byte(self.wrongFlagCount)

    def deserialize(self, param1):
        self.deserializeAs_TreasureHuntDigRequestAnswerFailedMessage(param1)

    def deserializeAs_TreasureHuntDigRequestAnswerFailedMessage(self, param1):
        super().deserialize(param1)
        self._wrongFlagCountFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TreasureHuntDigRequestAnswerFailedMessage(param1)

    def deserializeAsyncAs_TreasureHuntDigRequestAnswerFailedMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._wrongFlagCountFunc)

    def _wrongFlagCountFunc(self, param1):
        self.wrongFlagCount = param1.read_byte()
        if self.wrongFlagCount < 0:
            raise RuntimeError("Forbidden value (" + str(self.wrongFlagCount) + ") on element of TreasureHuntDigRequestAnswerFailedMessage.wrongFlagCount.")


class GuildBulletinSetErrorMessage(SocialNoticeSetErrorMessage):
    protocolId = 6691

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6691

    def initGuildBulletinSetErrorMessage(self, param1=0):
        super().initSocialNoticeSetErrorMessage(param1)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildBulletinSetErrorMessage(param1)

    def serializeAs_GuildBulletinSetErrorMessage(self, param1):
        super().serializeAs_SocialNoticeSetErrorMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_GuildBulletinSetErrorMessage(param1)

    def deserializeAs_GuildBulletinSetErrorMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildBulletinSetErrorMessage(param1)

    def deserializeAsyncAs_GuildBulletinSetErrorMessage(self, param1):
        super().deserializeAsync(param1)


class GuildBulletinSetRequestMessage(SocialNoticeSetRequestMessage):
    protocolId = 6694

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.content = ""
        self.notifyMembers = False

    def getMessageId(self):
        return 6694

    def initGuildBulletinSetRequestMessage(self, param1="", param2=False):
        self.content = param1
        self.notifyMembers = param2
        self._isInitialized = True
        return self

    def reset(self):
        self.content = ""
        self.notifyMembers = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildBulletinSetRequestMessage(param1)

    def serializeAs_GuildBulletinSetRequestMessage(self, param1):
        super().serializeAs_SocialNoticeSetRequestMessage(param1)
        param1.write_utf(self.content)
        param1.write_boolean(self.notifyMembers)

    def deserialize(self, param1):
        self.deserializeAs_GuildBulletinSetRequestMessage(param1)

    def deserializeAs_GuildBulletinSetRequestMessage(self, param1):
        super().deserialize(param1)
        self._contentFunc(param1)
        self._notifyMembersFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildBulletinSetRequestMessage(param1)

    def deserializeAsyncAs_GuildBulletinSetRequestMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._contentFunc)
        param1.add_child(self._notifyMembersFunc)

    def _contentFunc(self, param1):
        self.content = param1.read_utf()

    def _notifyMembersFunc(self, param1):
        self.notifyMembers = param1.read_boolean()


class GuildInAllianceFactsMessage(GuildFactsMessage):
    protocolId = 6422

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.allianceInfos = BasicNamedAllianceInformations()
        self._allianceInfostree = FuncTree()

    def getMessageId(self):
        return 6422

    def initGuildInAllianceFactsMessage(self, param1=None, param2=0, param3=0, param4=[], param5=None):
        super().initGuildFactsMessage(param1,param2,param3,param4)
        self.allianceInfos = param5
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.allianceInfos = BasicNamedAllianceInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildInAllianceFactsMessage(param1)

    def serializeAs_GuildInAllianceFactsMessage(self, param1):
        super().serializeAs_GuildFactsMessage(param1)
        self.allianceInfos.serializeAs_BasicNamedAllianceInformations(param1)

    def deserialize(self, param1):
        self.deserializeAs_GuildInAllianceFactsMessage(param1)

    def deserializeAs_GuildInAllianceFactsMessage(self, param1):
        super().deserialize(param1)
        self.allianceInfos = BasicNamedAllianceInformations()
        self.allianceInfos.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildInAllianceFactsMessage(param1)

    def deserializeAsyncAs_GuildInAllianceFactsMessage(self, param1):
        super().deserializeAsync(param1)
        self._allianceInfostree = param1.add_child(self._allianceInfostreeFunc)

    def _allianceInfostreeFunc(self, param1):
        self.allianceInfos = BasicNamedAllianceInformations()
        self.allianceInfos.deserializeAsync(self._allianceInfostree)


class GuildMembershipMessage(GuildJoinedMessage):
    protocolId = 5835

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 5835

    def initGuildMembershipMessage(self, param1=None, param2=0):
        super().initGuildJoinedMessage(param1,param2)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildMembershipMessage(param1)

    def serializeAs_GuildMembershipMessage(self, param1):
        super().serializeAs_GuildJoinedMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_GuildMembershipMessage(param1)

    def deserializeAs_GuildMembershipMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildMembershipMessage(param1)

    def deserializeAsyncAs_GuildMembershipMessage(self, param1):
        super().deserializeAsync(param1)


class GuildMotdMessage(SocialNoticeMessage):
    protocolId = 6590

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6590

    def initGuildMotdMessage(self, param1="", param2=0, param3=0, param4=""):
        super().initSocialNoticeMessage(param1,param2,param3,param4)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildMotdMessage(param1)

    def serializeAs_GuildMotdMessage(self, param1):
        super().serializeAs_SocialNoticeMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_GuildMotdMessage(param1)

    def deserializeAs_GuildMotdMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildMotdMessage(param1)

    def deserializeAsyncAs_GuildMotdMessage(self, param1):
        super().deserializeAsync(param1)


class GuildMotdSetErrorMessage(SocialNoticeSetErrorMessage):
    protocolId = 6591

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6591

    def initGuildMotdSetErrorMessage(self, param1=0):
        super().initSocialNoticeSetErrorMessage(param1)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildMotdSetErrorMessage(param1)

    def serializeAs_GuildMotdSetErrorMessage(self, param1):
        super().serializeAs_SocialNoticeSetErrorMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_GuildMotdSetErrorMessage(param1)

    def deserializeAs_GuildMotdSetErrorMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildMotdSetErrorMessage(param1)

    def deserializeAsyncAs_GuildMotdSetErrorMessage(self, param1):
        super().deserializeAsync(param1)


class GuildMotdSetRequestMessage(SocialNoticeSetRequestMessage):
    protocolId = 6588

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.content = ""

    def getMessageId(self):
        return 6588

    def initGuildMotdSetRequestMessage(self, param1=""):
        self.content = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.content = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildMotdSetRequestMessage(param1)

    def serializeAs_GuildMotdSetRequestMessage(self, param1):
        super().serializeAs_SocialNoticeSetRequestMessage(param1)
        param1.write_utf(self.content)

    def deserialize(self, param1):
        self.deserializeAs_GuildMotdSetRequestMessage(param1)

    def deserializeAs_GuildMotdSetRequestMessage(self, param1):
        super().deserialize(param1)
        self._contentFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildMotdSetRequestMessage(param1)

    def deserializeAsyncAs_GuildMotdSetRequestMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._contentFunc)

    def _contentFunc(self, param1):
        self.content = param1.read_utf()


class GuildFightTakePlaceRequestMessage(GuildFightJoinRequestMessage):
    protocolId = 6235

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.replacedCharacterId = 0

    def getMessageId(self):
        return 6235

    def initGuildFightTakePlaceRequestMessage(self, param1=0, param2=0):
        super().initGuildFightJoinRequestMessage(param1)
        self.replacedCharacterId = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.replacedCharacterId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildFightTakePlaceRequestMessage(param1)

    def serializeAs_GuildFightTakePlaceRequestMessage(self, param1):
        super().serializeAs_GuildFightJoinRequestMessage(param1)
        param1.write_int(self.replacedCharacterId)

    def deserialize(self, param1):
        self.deserializeAs_GuildFightTakePlaceRequestMessage(param1)

    def deserializeAs_GuildFightTakePlaceRequestMessage(self, param1):
        super().deserialize(param1)
        self._replacedCharacterIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildFightTakePlaceRequestMessage(param1)

    def deserializeAsyncAs_GuildFightTakePlaceRequestMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._replacedCharacterIdFunc)

    def _replacedCharacterIdFunc(self, param1):
        self.replacedCharacterId = param1.read_int()


class TaxCollectorListMessage(AbstractTaxCollectorListMessage):
    protocolId = 5930

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.nbcollectorMax = 0
        self.fightersInformations = []
        self._fightersInformationstree = FuncTree()

    def getMessageId(self):
        return 5930

    def initTaxCollectorListMessage(self, param1=[], param2=0, param3=[]):
        super().initAbstractTaxCollectorListMessage(param1)
        self.nbcollectorMax = param2
        self.fightersInformations = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.nbcollectorMax = 0
        self.fightersInformations = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TaxCollectorListMessage(param1)

    def serializeAs_TaxCollectorListMessage(self, param1):
        super().serializeAs_AbstractTaxCollectorListMessage(param1)
        if self.nbcollectorMax < 0:
            raise RuntimeError("Forbidden value (" + str(self.nbcollectorMax) + ") on element nbcollectorMax.")
        param1.write_byte(self.nbcollectorMax)
        param1.write_short(len(self.fightersInformations))
        _loc2_ = 0
        while _loc2_ < len(self.fightersInformations):
            as_parent(self.fightersInformations[_loc2_], TaxCollectorFightersInformation).serializeAs_TaxCollectorFightersInformation(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_TaxCollectorListMessage(param1)

    def deserializeAs_TaxCollectorListMessage(self, param1):
        _loc4_ = None
        super().deserialize(param1)
        self._nbcollectorMaxFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = TaxCollectorFightersInformation()
            _loc4_.deserialize(param1)
            self.fightersInformations.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TaxCollectorListMessage(param1)

    def deserializeAsyncAs_TaxCollectorListMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._nbcollectorMaxFunc)
        self._fightersInformationstree = param1.add_child(self._fightersInformationstreeFunc)

    def _nbcollectorMaxFunc(self, param1):
        self.nbcollectorMax = param1.read_byte()
        if self.nbcollectorMax < 0:
            raise RuntimeError("Forbidden value (" + str(self.nbcollectorMax) + ") on element of TaxCollectorListMessage.nbcollectorMax.")

    def _fightersInformationstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._fightersInformationstree.add_child(self._fightersInformationsFunc)
            _loc3_ += 1

    def _fightersInformationsFunc(self, param1):
        _loc2_ = TaxCollectorFightersInformation()
        _loc2_.deserialize(param1)
        self.fightersInformations.append(_loc2_)


class TopTaxCollectorListMessage(AbstractTaxCollectorListMessage):
    protocolId = 6565

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.isDungeon = False

    def getMessageId(self):
        return 6565

    def initTopTaxCollectorListMessage(self, param1=[], param2=False):
        super().initAbstractTaxCollectorListMessage(param1)
        self.isDungeon = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.isDungeon = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_TopTaxCollectorListMessage(param1)

    def serializeAs_TopTaxCollectorListMessage(self, param1):
        super().serializeAs_AbstractTaxCollectorListMessage(param1)
        param1.write_boolean(self.isDungeon)

    def deserialize(self, param1):
        self.deserializeAs_TopTaxCollectorListMessage(param1)

    def deserializeAs_TopTaxCollectorListMessage(self, param1):
        super().deserialize(param1)
        self._isDungeonFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_TopTaxCollectorListMessage(param1)

    def deserializeAsyncAs_TopTaxCollectorListMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._isDungeonFunc)

    def _isDungeonFunc(self, param1):
        self.isDungeon = param1.read_boolean()


class InteractiveUseWithParamRequestMessage(InteractiveUseRequestMessage):
    protocolId = 6715

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.id = 0

    def getMessageId(self):
        return 6715

    def initInteractiveUseWithParamRequestMessage(self, param1=0, param2=0, param3=0):
        super().initInteractiveUseRequestMessage(param1,param2)
        self.id = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.id = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        if HASH_FUNCTION != None:
            HASH_FUNCTION(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_InteractiveUseWithParamRequestMessage(param1)

    def serializeAs_InteractiveUseWithParamRequestMessage(self, param1):
        super().serializeAs_InteractiveUseRequestMessage(param1)
        param1.write_int(self.id)

    def deserialize(self, param1):
        self.deserializeAs_InteractiveUseWithParamRequestMessage(param1)

    def deserializeAs_InteractiveUseWithParamRequestMessage(self, param1):
        super().deserialize(param1)
        self._idFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_InteractiveUseWithParamRequestMessage(param1)

    def deserializeAsyncAs_InteractiveUseWithParamRequestMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._idFunc)

    def _idFunc(self, param1):
        self.id = param1.read_int()


class ZaapListMessage(TeleportDestinationsListMessage):
    protocolId = 1604

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.spawnMapId = 0

    def getMessageId(self):
        return 1604

    def initZaapListMessage(self, param1=0, param2=[], param3=[], param4=[], param5=[], param6=0):
        super().initTeleportDestinationsListMessage(param1,param2,param3,param4,param5)
        self.spawnMapId = param6
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.spawnMapId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ZaapListMessage(param1)

    def serializeAs_ZaapListMessage(self, param1):
        super().serializeAs_TeleportDestinationsListMessage(param1)
        if self.spawnMapId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spawnMapId) + ") on element spawnMapId.")
        param1.write_int(self.spawnMapId)

    def deserialize(self, param1):
        self.deserializeAs_ZaapListMessage(param1)

    def deserializeAs_ZaapListMessage(self, param1):
        super().deserialize(param1)
        self._spawnMapIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ZaapListMessage(param1)

    def deserializeAsyncAs_ZaapListMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._spawnMapIdFunc)

    def _spawnMapIdFunc(self, param1):
        self.spawnMapId = param1.read_int()
        if self.spawnMapId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spawnMapId) + ") on element of ZaapListMessage.spawnMapId.")


class ExchangeBidHouseInListUpdatedMessage(ExchangeBidHouseInListAddedMessage):
    protocolId = 6337

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6337

    def initExchangeBidHouseInListUpdatedMessage(self, param1=0, param2=0, param3=[], param4=[]):
        super().initExchangeBidHouseInListAddedMessage(param1,param2,param3,param4)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeBidHouseInListUpdatedMessage(param1)

    def serializeAs_ExchangeBidHouseInListUpdatedMessage(self, param1):
        super().serializeAs_ExchangeBidHouseInListAddedMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeBidHouseInListUpdatedMessage(param1)

    def deserializeAs_ExchangeBidHouseInListUpdatedMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeBidHouseInListUpdatedMessage(param1)

    def deserializeAsyncAs_ExchangeBidHouseInListUpdatedMessage(self, param1):
        super().deserializeAsync(param1)


class ExchangeBidPriceForSellerMessage(ExchangeBidPriceMessage):
    protocolId = 6464

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.allIdentical = False
        self.minimalPrices = []
        self._minimalPricestree = FuncTree()

    def getMessageId(self):
        return 6464

    def initExchangeBidPriceForSellerMessage(self, param1=0, param2=0, param3=False, param4=[]):
        super().initExchangeBidPriceMessage(param1,param2)
        self.allIdentical = param3
        self.minimalPrices = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.allIdentical = False
        self.minimalPrices = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeBidPriceForSellerMessage(param1)

    def serializeAs_ExchangeBidPriceForSellerMessage(self, param1):
        super().serializeAs_ExchangeBidPriceMessage(param1)
        param1.write_boolean(self.allIdentical)
        param1.write_short(len(self.minimalPrices))
        _loc2_ = 0
        while _loc2_ < len(self.minimalPrices):
            if self.minimalPrices[_loc2_] < 0 or self.minimalPrices[_loc2_] > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(self.minimalPrices[_loc2_]) + ") on element 2 (starting at 1) of minimalPrices.")
            param1.write_var_long(self.minimalPrices[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeBidPriceForSellerMessage(param1)

    def deserializeAs_ExchangeBidPriceForSellerMessage(self, param1):
        _loc4_ = None
        super().deserialize(param1)
        self._allIdenticalFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_uh_long()
            if _loc4_ < 0 or _loc4_ > 9007199254740990:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of minimalPrices.")
            self.minimalPrices.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeBidPriceForSellerMessage(param1)

    def deserializeAsyncAs_ExchangeBidPriceForSellerMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._allIdenticalFunc)
        self._minimalPricestree = param1.add_child(self._minimalPricestreeFunc)

    def _allIdenticalFunc(self, param1):
        self.allIdentical = param1.read_boolean()

    def _minimalPricestreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._minimalPricestree.add_child(self._minimalPricesFunc)
            _loc3_ += 1

    def _minimalPricesFunc(self, param1):
        _loc2_ = param1.read_var_uh_long()
        if _loc2_ < 0 or _loc2_ > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of minimalPrices.")
        self.minimalPrices.append(_loc2_)


class ExchangeCraftResultWithObjectDescMessage(ExchangeCraftResultMessage):
    protocolId = 5999

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectInfo = ObjectItemNotInContainer()
        self._objectInfotree = FuncTree()

    def getMessageId(self):
        return 5999

    def initExchangeCraftResultWithObjectDescMessage(self, param1=0, param2=None):
        super().initExchangeCraftResultMessage(param1)
        self.objectInfo = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.objectInfo = ObjectItemNotInContainer()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeCraftResultWithObjectDescMessage(param1)

    def serializeAs_ExchangeCraftResultWithObjectDescMessage(self, param1):
        super().serializeAs_ExchangeCraftResultMessage(param1)
        self.objectInfo.serializeAs_ObjectItemNotInContainer(param1)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeCraftResultWithObjectDescMessage(param1)

    def deserializeAs_ExchangeCraftResultWithObjectDescMessage(self, param1):
        super().deserialize(param1)
        self.objectInfo = ObjectItemNotInContainer()
        self.objectInfo.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeCraftResultWithObjectDescMessage(param1)

    def deserializeAsyncAs_ExchangeCraftResultWithObjectDescMessage(self, param1):
        super().deserializeAsync(param1)
        self._objectInfotree = param1.add_child(self._objectInfotreeFunc)

    def _objectInfotreeFunc(self, param1):
        self.objectInfo = ObjectItemNotInContainer()
        self.objectInfo.deserializeAsync(self._objectInfotree)


class ExchangeCraftResultWithObjectIdMessage(ExchangeCraftResultMessage):
    protocolId = 6000

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectGenericId = 0

    def getMessageId(self):
        return 6000

    def initExchangeCraftResultWithObjectIdMessage(self, param1=0, param2=0):
        super().initExchangeCraftResultMessage(param1)
        self.objectGenericId = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.objectGenericId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeCraftResultWithObjectIdMessage(param1)

    def serializeAs_ExchangeCraftResultWithObjectIdMessage(self, param1):
        super().serializeAs_ExchangeCraftResultMessage(param1)
        if self.objectGenericId < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectGenericId) + ") on element objectGenericId.")
        param1.write_var_short(self.objectGenericId)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeCraftResultWithObjectIdMessage(param1)

    def deserializeAs_ExchangeCraftResultWithObjectIdMessage(self, param1):
        super().deserialize(param1)
        self._objectGenericIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeCraftResultWithObjectIdMessage(param1)

    def deserializeAsyncAs_ExchangeCraftResultWithObjectIdMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._objectGenericIdFunc)

    def _objectGenericIdFunc(self, param1):
        self.objectGenericId = param1.read_var_uh_short()
        if self.objectGenericId < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectGenericId) + ") on element of ExchangeCraftResultWithObjectIdMessage.objectGenericId.")


class ExchangeLeaveMessage(LeaveDialogMessage):
    protocolId = 5628

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.success = False

    def getMessageId(self):
        return 5628

    def initExchangeLeaveMessage(self, param1=0, param2=False):
        super().initLeaveDialogMessage(param1)
        self.success = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.success = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeLeaveMessage(param1)

    def serializeAs_ExchangeLeaveMessage(self, param1):
        super().serializeAs_LeaveDialogMessage(param1)
        param1.write_boolean(self.success)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeLeaveMessage(param1)

    def deserializeAs_ExchangeLeaveMessage(self, param1):
        super().deserialize(param1)
        self._successFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeLeaveMessage(param1)

    def deserializeAsyncAs_ExchangeLeaveMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._successFunc)

    def _successFunc(self, param1):
        self.success = param1.read_boolean()


class ExchangeMountsStableBornAddMessage(ExchangeMountsStableAddMessage):
    protocolId = 6557

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6557

    def initExchangeMountsStableBornAddMessage(self, param1=[]):
        super().initExchangeMountsStableAddMessage(param1)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeMountsStableBornAddMessage(param1)

    def serializeAs_ExchangeMountsStableBornAddMessage(self, param1):
        super().serializeAs_ExchangeMountsStableAddMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeMountsStableBornAddMessage(param1)

    def deserializeAs_ExchangeMountsStableBornAddMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeMountsStableBornAddMessage(param1)

    def deserializeAsyncAs_ExchangeMountsStableBornAddMessage(self, param1):
        super().deserializeAsync(param1)


class ExchangeObjectAddedMessage(ExchangeObjectMessage):
    protocolId = 5516

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.object = ObjectItem()
        self._objecttree = FuncTree()

    def getMessageId(self):
        return 5516

    def initExchangeObjectAddedMessage(self, param1=False, param2=None):
        super().initExchangeObjectMessage(param1)
        self.object = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.object = ObjectItem()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeObjectAddedMessage(param1)

    def serializeAs_ExchangeObjectAddedMessage(self, param1):
        super().serializeAs_ExchangeObjectMessage(param1)
        self.object.serializeAs_ObjectItem(param1)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeObjectAddedMessage(param1)

    def deserializeAs_ExchangeObjectAddedMessage(self, param1):
        super().deserialize(param1)
        self.object = ObjectItem()
        self.object.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeObjectAddedMessage(param1)

    def deserializeAsyncAs_ExchangeObjectAddedMessage(self, param1):
        super().deserializeAsync(param1)
        self._objecttree = param1.add_child(self._objecttreeFunc)

    def _objecttreeFunc(self, param1):
        self.object = ObjectItem()
        self.object.deserializeAsync(self._objecttree)


class ExchangeObjectMovePricedMessage(ExchangeObjectMoveMessage):
    protocolId = 5514

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.price = 0

    def getMessageId(self):
        return 5514

    def initExchangeObjectMovePricedMessage(self, param1=0, param2=0, param3=0):
        super().initExchangeObjectMoveMessage(param1,param2)
        self.price = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.price = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeObjectMovePricedMessage(param1)

    def serializeAs_ExchangeObjectMovePricedMessage(self, param1):
        super().serializeAs_ExchangeObjectMoveMessage(param1)
        if self.price < 0 or self.price > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.price) + ") on element price.")
        param1.write_var_long(self.price)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeObjectMovePricedMessage(param1)

    def deserializeAs_ExchangeObjectMovePricedMessage(self, param1):
        super().deserialize(param1)
        self._priceFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeObjectMovePricedMessage(param1)

    def deserializeAsyncAs_ExchangeObjectMovePricedMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._priceFunc)

    def _priceFunc(self, param1):
        self.price = param1.read_var_uh_long()
        if self.price < 0 or self.price > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.price) + ") on element of ExchangeObjectMovePricedMessage.price.")


class ExchangeObjectsAddedMessage(ExchangeObjectMessage):
    protocolId = 6535

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.object = []
        self._objecttree = FuncTree()

    def getMessageId(self):
        return 6535

    def initExchangeObjectsAddedMessage(self, param1=False, param2=[]):
        super().initExchangeObjectMessage(param1)
        self.object = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.object = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeObjectsAddedMessage(param1)

    def serializeAs_ExchangeObjectsAddedMessage(self, param1):
        super().serializeAs_ExchangeObjectMessage(param1)
        param1.write_short(len(self.object))
        _loc2_ = 0
        while _loc2_ < len(self.object):
            as_parent(self.object[_loc2_], ObjectItem).serializeAs_ObjectItem(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeObjectsAddedMessage(param1)

    def deserializeAs_ExchangeObjectsAddedMessage(self, param1):
        _loc4_ = None
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = ObjectItem()
            _loc4_.deserialize(param1)
            self.object.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeObjectsAddedMessage(param1)

    def deserializeAsyncAs_ExchangeObjectsAddedMessage(self, param1):
        super().deserializeAsync(param1)
        self._objecttree = param1.add_child(self._objecttreeFunc)

    def _objecttreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._objecttree.add_child(self._objectFunc)
            _loc3_ += 1

    def _objectFunc(self, param1):
        _loc2_ = ObjectItem()
        _loc2_.deserialize(param1)
        self.object.append(_loc2_)


class ExchangePlayerMultiCraftRequestMessage(ExchangeRequestMessage):
    protocolId = 5784

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.target = 0
        self.skillId = 0

    def getMessageId(self):
        return 5784

    def initExchangePlayerMultiCraftRequestMessage(self, param1=0, param2=0, param3=0):
        super().initExchangeRequestMessage(param1)
        self.target = param2
        self.skillId = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.target = 0
        self.skillId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        if HASH_FUNCTION != None:
            HASH_FUNCTION(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangePlayerMultiCraftRequestMessage(param1)

    def serializeAs_ExchangePlayerMultiCraftRequestMessage(self, param1):
        super().serializeAs_ExchangeRequestMessage(param1)
        if self.target < 0 or self.target > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.target) + ") on element target.")
        param1.write_var_long(self.target)
        if self.skillId < 0:
            raise RuntimeError("Forbidden value (" + str(self.skillId) + ") on element skillId.")
        param1.write_var_int(self.skillId)

    def deserialize(self, param1):
        self.deserializeAs_ExchangePlayerMultiCraftRequestMessage(param1)

    def deserializeAs_ExchangePlayerMultiCraftRequestMessage(self, param1):
        super().deserialize(param1)
        self._targetFunc(param1)
        self._skillIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangePlayerMultiCraftRequestMessage(param1)

    def deserializeAsyncAs_ExchangePlayerMultiCraftRequestMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetFunc)
        param1.add_child(self._skillIdFunc)

    def _targetFunc(self, param1):
        self.target = param1.read_var_uh_long()
        if self.target < 0 or self.target > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.target) + ") on element of ExchangePlayerMultiCraftRequestMessage.target.")

    def _skillIdFunc(self, param1):
        self.skillId = param1.read_var_uh_int()
        if self.skillId < 0:
            raise RuntimeError("Forbidden value (" + str(self.skillId) + ") on element of ExchangePlayerMultiCraftRequestMessage.skillId.")


class ExchangePlayerRequestMessage(ExchangeRequestMessage):
    protocolId = 5773

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.target = 0

    def getMessageId(self):
        return 5773

    def initExchangePlayerRequestMessage(self, param1=0, param2=0):
        super().initExchangeRequestMessage(param1)
        self.target = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.target = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        if HASH_FUNCTION != None:
            HASH_FUNCTION(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangePlayerRequestMessage(param1)

    def serializeAs_ExchangePlayerRequestMessage(self, param1):
        super().serializeAs_ExchangeRequestMessage(param1)
        if self.target < 0 or self.target > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.target) + ") on element target.")
        param1.write_var_long(self.target)

    def deserialize(self, param1):
        self.deserializeAs_ExchangePlayerRequestMessage(param1)

    def deserializeAs_ExchangePlayerRequestMessage(self, param1):
        super().deserialize(param1)
        self._targetFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangePlayerRequestMessage(param1)

    def deserializeAsyncAs_ExchangePlayerRequestMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._targetFunc)

    def _targetFunc(self, param1):
        self.target = param1.read_var_uh_long()
        if self.target < 0 or self.target > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.target) + ") on element of ExchangePlayerRequestMessage.target.")


class ExchangeRequestedTradeMessage(ExchangeRequestedMessage):
    protocolId = 5523

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.source = 0
        self.target = 0

    def getMessageId(self):
        return 5523

    def initExchangeRequestedTradeMessage(self, param1=0, param2=0, param3=0):
        super().initExchangeRequestedMessage(param1)
        self.source = param2
        self.target = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.source = 0
        self.target = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeRequestedTradeMessage(param1)

    def serializeAs_ExchangeRequestedTradeMessage(self, param1):
        super().serializeAs_ExchangeRequestedMessage(param1)
        if self.source < 0 or self.source > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.source) + ") on element source.")
        param1.write_var_long(self.source)
        if self.target < 0 or self.target > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.target) + ") on element target.")
        param1.write_var_long(self.target)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeRequestedTradeMessage(param1)

    def deserializeAs_ExchangeRequestedTradeMessage(self, param1):
        super().deserialize(param1)
        self._sourceFunc(param1)
        self._targetFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeRequestedTradeMessage(param1)

    def deserializeAsyncAs_ExchangeRequestedTradeMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._sourceFunc)
        param1.add_child(self._targetFunc)

    def _sourceFunc(self, param1):
        self.source = param1.read_var_uh_long()
        if self.source < 0 or self.source > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.source) + ") on element of ExchangeRequestedTradeMessage.source.")

    def _targetFunc(self, param1):
        self.target = param1.read_var_uh_long()
        if self.target < 0 or self.target > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.target) + ") on element of ExchangeRequestedTradeMessage.target.")


class ExchangeStartedWithPodsMessage(ExchangeStartedMessage):
    protocolId = 6129

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.firstCharacterId = 0
        self.firstCharacterCurrentWeight = 0
        self.firstCharacterMaxWeight = 0
        self.secondCharacterId = 0
        self.secondCharacterCurrentWeight = 0
        self.secondCharacterMaxWeight = 0

    def getMessageId(self):
        return 6129

    def initExchangeStartedWithPodsMessage(self, param1=0, param2=0, param3=0, param4=0, param5=0, param6=0, param7=0):
        super().initExchangeStartedMessage(param1)
        self.firstCharacterId = param2
        self.firstCharacterCurrentWeight = param3
        self.firstCharacterMaxWeight = param4
        self.secondCharacterId = param5
        self.secondCharacterCurrentWeight = param6
        self.secondCharacterMaxWeight = param7
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.firstCharacterId = 0
        self.firstCharacterCurrentWeight = 0
        self.firstCharacterMaxWeight = 0
        self.secondCharacterId = 0
        self.secondCharacterCurrentWeight = 0
        self.secondCharacterMaxWeight = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeStartedWithPodsMessage(param1)

    def serializeAs_ExchangeStartedWithPodsMessage(self, param1):
        super().serializeAs_ExchangeStartedMessage(param1)
        if self.firstCharacterId < -9007199254740990 or self.firstCharacterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.firstCharacterId) + ") on element firstCharacterId.")
        param1.write_double(self.firstCharacterId)
        if self.firstCharacterCurrentWeight < 0:
            raise RuntimeError("Forbidden value (" + str(self.firstCharacterCurrentWeight) + ") on element firstCharacterCurrentWeight.")
        param1.write_var_int(self.firstCharacterCurrentWeight)
        if self.firstCharacterMaxWeight < 0:
            raise RuntimeError("Forbidden value (" + str(self.firstCharacterMaxWeight) + ") on element firstCharacterMaxWeight.")
        param1.write_var_int(self.firstCharacterMaxWeight)
        if self.secondCharacterId < -9007199254740990 or self.secondCharacterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.secondCharacterId) + ") on element secondCharacterId.")
        param1.write_double(self.secondCharacterId)
        if self.secondCharacterCurrentWeight < 0:
            raise RuntimeError("Forbidden value (" + str(self.secondCharacterCurrentWeight) + ") on element secondCharacterCurrentWeight.")
        param1.write_var_int(self.secondCharacterCurrentWeight)
        if self.secondCharacterMaxWeight < 0:
            raise RuntimeError("Forbidden value (" + str(self.secondCharacterMaxWeight) + ") on element secondCharacterMaxWeight.")
        param1.write_var_int(self.secondCharacterMaxWeight)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeStartedWithPodsMessage(param1)

    def deserializeAs_ExchangeStartedWithPodsMessage(self, param1):
        super().deserialize(param1)
        self._firstCharacterIdFunc(param1)
        self._firstCharacterCurrentWeightFunc(param1)
        self._firstCharacterMaxWeightFunc(param1)
        self._secondCharacterIdFunc(param1)
        self._secondCharacterCurrentWeightFunc(param1)
        self._secondCharacterMaxWeightFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeStartedWithPodsMessage(param1)

    def deserializeAsyncAs_ExchangeStartedWithPodsMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._firstCharacterIdFunc)
        param1.add_child(self._firstCharacterCurrentWeightFunc)
        param1.add_child(self._firstCharacterMaxWeightFunc)
        param1.add_child(self._secondCharacterIdFunc)
        param1.add_child(self._secondCharacterCurrentWeightFunc)
        param1.add_child(self._secondCharacterMaxWeightFunc)

    def _firstCharacterIdFunc(self, param1):
        self.firstCharacterId = param1.read_double()
        if self.firstCharacterId < -9007199254740990 or self.firstCharacterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.firstCharacterId) + ") on element of ExchangeStartedWithPodsMessage.firstCharacterId.")

    def _firstCharacterCurrentWeightFunc(self, param1):
        self.firstCharacterCurrentWeight = param1.read_var_uh_int()
        if self.firstCharacterCurrentWeight < 0:
            raise RuntimeError("Forbidden value (" + str(self.firstCharacterCurrentWeight) + ") on element of ExchangeStartedWithPodsMessage.firstCharacterCurrentWeight.")

    def _firstCharacterMaxWeightFunc(self, param1):
        self.firstCharacterMaxWeight = param1.read_var_uh_int()
        if self.firstCharacterMaxWeight < 0:
            raise RuntimeError("Forbidden value (" + str(self.firstCharacterMaxWeight) + ") on element of ExchangeStartedWithPodsMessage.firstCharacterMaxWeight.")

    def _secondCharacterIdFunc(self, param1):
        self.secondCharacterId = param1.read_double()
        if self.secondCharacterId < -9007199254740990 or self.secondCharacterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.secondCharacterId) + ") on element of ExchangeStartedWithPodsMessage.secondCharacterId.")

    def _secondCharacterCurrentWeightFunc(self, param1):
        self.secondCharacterCurrentWeight = param1.read_var_uh_int()
        if self.secondCharacterCurrentWeight < 0:
            raise RuntimeError("Forbidden value (" + str(self.secondCharacterCurrentWeight) + ") on element of ExchangeStartedWithPodsMessage.secondCharacterCurrentWeight.")

    def _secondCharacterMaxWeightFunc(self, param1):
        self.secondCharacterMaxWeight = param1.read_var_uh_int()
        if self.secondCharacterMaxWeight < 0:
            raise RuntimeError("Forbidden value (" + str(self.secondCharacterMaxWeight) + ") on element of ExchangeStartedWithPodsMessage.secondCharacterMaxWeight.")


class ExchangeStartedWithStorageMessage(ExchangeStartedMessage):
    protocolId = 6236

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.storageMaxSlot = 0

    def getMessageId(self):
        return 6236

    def initExchangeStartedWithStorageMessage(self, param1=0, param2=0):
        super().initExchangeStartedMessage(param1)
        self.storageMaxSlot = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.storageMaxSlot = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeStartedWithStorageMessage(param1)

    def serializeAs_ExchangeStartedWithStorageMessage(self, param1):
        super().serializeAs_ExchangeStartedMessage(param1)
        if self.storageMaxSlot < 0:
            raise RuntimeError("Forbidden value (" + str(self.storageMaxSlot) + ") on element storageMaxSlot.")
        param1.write_var_int(self.storageMaxSlot)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeStartedWithStorageMessage(param1)

    def deserializeAs_ExchangeStartedWithStorageMessage(self, param1):
        super().deserialize(param1)
        self._storageMaxSlotFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeStartedWithStorageMessage(param1)

    def deserializeAsyncAs_ExchangeStartedWithStorageMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._storageMaxSlotFunc)

    def _storageMaxSlotFunc(self, param1):
        self.storageMaxSlot = param1.read_var_uh_int()
        if self.storageMaxSlot < 0:
            raise RuntimeError("Forbidden value (" + str(self.storageMaxSlot) + ") on element of ExchangeStartedWithStorageMessage.storageMaxSlot.")


class ExchangeStartOkCraftWithInformationMessage(ExchangeStartOkCraftMessage):
    protocolId = 5941

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.skillId = 0

    def getMessageId(self):
        return 5941

    def initExchangeStartOkCraftWithInformationMessage(self, param1=0):
        self.skillId = param1
        self._isInitialized = True
        return self

    def reset(self):
        self.skillId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeStartOkCraftWithInformationMessage(param1)

    def serializeAs_ExchangeStartOkCraftWithInformationMessage(self, param1):
        super().serializeAs_ExchangeStartOkCraftMessage(param1)
        if self.skillId < 0:
            raise RuntimeError("Forbidden value (" + str(self.skillId) + ") on element skillId.")
        param1.write_var_int(self.skillId)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeStartOkCraftWithInformationMessage(param1)

    def deserializeAs_ExchangeStartOkCraftWithInformationMessage(self, param1):
        super().deserialize(param1)
        self._skillIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeStartOkCraftWithInformationMessage(param1)

    def deserializeAsyncAs_ExchangeStartOkCraftWithInformationMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._skillIdFunc)

    def _skillIdFunc(self, param1):
        self.skillId = param1.read_var_uh_int()
        if self.skillId < 0:
            raise RuntimeError("Forbidden value (" + str(self.skillId) + ") on element of ExchangeStartOkCraftWithInformationMessage.skillId.")


class ExchangeStartOkMountMessage(ExchangeStartOkMountWithOutPaddockMessage):
    protocolId = 5979

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.paddockedMountsDescription = []
        self._paddockedMountsDescriptiontree = FuncTree()

    def getMessageId(self):
        return 5979

    def initExchangeStartOkMountMessage(self, param1=[], param2=[]):
        super().initExchangeStartOkMountWithOutPaddockMessage(param1)
        self.paddockedMountsDescription = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.paddockedMountsDescription = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeStartOkMountMessage(param1)

    def serializeAs_ExchangeStartOkMountMessage(self, param1):
        super().serializeAs_ExchangeStartOkMountWithOutPaddockMessage(param1)
        param1.write_short(len(self.paddockedMountsDescription))
        _loc2_ = 0
        while _loc2_ < len(self.paddockedMountsDescription):
            as_parent(self.paddockedMountsDescription[_loc2_], MountClientData).serializeAs_MountClientData(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeStartOkMountMessage(param1)

    def deserializeAs_ExchangeStartOkMountMessage(self, param1):
        _loc4_ = None
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = MountClientData()
            _loc4_.deserialize(param1)
            self.paddockedMountsDescription.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeStartOkMountMessage(param1)

    def deserializeAsyncAs_ExchangeStartOkMountMessage(self, param1):
        super().deserializeAsync(param1)
        self._paddockedMountsDescriptiontree = param1.add_child(self._paddockedMountsDescriptiontreeFunc)

    def _paddockedMountsDescriptiontreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._paddockedMountsDescriptiontree.add_child(self._paddockedMountsDescriptionFunc)
            _loc3_ += 1

    def _paddockedMountsDescriptionFunc(self, param1):
        _loc2_ = MountClientData()
        _loc2_.deserialize(param1)
        self.paddockedMountsDescription.append(_loc2_)


class FocusedExchangeReadyMessage(ExchangeReadyMessage):
    protocolId = 6701

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.focusActionId = 0

    def getMessageId(self):
        return 6701

    def initFocusedExchangeReadyMessage(self, param1=False, param2=0, param3=0):
        super().initExchangeReadyMessage(param1,param2)
        self.focusActionId = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.focusActionId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_FocusedExchangeReadyMessage(param1)

    def serializeAs_FocusedExchangeReadyMessage(self, param1):
        super().serializeAs_ExchangeReadyMessage(param1)
        if self.focusActionId < 0:
            raise RuntimeError("Forbidden value (" + str(self.focusActionId) + ") on element focusActionId.")
        param1.write_var_int(self.focusActionId)

    def deserialize(self, param1):
        self.deserializeAs_FocusedExchangeReadyMessage(param1)

    def deserializeAs_FocusedExchangeReadyMessage(self, param1):
        super().deserialize(param1)
        self._focusActionIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_FocusedExchangeReadyMessage(param1)

    def deserializeAsyncAs_FocusedExchangeReadyMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._focusActionIdFunc)

    def _focusActionIdFunc(self, param1):
        self.focusActionId = param1.read_var_uh_int()
        if self.focusActionId < 0:
            raise RuntimeError("Forbidden value (" + str(self.focusActionId) + ") on element of FocusedExchangeReadyMessage.focusActionId.")


class ExchangeKamaModifiedMessage(ExchangeObjectMessage):
    protocolId = 5521

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.quantity = 0

    def getMessageId(self):
        return 5521

    def initExchangeKamaModifiedMessage(self, param1=False, param2=0):
        super().initExchangeObjectMessage(param1)
        self.quantity = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.quantity = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeKamaModifiedMessage(param1)

    def serializeAs_ExchangeKamaModifiedMessage(self, param1):
        super().serializeAs_ExchangeObjectMessage(param1)
        if self.quantity < 0 or self.quantity > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.quantity) + ") on element quantity.")
        param1.write_var_long(self.quantity)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeKamaModifiedMessage(param1)

    def deserializeAs_ExchangeKamaModifiedMessage(self, param1):
        super().deserialize(param1)
        self._quantityFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeKamaModifiedMessage(param1)

    def deserializeAsyncAs_ExchangeKamaModifiedMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._quantityFunc)

    def _quantityFunc(self, param1):
        self.quantity = param1.read_var_uh_long()
        if self.quantity < 0 or self.quantity > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.quantity) + ") on element of ExchangeKamaModifiedMessage.quantity.")


class ExchangeObjectModifiedInBagMessage(ExchangeObjectMessage):
    protocolId = 6008

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.object = ObjectItem()
        self._objecttree = FuncTree()

    def getMessageId(self):
        return 6008

    def initExchangeObjectModifiedInBagMessage(self, param1=False, param2=None):
        super().initExchangeObjectMessage(param1)
        self.object = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.object = ObjectItem()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeObjectModifiedInBagMessage(param1)

    def serializeAs_ExchangeObjectModifiedInBagMessage(self, param1):
        super().serializeAs_ExchangeObjectMessage(param1)
        self.object.serializeAs_ObjectItem(param1)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeObjectModifiedInBagMessage(param1)

    def deserializeAs_ExchangeObjectModifiedInBagMessage(self, param1):
        super().deserialize(param1)
        self.object = ObjectItem()
        self.object.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeObjectModifiedInBagMessage(param1)

    def deserializeAsyncAs_ExchangeObjectModifiedInBagMessage(self, param1):
        super().deserializeAsync(param1)
        self._objecttree = param1.add_child(self._objecttreeFunc)

    def _objecttreeFunc(self, param1):
        self.object = ObjectItem()
        self.object.deserializeAsync(self._objecttree)


class ExchangeObjectModifiedMessage(ExchangeObjectMessage):
    protocolId = 5519

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.object = ObjectItem()
        self._objecttree = FuncTree()

    def getMessageId(self):
        return 5519

    def initExchangeObjectModifiedMessage(self, param1=False, param2=None):
        super().initExchangeObjectMessage(param1)
        self.object = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.object = ObjectItem()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeObjectModifiedMessage(param1)

    def serializeAs_ExchangeObjectModifiedMessage(self, param1):
        super().serializeAs_ExchangeObjectMessage(param1)
        self.object.serializeAs_ObjectItem(param1)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeObjectModifiedMessage(param1)

    def deserializeAs_ExchangeObjectModifiedMessage(self, param1):
        super().deserialize(param1)
        self.object = ObjectItem()
        self.object.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeObjectModifiedMessage(param1)

    def deserializeAsyncAs_ExchangeObjectModifiedMessage(self, param1):
        super().deserializeAsync(param1)
        self._objecttree = param1.add_child(self._objecttreeFunc)

    def _objecttreeFunc(self, param1):
        self.object = ObjectItem()
        self.object.deserializeAsync(self._objecttree)


class ExchangeObjectPutInBagMessage(ExchangeObjectMessage):
    protocolId = 6009

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.object = ObjectItem()
        self._objecttree = FuncTree()

    def getMessageId(self):
        return 6009

    def initExchangeObjectPutInBagMessage(self, param1=False, param2=None):
        super().initExchangeObjectMessage(param1)
        self.object = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.object = ObjectItem()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeObjectPutInBagMessage(param1)

    def serializeAs_ExchangeObjectPutInBagMessage(self, param1):
        super().serializeAs_ExchangeObjectMessage(param1)
        self.object.serializeAs_ObjectItem(param1)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeObjectPutInBagMessage(param1)

    def deserializeAs_ExchangeObjectPutInBagMessage(self, param1):
        super().deserialize(param1)
        self.object = ObjectItem()
        self.object.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeObjectPutInBagMessage(param1)

    def deserializeAsyncAs_ExchangeObjectPutInBagMessage(self, param1):
        super().deserializeAsync(param1)
        self._objecttree = param1.add_child(self._objecttreeFunc)

    def _objecttreeFunc(self, param1):
        self.object = ObjectItem()
        self.object.deserializeAsync(self._objecttree)


class ExchangeObjectRemovedFromBagMessage(ExchangeObjectMessage):
    protocolId = 6010

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectUID = 0

    def getMessageId(self):
        return 6010

    def initExchangeObjectRemovedFromBagMessage(self, param1=False, param2=0):
        super().initExchangeObjectMessage(param1)
        self.objectUID = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.objectUID = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeObjectRemovedFromBagMessage(param1)

    def serializeAs_ExchangeObjectRemovedFromBagMessage(self, param1):
        super().serializeAs_ExchangeObjectMessage(param1)
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element objectUID.")
        param1.write_var_int(self.objectUID)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeObjectRemovedFromBagMessage(param1)

    def deserializeAs_ExchangeObjectRemovedFromBagMessage(self, param1):
        super().deserialize(param1)
        self._objectUIDFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeObjectRemovedFromBagMessage(param1)

    def deserializeAsyncAs_ExchangeObjectRemovedFromBagMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._objectUIDFunc)

    def _objectUIDFunc(self, param1):
        self.objectUID = param1.read_var_uh_int()
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element of ExchangeObjectRemovedFromBagMessage.objectUID.")


class ExchangeObjectRemovedMessage(ExchangeObjectMessage):
    protocolId = 5517

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectUID = 0

    def getMessageId(self):
        return 5517

    def initExchangeObjectRemovedMessage(self, param1=False, param2=0):
        super().initExchangeObjectMessage(param1)
        self.objectUID = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.objectUID = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeObjectRemovedMessage(param1)

    def serializeAs_ExchangeObjectRemovedMessage(self, param1):
        super().serializeAs_ExchangeObjectMessage(param1)
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element objectUID.")
        param1.write_var_int(self.objectUID)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeObjectRemovedMessage(param1)

    def deserializeAs_ExchangeObjectRemovedMessage(self, param1):
        super().deserialize(param1)
        self._objectUIDFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeObjectRemovedMessage(param1)

    def deserializeAsyncAs_ExchangeObjectRemovedMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._objectUIDFunc)

    def _objectUIDFunc(self, param1):
        self.objectUID = param1.read_var_uh_int()
        if self.objectUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.objectUID) + ") on element of ExchangeObjectRemovedMessage.objectUID.")


class ExchangeObjectsModifiedMessage(ExchangeObjectMessage):
    protocolId = 6533

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.object = []
        self._objecttree = FuncTree()

    def getMessageId(self):
        return 6533

    def initExchangeObjectsModifiedMessage(self, param1=False, param2=[]):
        super().initExchangeObjectMessage(param1)
        self.object = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.object = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeObjectsModifiedMessage(param1)

    def serializeAs_ExchangeObjectsModifiedMessage(self, param1):
        super().serializeAs_ExchangeObjectMessage(param1)
        param1.write_short(len(self.object))
        _loc2_ = 0
        while _loc2_ < len(self.object):
            as_parent(self.object[_loc2_], ObjectItem).serializeAs_ObjectItem(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeObjectsModifiedMessage(param1)

    def deserializeAs_ExchangeObjectsModifiedMessage(self, param1):
        _loc4_ = None
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = ObjectItem()
            _loc4_.deserialize(param1)
            self.object.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeObjectsModifiedMessage(param1)

    def deserializeAsyncAs_ExchangeObjectsModifiedMessage(self, param1):
        super().deserializeAsync(param1)
        self._objecttree = param1.add_child(self._objecttreeFunc)

    def _objecttreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._objecttree.add_child(self._objectFunc)
            _loc3_ += 1

    def _objectFunc(self, param1):
        _loc2_ = ObjectItem()
        _loc2_.deserialize(param1)
        self.object.append(_loc2_)


class ExchangeObjectsRemovedMessage(ExchangeObjectMessage):
    protocolId = 6532

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objectUID = []
        self._objectUIDtree = FuncTree()

    def getMessageId(self):
        return 6532

    def initExchangeObjectsRemovedMessage(self, param1=False, param2=[]):
        super().initExchangeObjectMessage(param1)
        self.objectUID = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.objectUID = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeObjectsRemovedMessage(param1)

    def serializeAs_ExchangeObjectsRemovedMessage(self, param1):
        super().serializeAs_ExchangeObjectMessage(param1)
        param1.write_short(len(self.objectUID))
        _loc2_ = 0
        while _loc2_ < len(self.objectUID):
            if self.objectUID[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.objectUID[_loc2_]) + ") on element 1 (starting at 1) of objectUID.")
            param1.write_var_int(self.objectUID[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ExchangeObjectsRemovedMessage(param1)

    def deserializeAs_ExchangeObjectsRemovedMessage(self, param1):
        _loc4_ = 0
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_var_uh_int()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of objectUID.")
            self.objectUID.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeObjectsRemovedMessage(param1)

    def deserializeAsyncAs_ExchangeObjectsRemovedMessage(self, param1):
        super().deserializeAsync(param1)
        self._objectUIDtree = param1.add_child(self._objectUIDtreeFunc)

    def _objectUIDtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._objectUIDtree.add_child(self._objectUIDFunc)
            _loc3_ += 1

    def _objectUIDFunc(self, param1):
        _loc2_ = param1.read_var_uh_int()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of objectUID.")
        self.objectUID.append(_loc2_)


class ExchangePodsModifiedMessage(ExchangeObjectMessage):
    protocolId = 6670

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.currentWeight = 0
        self.maxWeight = 0

    def getMessageId(self):
        return 6670

    def initExchangePodsModifiedMessage(self, param1=False, param2=0, param3=0):
        super().initExchangeObjectMessage(param1)
        self.currentWeight = param2
        self.maxWeight = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.currentWeight = 0
        self.maxWeight = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangePodsModifiedMessage(param1)

    def serializeAs_ExchangePodsModifiedMessage(self, param1):
        super().serializeAs_ExchangeObjectMessage(param1)
        if self.currentWeight < 0:
            raise RuntimeError("Forbidden value (" + str(self.currentWeight) + ") on element currentWeight.")
        param1.write_var_int(self.currentWeight)
        if self.maxWeight < 0:
            raise RuntimeError("Forbidden value (" + str(self.maxWeight) + ") on element maxWeight.")
        param1.write_var_int(self.maxWeight)

    def deserialize(self, param1):
        self.deserializeAs_ExchangePodsModifiedMessage(param1)

    def deserializeAs_ExchangePodsModifiedMessage(self, param1):
        super().deserialize(param1)
        self._currentWeightFunc(param1)
        self._maxWeightFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangePodsModifiedMessage(param1)

    def deserializeAsyncAs_ExchangePodsModifiedMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._currentWeightFunc)
        param1.add_child(self._maxWeightFunc)

    def _currentWeightFunc(self, param1):
        self.currentWeight = param1.read_var_uh_int()
        if self.currentWeight < 0:
            raise RuntimeError("Forbidden value (" + str(self.currentWeight) + ") on element of ExchangePodsModifiedMessage.currentWeight.")

    def _maxWeightFunc(self, param1):
        self.maxWeight = param1.read_var_uh_int()
        if self.maxWeight < 0:
            raise RuntimeError("Forbidden value (" + str(self.maxWeight) + ") on element of ExchangePodsModifiedMessage.maxWeight.")


class InventoryContentAndPresetMessage(InventoryContentMessage):
    protocolId = 6162

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.presets = []
        self.idolsPresets = []
        self._presetstree = FuncTree()
        self._idolsPresetstree = FuncTree()

    def getMessageId(self):
        return 6162

    def initInventoryContentAndPresetMessage(self, param1=[], param2=0, param3=[], param4=[]):
        super().initInventoryContentMessage(param1,param2)
        self.presets = param3
        self.idolsPresets = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.presets = []
        self.idolsPresets = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_InventoryContentAndPresetMessage(param1)

    def serializeAs_InventoryContentAndPresetMessage(self, param1):
        super().serializeAs_InventoryContentMessage(param1)
        param1.write_short(len(self.presets))
        _loc2_ = 0
        while _loc2_ < len(self.presets):
            as_parent(self.presets[_loc2_], Preset).serializeAs_Preset(param1)
            _loc2_ += 1
        param1.write_short(len(self.idolsPresets))
        _loc3_ = 0
        while _loc3_ < len(self.idolsPresets):
            as_parent(self.idolsPresets[_loc3_], IdolsPreset).serializeAs_IdolsPreset(param1)
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_InventoryContentAndPresetMessage(param1)

    def deserializeAs_InventoryContentAndPresetMessage(self, param1):
        _loc6_ = None
        _loc7_ = None
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = Preset()
            _loc6_.deserialize(param1)
            self.presets.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = IdolsPreset()
            _loc7_.deserialize(param1)
            self.idolsPresets.append(_loc7_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_InventoryContentAndPresetMessage(param1)

    def deserializeAsyncAs_InventoryContentAndPresetMessage(self, param1):
        super().deserializeAsync(param1)
        self._presetstree = param1.add_child(self._presetstreeFunc)
        self._idolsPresetstree = param1.add_child(self._idolsPresetstreeFunc)

    def _presetstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._presetstree.add_child(self._presetsFunc)
            _loc3_ += 1

    def _presetsFunc(self, param1):
        _loc2_ = Preset()
        _loc2_.deserialize(param1)
        self.presets.append(_loc2_)

    def _idolsPresetstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._idolsPresetstree.add_child(self._idolsPresetsFunc)
            _loc3_ += 1

    def _idolsPresetsFunc(self, param1):
        _loc2_ = IdolsPreset()
        _loc2_.deserialize(param1)
        self.idolsPresets.append(_loc2_)


class MimicryObjectAssociatedMessage(SymbioticObjectAssociatedMessage):
    protocolId = 6462

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6462

    def initMimicryObjectAssociatedMessage(self, param1=0):
        super().initSymbioticObjectAssociatedMessage(param1)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MimicryObjectAssociatedMessage(param1)

    def serializeAs_MimicryObjectAssociatedMessage(self, param1):
        super().serializeAs_SymbioticObjectAssociatedMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_MimicryObjectAssociatedMessage(param1)

    def deserializeAs_MimicryObjectAssociatedMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MimicryObjectAssociatedMessage(param1)

    def deserializeAsyncAs_MimicryObjectAssociatedMessage(self, param1):
        super().deserializeAsync(param1)


class MimicryObjectFeedAndAssociateRequestMessage(SymbioticObjectAssociateRequestMessage):
    protocolId = 6460

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.foodUID = 0
        self.foodPos = 0
        self.preview = False

    def getMessageId(self):
        return 6460

    def initMimicryObjectFeedAndAssociateRequestMessage(self, param1=0, param2=0, param3=0, param4=0, param5=0, param6=0, param7=False):
        super().initSymbioticObjectAssociateRequestMessage(param1,param2,param3,param4)
        self.foodUID = param5
        self.foodPos = param6
        self.preview = param7
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.foodUID = 0
        self.foodPos = 0
        self.preview = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MimicryObjectFeedAndAssociateRequestMessage(param1)

    def serializeAs_MimicryObjectFeedAndAssociateRequestMessage(self, param1):
        super().serializeAs_SymbioticObjectAssociateRequestMessage(param1)
        if self.foodUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.foodUID) + ") on element foodUID.")
        param1.write_var_int(self.foodUID)
        if self.foodPos < 0 or self.foodPos > 255:
            raise RuntimeError("Forbidden value (" + str(self.foodPos) + ") on element foodPos.")
        param1.write_byte(self.foodPos)
        param1.write_boolean(self.preview)

    def deserialize(self, param1):
        self.deserializeAs_MimicryObjectFeedAndAssociateRequestMessage(param1)

    def deserializeAs_MimicryObjectFeedAndAssociateRequestMessage(self, param1):
        super().deserialize(param1)
        self._foodUIDFunc(param1)
        self._foodPosFunc(param1)
        self._previewFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MimicryObjectFeedAndAssociateRequestMessage(param1)

    def deserializeAsyncAs_MimicryObjectFeedAndAssociateRequestMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._foodUIDFunc)
        param1.add_child(self._foodPosFunc)
        param1.add_child(self._previewFunc)

    def _foodUIDFunc(self, param1):
        self.foodUID = param1.read_var_uh_int()
        if self.foodUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.foodUID) + ") on element of MimicryObjectFeedAndAssociateRequestMessage.foodUID.")

    def _foodPosFunc(self, param1):
        self.foodPos = param1.read_unsigned_byte()
        if self.foodPos < 0 or self.foodPos > 255:
            raise RuntimeError("Forbidden value (" + str(self.foodPos) + ") on element of MimicryObjectFeedAndAssociateRequestMessage.foodPos.")

    def _previewFunc(self, param1):
        self.preview = param1.read_boolean()


class ObjectUseMultipleMessage(ObjectUseMessage):
    protocolId = 6234

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.quantity = 0

    def getMessageId(self):
        return 6234

    def initObjectUseMultipleMessage(self, param1=0, param2=0):
        super().initObjectUseMessage(param1)
        self.quantity = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.quantity = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObjectUseMultipleMessage(param1)

    def serializeAs_ObjectUseMultipleMessage(self, param1):
        super().serializeAs_ObjectUseMessage(param1)
        if self.quantity < 0:
            raise RuntimeError("Forbidden value (" + str(self.quantity) + ") on element quantity.")
        param1.write_var_int(self.quantity)

    def deserialize(self, param1):
        self.deserializeAs_ObjectUseMultipleMessage(param1)

    def deserializeAs_ObjectUseMultipleMessage(self, param1):
        super().deserialize(param1)
        self._quantityFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObjectUseMultipleMessage(param1)

    def deserializeAsyncAs_ObjectUseMultipleMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._quantityFunc)

    def _quantityFunc(self, param1):
        self.quantity = param1.read_var_uh_int()
        if self.quantity < 0:
            raise RuntimeError("Forbidden value (" + str(self.quantity) + ") on element of ObjectUseMultipleMessage.quantity.")


class ObjectUseOnCellMessage(ObjectUseMessage):
    protocolId = 3013

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.cells = 0

    def getMessageId(self):
        return 3013

    def initObjectUseOnCellMessage(self, param1=0, param2=0):
        super().initObjectUseMessage(param1)
        self.cells = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.cells = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObjectUseOnCellMessage(param1)

    def serializeAs_ObjectUseOnCellMessage(self, param1):
        super().serializeAs_ObjectUseMessage(param1)
        if self.cells < 0 or self.cells > 559:
            raise RuntimeError("Forbidden value (" + str(self.cells) + ") on element cells.")
        param1.write_var_short(self.cells)

    def deserialize(self, param1):
        self.deserializeAs_ObjectUseOnCellMessage(param1)

    def deserializeAs_ObjectUseOnCellMessage(self, param1):
        super().deserialize(param1)
        self._cellsFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObjectUseOnCellMessage(param1)

    def deserializeAsyncAs_ObjectUseOnCellMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._cellsFunc)

    def _cellsFunc(self, param1):
        self.cells = param1.read_var_uh_short()
        if self.cells < 0 or self.cells > 559:
            raise RuntimeError("Forbidden value (" + str(self.cells) + ") on element of ObjectUseOnCellMessage.cells.")


class ObjectUseOnCharacterMessage(ObjectUseMessage):
    protocolId = 3003

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.characterId = 0

    def getMessageId(self):
        return 3003

    def initObjectUseOnCharacterMessage(self, param1=0, param2=0):
        super().initObjectUseMessage(param1)
        self.characterId = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.characterId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObjectUseOnCharacterMessage(param1)

    def serializeAs_ObjectUseOnCharacterMessage(self, param1):
        super().serializeAs_ObjectUseMessage(param1)
        if self.characterId < 0 or self.characterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.characterId) + ") on element characterId.")
        param1.write_var_long(self.characterId)

    def deserialize(self, param1):
        self.deserializeAs_ObjectUseOnCharacterMessage(param1)

    def deserializeAs_ObjectUseOnCharacterMessage(self, param1):
        super().deserialize(param1)
        self._characterIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObjectUseOnCharacterMessage(param1)

    def deserializeAsyncAs_ObjectUseOnCharacterMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._characterIdFunc)

    def _characterIdFunc(self, param1):
        self.characterId = param1.read_var_uh_long()
        if self.characterId < 0 or self.characterId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.characterId) + ") on element of ObjectUseOnCharacterMessage.characterId.")


class ObtainedItemWithBonusMessage(ObtainedItemMessage):
    protocolId = 6520

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.bonusQuantity = 0

    def getMessageId(self):
        return 6520

    def initObtainedItemWithBonusMessage(self, param1=0, param2=0, param3=0):
        super().initObtainedItemMessage(param1,param2)
        self.bonusQuantity = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.bonusQuantity = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ObtainedItemWithBonusMessage(param1)

    def serializeAs_ObtainedItemWithBonusMessage(self, param1):
        super().serializeAs_ObtainedItemMessage(param1)
        if self.bonusQuantity < 0:
            raise RuntimeError("Forbidden value (" + str(self.bonusQuantity) + ") on element bonusQuantity.")
        param1.write_var_int(self.bonusQuantity)

    def deserialize(self, param1):
        self.deserializeAs_ObtainedItemWithBonusMessage(param1)

    def deserializeAs_ObtainedItemWithBonusMessage(self, param1):
        super().deserialize(param1)
        self._bonusQuantityFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ObtainedItemWithBonusMessage(param1)

    def deserializeAsyncAs_ObtainedItemWithBonusMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._bonusQuantityFunc)

    def _bonusQuantityFunc(self, param1):
        self.bonusQuantity = param1.read_var_uh_int()
        if self.bonusQuantity < 0:
            raise RuntimeError("Forbidden value (" + str(self.bonusQuantity) + ") on element of ObtainedItemWithBonusMessage.bonusQuantity.")


class SymbioticObjectErrorMessage(ObjectErrorMessage):
    protocolId = 6526

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.errorCode = 0

    def getMessageId(self):
        return 6526

    def initSymbioticObjectErrorMessage(self, param1=0, param2=0):
        super().initObjectErrorMessage(param1)
        self.errorCode = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.errorCode = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_SymbioticObjectErrorMessage(param1)

    def serializeAs_SymbioticObjectErrorMessage(self, param1):
        super().serializeAs_ObjectErrorMessage(param1)
        param1.write_byte(self.errorCode)

    def deserialize(self, param1):
        self.deserializeAs_SymbioticObjectErrorMessage(param1)

    def deserializeAs_SymbioticObjectErrorMessage(self, param1):
        super().deserialize(param1)
        self._errorCodeFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_SymbioticObjectErrorMessage(param1)

    def deserializeAsyncAs_SymbioticObjectErrorMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._errorCodeFunc)

    def _errorCodeFunc(self, param1):
        self.errorCode = param1.read_byte()


class WrapperObjectAssociatedMessage(SymbioticObjectAssociatedMessage):
    protocolId = 6523

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6523

    def initWrapperObjectAssociatedMessage(self, param1=0):
        super().initSymbioticObjectAssociatedMessage(param1)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_WrapperObjectAssociatedMessage(param1)

    def serializeAs_WrapperObjectAssociatedMessage(self, param1):
        super().serializeAs_SymbioticObjectAssociatedMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_WrapperObjectAssociatedMessage(param1)

    def deserializeAs_WrapperObjectAssociatedMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_WrapperObjectAssociatedMessage(param1)

    def deserializeAsyncAs_WrapperObjectAssociatedMessage(self, param1):
        super().deserializeAsync(param1)


class IdolsPresetDeleteMessage(AbstractPresetDeleteMessage):
    protocolId = 6602

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6602

    def initIdolsPresetDeleteMessage(self, param1=0):
        super().initAbstractPresetDeleteMessage(param1)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IdolsPresetDeleteMessage(param1)

    def serializeAs_IdolsPresetDeleteMessage(self, param1):
        super().serializeAs_AbstractPresetDeleteMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_IdolsPresetDeleteMessage(param1)

    def deserializeAs_IdolsPresetDeleteMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IdolsPresetDeleteMessage(param1)

    def deserializeAsyncAs_IdolsPresetDeleteMessage(self, param1):
        super().deserializeAsync(param1)


class IdolsPresetSaveMessage(AbstractPresetSaveMessage):
    protocolId = 6603

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6603

    def initIdolsPresetSaveMessage(self, param1=0, param2=0):
        super().initAbstractPresetSaveMessage(param1,param2)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IdolsPresetSaveMessage(param1)

    def serializeAs_IdolsPresetSaveMessage(self, param1):
        super().serializeAs_AbstractPresetSaveMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_IdolsPresetSaveMessage(param1)

    def deserializeAs_IdolsPresetSaveMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IdolsPresetSaveMessage(param1)

    def deserializeAsyncAs_IdolsPresetSaveMessage(self, param1):
        super().deserializeAsync(param1)


class IdolsPresetSaveResultMessage(AbstractPresetSaveResultMessage):
    protocolId = 6604

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6604

    def initIdolsPresetSaveResultMessage(self, param1=0, param2=2):
        super().initAbstractPresetSaveResultMessage(param1,param2)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_IdolsPresetSaveResultMessage(param1)

    def serializeAs_IdolsPresetSaveResultMessage(self, param1):
        super().serializeAs_AbstractPresetSaveResultMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_IdolsPresetSaveResultMessage(param1)

    def deserializeAs_IdolsPresetSaveResultMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_IdolsPresetSaveResultMessage(param1)

    def deserializeAsyncAs_IdolsPresetSaveResultMessage(self, param1):
        super().deserializeAsync(param1)


class InventoryPresetDeleteMessage(AbstractPresetDeleteMessage):
    protocolId = 6169

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6169

    def initInventoryPresetDeleteMessage(self, param1=0):
        super().initAbstractPresetDeleteMessage(param1)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_InventoryPresetDeleteMessage(param1)

    def serializeAs_InventoryPresetDeleteMessage(self, param1):
        super().serializeAs_AbstractPresetDeleteMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_InventoryPresetDeleteMessage(param1)

    def deserializeAs_InventoryPresetDeleteMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_InventoryPresetDeleteMessage(param1)

    def deserializeAsyncAs_InventoryPresetDeleteMessage(self, param1):
        super().deserializeAsync(param1)


class InventoryPresetSaveCustomMessage(AbstractPresetSaveMessage):
    protocolId = 6329

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.itemsPositions = []
        self.itemsUids = []
        self._itemsPositionstree = FuncTree()
        self._itemsUidstree = FuncTree()

    def getMessageId(self):
        return 6329

    def initInventoryPresetSaveCustomMessage(self, param1=0, param2=0, param3=[], param4=[]):
        super().initAbstractPresetSaveMessage(param1,param2)
        self.itemsPositions = param3
        self.itemsUids = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.itemsPositions = []
        self.itemsUids = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_InventoryPresetSaveCustomMessage(param1)

    def serializeAs_InventoryPresetSaveCustomMessage(self, param1):
        super().serializeAs_AbstractPresetSaveMessage(param1)
        param1.write_short(len(self.itemsPositions))
        _loc2_ = 0
        while _loc2_ < len(self.itemsPositions):
            param1.write_byte(self.itemsPositions[_loc2_])
            _loc2_ += 1
        param1.write_short(len(self.itemsUids))
        _loc3_ = 0
        while _loc3_ < len(self.itemsUids):
            if self.itemsUids[_loc3_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.itemsUids[_loc3_]) + ") on element 2 (starting at 1) of itemsUids.")
            param1.write_var_int(self.itemsUids[_loc3_])
            _loc3_ += 1

    def deserialize(self, param1):
        self.deserializeAs_InventoryPresetSaveCustomMessage(param1)

    def deserializeAs_InventoryPresetSaveCustomMessage(self, param1):
        _loc6_ = 0
        _loc7_ = 0
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc6_ = param1.read_unsigned_byte()
            if _loc6_ < 0 or _loc6_ > 255:
                raise RuntimeError("Forbidden value (" + str(_loc6_) + ") on elements of itemsPositions.")
            self.itemsPositions.append(_loc6_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc7_ = param1.read_var_uh_int()
            if _loc7_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc7_) + ") on elements of itemsUids.")
            self.itemsUids.append(_loc7_)
            _loc5_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_InventoryPresetSaveCustomMessage(param1)

    def deserializeAsyncAs_InventoryPresetSaveCustomMessage(self, param1):
        super().deserializeAsync(param1)
        self._itemsPositionstree = param1.add_child(self._itemsPositionstreeFunc)
        self._itemsUidstree = param1.add_child(self._itemsUidstreeFunc)

    def _itemsPositionstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._itemsPositionstree.add_child(self._itemsPositionsFunc)
            _loc3_ += 1

    def _itemsPositionsFunc(self, param1):
        _loc2_ = param1.read_unsigned_byte()
        if _loc2_ < 0 or _loc2_ > 255:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of itemsPositions.")
        self.itemsPositions.append(_loc2_)

    def _itemsUidstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._itemsUidstree.add_child(self._itemsUidsFunc)
            _loc3_ += 1

    def _itemsUidsFunc(self, param1):
        _loc2_ = param1.read_var_uh_int()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of itemsUids.")
        self.itemsUids.append(_loc2_)


class InventoryPresetSaveMessage(AbstractPresetSaveMessage):
    protocolId = 6165

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.saveEquipment = False

    def getMessageId(self):
        return 6165

    def initInventoryPresetSaveMessage(self, param1=0, param2=0, param3=False):
        super().initAbstractPresetSaveMessage(param1,param2)
        self.saveEquipment = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.saveEquipment = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_InventoryPresetSaveMessage(param1)

    def serializeAs_InventoryPresetSaveMessage(self, param1):
        super().serializeAs_AbstractPresetSaveMessage(param1)
        param1.write_boolean(self.saveEquipment)

    def deserialize(self, param1):
        self.deserializeAs_InventoryPresetSaveMessage(param1)

    def deserializeAs_InventoryPresetSaveMessage(self, param1):
        super().deserialize(param1)
        self._saveEquipmentFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_InventoryPresetSaveMessage(param1)

    def deserializeAsyncAs_InventoryPresetSaveMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._saveEquipmentFunc)

    def _saveEquipmentFunc(self, param1):
        self.saveEquipment = param1.read_boolean()


class InventoryPresetSaveResultMessage(AbstractPresetSaveResultMessage):
    protocolId = 6170

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6170

    def initInventoryPresetSaveResultMessage(self, param1=0, param2=2):
        super().initAbstractPresetSaveResultMessage(param1,param2)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_InventoryPresetSaveResultMessage(param1)

    def serializeAs_InventoryPresetSaveResultMessage(self, param1):
        super().serializeAs_AbstractPresetSaveResultMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_InventoryPresetSaveResultMessage(param1)

    def deserializeAs_InventoryPresetSaveResultMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_InventoryPresetSaveResultMessage(param1)

    def deserializeAsyncAs_InventoryPresetSaveResultMessage(self, param1):
        super().deserializeAsync(param1)


class StorageInventoryContentMessage(InventoryContentMessage):
    protocolId = 5646

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 5646

    def initStorageInventoryContentMessage(self, param1=[], param2=0):
        super().initInventoryContentMessage(param1,param2)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_StorageInventoryContentMessage(param1)

    def serializeAs_StorageInventoryContentMessage(self, param1):
        super().serializeAs_InventoryContentMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_StorageInventoryContentMessage(param1)

    def deserializeAs_StorageInventoryContentMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_StorageInventoryContentMessage(param1)

    def deserializeAsyncAs_StorageInventoryContentMessage(self, param1):
        super().deserializeAsync(param1)


class PrismsListUpdateMessage(PrismsListMessage):
    protocolId = 6438

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6438

    def initPrismsListUpdateMessage(self, param1=[]):
        super().initPrismsListMessage(param1)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PrismsListUpdateMessage(param1)

    def serializeAs_PrismsListUpdateMessage(self, param1):
        super().serializeAs_PrismsListMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_PrismsListUpdateMessage(param1)

    def deserializeAs_PrismsListUpdateMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PrismsListUpdateMessage(param1)

    def deserializeAsyncAs_PrismsListUpdateMessage(self, param1):
        super().deserializeAsync(param1)


class BulletinMessage(SocialNoticeMessage):
    protocolId = 6695

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.lastNotifiedTimestamp = 0

    def getMessageId(self):
        return 6695

    def initBulletinMessage(self, param1="", param2=0, param3=0, param4="", param5=0):
        super().initSocialNoticeMessage(param1,param2,param3,param4)
        self.lastNotifiedTimestamp = param5
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.lastNotifiedTimestamp = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_BulletinMessage(param1)

    def serializeAs_BulletinMessage(self, param1):
        super().serializeAs_SocialNoticeMessage(param1)
        if self.lastNotifiedTimestamp < 0:
            raise RuntimeError("Forbidden value (" + str(self.lastNotifiedTimestamp) + ") on element lastNotifiedTimestamp.")
        param1.write_int(self.lastNotifiedTimestamp)

    def deserialize(self, param1):
        self.deserializeAs_BulletinMessage(param1)

    def deserializeAs_BulletinMessage(self, param1):
        super().deserialize(param1)
        self._lastNotifiedTimestampFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_BulletinMessage(param1)

    def deserializeAsyncAs_BulletinMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._lastNotifiedTimestampFunc)

    def _lastNotifiedTimestampFunc(self, param1):
        self.lastNotifiedTimestamp = param1.read_int()
        if self.lastNotifiedTimestamp < 0:
            raise RuntimeError("Forbidden value (" + str(self.lastNotifiedTimestamp) + ") on element of BulletinMessage.lastNotifiedTimestamp.")


class ContactLookRequestByIdMessage(ContactLookRequestMessage):
    protocolId = 5935

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.playerId = 0

    def getMessageId(self):
        return 5935

    def initContactLookRequestByIdMessage(self, param1=0, param2=0, param3=0):
        super().initContactLookRequestMessage(param1,param2)
        self.playerId = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.playerId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ContactLookRequestByIdMessage(param1)

    def serializeAs_ContactLookRequestByIdMessage(self, param1):
        super().serializeAs_ContactLookRequestMessage(param1)
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element playerId.")
        param1.write_var_long(self.playerId)

    def deserialize(self, param1):
        self.deserializeAs_ContactLookRequestByIdMessage(param1)

    def deserializeAs_ContactLookRequestByIdMessage(self, param1):
        super().deserialize(param1)
        self._playerIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ContactLookRequestByIdMessage(param1)

    def deserializeAsyncAs_ContactLookRequestByIdMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._playerIdFunc)

    def _playerIdFunc(self, param1):
        self.playerId = param1.read_var_uh_long()
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element of ContactLookRequestByIdMessage.playerId.")


class ContactLookRequestByNameMessage(ContactLookRequestMessage):
    protocolId = 5933

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.playerName = ""

    def getMessageId(self):
        return 5933

    def initContactLookRequestByNameMessage(self, param1=0, param2=0, param3=""):
        super().initContactLookRequestMessage(param1,param2)
        self.playerName = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.playerName = ""
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ContactLookRequestByNameMessage(param1)

    def serializeAs_ContactLookRequestByNameMessage(self, param1):
        super().serializeAs_ContactLookRequestMessage(param1)
        param1.write_utf(self.playerName)

    def deserialize(self, param1):
        self.deserializeAs_ContactLookRequestByNameMessage(param1)

    def deserializeAs_ContactLookRequestByNameMessage(self, param1):
        super().deserialize(param1)
        self._playerNameFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ContactLookRequestByNameMessage(param1)

    def deserializeAsyncAs_ContactLookRequestByNameMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._playerNameFunc)

    def _playerNameFunc(self, param1):
        self.playerName = param1.read_utf()


class ClientUIOpenedByObjectMessage(ClientUIOpenedMessage):
    protocolId = 6463

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.uid = 0

    def getMessageId(self):
        return 6463

    def initClientUIOpenedByObjectMessage(self, param1=0, param2=0):
        super().initClientUIOpenedMessage(param1)
        self.uid = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.uid = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ClientUIOpenedByObjectMessage(param1)

    def serializeAs_ClientUIOpenedByObjectMessage(self, param1):
        super().serializeAs_ClientUIOpenedMessage(param1)
        if self.uid < 0:
            raise RuntimeError("Forbidden value (" + str(self.uid) + ") on element uid.")
        param1.write_var_int(self.uid)

    def deserialize(self, param1):
        self.deserializeAs_ClientUIOpenedByObjectMessage(param1)

    def deserializeAs_ClientUIOpenedByObjectMessage(self, param1):
        super().deserialize(param1)
        self._uidFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ClientUIOpenedByObjectMessage(param1)

    def deserializeAsyncAs_ClientUIOpenedByObjectMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._uidFunc)

    def _uidFunc(self, param1):
        self.uid = param1.read_var_uh_int()
        if self.uid < 0:
            raise RuntimeError("Forbidden value (" + str(self.uid) + ") on element of ClientUIOpenedByObjectMessage.uid.")


class NewMailMessage(MailStatusMessage):
    protocolId = 6292

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.sendersAccountId = []
        self._sendersAccountIdtree = FuncTree()

    def getMessageId(self):
        return 6292

    def initNewMailMessage(self, param1=0, param2=0, param3=[]):
        super().initMailStatusMessage(param1,param2)
        self.sendersAccountId = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.sendersAccountId = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_NewMailMessage(param1)

    def serializeAs_NewMailMessage(self, param1):
        super().serializeAs_MailStatusMessage(param1)
        param1.write_short(len(self.sendersAccountId))
        _loc2_ = 0
        while _loc2_ < len(self.sendersAccountId):
            if self.sendersAccountId[_loc2_] < 0:
                raise RuntimeError("Forbidden value (" + str(self.sendersAccountId[_loc2_]) + ") on element 1 (starting at 1) of sendersAccountId.")
            param1.write_int(self.sendersAccountId[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_NewMailMessage(param1)

    def deserializeAs_NewMailMessage(self, param1):
        _loc4_ = 0
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_int()
            if _loc4_ < 0:
                raise RuntimeError("Forbidden value (" + str(_loc4_) + ") on elements of sendersAccountId.")
            self.sendersAccountId.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_NewMailMessage(param1)

    def deserializeAsyncAs_NewMailMessage(self, param1):
        super().deserializeAsync(param1)
        self._sendersAccountIdtree = param1.add_child(self._sendersAccountIdtreeFunc)

    def _sendersAccountIdtreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._sendersAccountIdtree.add_child(self._sendersAccountIdFunc)
            _loc3_ += 1

    def _sendersAccountIdFunc(self, param1):
        _loc2_ = param1.read_int()
        if _loc2_ < 0:
            raise RuntimeError("Forbidden value (" + str(_loc2_) + ") on elements of sendersAccountId.")
        self.sendersAccountId.append(_loc2_)


class ClientYouAreDrunkMessage(DebugInClientMessage):
    protocolId = 6594

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6594

    def initClientYouAreDrunkMessage(self, param1=0, param2=""):
        super().initDebugInClientMessage(param1,param2)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ClientYouAreDrunkMessage(param1)

    def serializeAs_ClientYouAreDrunkMessage(self, param1):
        super().serializeAs_DebugInClientMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_ClientYouAreDrunkMessage(param1)

    def deserializeAs_ClientYouAreDrunkMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ClientYouAreDrunkMessage(param1)

    def deserializeAsyncAs_ClientYouAreDrunkMessage(self, param1):
        super().deserializeAsync(param1)


class GameActionFightCloseCombatMessage(AbstractGameActionFightTargetedAbilityMessage):
    protocolId = 6116

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.weaponGenericId = 0

    def getMessageId(self):
        return 6116

    def initGameActionFightCloseCombatMessage(self, param1=0, param2=0, param3=0, param4=0, param5=1, param6=False, param7=False, param8=0):
        super().initAbstractGameActionFightTargetedAbilityMessage(param1,param2,param3,param4,param5,param6,param7)
        self.weaponGenericId = param8
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.weaponGenericId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightCloseCombatMessage(param1)

    def serializeAs_GameActionFightCloseCombatMessage(self, param1):
        super().serializeAs_AbstractGameActionFightTargetedAbilityMessage(param1)
        if self.weaponGenericId < 0:
            raise RuntimeError("Forbidden value (" + str(self.weaponGenericId) + ") on element weaponGenericId.")
        param1.write_var_short(self.weaponGenericId)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightCloseCombatMessage(param1)

    def deserializeAs_GameActionFightCloseCombatMessage(self, param1):
        super().deserialize(param1)
        self._weaponGenericIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightCloseCombatMessage(param1)

    def deserializeAsyncAs_GameActionFightCloseCombatMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._weaponGenericIdFunc)

    def _weaponGenericIdFunc(self, param1):
        self.weaponGenericId = param1.read_var_uh_short()
        if self.weaponGenericId < 0:
            raise RuntimeError("Forbidden value (" + str(self.weaponGenericId) + ") on element of GameActionFightCloseCombatMessage.weaponGenericId.")


class GameActionFightDispellEffectMessage(GameActionFightDispellMessage):
    protocolId = 6113

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.boostUID = 0

    def getMessageId(self):
        return 6113

    def initGameActionFightDispellEffectMessage(self, param1=0, param2=0, param3=0, param4=0):
        super().initGameActionFightDispellMessage(param1,param2,param3)
        self.boostUID = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.boostUID = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightDispellEffectMessage(param1)

    def serializeAs_GameActionFightDispellEffectMessage(self, param1):
        super().serializeAs_GameActionFightDispellMessage(param1)
        if self.boostUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.boostUID) + ") on element boostUID.")
        param1.write_int(self.boostUID)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightDispellEffectMessage(param1)

    def deserializeAs_GameActionFightDispellEffectMessage(self, param1):
        super().deserialize(param1)
        self._boostUIDFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightDispellEffectMessage(param1)

    def deserializeAsyncAs_GameActionFightDispellEffectMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._boostUIDFunc)

    def _boostUIDFunc(self, param1):
        self.boostUID = param1.read_int()
        if self.boostUID < 0:
            raise RuntimeError("Forbidden value (" + str(self.boostUID) + ") on element of GameActionFightDispellEffectMessage.boostUID.")


class GameActionFightDispellSpellMessage(GameActionFightDispellMessage):
    protocolId = 6176

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.spellId = 0

    def getMessageId(self):
        return 6176

    def initGameActionFightDispellSpellMessage(self, param1=0, param2=0, param3=0, param4=0):
        super().initGameActionFightDispellMessage(param1,param2,param3)
        self.spellId = param4
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.spellId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightDispellSpellMessage(param1)

    def serializeAs_GameActionFightDispellSpellMessage(self, param1):
        super().serializeAs_GameActionFightDispellMessage(param1)
        if self.spellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spellId) + ") on element spellId.")
        param1.write_var_short(self.spellId)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightDispellSpellMessage(param1)

    def deserializeAs_GameActionFightDispellSpellMessage(self, param1):
        super().deserialize(param1)
        self._spellIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightDispellSpellMessage(param1)

    def deserializeAsyncAs_GameActionFightDispellSpellMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._spellIdFunc)

    def _spellIdFunc(self, param1):
        self.spellId = param1.read_var_uh_short()
        if self.spellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spellId) + ") on element of GameActionFightDispellSpellMessage.spellId.")


class GameActionFightLifeAndShieldPointsLostMessage(GameActionFightLifePointsLostMessage):
    protocolId = 6310

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.shieldLoss = 0

    def getMessageId(self):
        return 6310

    def initGameActionFightLifeAndShieldPointsLostMessage(self, param1=0, param2=0, param3=0, param4=0, param5=0, param6=0):
        super().initGameActionFightLifePointsLostMessage(param1,param2,param3,param4,param5)
        self.shieldLoss = param6
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.shieldLoss = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightLifeAndShieldPointsLostMessage(param1)

    def serializeAs_GameActionFightLifeAndShieldPointsLostMessage(self, param1):
        super().serializeAs_GameActionFightLifePointsLostMessage(param1)
        if self.shieldLoss < 0:
            raise RuntimeError("Forbidden value (" + str(self.shieldLoss) + ") on element shieldLoss.")
        param1.write_var_short(self.shieldLoss)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightLifeAndShieldPointsLostMessage(param1)

    def deserializeAs_GameActionFightLifeAndShieldPointsLostMessage(self, param1):
        super().deserialize(param1)
        self._shieldLossFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightLifeAndShieldPointsLostMessage(param1)

    def deserializeAsyncAs_GameActionFightLifeAndShieldPointsLostMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._shieldLossFunc)

    def _shieldLossFunc(self, param1):
        self.shieldLoss = param1.read_var_uh_short()
        if self.shieldLoss < 0:
            raise RuntimeError("Forbidden value (" + str(self.shieldLoss) + ") on element of GameActionFightLifeAndShieldPointsLostMessage.shieldLoss.")


class GameActionFightSpellCastMessage(AbstractGameActionFightTargetedAbilityMessage):
    protocolId = 1010

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.spellId = 0
        self.spellLevel = 0
        self.portalsIds = []
        self._portalsIdstree = FuncTree()

    def getMessageId(self):
        return 1010

    def initGameActionFightSpellCastMessage(self, param1=0, param2=0, param3=0, param4=0, param5=1, param6=False, param7=False, param8=0, param9=0, param10=[]):
        super().initAbstractGameActionFightTargetedAbilityMessage(param1,param2,param3,param4,param5,param6,param7)
        self.spellId = param8
        self.spellLevel = param9
        self.portalsIds = param10
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.spellId = 0
        self.spellLevel = 0
        self.portalsIds = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightSpellCastMessage(param1)

    def serializeAs_GameActionFightSpellCastMessage(self, param1):
        super().serializeAs_AbstractGameActionFightTargetedAbilityMessage(param1)
        if self.spellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spellId) + ") on element spellId.")
        param1.write_var_short(self.spellId)
        if self.spellLevel < 1 or self.spellLevel > 200:
            raise RuntimeError("Forbidden value (" + str(self.spellLevel) + ") on element spellLevel.")
        param1.write_short(self.spellLevel)
        param1.write_short(len(self.portalsIds))
        _loc2_ = 0
        while _loc2_ < len(self.portalsIds):
            param1.write_short(self.portalsIds[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightSpellCastMessage(param1)

    def deserializeAs_GameActionFightSpellCastMessage(self, param1):
        _loc4_ = 0
        super().deserialize(param1)
        self._spellIdFunc(param1)
        self._spellLevelFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_short()
            self.portalsIds.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightSpellCastMessage(param1)

    def deserializeAsyncAs_GameActionFightSpellCastMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._spellIdFunc)
        param1.add_child(self._spellLevelFunc)
        self._portalsIdstree = param1.add_child(self._portalsIdstreeFunc)

    def _spellIdFunc(self, param1):
        self.spellId = param1.read_var_uh_short()
        if self.spellId < 0:
            raise RuntimeError("Forbidden value (" + str(self.spellId) + ") on element of GameActionFightSpellCastMessage.spellId.")

    def _spellLevelFunc(self, param1):
        self.spellLevel = param1.read_short()
        if self.spellLevel < 1 or self.spellLevel > 200:
            raise RuntimeError("Forbidden value (" + str(self.spellLevel) + ") on element of GameActionFightSpellCastMessage.spellLevel.")

    def _portalsIdstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._portalsIdstree.add_child(self._portalsIdsFunc)
            _loc3_ += 1

    def _portalsIdsFunc(self, param1):
        _loc2_ = param1.read_short()
        self.portalsIds.append(_loc2_)


class AllianceBulletinMessage(BulletinMessage):
    protocolId = 6690

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6690

    def initAllianceBulletinMessage(self, param1="", param2=0, param3=0, param4="", param5=0):
        super().initBulletinMessage(param1,param2,param3,param4,param5)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceBulletinMessage(param1)

    def serializeAs_AllianceBulletinMessage(self, param1):
        super().serializeAs_BulletinMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_AllianceBulletinMessage(param1)

    def deserializeAs_AllianceBulletinMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceBulletinMessage(param1)

    def deserializeAsyncAs_AllianceBulletinMessage(self, param1):
        super().deserializeAsync(param1)


class CharactersListWithModificationsMessage(CharactersListMessage):
    protocolId = 6120

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.charactersToRecolor = []
        self.charactersToRename = []
        self.unusableCharacters = []
        self.charactersToRelook = []
        self._charactersToRecolortree = FuncTree()
        self._charactersToRenametree = FuncTree()
        self._unusableCharacterstree = FuncTree()
        self._charactersToRelooktree = FuncTree()

    def getMessageId(self):
        return 6120

    def initCharactersListWithModificationsMessage(self, param1=[], param2=False, param3=[], param4=[], param5=[], param6=[]):
        super().initCharactersListMessage(param1,param2)
        self.charactersToRecolor = param3
        self.charactersToRename = param4
        self.unusableCharacters = param5
        self.charactersToRelook = param6
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.charactersToRecolor = []
        self.charactersToRename = []
        self.unusableCharacters = []
        self.charactersToRelook = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CharactersListWithModificationsMessage(param1)

    def serializeAs_CharactersListWithModificationsMessage(self, param1):
        super().serializeAs_CharactersListMessage(param1)
        param1.write_short(len(self.charactersToRecolor))
        _loc2_ = 0
        while _loc2_ < len(self.charactersToRecolor):
            as_parent(self.charactersToRecolor[_loc2_], CharacterToRecolorInformation).serializeAs_CharacterToRecolorInformation(param1)
            _loc2_ += 1
        param1.write_short(len(self.charactersToRename))
        _loc3_ = 0
        while _loc3_ < len(self.charactersToRename):
            param1.write_int(self.charactersToRename[_loc3_])
            _loc3_ += 1
        param1.write_short(len(self.unusableCharacters))
        _loc4_ = 0
        while _loc4_ < len(self.unusableCharacters):
            param1.write_int(self.unusableCharacters[_loc4_])
            _loc4_ += 1
        param1.write_short(len(self.charactersToRelook))
        _loc5_ = 0
        while _loc5_ < len(self.charactersToRelook):
            as_parent(self.charactersToRelook[_loc5_], CharacterToRelookInformation).serializeAs_CharacterToRelookInformation(param1)
            _loc5_ += 1

    def deserialize(self, param1):
        self.deserializeAs_CharactersListWithModificationsMessage(param1)

    def deserializeAs_CharactersListWithModificationsMessage(self, param1):
        _loc10_ = None
        _loc11_ = 0
        _loc12_ = 0
        _loc13_ = None
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc10_ = CharacterToRecolorInformation()
            _loc10_.deserialize(param1)
            self.charactersToRecolor.append(_loc10_)
            _loc3_ += 1
        _loc4_ = param1.read_unsigned_short()
        _loc5_ = 0
        while _loc5_ < _loc4_:
            _loc11_ = param1.read_int()
            self.charactersToRename.append(_loc11_)
            _loc5_ += 1
        _loc6_ = param1.read_unsigned_short()
        _loc7_ = 0
        while _loc7_ < _loc6_:
            _loc12_ = param1.read_int()
            self.unusableCharacters.append(_loc12_)
            _loc7_ += 1
        _loc8_ = param1.read_unsigned_short()
        _loc9_ = 0
        while _loc9_ < _loc8_:
            _loc13_ = CharacterToRelookInformation()
            _loc13_.deserialize(param1)
            self.charactersToRelook.append(_loc13_)
            _loc9_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CharactersListWithModificationsMessage(param1)

    def deserializeAsyncAs_CharactersListWithModificationsMessage(self, param1):
        super().deserializeAsync(param1)
        self._charactersToRecolortree = param1.add_child(self._charactersToRecolortreeFunc)
        self._charactersToRenametree = param1.add_child(self._charactersToRenametreeFunc)
        self._unusableCharacterstree = param1.add_child(self._unusableCharacterstreeFunc)
        self._charactersToRelooktree = param1.add_child(self._charactersToRelooktreeFunc)

    def _charactersToRecolortreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._charactersToRecolortree.add_child(self._charactersToRecolorFunc)
            _loc3_ += 1

    def _charactersToRecolorFunc(self, param1):
        _loc2_ = CharacterToRecolorInformation()
        _loc2_.deserialize(param1)
        self.charactersToRecolor.append(_loc2_)

    def _charactersToRenametreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._charactersToRenametree.add_child(self._charactersToRenameFunc)
            _loc3_ += 1

    def _charactersToRenameFunc(self, param1):
        _loc2_ = param1.read_int()
        self.charactersToRename.append(_loc2_)

    def _unusableCharacterstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._unusableCharacterstree.add_child(self._unusableCharactersFunc)
            _loc3_ += 1

    def _unusableCharactersFunc(self, param1):
        _loc2_ = param1.read_int()
        self.unusableCharacters.append(_loc2_)

    def _charactersToRelooktreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._charactersToRelooktree.add_child(self._charactersToRelookFunc)
            _loc3_ += 1

    def _charactersToRelookFunc(self, param1):
        _loc2_ = CharacterToRelookInformation()
        _loc2_.deserialize(param1)
        self.charactersToRelook.append(_loc2_)


class CharactersListWithRemodelingMessage(CharactersListMessage):
    protocolId = 6550

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.charactersToRemodel = []
        self._charactersToRemodeltree = FuncTree()

    def getMessageId(self):
        return 6550

    def initCharactersListWithRemodelingMessage(self, param1=[], param2=False, param3=[]):
        super().initCharactersListMessage(param1,param2)
        self.charactersToRemodel = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.charactersToRemodel = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_CharactersListWithRemodelingMessage(param1)

    def serializeAs_CharactersListWithRemodelingMessage(self, param1):
        super().serializeAs_CharactersListMessage(param1)
        param1.write_short(len(self.charactersToRemodel))
        _loc2_ = 0
        while _loc2_ < len(self.charactersToRemodel):
            as_parent(self.charactersToRemodel[_loc2_], CharacterToRemodelInformations).serializeAs_CharacterToRemodelInformations(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_CharactersListWithRemodelingMessage(param1)

    def deserializeAs_CharactersListWithRemodelingMessage(self, param1):
        _loc4_ = None
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = CharacterToRemodelInformations()
            _loc4_.deserialize(param1)
            self.charactersToRemodel.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_CharactersListWithRemodelingMessage(param1)

    def deserializeAsyncAs_CharactersListWithRemodelingMessage(self, param1):
        super().deserializeAsync(param1)
        self._charactersToRemodeltree = param1.add_child(self._charactersToRemodeltreeFunc)

    def _charactersToRemodeltreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._charactersToRemodeltree.add_child(self._charactersToRemodelFunc)
            _loc3_ += 1

    def _charactersToRemodelFunc(self, param1):
        _loc2_ = CharacterToRemodelInformations()
        _loc2_.deserialize(param1)
        self.charactersToRemodel.append(_loc2_)


class ChatAdminServerMessage(ChatServerMessage):
    protocolId = 6135

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6135

    def initChatAdminServerMessage(self, param1=0, param2="", param3=0, param4="", param5=0, param6="", param7=0):
        super().initChatServerMessage(param1,param2,param3,param4,param5,param6,param7)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChatAdminServerMessage(param1)

    def serializeAs_ChatAdminServerMessage(self, param1):
        super().serializeAs_ChatServerMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_ChatAdminServerMessage(param1)

    def deserializeAs_ChatAdminServerMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChatAdminServerMessage(param1)

    def deserializeAsyncAs_ChatAdminServerMessage(self, param1):
        super().deserializeAsync(param1)


class ChatClientMultiWithObjectMessage(ChatClientMultiMessage):
    protocolId = 862

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objects = []
        self._objectstree = FuncTree()

    def getMessageId(self):
        return 862

    def initChatClientMultiWithObjectMessage(self, param1="", param2=0, param3=[]):
        super().initChatClientMultiMessage(param1,param2)
        self.objects = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.objects = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        if HASH_FUNCTION != None:
            HASH_FUNCTION(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChatClientMultiWithObjectMessage(param1)

    def serializeAs_ChatClientMultiWithObjectMessage(self, param1):
        super().serializeAs_ChatClientMultiMessage(param1)
        param1.write_short(len(self.objects))
        _loc2_ = 0
        while _loc2_ < len(self.objects):
            as_parent(self.objects[_loc2_], ObjectItem).serializeAs_ObjectItem(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ChatClientMultiWithObjectMessage(param1)

    def deserializeAs_ChatClientMultiWithObjectMessage(self, param1):
        _loc4_ = None
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = ObjectItem()
            _loc4_.deserialize(param1)
            self.objects.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChatClientMultiWithObjectMessage(param1)

    def deserializeAsyncAs_ChatClientMultiWithObjectMessage(self, param1):
        super().deserializeAsync(param1)
        self._objectstree = param1.add_child(self._objectstreeFunc)

    def _objectstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._objectstree.add_child(self._objectsFunc)
            _loc3_ += 1

    def _objectsFunc(self, param1):
        _loc2_ = ObjectItem()
        _loc2_.deserialize(param1)
        self.objects.append(_loc2_)


class ChatClientPrivateWithObjectMessage(ChatClientPrivateMessage):
    protocolId = 852

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objects = []
        self._objectstree = FuncTree()

    def getMessageId(self):
        return 852

    def initChatClientPrivateWithObjectMessage(self, param1="", param2="", param3=[]):
        super().initChatClientPrivateMessage(param1,param2)
        self.objects = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.objects = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        if HASH_FUNCTION != None:
            HASH_FUNCTION(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChatClientPrivateWithObjectMessage(param1)

    def serializeAs_ChatClientPrivateWithObjectMessage(self, param1):
        super().serializeAs_ChatClientPrivateMessage(param1)
        param1.write_short(len(self.objects))
        _loc2_ = 0
        while _loc2_ < len(self.objects):
            as_parent(self.objects[_loc2_], ObjectItem).serializeAs_ObjectItem(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ChatClientPrivateWithObjectMessage(param1)

    def deserializeAs_ChatClientPrivateWithObjectMessage(self, param1):
        _loc4_ = None
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = ObjectItem()
            _loc4_.deserialize(param1)
            self.objects.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChatClientPrivateWithObjectMessage(param1)

    def deserializeAsyncAs_ChatClientPrivateWithObjectMessage(self, param1):
        super().deserializeAsync(param1)
        self._objectstree = param1.add_child(self._objectstreeFunc)

    def _objectstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._objectstree.add_child(self._objectsFunc)
            _loc3_ += 1

    def _objectsFunc(self, param1):
        _loc2_ = ObjectItem()
        _loc2_.deserialize(param1)
        self.objects.append(_loc2_)


class ChatServerCopyWithObjectMessage(ChatServerCopyMessage):
    protocolId = 884

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objects = []
        self._objectstree = FuncTree()

    def getMessageId(self):
        return 884

    def initChatServerCopyWithObjectMessage(self, param1=0, param2="", param3=0, param4="", param5=0, param6="", param7=[]):
        super().initChatServerCopyMessage(param1,param2,param3,param4,param5,param6)
        self.objects = param7
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.objects = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChatServerCopyWithObjectMessage(param1)

    def serializeAs_ChatServerCopyWithObjectMessage(self, param1):
        super().serializeAs_ChatServerCopyMessage(param1)
        param1.write_short(len(self.objects))
        _loc2_ = 0
        while _loc2_ < len(self.objects):
            as_parent(self.objects[_loc2_], ObjectItem).serializeAs_ObjectItem(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ChatServerCopyWithObjectMessage(param1)

    def deserializeAs_ChatServerCopyWithObjectMessage(self, param1):
        _loc4_ = None
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = ObjectItem()
            _loc4_.deserialize(param1)
            self.objects.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChatServerCopyWithObjectMessage(param1)

    def deserializeAsyncAs_ChatServerCopyWithObjectMessage(self, param1):
        super().deserializeAsync(param1)
        self._objectstree = param1.add_child(self._objectstreeFunc)

    def _objectstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._objectstree.add_child(self._objectsFunc)
            _loc3_ += 1

    def _objectsFunc(self, param1):
        _loc2_ = ObjectItem()
        _loc2_.deserialize(param1)
        self.objects.append(_loc2_)


class ChatServerWithObjectMessage(ChatServerMessage):
    protocolId = 883

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.objects = []
        self._objectstree = FuncTree()

    def getMessageId(self):
        return 883

    def initChatServerWithObjectMessage(self, param1=0, param2="", param3=0, param4="", param5=0, param6="", param7=0, param8=[]):
        super().initChatServerMessage(param1,param2,param3,param4,param5,param6,param7)
        self.objects = param8
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.objects = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ChatServerWithObjectMessage(param1)

    def serializeAs_ChatServerWithObjectMessage(self, param1):
        super().serializeAs_ChatServerMessage(param1)
        param1.write_short(len(self.objects))
        _loc2_ = 0
        while _loc2_ < len(self.objects):
            as_parent(self.objects[_loc2_], ObjectItem).serializeAs_ObjectItem(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_ChatServerWithObjectMessage(param1)

    def deserializeAs_ChatServerWithObjectMessage(self, param1):
        _loc4_ = None
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = ObjectItem()
            _loc4_.deserialize(param1)
            self.objects.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ChatServerWithObjectMessage(param1)

    def deserializeAsyncAs_ChatServerWithObjectMessage(self, param1):
        super().deserializeAsync(param1)
        self._objectstree = param1.add_child(self._objectstreeFunc)

    def _objectstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._objectstree.add_child(self._objectsFunc)
            _loc3_ += 1

    def _objectsFunc(self, param1):
        _loc2_ = ObjectItem()
        _loc2_.deserialize(param1)
        self.objects.append(_loc2_)


class GameFightResumeWithSlavesMessage(GameFightResumeMessage):
    protocolId = 6215

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.slavesInfo = []
        self._slavesInfotree = FuncTree()

    def getMessageId(self):
        return 6215

    def initGameFightResumeWithSlavesMessage(self, param1=[], param2=[], param3=0, param4=0, param5=[], param6=[], param7=0, param8=0, param9=[]):
        super().initGameFightResumeMessage(param1,param2,param3,param4,param5,param6,param7,param8)
        self.slavesInfo = param9
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.slavesInfo = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameFightResumeWithSlavesMessage(param1)

    def serializeAs_GameFightResumeWithSlavesMessage(self, param1):
        super().serializeAs_GameFightResumeMessage(param1)
        param1.write_short(len(self.slavesInfo))
        _loc2_ = 0
        while _loc2_ < len(self.slavesInfo):
            as_parent(self.slavesInfo[_loc2_], GameFightResumeSlaveInfo).serializeAs_GameFightResumeSlaveInfo(param1)
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_GameFightResumeWithSlavesMessage(param1)

    def deserializeAs_GameFightResumeWithSlavesMessage(self, param1):
        _loc4_ = None
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = GameFightResumeSlaveInfo()
            _loc4_.deserialize(param1)
            self.slavesInfo.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameFightResumeWithSlavesMessage(param1)

    def deserializeAsyncAs_GameFightResumeWithSlavesMessage(self, param1):
        super().deserializeAsync(param1)
        self._slavesInfotree = param1.add_child(self._slavesInfotreeFunc)

    def _slavesInfotreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._slavesInfotree.add_child(self._slavesInfoFunc)
            _loc3_ += 1

    def _slavesInfoFunc(self, param1):
        _loc2_ = GameFightResumeSlaveInfo()
        _loc2_.deserialize(param1)
        self.slavesInfo.append(_loc2_)


class AllianceTaxCollectorDialogQuestionExtendedMessage(TaxCollectorDialogQuestionExtendedMessage):
    protocolId = 6445

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.alliance = BasicNamedAllianceInformations()
        self._alliancetree = FuncTree()

    def getMessageId(self):
        return 6445

    def initAllianceTaxCollectorDialogQuestionExtendedMessage(self, param1=None, param2=0, param3=0, param4=0, param5=0, param6=0, param7=0, param8=0, param9=0, param10=0, param11=None):
        super().initTaxCollectorDialogQuestionExtendedMessage(param1,param2,param3,param4,param5,param6,param7,param8,param9,param10)
        self.alliance = param11
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.alliance = BasicNamedAllianceInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_AllianceTaxCollectorDialogQuestionExtendedMessage(param1)

    def serializeAs_AllianceTaxCollectorDialogQuestionExtendedMessage(self, param1):
        super().serializeAs_TaxCollectorDialogQuestionExtendedMessage(param1)
        self.alliance.serializeAs_BasicNamedAllianceInformations(param1)

    def deserialize(self, param1):
        self.deserializeAs_AllianceTaxCollectorDialogQuestionExtendedMessage(param1)

    def deserializeAs_AllianceTaxCollectorDialogQuestionExtendedMessage(self, param1):
        super().deserialize(param1)
        self.alliance = BasicNamedAllianceInformations()
        self.alliance.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_AllianceTaxCollectorDialogQuestionExtendedMessage(param1)

    def deserializeAsyncAs_AllianceTaxCollectorDialogQuestionExtendedMessage(self, param1):
        super().deserializeAsync(param1)
        self._alliancetree = param1.add_child(self._alliancetreeFunc)

    def _alliancetreeFunc(self, param1):
        self.alliance = BasicNamedAllianceInformations()
        self.alliance.deserializeAsync(self._alliancetree)


class PartyCancelInvitationNotificationMessage(AbstractPartyEventMessage):
    protocolId = 6251

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.cancelerId = 0
        self.guestId = 0

    def getMessageId(self):
        return 6251

    def initPartyCancelInvitationNotificationMessage(self, param1=0, param2=0, param3=0):
        super().initAbstractPartyEventMessage(param1)
        self.cancelerId = param2
        self.guestId = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.cancelerId = 0
        self.guestId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyCancelInvitationNotificationMessage(param1)

    def serializeAs_PartyCancelInvitationNotificationMessage(self, param1):
        super().serializeAs_AbstractPartyEventMessage(param1)
        if self.cancelerId < 0 or self.cancelerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.cancelerId) + ") on element cancelerId.")
        param1.write_var_long(self.cancelerId)
        if self.guestId < 0 or self.guestId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.guestId) + ") on element guestId.")
        param1.write_var_long(self.guestId)

    def deserialize(self, param1):
        self.deserializeAs_PartyCancelInvitationNotificationMessage(param1)

    def deserializeAs_PartyCancelInvitationNotificationMessage(self, param1):
        super().deserialize(param1)
        self._cancelerIdFunc(param1)
        self._guestIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyCancelInvitationNotificationMessage(param1)

    def deserializeAsyncAs_PartyCancelInvitationNotificationMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._cancelerIdFunc)
        param1.add_child(self._guestIdFunc)

    def _cancelerIdFunc(self, param1):
        self.cancelerId = param1.read_var_uh_long()
        if self.cancelerId < 0 or self.cancelerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.cancelerId) + ") on element of PartyCancelInvitationNotificationMessage.cancelerId.")

    def _guestIdFunc(self, param1):
        self.guestId = param1.read_var_uh_long()
        if self.guestId < 0 or self.guestId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.guestId) + ") on element of PartyCancelInvitationNotificationMessage.guestId.")


class PartyFollowThisMemberRequestMessage(PartyFollowMemberRequestMessage):
    protocolId = 5588

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.enabled = False

    def getMessageId(self):
        return 5588

    def initPartyFollowThisMemberRequestMessage(self, param1=0, param2=0, param3=False):
        super().initPartyFollowMemberRequestMessage(param1,param2)
        self.enabled = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.enabled = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyFollowThisMemberRequestMessage(param1)

    def serializeAs_PartyFollowThisMemberRequestMessage(self, param1):
        super().serializeAs_PartyFollowMemberRequestMessage(param1)
        param1.write_boolean(self.enabled)

    def deserialize(self, param1):
        self.deserializeAs_PartyFollowThisMemberRequestMessage(param1)

    def deserializeAs_PartyFollowThisMemberRequestMessage(self, param1):
        super().deserialize(param1)
        self._enabledFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyFollowThisMemberRequestMessage(param1)

    def deserializeAsyncAs_PartyFollowThisMemberRequestMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._enabledFunc)

    def _enabledFunc(self, param1):
        self.enabled = param1.read_boolean()


class PartyInvitationDungeonDetailsMessage(PartyInvitationDetailsMessage):
    protocolId = 6262

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dungeonId = 0
        self.playersDungeonReady = []
        self._playersDungeonReadytree = FuncTree()

    def getMessageId(self):
        return 6262

    def initPartyInvitationDungeonDetailsMessage(self, param1=0, param2=0, param3="", param4=0, param5="", param6=0, param7=[], param8=[], param9=0, param10=[]):
        super().initPartyInvitationDetailsMessage(param1,param2,param3,param4,param5,param6,param7,param8)
        self.dungeonId = param9
        self.playersDungeonReady = param10
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.dungeonId = 0
        self.playersDungeonReady = []
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyInvitationDungeonDetailsMessage(param1)

    def serializeAs_PartyInvitationDungeonDetailsMessage(self, param1):
        super().serializeAs_PartyInvitationDetailsMessage(param1)
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element dungeonId.")
        param1.write_var_short(self.dungeonId)
        param1.write_short(len(self.playersDungeonReady))
        _loc2_ = 0
        while _loc2_ < len(self.playersDungeonReady):
            param1.write_boolean(self.playersDungeonReady[_loc2_])
            _loc2_ += 1

    def deserialize(self, param1):
        self.deserializeAs_PartyInvitationDungeonDetailsMessage(param1)

    def deserializeAs_PartyInvitationDungeonDetailsMessage(self, param1):
        _loc4_ = False
        super().deserialize(param1)
        self._dungeonIdFunc(param1)
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            _loc4_ = param1.read_boolean()
            self.playersDungeonReady.append(_loc4_)
            _loc3_ += 1

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyInvitationDungeonDetailsMessage(param1)

    def deserializeAsyncAs_PartyInvitationDungeonDetailsMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._dungeonIdFunc)
        self._playersDungeonReadytree = param1.add_child(self._playersDungeonReadytreeFunc)

    def _dungeonIdFunc(self, param1):
        self.dungeonId = param1.read_var_uh_short()
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element of PartyInvitationDungeonDetailsMessage.dungeonId.")

    def _playersDungeonReadytreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        _loc3_ = 0
        while _loc3_ < _loc2_:
            self._playersDungeonReadytree.add_child(self._playersDungeonReadyFunc)
            _loc3_ += 1

    def _playersDungeonReadyFunc(self, param1):
        _loc2_ = param1.read_boolean()
        self.playersDungeonReady.append(_loc2_)


class PartyInvitationDungeonMessage(PartyInvitationMessage):
    protocolId = 6244

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.dungeonId = 0

    def getMessageId(self):
        return 6244

    def initPartyInvitationDungeonMessage(self, param1=0, param2=0, param3="", param4=0, param5=0, param6="", param7=0, param8=0):
        super().initPartyInvitationMessage(param1,param2,param3,param4,param5,param6,param7)
        self.dungeonId = param8
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.dungeonId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyInvitationDungeonMessage(param1)

    def serializeAs_PartyInvitationDungeonMessage(self, param1):
        super().serializeAs_PartyInvitationMessage(param1)
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element dungeonId.")
        param1.write_var_short(self.dungeonId)

    def deserialize(self, param1):
        self.deserializeAs_PartyInvitationDungeonMessage(param1)

    def deserializeAs_PartyInvitationDungeonMessage(self, param1):
        super().deserialize(param1)
        self._dungeonIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyInvitationDungeonMessage(param1)

    def deserializeAsyncAs_PartyInvitationDungeonMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._dungeonIdFunc)

    def _dungeonIdFunc(self, param1):
        self.dungeonId = param1.read_var_uh_short()
        if self.dungeonId < 0:
            raise RuntimeError("Forbidden value (" + str(self.dungeonId) + ") on element of PartyInvitationDungeonMessage.dungeonId.")


class PartyLeaderUpdateMessage(AbstractPartyEventMessage):
    protocolId = 5578

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.partyLeaderId = 0

    def getMessageId(self):
        return 5578

    def initPartyLeaderUpdateMessage(self, param1=0, param2=0):
        super().initAbstractPartyEventMessage(param1)
        self.partyLeaderId = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.partyLeaderId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyLeaderUpdateMessage(param1)

    def serializeAs_PartyLeaderUpdateMessage(self, param1):
        super().serializeAs_AbstractPartyEventMessage(param1)
        if self.partyLeaderId < 0 or self.partyLeaderId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.partyLeaderId) + ") on element partyLeaderId.")
        param1.write_var_long(self.partyLeaderId)

    def deserialize(self, param1):
        self.deserializeAs_PartyLeaderUpdateMessage(param1)

    def deserializeAs_PartyLeaderUpdateMessage(self, param1):
        super().deserialize(param1)
        self._partyLeaderIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyLeaderUpdateMessage(param1)

    def deserializeAsyncAs_PartyLeaderUpdateMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._partyLeaderIdFunc)

    def _partyLeaderIdFunc(self, param1):
        self.partyLeaderId = param1.read_var_uh_long()
        if self.partyLeaderId < 0 or self.partyLeaderId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.partyLeaderId) + ") on element of PartyLeaderUpdateMessage.partyLeaderId.")


class PartyMemberRemoveMessage(AbstractPartyEventMessage):
    protocolId = 5579

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.leavingPlayerId = 0

    def getMessageId(self):
        return 5579

    def initPartyMemberRemoveMessage(self, param1=0, param2=0):
        super().initAbstractPartyEventMessage(param1)
        self.leavingPlayerId = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.leavingPlayerId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyMemberRemoveMessage(param1)

    def serializeAs_PartyMemberRemoveMessage(self, param1):
        super().serializeAs_AbstractPartyEventMessage(param1)
        if self.leavingPlayerId < 0 or self.leavingPlayerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.leavingPlayerId) + ") on element leavingPlayerId.")
        param1.write_var_long(self.leavingPlayerId)

    def deserialize(self, param1):
        self.deserializeAs_PartyMemberRemoveMessage(param1)

    def deserializeAs_PartyMemberRemoveMessage(self, param1):
        super().deserialize(param1)
        self._leavingPlayerIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyMemberRemoveMessage(param1)

    def deserializeAsyncAs_PartyMemberRemoveMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._leavingPlayerIdFunc)

    def _leavingPlayerIdFunc(self, param1):
        self.leavingPlayerId = param1.read_var_uh_long()
        if self.leavingPlayerId < 0 or self.leavingPlayerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.leavingPlayerId) + ") on element of PartyMemberRemoveMessage.leavingPlayerId.")


class PartyNewGuestMessage(AbstractPartyEventMessage):
    protocolId = 6260

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.guest = PartyGuestInformations()
        self._guesttree = FuncTree()

    def getMessageId(self):
        return 6260

    def initPartyNewGuestMessage(self, param1=0, param2=None):
        super().initAbstractPartyEventMessage(param1)
        self.guest = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.guest = PartyGuestInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyNewGuestMessage(param1)

    def serializeAs_PartyNewGuestMessage(self, param1):
        super().serializeAs_AbstractPartyEventMessage(param1)
        self.guest.serializeAs_PartyGuestInformations(param1)

    def deserialize(self, param1):
        self.deserializeAs_PartyNewGuestMessage(param1)

    def deserializeAs_PartyNewGuestMessage(self, param1):
        super().deserialize(param1)
        self.guest = PartyGuestInformations()
        self.guest.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyNewGuestMessage(param1)

    def deserializeAsyncAs_PartyNewGuestMessage(self, param1):
        super().deserializeAsync(param1)
        self._guesttree = param1.add_child(self._guesttreeFunc)

    def _guesttreeFunc(self, param1):
        self.guest = PartyGuestInformations()
        self.guest.deserializeAsync(self._guesttree)


class PartyRefuseInvitationNotificationMessage(AbstractPartyEventMessage):
    protocolId = 5596

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.guestId = 0

    def getMessageId(self):
        return 5596

    def initPartyRefuseInvitationNotificationMessage(self, param1=0, param2=0):
        super().initAbstractPartyEventMessage(param1)
        self.guestId = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.guestId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyRefuseInvitationNotificationMessage(param1)

    def serializeAs_PartyRefuseInvitationNotificationMessage(self, param1):
        super().serializeAs_AbstractPartyEventMessage(param1)
        if self.guestId < 0 or self.guestId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.guestId) + ") on element guestId.")
        param1.write_var_long(self.guestId)

    def deserialize(self, param1):
        self.deserializeAs_PartyRefuseInvitationNotificationMessage(param1)

    def deserializeAs_PartyRefuseInvitationNotificationMessage(self, param1):
        super().deserialize(param1)
        self._guestIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyRefuseInvitationNotificationMessage(param1)

    def deserializeAsyncAs_PartyRefuseInvitationNotificationMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._guestIdFunc)

    def _guestIdFunc(self, param1):
        self.guestId = param1.read_var_uh_long()
        if self.guestId < 0 or self.guestId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.guestId) + ") on element of PartyRefuseInvitationNotificationMessage.guestId.")


class PartyUpdateLightMessage(AbstractPartyEventMessage):
    protocolId = 6054

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.id = 0
        self.lifePoints = 0
        self.maxLifePoints = 0
        self.prospecting = 0
        self.regenRate = 0

    def getMessageId(self):
        return 6054

    def initPartyUpdateLightMessage(self, param1=0, param2=0, param3=0, param4=0, param5=0, param6=0):
        super().initAbstractPartyEventMessage(param1)
        self.id = param2
        self.lifePoints = param3
        self.maxLifePoints = param4
        self.prospecting = param5
        self.regenRate = param6
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.id = 0
        self.lifePoints = 0
        self.maxLifePoints = 0
        self.prospecting = 0
        self.regenRate = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyUpdateLightMessage(param1)

    def serializeAs_PartyUpdateLightMessage(self, param1):
        super().serializeAs_AbstractPartyEventMessage(param1)
        if self.id < 0 or self.id > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element id.")
        param1.write_var_long(self.id)
        if self.lifePoints < 0:
            raise RuntimeError("Forbidden value (" + str(self.lifePoints) + ") on element lifePoints.")
        param1.write_var_int(self.lifePoints)
        if self.maxLifePoints < 0:
            raise RuntimeError("Forbidden value (" + str(self.maxLifePoints) + ") on element maxLifePoints.")
        param1.write_var_int(self.maxLifePoints)
        if self.prospecting < 0:
            raise RuntimeError("Forbidden value (" + str(self.prospecting) + ") on element prospecting.")
        param1.write_var_short(self.prospecting)
        if self.regenRate < 0 or self.regenRate > 255:
            raise RuntimeError("Forbidden value (" + str(self.regenRate) + ") on element regenRate.")
        param1.write_byte(self.regenRate)

    def deserialize(self, param1):
        self.deserializeAs_PartyUpdateLightMessage(param1)

    def deserializeAs_PartyUpdateLightMessage(self, param1):
        super().deserialize(param1)
        self._idFunc(param1)
        self._lifePointsFunc(param1)
        self._maxLifePointsFunc(param1)
        self._prospectingFunc(param1)
        self._regenRateFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyUpdateLightMessage(param1)

    def deserializeAsyncAs_PartyUpdateLightMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._idFunc)
        param1.add_child(self._lifePointsFunc)
        param1.add_child(self._maxLifePointsFunc)
        param1.add_child(self._prospectingFunc)
        param1.add_child(self._regenRateFunc)

    def _idFunc(self, param1):
        self.id = param1.read_var_uh_long()
        if self.id < 0 or self.id > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.id) + ") on element of PartyUpdateLightMessage.id.")

    def _lifePointsFunc(self, param1):
        self.lifePoints = param1.read_var_uh_int()
        if self.lifePoints < 0:
            raise RuntimeError("Forbidden value (" + str(self.lifePoints) + ") on element of PartyUpdateLightMessage.lifePoints.")

    def _maxLifePointsFunc(self, param1):
        self.maxLifePoints = param1.read_var_uh_int()
        if self.maxLifePoints < 0:
            raise RuntimeError("Forbidden value (" + str(self.maxLifePoints) + ") on element of PartyUpdateLightMessage.maxLifePoints.")

    def _prospectingFunc(self, param1):
        self.prospecting = param1.read_var_uh_short()
        if self.prospecting < 0:
            raise RuntimeError("Forbidden value (" + str(self.prospecting) + ") on element of PartyUpdateLightMessage.prospecting.")

    def _regenRateFunc(self, param1):
        self.regenRate = param1.read_unsigned_byte()
        if self.regenRate < 0 or self.regenRate > 255:
            raise RuntimeError("Forbidden value (" + str(self.regenRate) + ") on element of PartyUpdateLightMessage.regenRate.")


class PartyUpdateMessage(AbstractPartyEventMessage):
    protocolId = 5575

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.memberInformations = PartyMemberInformations()
        self._memberInformationstree = FuncTree()

    def getMessageId(self):
        return 5575

    def initPartyUpdateMessage(self, param1=0, param2=None):
        super().initAbstractPartyEventMessage(param1)
        self.memberInformations = param2
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.memberInformations = PartyMemberInformations()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyUpdateMessage(param1)

    def serializeAs_PartyUpdateMessage(self, param1):
        super().serializeAs_AbstractPartyEventMessage(param1)
        param1.write_short(self.memberInformations.getTypeId())
        self.memberInformations.serialize(param1)

    def deserialize(self, param1):
        self.deserializeAs_PartyUpdateMessage(param1)

    def deserializeAs_PartyUpdateMessage(self, param1):
        super().deserialize(param1)
        _loc2_ = param1.read_unsigned_short()
        self.memberInformations = ProtocolTypeManager.get_instance(PartyMemberInformations,_loc2_)
        self.memberInformations.deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyUpdateMessage(param1)

    def deserializeAsyncAs_PartyUpdateMessage(self, param1):
        super().deserializeAsync(param1)
        self._memberInformationstree = param1.add_child(self._memberInformationstreeFunc)

    def _memberInformationstreeFunc(self, param1):
        _loc2_ = param1.read_unsigned_short()
        self.memberInformations = ProtocolTypeManager.get_instance(PartyMemberInformations,_loc2_)
        self.memberInformations.deserializeAsync(self._memberInformationstree)


class GuildBulletinMessage(BulletinMessage):
    protocolId = 6689

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6689

    def initGuildBulletinMessage(self, param1="", param2=0, param3=0, param4="", param5=0):
        super().initBulletinMessage(param1,param2,param3,param4,param5)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GuildBulletinMessage(param1)

    def serializeAs_GuildBulletinMessage(self, param1):
        super().serializeAs_BulletinMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_GuildBulletinMessage(param1)

    def deserializeAs_GuildBulletinMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GuildBulletinMessage(param1)

    def deserializeAsyncAs_GuildBulletinMessage(self, param1):
        super().deserializeAsync(param1)


class ExchangeCraftInformationObjectMessage(ExchangeCraftResultWithObjectIdMessage):
    protocolId = 5794

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.playerId = 0

    def getMessageId(self):
        return 5794

    def initExchangeCraftInformationObjectMessage(self, param1=0, param2=0, param3=0):
        super().initExchangeCraftResultWithObjectIdMessage(param1,param2)
        self.playerId = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.playerId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeCraftInformationObjectMessage(param1)

    def serializeAs_ExchangeCraftInformationObjectMessage(self, param1):
        super().serializeAs_ExchangeCraftResultWithObjectIdMessage(param1)
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element playerId.")
        param1.write_var_long(self.playerId)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeCraftInformationObjectMessage(param1)

    def deserializeAs_ExchangeCraftInformationObjectMessage(self, param1):
        super().deserialize(param1)
        self._playerIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeCraftInformationObjectMessage(param1)

    def deserializeAsyncAs_ExchangeCraftInformationObjectMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._playerIdFunc)

    def _playerIdFunc(self, param1):
        self.playerId = param1.read_var_uh_long()
        if self.playerId < 0 or self.playerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.playerId) + ") on element of ExchangeCraftInformationObjectMessage.playerId.")


class ExchangeCraftResultMagicWithObjectDescMessage(ExchangeCraftResultWithObjectDescMessage):
    protocolId = 6188

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.magicPoolStatus = 0

    def getMessageId(self):
        return 6188

    def initExchangeCraftResultMagicWithObjectDescMessage(self, param1=0, param2=None, param3=0):
        super().initExchangeCraftResultWithObjectDescMessage(param1,param2)
        self.magicPoolStatus = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.magicPoolStatus = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeCraftResultMagicWithObjectDescMessage(param1)

    def serializeAs_ExchangeCraftResultMagicWithObjectDescMessage(self, param1):
        super().serializeAs_ExchangeCraftResultWithObjectDescMessage(param1)
        param1.write_byte(self.magicPoolStatus)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeCraftResultMagicWithObjectDescMessage(param1)

    def deserializeAs_ExchangeCraftResultMagicWithObjectDescMessage(self, param1):
        super().deserialize(param1)
        self._magicPoolStatusFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeCraftResultMagicWithObjectDescMessage(param1)

    def deserializeAsyncAs_ExchangeCraftResultMagicWithObjectDescMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._magicPoolStatusFunc)

    def _magicPoolStatusFunc(self, param1):
        self.magicPoolStatus = param1.read_byte()


class ExchangeObjectModifyPricedMessage(ExchangeObjectMovePricedMessage):
    protocolId = 6238

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6238

    def initExchangeObjectModifyPricedMessage(self, param1=0, param2=0, param3=0):
        super().initExchangeObjectMovePricedMessage(param1,param2,param3)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_ExchangeObjectModifyPricedMessage(param1)

    def serializeAs_ExchangeObjectModifyPricedMessage(self, param1):
        super().serializeAs_ExchangeObjectMovePricedMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_ExchangeObjectModifyPricedMessage(param1)

    def deserializeAs_ExchangeObjectModifyPricedMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_ExchangeObjectModifyPricedMessage(param1)

    def deserializeAsyncAs_ExchangeObjectModifyPricedMessage(self, param1):
        super().deserializeAsync(param1)


class MimicryObjectErrorMessage(SymbioticObjectErrorMessage):
    protocolId = 6461

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.preview = False

    def getMessageId(self):
        return 6461

    def initMimicryObjectErrorMessage(self, param1=0, param2=0, param3=False):
        super().initSymbioticObjectErrorMessage(param1,param2)
        self.preview = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.preview = False
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_MimicryObjectErrorMessage(param1)

    def serializeAs_MimicryObjectErrorMessage(self, param1):
        super().serializeAs_SymbioticObjectErrorMessage(param1)
        param1.write_boolean(self.preview)

    def deserialize(self, param1):
        self.deserializeAs_MimicryObjectErrorMessage(param1)

    def deserializeAs_MimicryObjectErrorMessage(self, param1):
        super().deserialize(param1)
        self._previewFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_MimicryObjectErrorMessage(param1)

    def deserializeAsyncAs_MimicryObjectErrorMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._previewFunc)

    def _previewFunc(self, param1):
        self.preview = param1.read_boolean()


class WrapperObjectErrorMessage(SymbioticObjectErrorMessage):
    protocolId = 6529

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6529

    def initWrapperObjectErrorMessage(self, param1=0, param2=0):
        super().initSymbioticObjectErrorMessage(param1,param2)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_WrapperObjectErrorMessage(param1)

    def serializeAs_WrapperObjectErrorMessage(self, param1):
        super().serializeAs_SymbioticObjectErrorMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_WrapperObjectErrorMessage(param1)

    def deserializeAs_WrapperObjectErrorMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_WrapperObjectErrorMessage(param1)

    def deserializeAsyncAs_WrapperObjectErrorMessage(self, param1):
        super().deserializeAsync(param1)


class GameActionFightTriggerEffectMessage(GameActionFightDispellEffectMessage):
    protocolId = 6147

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6147

    def initGameActionFightTriggerEffectMessage(self, param1=0, param2=0, param3=0, param4=0):
        super().initGameActionFightDispellEffectMessage(param1,param2,param3,param4)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_GameActionFightTriggerEffectMessage(param1)

    def serializeAs_GameActionFightTriggerEffectMessage(self, param1):
        super().serializeAs_GameActionFightDispellEffectMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_GameActionFightTriggerEffectMessage(param1)

    def deserializeAs_GameActionFightTriggerEffectMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_GameActionFightTriggerEffectMessage(param1)

    def deserializeAsyncAs_GameActionFightTriggerEffectMessage(self, param1):
        super().deserializeAsync(param1)


class PartyMemberEjectedMessage(PartyMemberRemoveMessage):
    protocolId = 6252

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.kickerId = 0

    def getMessageId(self):
        return 6252

    def initPartyMemberEjectedMessage(self, param1=0, param2=0, param3=0):
        super().initPartyMemberRemoveMessage(param1,param2)
        self.kickerId = param3
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.kickerId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyMemberEjectedMessage(param1)

    def serializeAs_PartyMemberEjectedMessage(self, param1):
        super().serializeAs_PartyMemberRemoveMessage(param1)
        if self.kickerId < 0 or self.kickerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.kickerId) + ") on element kickerId.")
        param1.write_var_long(self.kickerId)

    def deserialize(self, param1):
        self.deserializeAs_PartyMemberEjectedMessage(param1)

    def deserializeAs_PartyMemberEjectedMessage(self, param1):
        super().deserialize(param1)
        self._kickerIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyMemberEjectedMessage(param1)

    def deserializeAsyncAs_PartyMemberEjectedMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._kickerIdFunc)

    def _kickerIdFunc(self, param1):
        self.kickerId = param1.read_var_uh_long()
        if self.kickerId < 0 or self.kickerId > 9007199254740990:
            raise RuntimeError("Forbidden value (" + str(self.kickerId) + ") on element of PartyMemberEjectedMessage.kickerId.")


class PartyNewMemberMessage(PartyUpdateMessage):
    protocolId = 6306

    def __init__(self):
        super().__init__()
        self._isInitialized = False

    def getMessageId(self):
        return 6306

    def initPartyNewMemberMessage(self, param1=0, param2=None):
        super().initPartyUpdateMessage(param1,param2)
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyNewMemberMessage(param1)

    def serializeAs_PartyNewMemberMessage(self, param1):
        super().serializeAs_PartyUpdateMessage(param1)

    def deserialize(self, param1):
        self.deserializeAs_PartyNewMemberMessage(param1)

    def deserializeAs_PartyNewMemberMessage(self, param1):
        super().deserialize(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyNewMemberMessage(param1)

    def deserializeAsyncAs_PartyNewMemberMessage(self, param1):
        super().deserializeAsync(param1)


class PartyCompanionUpdateLightMessage(PartyUpdateLightMessage):
    protocolId = 6472

    def __init__(self):
        super().__init__()
        self._isInitialized = False
        self.indexId = 0

    def getMessageId(self):
        return 6472

    def initPartyCompanionUpdateLightMessage(self, param1=0, param2=0, param3=0, param4=0, param5=0, param6=0, param7=0):
        super().initPartyUpdateLightMessage(param1,param2,param3,param4,param5,param6)
        self.indexId = param7
        self._isInitialized = True
        return self

    def reset(self):
        super().reset()
        self.indexId = 0
        self._isInitialized = False

    def pack(self, param1):
        _loc2_ = ByteArray()
        self.serialize(_loc2_)
        self.write_packet(param1,self.getMessageId(),_loc2_)

    def unpack(self, param1, param2):
        self.deserialize(param1)

    def unpackAsync(self, param1, param2):
        _loc3_ = FuncTree()
        _loc3_.set_root(param1)
        self.deserializeAsync(_loc3_)
        return _loc3_

    def serialize(self, param1):
        self.serializeAs_PartyCompanionUpdateLightMessage(param1)

    def serializeAs_PartyCompanionUpdateLightMessage(self, param1):
        super().serializeAs_PartyUpdateLightMessage(param1)
        if self.indexId < 0:
            raise RuntimeError("Forbidden value (" + str(self.indexId) + ") on element indexId.")
        param1.write_byte(self.indexId)

    def deserialize(self, param1):
        self.deserializeAs_PartyCompanionUpdateLightMessage(param1)

    def deserializeAs_PartyCompanionUpdateLightMessage(self, param1):
        super().deserialize(param1)
        self._indexIdFunc(param1)

    def deserializeAsync(self, param1):
        self.deserializeAsyncAs_PartyCompanionUpdateLightMessage(param1)

    def deserializeAsyncAs_PartyCompanionUpdateLightMessage(self, param1):
        super().deserializeAsync(param1)
        param1.add_child(self._indexIdFunc)

    def _indexIdFunc(self, param1):
        self.indexId = param1.read_byte()
        if self.indexId < 0:
            raise RuntimeError("Forbidden value (" + str(self.indexId) + ") on element of PartyCompanionUpdateLightMessage.indexId.")


